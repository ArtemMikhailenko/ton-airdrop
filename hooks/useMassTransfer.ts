import { useState, useCallback } from 'react';
import { useTonConnectUI, useTonAddress } from '@tonconnect/ui-react';
import { Address, beginCell, toNano } from '@ton/core';
import toast from 'react-hot-toast';

export interface Recipient {
    address: string;
    amount: string;
}

export function useMassTransfer() {
    const [tonConnectUI] = useTonConnectUI();
    const userAddress = useTonAddress();
    const [isSending, setIsSending] = useState(false);
    const [progress, setProgress] = useState({ current: 0, total: 0 });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    const sendToAll = useCallback(async (
        recipients: Recipient[],
        jettonMinterAddress: string
    ) => {
        if (!tonConnectUI.connected || !userAddress) {
            toast.error('Please connect your wallet');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if (!recipients || recipients.length === 0) {
            toast.error('Recipients list is empty');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞
        for (let i = 0; i < recipients.length; i++) {
            try {
                Address.parse(recipients[i].address);
            } catch {
                toast.error(`Invalid address at position ${i + 1}: ${recipients[i].address}`);
                return;
            }
        }

        setIsSending(true);
        setProgress({ current: 0, total: recipients.length });

        try {
            console.log('üöÄ Starting mass transfer to', recipients.length, 'recipients');

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª—è–µ–º jetton wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userJettonWallet = await calculateUserJettonWallet(userAddress, jettonMinterAddress);
            console.log('üíº User jetton wallet:', userJettonWallet);

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for (let i = 0; i < recipients.length; i++) {
                const recipient = recipients[i];
                
                console.log(`üì§ Sending ${i + 1}/${recipients.length} to ${recipient.address}`);
                
                try {
                    // ‚úÖ –°–æ–∑–¥–∞–µ–º –ü–†–û–°–¢–£–Æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é jetton –ø–µ—Ä–µ–≤–æ–¥–∞
                    const transferPayload = beginCell()
                        .storeUint(0x0f8a7ea5, 32)                    // transfer op
                        .storeUint(Math.floor(Date.now() / 1000), 64) // query_id (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
                        .storeCoins(BigInt(recipient.amount))         // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                        .storeAddress(Address.parse(recipient.address)) // –ø–æ–ª—É—á–∞—Ç–µ–ª—å
                        .storeAddress(Address.parse(userAddress))     // response_destination
                        .storeUint(0, 1)                             // custom_payload (null)
                        .storeCoins(toNano('0.01'))                  // forward_ton_amount
                        .storeUint(0, 1)                             // forward_payload (null)
                        .endCell();

                    const transaction = {
                        validUntil: Math.floor(Date.now() / 1000) + 300, // 5 –º–∏–Ω—É—Ç
                        messages: [
                            {
                                address: userJettonWallet,
                                amount: toNano('0.1').toString(), // ‚úÖ –£–≤–µ–ª–∏—á–∏–ª–∏ –≥–∞–∑ –¥–æ 0.1 TON
                                payload: transferPayload.toBoc().toString('base64')
                            }
                        ]
                    };

                    await tonConnectUI.sendTransaction(transaction);
                    
                    setProgress({ current: i + 1, total: recipients.length });
                    toast.success(`‚úÖ Sent to ${recipient.address.slice(0, 6)}...`);
                    
                    // ‚úÖ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (–≤–∞–∂–Ω–æ!)
                    if (i < recipients.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 3000)); // 3 —Å–µ–∫—É–Ω–¥—ã –ø–∞—É–∑–∞
                    }
                    
                } catch (error) {
                    console.error(`‚ùå Failed to send to ${recipient.address}:`, error);
                    toast.error(`‚ùå Failed: ${recipient.address.slice(0, 6)}...`);
                    
                    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏
                    const shouldContinue = confirm(`Failed to send to ${recipient.address.slice(0, 10)}...\nContinue with remaining recipients?`);
                    if (!shouldContinue) {
                        break;
                    }
                }
            }

            toast.success(`üéâ Mass transfer completed! Processed ${recipients.length} recipients`);

        } catch (error) {
            console.error('‚ùå Mass transfer error:', error);
            toast.error('‚ùå Mass transfer failed');
            throw error;
        } finally {
            setIsSending(false);
            setProgress({ current: 0, total: 0 });
        }
    }, [tonConnectUI, userAddress]);

    return {
        sendToAll,
        isSending,
        progress,
        userAddress,
        isConnected: tonConnectUI.connected
    };
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ jetton –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function calculateUserJettonWallet(userAddress: string, jettonMinterAddress: string): Promise<string> {
    try {
        // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É TON
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å get_wallet_address —É minter'–∞
        
        console.log('üîç Calculating jetton wallet for user:', userAddress);
        console.log('üè≠ Jetton minter:', jettonMinterAddress);
        
        // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: –≤—ã–∑–æ–≤ get_wallet_address –º–µ—Ç–æ–¥–∞ —É jetton minter'–∞
        const calculatedAddress = `EQA${userAddress.slice(3, 12)}${jettonMinterAddress.slice(-10)}JW`;
        
        return calculatedAddress;
        
    } catch (error) {
        console.error('Error calculating jetton wallet:', error);
        throw new Error('Could not calculate jetton wallet address');
    }
}