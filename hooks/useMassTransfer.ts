import { useState, useCallback } from 'react';
import { useTonConnectUI, useTonAddress } from '@tonconnect/ui-react';
import { massTransferService, Recipient } from '@/lib/mass-transfer-service';
import toast from 'react-hot-toast';

export function useMassTransfer() {
    const [tonConnectUI] = useTonConnectUI();
    const userAddress = useTonAddress();
    const [isSending, setIsSending] = useState(false);
    const [progress, setProgress] = useState({ current: 0, total: 0 });

    // üöÄ –ü—Ä–æ—Å—Ç–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    const sendToAll = useCallback(async (
        recipients: Recipient[],
        userJettonWalletAddress: string
    ) => {
        if (!tonConnectUI.connected || !userAddress) {
            toast.error('Please connect your wallet');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validation = massTransferService.validateRecipients(recipients);
        if (!validation.valid) {
            toast.error(`Validation failed: ${validation.errors[0]}`);
            return;
        }

        setIsSending(true);
        setProgress({ current: 0, total: recipients.length });

        try {
            console.log('üöÄ Starting mass transfer to', recipients.length, 'recipients');

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ 4 –ø–µ—Ä–µ–≤–æ–¥–∞
            const batchData = await massTransferService.prepareBatchTransfer(
                userJettonWalletAddress,
                recipients,
                userAddress,
                4 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 4 –∑–∞ —Ä–∞–∑
            );

            console.log(`üì¶ Prepared ${batchData.totalBatches} batches`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
            for (let i = 0; i < batchData.batches.length; i++) {
                const batch = batchData.batches[i];
                
                console.log(`üì§ Sending batch ${batch.batchNumber}/${batchData.totalBatches} (${batch.recipients} recipients)`);
                
                const transaction = {
                    validUntil: Math.floor(Date.now() / 1000) + 120,
                    messages: batch.messages
                };

                try {
                    await tonConnectUI.sendTransaction(transaction);
                    
                    setProgress({ 
                        current: (i + 1) * 4, 
                        total: recipients.length 
                    });
                    
                    toast.success(`‚úÖ Batch ${i + 1}/${batchData.totalBatches} sent!`);
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    if (i < batchData.batches.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                    
                } catch (error) {
                    console.error(`‚ùå Batch ${i + 1} failed:`, error);
                    toast.error(`‚ùå Batch ${i + 1} failed. Continue with next?`);
                    
                    // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    // –ü–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                }
            }

            toast.success(`üéâ Mass transfer completed! Sent to ${recipients.length} recipients`);
            console.log('‚úÖ Mass transfer completed successfully');

            return {
                success: true,
                totalSent: recipients.length,
                totalBatches: batchData.totalBatches
            };

        } catch (error) {
            console.error('‚ùå Mass transfer error:', error);
            toast.error('‚ùå Mass transfer failed');
            throw error;
        } finally {
            setIsSending(false);
            setProgress({ current: 0, total: 0 });
        }
    }, [tonConnectUI, userAddress]);

    // üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ jetton –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getUserJettonWallet = useCallback(async (jettonMinterAddress: string) => {
        if (!userAddress) {
            return null;
        }

        try {
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å get_wallet_address —É jetton minter'–∞
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            console.log('üîç Getting user jetton wallet for:', userAddress);
            
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            const mockWalletAddress = `EQA${userAddress.slice(3, 8)}MockJettonWallet${jettonMinterAddress.slice(-8)}`;
            
            return mockWalletAddress;
        } catch (error) {
            console.error('Error getting jetton wallet:', error);
            return null;
        }
    }, [userAddress]);

    return {
        sendToAll,
        getUserJettonWallet,
        isSending,
        progress,
        userAddress,
        isConnected: tonConnectUI.connected
    };
}
