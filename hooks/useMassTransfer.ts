import { useState, useCallback } from 'react';
import { Address, beginCell, toNano, Cell } from '@ton/core';
import { TonClient, WalletContractV4, internal } from '@ton/ton';
import { mnemonicToWalletKey } from '@ton/crypto';
import { JettonMinter } from '@/wrappers/JettonMinter';
import { JettonWallet } from '@/wrappers/JettonWallet';
import toast from 'react-hot-toast';

export interface Recipient {
    address: string;
    amount: string; // –¢–µ–ø–µ—Ä—å –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: "1.5", "2", "0.5"
}

const client = new TonClient({ endpoint: 'https://toncenter.com/api/v2/jsonRPC' });


export function useMassTransfer() {
    const [isSending, setIsSending] = useState(false);
    const [progress, setProgress] = useState({ current: 0, total: 0 });
    const [walletAddress, setWalletAddress] = useState<string>('');

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
    const initWallet = useCallback(async (mnemonic: string) => {
        try {
            const words = mnemonic.trim().split(' ');
            if (words.length !== 24) {
                throw new Error('Mnemonic must contain exactly 24 words');
            }

            const keyPair = await mnemonicToWalletKey(words);
            const wallet = WalletContractV4.create({ 
                workchain: 0, 
                publicKey: keyPair.publicKey 
            });
            
            const address = wallet.address.toString();
            setWalletAddress(address);
            
            console.log('üîë Wallet initialized:', address);
            return { wallet, keyPair, address };
            
        } catch (error) {
            console.error('‚ùå Wallet init error:', error);
            throw new Error('Invalid mnemonic phrase');
        }
    }, []);

    // üöÄ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –º–Ω–µ–º–æ–Ω–∏–∫—É
    const sendToAllWithMnemonic = useCallback(async (
        recipients: Recipient[],
        jettonMinterAddress: string,  
        mnemonic: string
    ) => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!recipients || recipients.length === 0) {
            toast.error('Recipients list is empty');
            return;
        }

        if (!mnemonic || mnemonic.trim().split(' ').length !== 24) {
            toast.error('Please provide valid 24-word mnemonic');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –∏ —Å—É–º–º—ã
        for (let i = 0; i < recipients.length; i++) {
            const r = recipients[i];
            
            try {
                Address.parse(r.address);
            } catch {
                toast.error(`Invalid address at position ${i + 1}: ${r.address}`);
                return;
            }

            const amount = parseFloat(r.amount);
            if (isNaN(amount) || amount <= 0) {
                toast.error(`Invalid amount at position ${i + 1}: ${r.amount}`);
                return;
            }
        }

        setIsSending(true);
        setProgress({ current: 0, total: recipients.length });

        try {
            console.log('üöÄ Starting mass transfer to', recipients.length, 'recipients');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
            const { wallet, keyPair, address } = await initWallet(mnemonic);
            console.log('üíº Sender wallet:', address);

            // –ü–æ–ª—É—á–∞–µ–º jetton wallet –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è  
            const jettonWalletAddress = await getJettonWalletAddress(address, jettonMinterAddress);
            console.log('ü™ô Jetton wallet:', jettonWalletAddress);
            
            const jettonWallet = client.open(
                JettonWallet.createFromAddress(Address.parse(jettonWalletAddress))
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            for (let i = 0; i < recipients.length; i++) {
                const recipient = recipients[i];
                
                console.log(`üì§ Sending ${i + 1}/${recipients.length}: ${recipient.amount} tokens to ${recipient.address}`);
                
                try {
                    // ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ nanocoins (–¥–æ–±–∞–≤–ª—è–µ–º 9 –Ω—É–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                    const amountInNano = toNano(recipient.amount); // "1.5" ‚Üí 1500000000n
                    
                    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ jetton —Ç–æ–∫–µ–Ω–æ–≤
                    const transferMessage = internal({
                        to: jettonWalletAddress,
                        value: toNano('0.08'), // –ì–∞–∑ –¥–ª—è jetton –ø–µ—Ä–µ–≤–æ–¥–∞
                        body: beginCell()
                            .storeUint(0x0f8a7ea5, 32) // transfer op
                            .storeUint(0, 64) // query_id
                            .storeCoins(amountInNano) // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ nanocoins
                            .storeAddress(Address.parse(recipient.address)) // –ø–æ–ª—É—á–∞—Ç–µ–ª—å
                            .storeAddress(Address.parse(address)) // response_destination
                            .storeUint(0, 1) // custom_payload null
                            .storeCoins(toNano('0.02')) // forward_ton_amount
                            .storeUint(0, 1) // forward_payload null
                            .endCell()
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    const seqno = await wallet.getSeqno(client.provider(wallet.address));
                    
                    await wallet.sendTransfer(client.provider(wallet.address), {
                        seqno,
                        secretKey: keyPair.secretKey,
                        messages: [transferMessage]
                    });
                    
                    setProgress({ current: i + 1, total: recipients.length });
                    toast.success(`‚úÖ Sent ${recipient.amount} tokens to ${recipient.address.slice(0, 6)}...`);
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                    if (i < recipients.length - 1) {
                        console.log('‚è≥ Waiting 3 seconds before next transaction...');
                        await new Promise(resolve => setTimeout(resolve, 3000));
                    }
                    
                } catch (error) {
                    console.error(`‚ùå Failed to send to ${recipient.address}:`, error);
                    toast.error(`‚ùå Failed: ${recipient.address.slice(0, 6)}... (${error})`);
                    
                    // –û–ø—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    const shouldContinue = confirm(
                        `Failed to send to ${recipient.address.slice(0, 10)}...\n` +
                        `Error: ${error}\n\n` +
                        `Continue with remaining recipients?`
                    );
                    if (!shouldContinue) {
                        break;
                    }
                }
            }

            toast.success(`üéâ Mass transfer completed! Sent to ${progress.current} recipients`);
            console.log('‚úÖ Mass transfer completed successfully');

        } catch (error) {
            console.error('‚ùå Mass transfer error:', error);
            toast.error(`‚ùå Mass transfer failed: ${error}`);
            throw error;
        } finally {
            setIsSending(false);
            setProgress({ current: 0, total: 0 });
        }
    }, [initWallet]);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è jetton wallet –∞–¥—Ä–µ—Å–∞
    const getJettonWalletAddress = async (userAddress: string, jettonMinterAddress: string): Promise<string> => {
        try {
            const minter = client.open(
                JettonMinter.createFromAddress(Address.parse(jettonMinterAddress))
            );
            
            const walletAddress = await minter.getWalletAddressOf(Address.parse(userAddress));
            return walletAddress.toString();
        } catch (error) {
            console.error('Error getting jetton wallet:', error);
            throw new Error('Failed to get jetton wallet address');
        }
    };

    return {
        sendToAllWithMnemonic,
        initWallet,
        isSending,
        progress,
        walletAddress
    };
}
