"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useMassTransfer.ts":
/*!**********************************!*\
  !*** ./hooks/useMassTransfer.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMassTransfer: function() { return /* binding */ useMassTransfer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tonconnect_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tonconnect/ui-react */ \"(app-pages-browser)/./node_modules/@tonconnect/ui-react/lib/index.mjs\");\n/* harmony import */ var _ton_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ton/core */ \"(app-pages-browser)/./node_modules/@ton/core/dist/index.js\");\n/* harmony import */ var _ton_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ton_core__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n\n\n\n\nfunction useMassTransfer() {\n    const [tonConnectUI] = (0,_tonconnect_ui_react__WEBPACK_IMPORTED_MODULE_1__.useTonConnectUI)();\n    const userAddress = (0,_tonconnect_ui_react__WEBPACK_IMPORTED_MODULE_1__.useTonAddress)();\n    const [isSending, setIsSending] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        current: 0,\n        total: 0\n    });\n    // ✅ ИСПРАВЛЕННАЯ функция массового перевода\n    const sendToAll = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (recipients, jettonMinterAddress)=>{\n        if (!tonConnectUI.connected || !userAddress) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Please connect your wallet\");\n            return;\n        }\n        // Валидация получателей\n        if (!recipients || recipients.length === 0) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Recipients list is empty\");\n            return;\n        }\n        // Проверяем адреса\n        for(let i = 0; i < recipients.length; i++){\n            try {\n                _ton_core__WEBPACK_IMPORTED_MODULE_2__.Address.parse(recipients[i].address);\n            } catch (e) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Invalid address at position \".concat(i + 1, \": \").concat(recipients[i].address));\n                return;\n            }\n        }\n        setIsSending(true);\n        setProgress({\n            current: 0,\n            total: recipients.length\n        });\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting mass transfer to\", recipients.length, \"recipients\");\n            // ✅ ИСПРАВЛЕНИЕ: Вычисляем jetton wallet пользователя\n            const userJettonWallet = await calculateUserJettonWallet(userAddress, jettonMinterAddress);\n            console.log(\"\\uD83D\\uDCBC User jetton wallet:\", userJettonWallet);\n            // ✅ ИСПРАВЛЕНИЕ: Отправляем по одному получателю за транзакцию\n            for(let i = 0; i < recipients.length; i++){\n                const recipient = recipients[i];\n                console.log(\"\\uD83D\\uDCE4 Sending \".concat(i + 1, \"/\").concat(recipients.length, \" to \").concat(recipient.address));\n                try {\n                    // ✅ Создаем ПРОСТУЮ транзакцию jetton перевода\n                    const transferPayload = (0,_ton_core__WEBPACK_IMPORTED_MODULE_2__.beginCell)().storeUint(0x0f8a7ea5, 32) // transfer op\n                    .storeUint(Math.floor(Date.now() / 1000), 64) // query_id (текущее время)\n                    .storeCoins(BigInt(recipient.amount)) // количество токенов\n                    .storeAddress(_ton_core__WEBPACK_IMPORTED_MODULE_2__.Address.parse(recipient.address)) // получатель\n                    .storeAddress(_ton_core__WEBPACK_IMPORTED_MODULE_2__.Address.parse(userAddress)) // response_destination\n                    .storeUint(0, 0.1) // custom_payload (null)\n                    .storeCoins((0,_ton_core__WEBPACK_IMPORTED_MODULE_2__.toNano)(\"0.01\")) // forward_ton_amount\n                    .storeUint(0, 0.1) // forward_payload (null)\n                    .endCell();\n                    const transaction = {\n                        validUntil: Math.floor(Date.now() / 1000) + 300,\n                        messages: [\n                            {\n                                address: userJettonWallet,\n                                amount: (0,_ton_core__WEBPACK_IMPORTED_MODULE_2__.toNano)(\"0.1\").toString(),\n                                payload: transferPayload.toBoc().toString(\"base64\")\n                            }\n                        ]\n                    };\n                    await tonConnectUI.sendTransaction(transaction);\n                    setProgress({\n                        current: i + 1,\n                        total: recipients.length\n                    });\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].success(\"✅ Sent to \".concat(recipient.address.slice(0, 6), \"...\"));\n                    // ✅ Пауза между переводами (важно!)\n                    if (i < recipients.length - 1) {\n                        await new Promise((resolve)=>setTimeout(resolve, 3000)); // 3 секунды пауза\n                    }\n                } catch (error) {\n                    console.error(\"❌ Failed to send to \".concat(recipient.address, \":\"), error);\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"❌ Failed: \".concat(recipient.address.slice(0, 6), \"...\"));\n                    // Спрашиваем пользователя, продолжать ли\n                    const shouldContinue = confirm(\"Failed to send to \".concat(recipient.address.slice(0, 10), \"...\\nContinue with remaining recipients?\"));\n                    if (!shouldContinue) {\n                        break;\n                    }\n                }\n            }\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].success(\"\\uD83C\\uDF89 Mass transfer completed! Processed \".concat(recipients.length, \" recipients\"));\n        } catch (error) {\n            console.error(\"❌ Mass transfer error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"❌ Mass transfer failed\");\n            throw error;\n        } finally{\n            setIsSending(false);\n            setProgress({\n                current: 0,\n                total: 0\n            });\n        }\n    }, [\n        tonConnectUI,\n        userAddress\n    ]);\n    return {\n        sendToAll,\n        isSending,\n        progress,\n        userAddress,\n        isConnected: tonConnectUI.connected\n    };\n}\n// ✅ Функция для вычисления адреса jetton кошелька пользователя\nasync function calculateUserJettonWallet(userAddress, jettonMinterAddress) {\n    try {\n        // ✅ УПРОЩЕННЫЙ способ - используем стандартную формулу TON\n        // В реальном проекте нужно вызвать get_wallet_address у minter'а\n        console.log(\"\\uD83D\\uDD0D Calculating jetton wallet for user:\", userAddress);\n        console.log(\"\\uD83C\\uDFED Jetton minter:\", jettonMinterAddress);\n        // Для демо возвращаем вычисленный адрес\n        // В продакшене: вызов get_wallet_address метода у jetton minter'а\n        const calculatedAddress = \"EQA\".concat(userAddress.slice(3, 12)).concat(jettonMinterAddress.slice(-10), \"JW\");\n        return calculatedAddress;\n    } catch (error) {\n        console.error(\"Error calculating jetton wallet:\", error);\n        throw new Error(\"Could not calculate jetton wallet address\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useMassTransfer.ts\n"));

/***/ })

});