"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tonconnect";
exports.ids = ["vendor-chunks/@tonconnect"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tonconnect/protocol/lib/esm/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@tonconnect/protocol/lib/esm/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* binding */ Base64),\n/* harmony export */   CHAIN: () => (/* binding */ CHAIN),\n/* harmony export */   CONNECT_EVENT_ERROR_CODES: () => (/* binding */ CONNECT_EVENT_ERROR_CODES),\n/* harmony export */   CONNECT_ITEM_ERROR_CODES: () => (/* binding */ CONNECT_ITEM_ERROR_CODES),\n/* harmony export */   DISCONNECT_ERROR_CODES: () => (/* binding */ DISCONNECT_ERROR_CODES),\n/* harmony export */   SEND_TRANSACTION_ERROR_CODES: () => (/* binding */ SEND_TRANSACTION_ERROR_CODES),\n/* harmony export */   SIGN_DATA_ERROR_CODES: () => (/* binding */ SIGN_DATA_ERROR_CODES),\n/* harmony export */   SessionCrypto: () => (/* binding */ SessionCrypto),\n/* harmony export */   concatUint8Arrays: () => (/* binding */ concatUint8Arrays),\n/* harmony export */   hexToByteArray: () => (/* binding */ hexToByteArray),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   splitToUint8Arrays: () => (/* binding */ splitToUint8Arrays),\n/* harmony export */   toHexString: () => (/* binding */ toHexString)\n/* harmony export */ });\n/* harmony import */ var tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl-util */ \"(ssr)/./node_modules/tweetnacl-util/nacl-util.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n\n\nvar CONNECT_EVENT_ERROR_CODES;\n(function(CONNECT_EVENT_ERROR_CODES) {\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_NOT_FOUND_ERROR\"] = 2] = \"MANIFEST_NOT_FOUND_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_CONTENT_ERROR\"] = 3] = \"MANIFEST_CONTENT_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));\nvar CONNECT_ITEM_ERROR_CODES;\n(function(CONNECT_ITEM_ERROR_CODES) {\n    CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));\nvar SEND_TRANSACTION_ERROR_CODES;\n(function(SEND_TRANSACTION_ERROR_CODES) {\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));\nvar SIGN_DATA_ERROR_CODES;\n(function(SIGN_DATA_ERROR_CODES) {\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));\nvar DISCONNECT_ERROR_CODES;\n(function(DISCONNECT_ERROR_CODES) {\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));\nvar CHAIN;\n(function(CHAIN) {\n    CHAIN[\"MAINNET\"] = \"-239\";\n    CHAIN[\"TESTNET\"] = \"-3\";\n})(CHAIN || (CHAIN = {}));\nfunction encodeUint8Array(value, urlSafe) {\n    const encoded = tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__.encodeBase64(value);\n    if (!urlSafe) {\n        return encoded;\n    }\n    return encodeURIComponent(encoded);\n}\nfunction decodeToUint8Array(value, urlSafe) {\n    if (urlSafe) {\n        value = decodeURIComponent(value);\n    }\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__.decodeBase64(value);\n}\nfunction encode(value, urlSafe = false) {\n    let uint8Array;\n    if (value instanceof Uint8Array) {\n        uint8Array = value;\n    } else {\n        if (typeof value !== \"string\") {\n            value = JSON.stringify(value);\n        }\n        uint8Array = tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__.decodeUTF8(value);\n    }\n    return encodeUint8Array(uint8Array, urlSafe);\n}\nfunction decode(value, urlSafe = false) {\n    const decodedUint8Array = decodeToUint8Array(value, urlSafe);\n    return {\n        toString () {\n            return tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8(decodedUint8Array);\n        },\n        toObject () {\n            try {\n                return JSON.parse(tweetnacl_util__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8(decodedUint8Array));\n            } catch (e) {\n                return null;\n            }\n        },\n        toUint8Array () {\n            return decodedUint8Array;\n        }\n    };\n}\nconst Base64 = {\n    encode,\n    decode\n};\nfunction concatUint8Arrays(buffer1, buffer2) {\n    const mergedArray = new Uint8Array(buffer1.length + buffer2.length);\n    mergedArray.set(buffer1);\n    mergedArray.set(buffer2, buffer1.length);\n    return mergedArray;\n}\nfunction splitToUint8Arrays(array, index) {\n    if (index >= array.length) {\n        throw new Error(\"Index is out of buffer\");\n    }\n    const subArray1 = array.slice(0, index);\n    const subArray2 = array.slice(index);\n    return [\n        subArray1,\n        subArray2\n    ];\n}\nfunction toHexString(byteArray) {\n    let hexString = \"\";\n    byteArray.forEach((byte)=>{\n        hexString += (\"0\" + (byte & 0xff).toString(16)).slice(-2);\n    });\n    return hexString;\n}\nfunction hexToByteArray(hexString) {\n    if (hexString.length % 2 !== 0) {\n        throw new Error(`Cannot convert ${hexString} to bytesArray`);\n    }\n    const result = new Uint8Array(hexString.length / 2);\n    for(let i = 0; i < hexString.length; i += 2){\n        result[i / 2] = parseInt(hexString.slice(i, i + 2), 16);\n    }\n    return result;\n}\nfunction isNode() {\n    return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n}\nclass SessionCrypto {\n    constructor(keyPair){\n        this.nonceLength = 24;\n        this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();\n        this.sessionId = toHexString(this.keyPair.publicKey);\n    }\n    createKeypair() {\n        return tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.keyPair();\n    }\n    createKeypairFromString(keyPair) {\n        return {\n            publicKey: hexToByteArray(keyPair.publicKey),\n            secretKey: hexToByteArray(keyPair.secretKey)\n        };\n    }\n    createNonce() {\n        return tweetnacl__WEBPACK_IMPORTED_MODULE_1__.randomBytes(this.nonceLength);\n    }\n    encrypt(message, receiverPublicKey) {\n        const encodedMessage = new TextEncoder().encode(message);\n        const nonce = this.createNonce();\n        const encrypted = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);\n        return concatUint8Arrays(nonce, encrypted);\n    }\n    decrypt(message, senderPublicKey) {\n        const [nonce, internalMessage] = splitToUint8Arrays(message, this.nonceLength);\n        const decrypted = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);\n        if (!decrypted) {\n            throw new Error(`Decryption error: \\n message: ${message.toString()} \\n sender pubkey: ${senderPublicKey.toString()} \\n keypair pubkey: ${this.keyPair.publicKey.toString()} \\n keypair secretkey: ${this.keyPair.secretKey.toString()}`);\n        }\n        return new TextDecoder().decode(decrypted);\n    }\n    stringifyKeypair() {\n        return {\n            publicKey: toHexString(this.keyPair.publicKey),\n            secretKey: toHexString(this.keyPair.secretKey)\n        };\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/protocol/lib/esm/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tonconnect/ui-react/lib/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@tonconnect/ui-react/lib/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.BadRequestError),\n/* harmony export */   BrowserEventDispatcher: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.BrowserEventDispatcher),\n/* harmony export */   CHAIN: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.CHAIN),\n/* harmony export */   CONNECT_EVENT_ERROR_CODES: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.CONNECT_EVENT_ERROR_CODES),\n/* harmony export */   CONNECT_ITEM_ERROR_CODES: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.CONNECT_ITEM_ERROR_CODES),\n/* harmony export */   FetchWalletsError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.FetchWalletsError),\n/* harmony export */   LocalstorageNotFoundError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.LocalstorageNotFoundError),\n/* harmony export */   ParseHexError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.ParseHexError),\n/* harmony export */   SEND_TRANSACTION_ERROR_CODES: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.SEND_TRANSACTION_ERROR_CODES),\n/* harmony export */   THEME: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.THEME),\n/* harmony export */   TonConnect: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnect),\n/* harmony export */   TonConnectButton: () => (/* binding */ TonConnectButton$1),\n/* harmony export */   TonConnectError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnectError),\n/* harmony export */   TonConnectProviderNotSetError: () => (/* binding */ TonConnectProviderNotSetError),\n/* harmony export */   TonConnectUI: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnectUI),\n/* harmony export */   TonConnectUIContext: () => (/* binding */ TonConnectUIContext),\n/* harmony export */   TonConnectUIError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnectUIError),\n/* harmony export */   TonConnectUIProvider: () => (/* binding */ TonConnectUIProvider$1),\n/* harmony export */   TonConnectUIReactError: () => (/* binding */ TonConnectUIReactError),\n/* harmony export */   UnknownAppError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.UnknownAppError),\n/* harmony export */   UnknownError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.UnknownError),\n/* harmony export */   UserRejectsError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.UserRejectsError),\n/* harmony export */   WalletAlreadyConnectedError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletAlreadyConnectedError),\n/* harmony export */   WalletMissingRequiredFeaturesError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletMissingRequiredFeaturesError),\n/* harmony export */   WalletNotConnectedError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletNotConnectedError),\n/* harmony export */   WalletNotInjectedError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletNotInjectedError),\n/* harmony export */   WalletNotSupportFeatureError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletNotSupportFeatureError),\n/* harmony export */   WalletsListManager: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WalletsListManager),\n/* harmony export */   WrongAddressError: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.WrongAddressError),\n/* harmony export */   checkRequiredWalletFeatures: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.checkRequiredWalletFeatures),\n/* harmony export */   createConnectionCompletedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionCompletedEvent),\n/* harmony export */   createConnectionErrorEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionErrorEvent),\n/* harmony export */   createConnectionRestoringCompletedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionRestoringCompletedEvent),\n/* harmony export */   createConnectionRestoringErrorEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionRestoringErrorEvent),\n/* harmony export */   createConnectionRestoringStartedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionRestoringStartedEvent),\n/* harmony export */   createConnectionStartedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createConnectionStartedEvent),\n/* harmony export */   createDisconnectionEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createDisconnectionEvent),\n/* harmony export */   createRequestVersionEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createRequestVersionEvent),\n/* harmony export */   createResponseVersionEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createResponseVersionEvent),\n/* harmony export */   createTransactionSentForSignatureEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createTransactionSentForSignatureEvent),\n/* harmony export */   createTransactionSignedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createTransactionSignedEvent),\n/* harmony export */   createTransactionSigningFailedEvent: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createTransactionSigningFailedEvent),\n/* harmony export */   createVersionInfo: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.createVersionInfo),\n/* harmony export */   encodeTelegramUrlParameters: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.encodeTelegramUrlParameters),\n/* harmony export */   isTelegramUrl: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isTelegramUrl),\n/* harmony export */   isWalletInfoCurrentlyEmbedded: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isWalletInfoCurrentlyEmbedded),\n/* harmony export */   isWalletInfoCurrentlyInjected: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isWalletInfoCurrentlyInjected),\n/* harmony export */   isWalletInfoInjectable: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isWalletInfoInjectable),\n/* harmony export */   isWalletInfoInjected: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isWalletInfoInjected),\n/* harmony export */   isWalletInfoRemote: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.isWalletInfoRemote),\n/* harmony export */   toUserFriendlyAddress: () => (/* reexport safe */ _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.toUserFriendlyAddress),\n/* harmony export */   useIsConnectionRestored: () => (/* binding */ useIsConnectionRestored),\n/* harmony export */   useTonAddress: () => (/* binding */ useTonAddress),\n/* harmony export */   useTonConnectModal: () => (/* binding */ useTonConnectModal),\n/* harmony export */   useTonConnectUI: () => (/* binding */ useTonConnectUI),\n/* harmony export */   useTonWallet: () => (/* binding */ useTonWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tonconnect/ui */ \"(ssr)/./node_modules/@tonconnect/ui/lib/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\n\n\n\n\nfunction isClientSide() {\n    return \"undefined\" !== \"undefined\";\n}\nfunction isServerSide() {\n    return !isClientSide();\n}\nconst TonConnectUIContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nlet tonConnectUI = null;\nconst TonConnectUIProvider = (_a)=>{\n    var _b = _a, { children } = _b, options = __objRest(_b, [\n        \"children\"\n    ]);\n    if (isClientSide() && !tonConnectUI) {\n        tonConnectUI = new _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnectUI(options);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TonConnectUIContext.Provider, {\n        value: tonConnectUI,\n        children\n    });\n};\nconst TonConnectUIProvider$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(TonConnectUIProvider);\nclass TonConnectUIReactError extends _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.TonConnectUIError {\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, TonConnectUIReactError.prototype);\n    }\n}\nclass TonConnectProviderNotSetError extends TonConnectUIReactError {\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, TonConnectProviderNotSetError.prototype);\n    }\n}\nfunction checkProvider(provider) {\n    if (!provider) {\n        throw new TonConnectProviderNotSetError(\"You should add <TonConnectUIProvider> on the top of the app to use TonConnect\");\n    }\n    return true;\n}\nfunction useTonConnectUI() {\n    const tonConnectUI2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(TonConnectUIContext);\n    const setOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((options)=>{\n        if (tonConnectUI2) {\n            tonConnectUI2.uiOptions = options;\n        }\n    }, [\n        tonConnectUI2\n    ]);\n    if (isServerSide()) {\n        return [\n            null,\n            ()=>{}\n        ];\n    }\n    checkProvider(tonConnectUI2);\n    return [\n        tonConnectUI2,\n        setOptions\n    ];\n}\nconst buttonRootId = \"ton-connect-button\";\nconst TonConnectButton = ({ className, style })=>{\n    const [_, setOptions] = useTonConnectUI();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setOptions({\n            buttonRootId\n        });\n        return ()=>setOptions({\n                buttonRootId: null\n            });\n    }, [\n        setOptions\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        id: buttonRootId,\n        className,\n        style: __spreadValues({\n            width: \"fit-content\"\n        }, style)\n    });\n};\nconst TonConnectButton$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(TonConnectButton);\nfunction useTonWallet() {\n    const [tonConnectUI2] = useTonConnectUI();\n    const [wallet, setWallet] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) || null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (tonConnectUI2) {\n            setWallet(tonConnectUI2.wallet);\n            return tonConnectUI2.onStatusChange((value)=>{\n                setWallet(value);\n            });\n        }\n    }, [\n        tonConnectUI2\n    ]);\n    return wallet;\n}\nfunction useTonAddress(userFriendly = true) {\n    const wallet = useTonWallet();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (wallet) {\n            return userFriendly ? (0,_tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.toUserFriendlyAddress)(wallet.account.address, wallet.account.chain === _tonconnect_ui__WEBPACK_IMPORTED_MODULE_2__.CHAIN.TESTNET) : wallet.account.address;\n        } else {\n            return \"\";\n        }\n    }, [\n        wallet,\n        userFriendly,\n        wallet == null ? void 0 : wallet.account.address,\n        wallet == null ? void 0 : wallet.account.chain\n    ]);\n}\nfunction useTonConnectModal() {\n    const [tonConnectUI2] = useTonConnectUI();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.state) || null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (tonConnectUI2) {\n            setState(tonConnectUI2.modal.state);\n            return tonConnectUI2.onModalStateChange((value)=>{\n                setState(value);\n            });\n        }\n    }, [\n        tonConnectUI2\n    ]);\n    return {\n        state,\n        open: ()=>tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.open(),\n        close: ()=>tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.close()\n    };\n}\nfunction useIsConnectionRestored() {\n    const [restored, setRestored] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [tonConnectUI2] = useTonConnectUI();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (tonConnectUI2) {\n            tonConnectUI2.connectionRestored.then(()=>setRestored(true));\n        }\n    }, [\n        tonConnectUI2\n    ]);\n    return restored;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/ui-react/lib/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tonconnect/ui/lib/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@tonconnect/ui/lib/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.BadRequestError),\n/* harmony export */   BrowserEventDispatcher: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.BrowserEventDispatcher),\n/* harmony export */   CHAIN: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.CHAIN),\n/* harmony export */   CONNECT_EVENT_ERROR_CODES: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES),\n/* harmony export */   CONNECT_ITEM_ERROR_CODES: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.CONNECT_ITEM_ERROR_CODES),\n/* harmony export */   FetchWalletsError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.FetchWalletsError),\n/* harmony export */   LocalstorageNotFoundError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.LocalstorageNotFoundError),\n/* harmony export */   ParseHexError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.ParseHexError),\n/* harmony export */   SEND_TRANSACTION_ERROR_CODES: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES),\n/* harmony export */   THEME: () => (/* binding */ THEME),\n/* harmony export */   TonConnect: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnect),\n/* harmony export */   TonConnectError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnectError),\n/* harmony export */   TonConnectUI: () => (/* binding */ TonConnectUI),\n/* harmony export */   TonConnectUIError: () => (/* binding */ TonConnectUIError),\n/* harmony export */   UnknownAppError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.UnknownAppError),\n/* harmony export */   UnknownError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.UnknownError),\n/* harmony export */   UserRejectsError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.UserRejectsError),\n/* harmony export */   WalletAlreadyConnectedError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletAlreadyConnectedError),\n/* harmony export */   WalletMissingRequiredFeaturesError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletMissingRequiredFeaturesError),\n/* harmony export */   WalletNotConnectedError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletNotConnectedError),\n/* harmony export */   WalletNotInjectedError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletNotInjectedError),\n/* harmony export */   WalletNotSupportFeatureError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletNotSupportFeatureError),\n/* harmony export */   WalletsListManager: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletsListManager),\n/* harmony export */   WrongAddressError: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WrongAddressError),\n/* harmony export */   checkRequiredWalletFeatures: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.checkRequiredWalletFeatures),\n/* harmony export */   createConnectionCompletedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionCompletedEvent),\n/* harmony export */   createConnectionErrorEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionErrorEvent),\n/* harmony export */   createConnectionRestoringCompletedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringCompletedEvent),\n/* harmony export */   createConnectionRestoringErrorEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringErrorEvent),\n/* harmony export */   createConnectionRestoringStartedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringStartedEvent),\n/* harmony export */   createConnectionStartedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionStartedEvent),\n/* harmony export */   createDisconnectionEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createDisconnectionEvent),\n/* harmony export */   createRequestVersionEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createRequestVersionEvent),\n/* harmony export */   createResponseVersionEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createResponseVersionEvent),\n/* harmony export */   createTransactionSentForSignatureEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSentForSignatureEvent),\n/* harmony export */   createTransactionSignedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSignedEvent),\n/* harmony export */   createTransactionSigningFailedEvent: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSigningFailedEvent),\n/* harmony export */   createVersionInfo: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createVersionInfo),\n/* harmony export */   encodeTelegramUrlParameters: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.encodeTelegramUrlParameters),\n/* harmony export */   isTelegramUrl: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl),\n/* harmony export */   isWalletInfoCurrentlyEmbedded: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyEmbedded),\n/* harmony export */   isWalletInfoCurrentlyInjected: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected),\n/* harmony export */   isWalletInfoInjectable: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoInjectable),\n/* harmony export */   isWalletInfoInjected: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoInjected),\n/* harmony export */   isWalletInfoRemote: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoRemote),\n/* harmony export */   toUserFriendlyAddress: () => (/* reexport safe */ _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.toUserFriendlyAddress)\n/* harmony export */ });\n/* harmony import */ var _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tonconnect/sdk */ \"(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/sdk/lib/esm/index.mjs\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a2, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a2, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a2, prop, b[prop]);\n    }\n    return a2;\n};\nvar __spreadProps = (a2, b)=>__defProps(a2, __getOwnPropDescs(b));\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e2) {\n                reject(e2);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e2) {\n                reject(e2);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\nvar _a, _b, _c, _d, _e, _f, _g, _h;\n\n\n\n\n\nconst sharedConfig = {};\nfunction setHydrateContext(context) {\n    sharedConfig.context = context;\n}\nconst equalFn = (a2, b)=>a2 === b;\nconst $PROXY = Symbol(\"solid-proxy\");\nconst $TRACK = Symbol(\"solid-track\");\nconst signalOptions = {\n    equals: equalFn\n};\nlet runEffects = runQueue;\nconst STALE = 1;\nconst PENDING = 2;\nconst UNOWNED = {\n    owned: null,\n    cleanups: null,\n    context: null,\n    owner: null\n};\nconst NO_INIT = {};\nvar Owner = null;\nlet Transition$1 = null;\nlet Listener = null;\nlet Updates = null;\nlet Effects = null;\nlet ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n    const listener = Listener, owner = Owner, unowned = fn.length === 0, root = unowned ? UNOWNED : {\n        owned: null,\n        cleanups: null,\n        context: null,\n        owner: detachedOwner === void 0 ? owner : detachedOwner\n    }, updateFn = unowned ? fn : ()=>fn(()=>untrack(()=>cleanNode(root)));\n    Owner = root;\n    Listener = null;\n    try {\n        return runUpdates(updateFn, true);\n    } finally{\n        Listener = listener;\n        Owner = owner;\n    }\n}\nfunction createSignal(value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const s2 = {\n        value,\n        observers: null,\n        observerSlots: null,\n        comparator: options.equals || void 0\n    };\n    const setter = (value2)=>{\n        if (typeof value2 === \"function\") {\n            value2 = value2(s2.value);\n        }\n        return writeSignal(s2, value2);\n    };\n    return [\n        readSignal.bind(s2),\n        setter\n    ];\n}\nfunction createComputed(fn, value, options) {\n    const c2 = createComputation(fn, value, true, STALE);\n    updateComputation(c2);\n}\nfunction createRenderEffect(fn, value, options) {\n    const c2 = createComputation(fn, value, false, STALE);\n    updateComputation(c2);\n}\nfunction createEffect(fn, value, options) {\n    runEffects = runUserEffects;\n    const c2 = createComputation(fn, value, false, STALE);\n    c2.user = true;\n    Effects ? Effects.push(c2) : updateComputation(c2);\n}\nfunction createMemo(fn, value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const c2 = createComputation(fn, value, true, 0);\n    c2.observers = null;\n    c2.observerSlots = null;\n    c2.comparator = options.equals || void 0;\n    updateComputation(c2);\n    return readSignal.bind(c2);\n}\nfunction createResource(pSource, pFetcher, pOptions) {\n    let source;\n    let fetcher;\n    let options;\n    if (arguments.length === 2 && typeof pFetcher === \"object\" || arguments.length === 1) {\n        source = true;\n        fetcher = pSource;\n        options = pFetcher || {};\n    } else {\n        source = pSource;\n        fetcher = pFetcher;\n        options = pOptions || {};\n    }\n    let pr = null, initP = NO_INIT, id = null, scheduled = false, resolved = \"initialValue\" in options, dynamic = typeof source === \"function\" && createMemo(source);\n    const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, {\n        equals: false\n    }), [state, setState] = createSignal(resolved ? \"ready\" : \"unresolved\");\n    if (sharedConfig.context) {\n        id = `${sharedConfig.context.id}${sharedConfig.context.count++}`;\n        let v;\n        if (options.ssrLoadFrom === \"initial\") initP = options.initialValue;\n        else if (sharedConfig.load && (v = sharedConfig.load(id))) initP = v[0];\n    }\n    function loadEnd(p2, v, error2, key) {\n        if (pr === p2) {\n            pr = null;\n            resolved = true;\n            if ((p2 === initP || v === initP) && options.onHydrated) queueMicrotask(()=>options.onHydrated(key, {\n                    value: v\n                }));\n            initP = NO_INIT;\n            completeLoad(v, error2);\n        }\n        return v;\n    }\n    function completeLoad(v, err) {\n        runUpdates(()=>{\n            if (err === void 0) setValue(()=>v);\n            setState(err !== void 0 ? \"errored\" : \"ready\");\n            setError(err);\n            for (const c2 of contexts.keys())c2.decrement();\n            contexts.clear();\n        }, false);\n    }\n    function read() {\n        const c2 = SuspenseContext, v = value(), err = error();\n        if (err !== void 0 && !pr) throw err;\n        if (Listener && !Listener.user && c2) {\n            createComputed(()=>{\n                track();\n                if (pr) {\n                    if (c2.resolved) ;\n                    else if (!contexts.has(c2)) {\n                        c2.increment();\n                        contexts.add(c2);\n                    }\n                }\n            });\n        }\n        return v;\n    }\n    function load(refetching = true) {\n        if (refetching !== false && scheduled) return;\n        scheduled = false;\n        const lookup2 = dynamic ? dynamic() : source;\n        if (lookup2 == null || lookup2 === false) {\n            loadEnd(pr, untrack(value));\n            return;\n        }\n        const p2 = initP !== NO_INIT ? initP : untrack(()=>fetcher(lookup2, {\n                value: value(),\n                refetching\n            }));\n        if (typeof p2 !== \"object\" || !(p2 && \"then\" in p2)) {\n            loadEnd(pr, p2, void 0, lookup2);\n            return p2;\n        }\n        pr = p2;\n        scheduled = true;\n        queueMicrotask(()=>scheduled = false);\n        runUpdates(()=>{\n            setState(resolved ? \"refreshing\" : \"pending\");\n            trigger();\n        }, false);\n        return p2.then((v)=>loadEnd(p2, v, void 0, lookup2), (e2)=>loadEnd(p2, void 0, castError(e2), lookup2));\n    }\n    Object.defineProperties(read, {\n        state: {\n            get: ()=>state()\n        },\n        error: {\n            get: ()=>error()\n        },\n        loading: {\n            get () {\n                const s2 = state();\n                return s2 === \"pending\" || s2 === \"refreshing\";\n            }\n        },\n        latest: {\n            get () {\n                if (!resolved) return read();\n                const err = error();\n                if (err && !pr) throw err;\n                return value();\n            }\n        }\n    });\n    if (dynamic) createComputed(()=>load(false));\n    else load(false);\n    return [\n        read,\n        {\n            refetch: load,\n            mutate: setValue\n        }\n    ];\n}\nfunction batch(fn) {\n    return runUpdates(fn, false);\n}\nfunction untrack(fn) {\n    if (Listener === null) return fn();\n    const listener = Listener;\n    Listener = null;\n    try {\n        return fn();\n    } finally{\n        Listener = listener;\n    }\n}\nfunction on(deps, fn, options) {\n    const isArray = Array.isArray(deps);\n    let prevInput;\n    let defer = options && options.defer;\n    return (prevValue)=>{\n        let input;\n        if (isArray) {\n            input = Array(deps.length);\n            for(let i2 = 0; i2 < deps.length; i2++)input[i2] = deps[i2]();\n        } else input = deps();\n        if (defer) {\n            defer = false;\n            return void 0;\n        }\n        const result = untrack(()=>fn(input, prevInput, prevValue));\n        prevInput = input;\n        return result;\n    };\n}\nfunction onMount(fn) {\n    createEffect(()=>untrack(fn));\n}\nfunction onCleanup(fn) {\n    if (Owner === null) ;\n    else if (Owner.cleanups === null) Owner.cleanups = [\n        fn\n    ];\n    else Owner.cleanups.push(fn);\n    return fn;\n}\nfunction getListener() {\n    return Listener;\n}\nfunction getOwner() {\n    return Owner;\n}\nfunction createContext(defaultValue, options) {\n    const id = Symbol(\"context\");\n    return {\n        id,\n        Provider: createProvider(id),\n        defaultValue\n    };\n}\nfunction useContext(context) {\n    let ctx;\n    return (ctx = lookup(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;\n}\nfunction children(fn) {\n    const children2 = createMemo(fn);\n    const memo = createMemo(()=>resolveChildren(children2()));\n    memo.toArray = ()=>{\n        const c2 = memo();\n        return Array.isArray(c2) ? c2 : c2 != null ? [\n            c2\n        ] : [];\n    };\n    return memo;\n}\nlet SuspenseContext;\nfunction readSignal() {\n    const runningTransition = Transition$1;\n    if (this.sources && (this.state || runningTransition)) {\n        if (this.state === STALE || runningTransition) updateComputation(this);\n        else {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(this), false);\n            Updates = updates;\n        }\n    }\n    if (Listener) {\n        const sSlot = this.observers ? this.observers.length : 0;\n        if (!Listener.sources) {\n            Listener.sources = [\n                this\n            ];\n            Listener.sourceSlots = [\n                sSlot\n            ];\n        } else {\n            Listener.sources.push(this);\n            Listener.sourceSlots.push(sSlot);\n        }\n        if (!this.observers) {\n            this.observers = [\n                Listener\n            ];\n            this.observerSlots = [\n                Listener.sources.length - 1\n            ];\n        } else {\n            this.observers.push(Listener);\n            this.observerSlots.push(Listener.sources.length - 1);\n        }\n    }\n    return this.value;\n}\nfunction writeSignal(node, value, isComp) {\n    let current = node.value;\n    if (!node.comparator || !node.comparator(current, value)) {\n        node.value = value;\n        if (node.observers && node.observers.length) {\n            runUpdates(()=>{\n                for(let i2 = 0; i2 < node.observers.length; i2 += 1){\n                    const o2 = node.observers[i2];\n                    const TransitionRunning = Transition$1 && Transition$1.running;\n                    if (TransitionRunning && Transition$1.disposed.has(o2)) ;\n                    if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {\n                        if (o2.pure) Updates.push(o2);\n                        else Effects.push(o2);\n                        if (o2.observers) markDownstream(o2);\n                    }\n                    if (TransitionRunning) ;\n                    else o2.state = STALE;\n                }\n                if (Updates.length > 1e6) {\n                    Updates = [];\n                    if (false) {}\n                    throw new Error();\n                }\n            }, false);\n        }\n    }\n    return value;\n}\nfunction updateComputation(node) {\n    if (!node.fn) return;\n    cleanNode(node);\n    const owner = Owner, listener = Listener, time = ExecCount;\n    Listener = Owner = node;\n    runComputation(node, node.value, time);\n    Listener = listener;\n    Owner = owner;\n}\nfunction runComputation(node, value, time) {\n    let nextValue;\n    try {\n        nextValue = node.fn(value);\n    } catch (err) {\n        if (node.pure) {\n            {\n                node.state = STALE;\n                node.owned && node.owned.forEach(cleanNode);\n                node.owned = null;\n            }\n        }\n        handleError(err);\n    }\n    if (!node.updatedAt || node.updatedAt <= time) {\n        if (node.updatedAt != null && \"observers\" in node) {\n            writeSignal(node, nextValue);\n        } else node.value = nextValue;\n        node.updatedAt = time;\n    }\n}\nfunction createComputation(fn, init, pure, state = STALE, options) {\n    const c2 = {\n        fn,\n        state,\n        updatedAt: null,\n        owned: null,\n        sources: null,\n        sourceSlots: null,\n        cleanups: null,\n        value: init,\n        owner: Owner,\n        context: null,\n        pure\n    };\n    if (Owner === null) ;\n    else if (Owner !== UNOWNED) {\n        {\n            if (!Owner.owned) Owner.owned = [\n                c2\n            ];\n            else Owner.owned.push(c2);\n        }\n    }\n    return c2;\n}\nfunction runTop(node) {\n    const runningTransition = Transition$1;\n    if (node.state === 0 || runningTransition) return;\n    if (node.state === PENDING || runningTransition) return lookUpstream(node);\n    if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n    const ancestors = [\n        node\n    ];\n    while((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)){\n        if (node.state || runningTransition) ancestors.push(node);\n    }\n    for(let i2 = ancestors.length - 1; i2 >= 0; i2--){\n        node = ancestors[i2];\n        if (node.state === STALE || runningTransition) {\n            updateComputation(node);\n        } else if (node.state === PENDING || runningTransition) {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(node, ancestors[0]), false);\n            Updates = updates;\n        }\n    }\n}\nfunction runUpdates(fn, init) {\n    if (Updates) return fn();\n    let wait = false;\n    if (!init) Updates = [];\n    if (Effects) wait = true;\n    else Effects = [];\n    ExecCount++;\n    try {\n        const res = fn();\n        completeUpdates(wait);\n        return res;\n    } catch (err) {\n        if (!wait) Effects = null;\n        Updates = null;\n        handleError(err);\n    }\n}\nfunction completeUpdates(wait) {\n    if (Updates) {\n        runQueue(Updates);\n        Updates = null;\n    }\n    if (wait) return;\n    const e2 = Effects;\n    Effects = null;\n    if (e2.length) runUpdates(()=>runEffects(e2), false);\n}\nfunction runQueue(queue) {\n    for(let i2 = 0; i2 < queue.length; i2++)runTop(queue[i2]);\n}\nfunction runUserEffects(queue) {\n    let i2, userLength = 0;\n    for(i2 = 0; i2 < queue.length; i2++){\n        const e2 = queue[i2];\n        if (!e2.user) runTop(e2);\n        else queue[userLength++] = e2;\n    }\n    if (sharedConfig.context) setHydrateContext();\n    for(i2 = 0; i2 < userLength; i2++)runTop(queue[i2]);\n}\nfunction lookUpstream(node, ignore) {\n    const runningTransition = Transition$1;\n    node.state = 0;\n    for(let i2 = 0; i2 < node.sources.length; i2 += 1){\n        const source = node.sources[i2];\n        if (source.sources) {\n            if (source.state === STALE || runningTransition) {\n                if (source !== ignore) runTop(source);\n            } else if (source.state === PENDING || runningTransition) lookUpstream(source, ignore);\n        }\n    }\n}\nfunction markDownstream(node) {\n    const runningTransition = Transition$1;\n    for(let i2 = 0; i2 < node.observers.length; i2 += 1){\n        const o2 = node.observers[i2];\n        if (!o2.state || runningTransition) {\n            o2.state = PENDING;\n            if (o2.pure) Updates.push(o2);\n            else Effects.push(o2);\n            o2.observers && markDownstream(o2);\n        }\n    }\n}\nfunction cleanNode(node) {\n    let i2;\n    if (node.sources) {\n        while(node.sources.length){\n            const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;\n            if (obs && obs.length) {\n                const n2 = obs.pop(), s2 = source.observerSlots.pop();\n                if (index < obs.length) {\n                    n2.sourceSlots[s2] = index;\n                    obs[index] = n2;\n                    source.observerSlots[index] = s2;\n                }\n            }\n        }\n    }\n    if (node.owned) {\n        for(i2 = 0; i2 < node.owned.length; i2++)cleanNode(node.owned[i2]);\n        node.owned = null;\n    }\n    if (node.cleanups) {\n        for(i2 = 0; i2 < node.cleanups.length; i2++)node.cleanups[i2]();\n        node.cleanups = null;\n    }\n    node.state = 0;\n    node.context = null;\n}\nfunction castError(err) {\n    if (err instanceof Error || typeof err === \"string\") return err;\n    return new Error(\"Unknown error\");\n}\nfunction handleError(err) {\n    err = castError(err);\n    throw err;\n}\nfunction lookup(owner, key) {\n    return owner ? owner.context && owner.context[key] !== void 0 ? owner.context[key] : lookup(owner.owner, key) : void 0;\n}\nfunction resolveChildren(children2) {\n    if (typeof children2 === \"function\" && !children2.length) return resolveChildren(children2());\n    if (Array.isArray(children2)) {\n        const results = [];\n        for(let i2 = 0; i2 < children2.length; i2++){\n            const result = resolveChildren(children2[i2]);\n            Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results;\n    }\n    return children2;\n}\nfunction createProvider(id, options) {\n    return function provider(props) {\n        let res;\n        createRenderEffect(()=>res = untrack(()=>{\n                Owner.context = {\n                    [id]: props.value\n                };\n                return children(()=>props.children);\n            }), void 0);\n        return res;\n    };\n}\nconst FALLBACK = Symbol(\"fallback\");\nfunction dispose(d) {\n    for(let i2 = 0; i2 < d.length; i2++)d[i2]();\n}\nfunction mapArray(list, mapFn, options = {}) {\n    let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;\n    onCleanup(()=>dispose(disposers));\n    return ()=>{\n        let newItems = list() || [], i2, j;\n        newItems[$TRACK];\n        return untrack(()=>{\n            let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;\n            if (newLen === 0) {\n                if (len !== 0) {\n                    dispose(disposers);\n                    disposers = [];\n                    items = [];\n                    mapped = [];\n                    len = 0;\n                    indexes && (indexes = []);\n                }\n                if (options.fallback) {\n                    items = [\n                        FALLBACK\n                    ];\n                    mapped[0] = createRoot((disposer)=>{\n                        disposers[0] = disposer;\n                        return options.fallback();\n                    });\n                    len = 1;\n                }\n            } else if (len === 0) {\n                mapped = new Array(newLen);\n                for(j = 0; j < newLen; j++){\n                    items[j] = newItems[j];\n                    mapped[j] = createRoot(mapper);\n                }\n                len = newLen;\n            } else {\n                temp = new Array(newLen);\n                tempdisposers = new Array(newLen);\n                indexes && (tempIndexes = new Array(newLen));\n                for(start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);\n                for(end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--){\n                    temp[newEnd] = mapped[end];\n                    tempdisposers[newEnd] = disposers[end];\n                    indexes && (tempIndexes[newEnd] = indexes[end]);\n                }\n                newIndices = /* @__PURE__ */ new Map();\n                newIndicesNext = new Array(newEnd + 1);\n                for(j = newEnd; j >= start; j--){\n                    item = newItems[j];\n                    i2 = newIndices.get(item);\n                    newIndicesNext[j] = i2 === void 0 ? -1 : i2;\n                    newIndices.set(item, j);\n                }\n                for(i2 = start; i2 <= end; i2++){\n                    item = items[i2];\n                    j = newIndices.get(item);\n                    if (j !== void 0 && j !== -1) {\n                        temp[j] = mapped[i2];\n                        tempdisposers[j] = disposers[i2];\n                        indexes && (tempIndexes[j] = indexes[i2]);\n                        j = newIndicesNext[j];\n                        newIndices.set(item, j);\n                    } else disposers[i2]();\n                }\n                for(j = start; j < newLen; j++){\n                    if (j in temp) {\n                        mapped[j] = temp[j];\n                        disposers[j] = tempdisposers[j];\n                        if (indexes) {\n                            indexes[j] = tempIndexes[j];\n                            indexes[j](j);\n                        }\n                    } else mapped[j] = createRoot(mapper);\n                }\n                mapped = mapped.slice(0, len = newLen);\n                items = newItems.slice(0);\n            }\n            return mapped;\n        });\n        function mapper(disposer) {\n            disposers[j] = disposer;\n            if (indexes) {\n                const [s2, set] = createSignal(j);\n                indexes[j] = set;\n                return mapFn(newItems[j], s2);\n            }\n            return mapFn(newItems[j]);\n        }\n    };\n}\nfunction createComponent(Comp, props) {\n    return untrack(()=>Comp(props || {}));\n}\nfunction trueFn() {\n    return true;\n}\nconst propTraps = {\n    get (_, property, receiver) {\n        if (property === $PROXY) return receiver;\n        return _.get(property);\n    },\n    has (_, property) {\n        if (property === $PROXY) return true;\n        return _.has(property);\n    },\n    set: trueFn,\n    deleteProperty: trueFn,\n    getOwnPropertyDescriptor (_, property) {\n        return {\n            configurable: true,\n            enumerable: true,\n            get () {\n                return _.get(property);\n            },\n            set: trueFn,\n            deleteProperty: trueFn\n        };\n    },\n    ownKeys (_) {\n        return _.keys();\n    }\n};\nfunction resolveSource(s2) {\n    return !(s2 = typeof s2 === \"function\" ? s2() : s2) ? {} : s2;\n}\nfunction mergeProps(...sources) {\n    let proxy = false;\n    for(let i2 = 0; i2 < sources.length; i2++){\n        const s2 = sources[i2];\n        proxy = proxy || !!s2 && $PROXY in s2;\n        sources[i2] = typeof s2 === \"function\" ? (proxy = true, createMemo(s2)) : s2;\n    }\n    if (proxy) {\n        return new Proxy({\n            get (property) {\n                for(let i2 = sources.length - 1; i2 >= 0; i2--){\n                    const v = resolveSource(sources[i2])[property];\n                    if (v !== void 0) return v;\n                }\n            },\n            has (property) {\n                for(let i2 = sources.length - 1; i2 >= 0; i2--){\n                    if (property in resolveSource(sources[i2])) return true;\n                }\n                return false;\n            },\n            keys () {\n                const keys = [];\n                for(let i2 = 0; i2 < sources.length; i2++)keys.push(...Object.keys(resolveSource(sources[i2])));\n                return [\n                    ...new Set(keys)\n                ];\n            }\n        }, propTraps);\n    }\n    const target = {};\n    for(let i2 = sources.length - 1; i2 >= 0; i2--){\n        if (sources[i2]) {\n            const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);\n            for(const key in descriptors){\n                if (key in target) continue;\n                Object.defineProperty(target, key, {\n                    enumerable: true,\n                    get () {\n                        for(let i3 = sources.length - 1; i3 >= 0; i3--){\n                            const v = (sources[i3] || {})[key];\n                            if (v !== void 0) return v;\n                        }\n                    }\n                });\n            }\n        }\n    }\n    return target;\n}\nfunction splitProps(props, ...keys) {\n    const blocked = new Set(keys.flat());\n    if ($PROXY in props) {\n        const res = keys.map((k)=>{\n            return new Proxy({\n                get (property) {\n                    return k.includes(property) ? props[property] : void 0;\n                },\n                has (property) {\n                    return k.includes(property) && property in props;\n                },\n                keys () {\n                    return k.filter((property)=>property in props);\n                }\n            }, propTraps);\n        });\n        res.push(new Proxy({\n            get (property) {\n                return blocked.has(property) ? void 0 : props[property];\n            },\n            has (property) {\n                return blocked.has(property) ? false : property in props;\n            },\n            keys () {\n                return Object.keys(props).filter((k)=>!blocked.has(k));\n            }\n        }, propTraps));\n        return res;\n    }\n    const descriptors = Object.getOwnPropertyDescriptors(props);\n    keys.push(Object.keys(descriptors).filter((k)=>!blocked.has(k)));\n    return keys.map((k)=>{\n        const clone = {};\n        for(let i2 = 0; i2 < k.length; i2++){\n            const key = k[i2];\n            if (!(key in props)) continue;\n            Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {\n                get () {\n                    return props[key];\n                },\n                set () {\n                    return true;\n                },\n                enumerable: true\n            });\n        }\n        return clone;\n    });\n}\nfunction For(props) {\n    const fallback = \"fallback\" in props && {\n        fallback: ()=>props.fallback\n    };\n    return createMemo(mapArray(()=>props.each, props.children, fallback || void 0));\n}\nfunction Show(props) {\n    let strictEqual = false;\n    const keyed = props.keyed;\n    const condition = createMemo(()=>props.when, void 0, {\n        equals: (a2, b)=>strictEqual ? a2 === b : !a2 === !b\n    });\n    return createMemo(()=>{\n        const c2 = condition();\n        if (c2) {\n            const child = props.children;\n            const fn = typeof child === \"function\" && child.length > 0;\n            strictEqual = keyed || fn;\n            return fn ? untrack(()=>child(c2)) : child;\n        }\n        return props.fallback;\n    }, void 0, void 0);\n}\nfunction Switch(props) {\n    let strictEqual = false;\n    let keyed = false;\n    const equals = (a2, b)=>a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];\n    const conditions = children(()=>props.children), evalConditions = createMemo(()=>{\n        let conds = conditions();\n        if (!Array.isArray(conds)) conds = [\n            conds\n        ];\n        for(let i2 = 0; i2 < conds.length; i2++){\n            const c2 = conds[i2].when;\n            if (c2) {\n                keyed = !!conds[i2].keyed;\n                return [\n                    i2,\n                    c2,\n                    conds[i2]\n                ];\n            }\n        }\n        return [\n            -1\n        ];\n    }, void 0, {\n        equals\n    });\n    return createMemo(()=>{\n        const [index, when, cond] = evalConditions();\n        if (index < 0) return props.fallback;\n        const c2 = cond.children;\n        const fn = typeof c2 === \"function\" && c2.length > 0;\n        strictEqual = keyed || fn;\n        return fn ? untrack(()=>c2(when)) : c2;\n    }, void 0, void 0);\n}\nfunction Match(props) {\n    return props;\n}\nconst booleans = [\n    \"allowfullscreen\",\n    \"async\",\n    \"autofocus\",\n    \"autoplay\",\n    \"checked\",\n    \"controls\",\n    \"default\",\n    \"disabled\",\n    \"formnovalidate\",\n    \"hidden\",\n    \"indeterminate\",\n    \"ismap\",\n    \"loop\",\n    \"multiple\",\n    \"muted\",\n    \"nomodule\",\n    \"novalidate\",\n    \"open\",\n    \"playsinline\",\n    \"readonly\",\n    \"required\",\n    \"reversed\",\n    \"seamless\",\n    \"selected\"\n];\nconst Properties = /* @__PURE__ */ new Set([\n    \"className\",\n    \"value\",\n    \"readOnly\",\n    \"formNoValidate\",\n    \"isMap\",\n    \"noModule\",\n    \"playsInline\",\n    ...booleans\n]);\nconst ChildProperties = /* @__PURE__ */ new Set([\n    \"innerHTML\",\n    \"textContent\",\n    \"innerText\",\n    \"children\"\n]);\nconst Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    className: \"class\",\n    htmlFor: \"for\"\n});\nconst PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    class: \"className\",\n    formnovalidate: \"formNoValidate\",\n    ismap: \"isMap\",\n    nomodule: \"noModule\",\n    playsinline: \"playsInline\",\n    readonly: \"readOnly\"\n});\nconst DelegatedEvents = /* @__PURE__ */ new Set([\n    \"beforeinput\",\n    \"click\",\n    \"dblclick\",\n    \"contextmenu\",\n    \"focusin\",\n    \"focusout\",\n    \"input\",\n    \"keydown\",\n    \"keyup\",\n    \"mousedown\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\",\n    \"mouseup\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerout\",\n    \"pointerover\",\n    \"pointerup\",\n    \"touchend\",\n    \"touchmove\",\n    \"touchstart\"\n]);\nconst SVGElements = /* @__PURE__ */ new Set([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animate\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"circle\",\n    \"clipPath\",\n    \"color-profile\",\n    \"cursor\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"filter\",\n    \"font\",\n    \"font-face\",\n    \"font-face-format\",\n    \"font-face-name\",\n    \"font-face-src\",\n    \"font-face-uri\",\n    \"foreignObject\",\n    \"g\",\n    \"glyph\",\n    \"glyphRef\",\n    \"hkern\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"missing-glyph\",\n    \"mpath\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"set\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"textPath\",\n    \"tref\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n    \"vkern\"\n]);\nconst SVGNamespace = {\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\"\n};\nfunction reconcileArrays(parentNode, a2, b) {\n    let bLength = b.length, aEnd = a2.length, bEnd = bLength, aStart = 0, bStart = 0, after = a2[aEnd - 1].nextSibling, map = null;\n    while(aStart < aEnd || bStart < bEnd){\n        if (a2[aStart] === b[bStart]) {\n            aStart++;\n            bStart++;\n            continue;\n        }\n        while(a2[aEnd - 1] === b[bEnd - 1]){\n            aEnd--;\n            bEnd--;\n        }\n        if (aEnd === aStart) {\n            const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;\n            while(bStart < bEnd)parentNode.insertBefore(b[bStart++], node);\n        } else if (bEnd === bStart) {\n            while(aStart < aEnd){\n                if (!map || !map.has(a2[aStart])) a2[aStart].remove();\n                aStart++;\n            }\n        } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {\n            const node = a2[--aEnd].nextSibling;\n            parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);\n            parentNode.insertBefore(b[--bEnd], node);\n            a2[aEnd] = b[bEnd];\n        } else {\n            if (!map) {\n                map = /* @__PURE__ */ new Map();\n                let i2 = bStart;\n                while(i2 < bEnd)map.set(b[i2], i2++);\n            }\n            const index = map.get(a2[aStart]);\n            if (index != null) {\n                if (bStart < index && index < bEnd) {\n                    let i2 = aStart, sequence = 1, t2;\n                    while(++i2 < aEnd && i2 < bEnd){\n                        if ((t2 = map.get(a2[i2])) == null || t2 !== index + sequence) break;\n                        sequence++;\n                    }\n                    if (sequence > index - bStart) {\n                        const node = a2[aStart];\n                        while(bStart < index)parentNode.insertBefore(b[bStart++], node);\n                    } else parentNode.replaceChild(b[bStart++], a2[aStart++]);\n                } else aStart++;\n            } else a2[aStart++].remove();\n        }\n    }\n}\nconst $$EVENTS = \"_$DX_DELEGATE\";\nfunction render(code, element, init, options = {}) {\n    let disposer;\n    createRoot((dispose2)=>{\n        disposer = dispose2;\n        element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);\n    }, options.owner);\n    return ()=>{\n        disposer();\n        element.textContent = \"\";\n    };\n}\nfunction template$1(html, check, isSVG) {\n    if (true) {\n        return null;\n    }\n    const t2 = document.createElement(\"template\");\n    t2.innerHTML = html;\n    let node = t2.content.firstChild;\n    if (isSVG) node = node.firstChild;\n    return node;\n}\nfunction delegateEvents(eventNames, document2 = window.document) {\n    const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());\n    for(let i2 = 0, l2 = eventNames.length; i2 < l2; i2++){\n        const name = eventNames[i2];\n        if (!e2.has(name)) {\n            e2.add(name);\n            document2.addEventListener(name, eventHandler);\n        }\n    }\n}\nfunction setAttribute(node, name, value) {\n    if (value == null) node.removeAttribute(name);\n    else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n    if (value == null) node.removeAttributeNS(namespace, name);\n    else node.setAttributeNS(namespace, name, value);\n}\nfunction className(node, value) {\n    if (value == null) node.removeAttribute(\"class\");\n    else node.className = value;\n}\nfunction addEventListener(node, name, handler, delegate) {\n    if (delegate) {\n        if (Array.isArray(handler)) {\n            node[`$$${name}`] = handler[0];\n            node[`$$${name}Data`] = handler[1];\n        } else node[`$$${name}`] = handler;\n    } else if (Array.isArray(handler)) {\n        const handlerFn = handler[0];\n        node.addEventListener(name, handler[0] = (e2)=>handlerFn.call(node, handler[1], e2));\n    } else node.addEventListener(name, handler);\n}\nfunction classList(node, value, prev = {}) {\n    const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);\n    let i2, len;\n    for(i2 = 0, len = prevKeys.length; i2 < len; i2++){\n        const key = prevKeys[i2];\n        if (!key || key === \"undefined\" || value[key]) continue;\n        toggleClassKey(node, key, false);\n        delete prev[key];\n    }\n    for(i2 = 0, len = classKeys.length; i2 < len; i2++){\n        const key = classKeys[i2], classValue = !!value[key];\n        if (!key || key === \"undefined\" || prev[key] === classValue || !classValue) continue;\n        toggleClassKey(node, key, true);\n        prev[key] = classValue;\n    }\n    return prev;\n}\nfunction style(node, value, prev) {\n    if (!value) return prev ? setAttribute(node, \"style\") : value;\n    const nodeStyle = node.style;\n    if (typeof value === \"string\") return nodeStyle.cssText = value;\n    typeof prev === \"string\" && (nodeStyle.cssText = prev = void 0);\n    prev || (prev = {});\n    value || (value = {});\n    let v, s2;\n    for(s2 in prev){\n        value[s2] == null && nodeStyle.removeProperty(s2);\n        delete prev[s2];\n    }\n    for(s2 in value){\n        v = value[s2];\n        if (v !== prev[s2]) {\n            nodeStyle.setProperty(s2, v);\n            prev[s2] = v;\n        }\n    }\n    return prev;\n}\nfunction spread(node, props = {}, isSVG, skipChildren) {\n    const prevProps = {};\n    if (!skipChildren) {\n        createRenderEffect(()=>prevProps.children = insertExpression(node, props.children, prevProps.children));\n    }\n    createRenderEffect(()=>props.ref && props.ref(node));\n    createRenderEffect(()=>assign(node, props, isSVG, true, prevProps, true));\n    return prevProps;\n}\nfunction use(fn, element, arg) {\n    return untrack(()=>fn(element, arg));\n}\nfunction insert(parent, accessor, marker, initial) {\n    if (marker !== void 0 && !initial) initial = [];\n    if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n    createRenderEffect((current)=>insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {\n    props || (props = {});\n    for(const prop in prevProps){\n        if (!(prop in props)) {\n            if (prop === \"children\") continue;\n            prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);\n        }\n    }\n    for(const prop in props){\n        if (prop === \"children\") {\n            if (!skipChildren) insertExpression(node, props.children);\n            continue;\n        }\n        const value = props[prop];\n        prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);\n    }\n}\nfunction getNextElement(template2) {\n    let node, key;\n    if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {\n        return template2.cloneNode(true);\n    }\n    if (sharedConfig.completed) sharedConfig.completed.add(node);\n    sharedConfig.registry.delete(key);\n    return node;\n}\nfunction toPropertyName(name) {\n    return name.toLowerCase().replace(/-([a-z])/g, (_, w)=>w.toUpperCase());\n}\nfunction toggleClassKey(node, key, value) {\n    const classNames = key.trim().split(/\\s+/);\n    for(let i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++)node.classList.toggle(classNames[i2], value);\n}\nfunction assignProp(node, prop, value, prev, isSVG, skipRef) {\n    let isCE, isProp, isChildProp;\n    if (prop === \"style\") return style(node, value, prev);\n    if (prop === \"classList\") return classList(node, value, prev);\n    if (value === prev) return prev;\n    if (prop === \"ref\") {\n        if (!skipRef) value(node);\n    } else if (prop.slice(0, 3) === \"on:\") {\n        const e2 = prop.slice(3);\n        prev && node.removeEventListener(e2, prev);\n        value && node.addEventListener(e2, value);\n    } else if (prop.slice(0, 10) === \"oncapture:\") {\n        const e2 = prop.slice(10);\n        prev && node.removeEventListener(e2, prev, true);\n        value && node.addEventListener(e2, value, true);\n    } else if (prop.slice(0, 2) === \"on\") {\n        const name = prop.slice(2).toLowerCase();\n        const delegate = DelegatedEvents.has(name);\n        if (!delegate && prev) {\n            const h2 = Array.isArray(prev) ? prev[0] : prev;\n            node.removeEventListener(name, h2);\n        }\n        if (delegate || value) {\n            addEventListener(node, name, value, delegate);\n            delegate && delegateEvents([\n                name\n            ]);\n        }\n    } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes(\"-\"))) {\n        if (prop === \"class\" || prop === \"className\") className(node, value);\n        else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;\n        else node[PropAliases[prop] || prop] = value;\n    } else {\n        const ns = isSVG && prop.indexOf(\":\") > -1 && SVGNamespace[prop.split(\":\")[0]];\n        if (ns) setAttributeNS(node, ns, prop, value);\n        else setAttribute(node, Aliases[prop] || prop, value);\n    }\n    return value;\n}\nfunction eventHandler(e2) {\n    const key = `$$${e2.type}`;\n    let node = e2.composedPath && e2.composedPath()[0] || e2.target;\n    if (e2.target !== node) {\n        Object.defineProperty(e2, \"target\", {\n            configurable: true,\n            value: node\n        });\n    }\n    Object.defineProperty(e2, \"currentTarget\", {\n        configurable: true,\n        get () {\n            return node || document;\n        }\n    });\n    if (sharedConfig.registry && !sharedConfig.done) {\n        sharedConfig.done = true;\n        document.querySelectorAll(\"[id^=pl-]\").forEach((elem)=>{\n            while(elem && elem.nodeType !== 8 && elem.nodeValue !== \"pl-\" + e2){\n                let x = elem.nextSibling;\n                elem.remove();\n                elem = x;\n            }\n            elem && elem.remove();\n        });\n    }\n    while(node){\n        const handler = node[key];\n        if (handler && !node.disabled) {\n            const data = node[`${key}Data`];\n            data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);\n            if (e2.cancelBubble) return;\n        }\n        node = node._$host || node.parentNode || node.host;\n    }\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n    if (sharedConfig.context && !current) current = [\n        ...parent.childNodes\n    ];\n    while(typeof current === \"function\")current = current();\n    if (value === current) return current;\n    const t2 = typeof value, multi = marker !== void 0;\n    parent = multi && current[0] && current[0].parentNode || parent;\n    if (t2 === \"string\" || t2 === \"number\") {\n        if (sharedConfig.context) return current;\n        if (t2 === \"number\") value = value.toString();\n        if (multi) {\n            let node = current[0];\n            if (node && node.nodeType === 3) {\n                node.data = value;\n            } else node = document.createTextNode(value);\n            current = cleanChildren(parent, current, marker, node);\n        } else {\n            if (current !== \"\" && typeof current === \"string\") {\n                current = parent.firstChild.data = value;\n            } else current = parent.textContent = value;\n        }\n    } else if (value == null || t2 === \"boolean\") {\n        if (sharedConfig.context) return current;\n        current = cleanChildren(parent, current, marker);\n    } else if (t2 === \"function\") {\n        createRenderEffect(()=>{\n            let v = value();\n            while(typeof v === \"function\")v = v();\n            current = insertExpression(parent, v, current, marker);\n        });\n        return ()=>current;\n    } else if (Array.isArray(value)) {\n        const array = [];\n        const currentArray = current && Array.isArray(current);\n        if (normalizeIncomingArray(array, value, current, unwrapArray)) {\n            createRenderEffect(()=>current = insertExpression(parent, array, current, marker, true));\n            return ()=>current;\n        }\n        if (sharedConfig.context) {\n            if (!array.length) return current;\n            for(let i2 = 0; i2 < array.length; i2++){\n                if (array[i2].parentNode) return current = array;\n            }\n        }\n        if (array.length === 0) {\n            current = cleanChildren(parent, current, marker);\n            if (multi) return current;\n        } else if (currentArray) {\n            if (current.length === 0) {\n                appendNodes(parent, array, marker);\n            } else reconcileArrays(parent, current, array);\n        } else {\n            current && cleanChildren(parent);\n            appendNodes(parent, array);\n        }\n        current = array;\n    } else if (value instanceof Node) {\n        if (sharedConfig.context && value.parentNode) return current = multi ? [\n            value\n        ] : value;\n        if (Array.isArray(current)) {\n            if (multi) return current = cleanChildren(parent, current, marker, value);\n            cleanChildren(parent, current, null, value);\n        } else if (current == null || current === \"\" || !parent.firstChild) {\n            parent.appendChild(value);\n        } else parent.replaceChild(value, parent.firstChild);\n        current = value;\n    } else ;\n    return current;\n}\nfunction normalizeIncomingArray(normalized, array, current, unwrap2) {\n    let dynamic = false;\n    for(let i2 = 0, len = array.length; i2 < len; i2++){\n        let item = array[i2], prev = current && current[i2];\n        if (item instanceof Node) {\n            normalized.push(item);\n        } else if (item == null || item === true || item === false) ;\n        else if (Array.isArray(item)) {\n            dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;\n        } else if (typeof item === \"function\") {\n            if (unwrap2) {\n                while(typeof item === \"function\")item = item();\n                dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [\n                    item\n                ], Array.isArray(prev) ? prev : [\n                    prev\n                ]) || dynamic;\n            } else {\n                normalized.push(item);\n                dynamic = true;\n            }\n        } else {\n            const value = String(item);\n            if (prev && prev.nodeType === 3 && prev.data === value) {\n                normalized.push(prev);\n            } else normalized.push(document.createTextNode(value));\n        }\n    }\n    return dynamic;\n}\nfunction appendNodes(parent, array, marker = null) {\n    for(let i2 = 0, len = array.length; i2 < len; i2++)parent.insertBefore(array[i2], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n    if (marker === void 0) return parent.textContent = \"\";\n    const node = replacement || document.createTextNode(\"\");\n    if (current.length) {\n        let inserted = false;\n        for(let i2 = current.length - 1; i2 >= 0; i2--){\n            const el = current[i2];\n            if (node !== el) {\n                const isParent = el.parentNode === parent;\n                if (!inserted && !i2) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);\n                else isParent && el.remove();\n            } else inserted = true;\n        }\n    } else parent.insertBefore(node, marker);\n    return [\n        node\n    ];\n}\nfunction getHydrationKey() {\n    const hydrate = sharedConfig.context;\n    return `${hydrate.id}${hydrate.count++}`;\n}\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nfunction createElement(tagName, isSVG = false) {\n    return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);\n}\nfunction Portal(props) {\n    const { useShadow } = props, marker = document.createTextNode(\"\"), mount = props.mount || document.body;\n    function renderPortal() {\n        if (sharedConfig.context) {\n            const [s2, set] = createSignal(false);\n            queueMicrotask(()=>set(true));\n            return ()=>s2() && props.children;\n        } else return ()=>props.children;\n    }\n    if (mount instanceof HTMLHeadElement) {\n        const [clean, setClean] = createSignal(false);\n        const cleanup = ()=>setClean(true);\n        createRoot((dispose2)=>insert(mount, ()=>!clean() ? renderPortal()() : dispose2(), null));\n        onCleanup(()=>{\n            if (sharedConfig.context) queueMicrotask(cleanup);\n            else cleanup();\n        });\n    } else {\n        const container = createElement(props.isSVG ? \"g\" : \"div\", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({\n            mode: \"open\"\n        }) : container;\n        Object.defineProperty(container, \"_$host\", {\n            get () {\n                return marker.parentNode;\n            },\n            configurable: true\n        });\n        insert(renderRoot, renderPortal());\n        mount.appendChild(container);\n        props.ref && props.ref(container);\n        onCleanup(()=>mount.removeChild(container));\n    }\n    return marker;\n}\nfunction Dynamic(props) {\n    const [p2, others] = splitProps(props, [\n        \"component\"\n    ]);\n    const cached = createMemo(()=>p2.component);\n    return createMemo(()=>{\n        const component = cached();\n        switch(typeof component){\n            case \"function\":\n                return untrack(()=>component(others));\n            case \"string\":\n                const isSvg = SVGElements.has(component);\n                const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);\n                spread(el, others, isSvg);\n                return el;\n        }\n    });\n}\nvar THEME = /* @__PURE__ */ ((THEME2)=>{\n    THEME2[\"DARK\"] = \"DARK\";\n    THEME2[\"LIGHT\"] = \"LIGHT\";\n    return THEME2;\n})(THEME || {});\nlet e = {\n    data: \"\"\n}, t = (t2)=> false ? 0 : t2 || e, l = /(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\\s*)/g, a = /\\/\\*[^]*?\\*\\/|  +/g, n = /\\n+/g, o = (e2, t2)=>{\n    let r = \"\", l2 = \"\", a2 = \"\";\n    for(let n2 in e2){\n        let c2 = e2[n2];\n        \"@\" == n2[0] ? \"i\" == n2[1] ? r = n2 + \" \" + c2 + \";\" : l2 += \"f\" == n2[1] ? o(c2, n2) : n2 + \"{\" + o(c2, \"k\" == n2[1] ? \"\" : t2) + \"}\" : \"object\" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3)=>n2.replace(/(^:.*)|([^,])+/g, (t3)=>/&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + \" \" + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, \"-$&\").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + \":\" + c2 + \";\");\n    }\n    return r + (t2 && a2 ? t2 + \"{\" + a2 + \"}\" : a2) + l2;\n}, c = {}, s = (e2)=>{\n    if (\"object\" == typeof e2) {\n        let t2 = \"\";\n        for(let r in e2)t2 += r + s(e2[r]);\n        return t2;\n    }\n    return e2;\n}, i = (e2, t2, r, i2, p2)=>{\n    let u2 = s(e2), d = c[u2] || (c[u2] = ((e3)=>{\n        let t3 = 0, r2 = 11;\n        for(; t3 < e3.length;)r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;\n        return \"go\" + r2;\n    })(u2));\n    if (!c[d]) {\n        let t3 = u2 !== e2 ? e2 : ((e3)=>{\n            let t4, r2, o2 = [\n                {}\n            ];\n            for(; t4 = l.exec(e3.replace(a, \"\"));)t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, \" \").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, \" \").trim();\n            return o2[0];\n        })(e2);\n        c[d] = o(p2 ? {\n            [\"@keyframes \" + d]: t3\n        } : t3, r ? \"\" : \".\" + d);\n    }\n    let f = r && c.g ? c.g : null;\n    return r && (c.g = c[d]), ((e3, t3, r2, l2)=>{\n        l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);\n    })(c[d], t2, i2, f), d;\n}, p = (e2, t2, r)=>e2.reduce((e3, l2, a2)=>{\n        let n2 = t2[a2];\n        if (n2 && n2.call) {\n            let e4 = n2(r), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;\n            n2 = t3 ? \".\" + t3 : e4 && \"object\" == typeof e4 ? e4.props ? \"\" : o(e4, \"\") : false === e4 ? \"\" : e4;\n        }\n        return e3 + l2 + (null == n2 ? \"\" : n2);\n    }, \"\");\nfunction u(e2) {\n    let r = this || {}, l2 = e2.call ? e2(r.p) : e2;\n    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce((e3, t2)=>Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l2, t(r.target), r.g, r.o, r.k);\n}\nu.bind({\n    g: 1\n});\nlet h = u.bind({\n    k: 1\n});\nconst ThemeContext = createContext();\nfunction ThemeProvider(props) {\n    return createComponent(ThemeContext.Provider, {\n        value: props.theme,\n        get children () {\n            return props.children;\n        }\n    });\n}\nfunction useTheme() {\n    return useContext(ThemeContext);\n}\nfunction makeStyled(tag) {\n    let _ctx = this || {};\n    return (...args)=>{\n        const Styled = (props)=>{\n            const theme = useContext(ThemeContext);\n            const withTheme = mergeProps(props, {\n                theme\n            });\n            const clone = mergeProps(withTheme, {\n                get class () {\n                    const pClass = withTheme.class, append = \"class\" in withTheme && /^go[0-9]+/.test(pClass);\n                    let className2 = u.apply({\n                        target: _ctx.target,\n                        o: append,\n                        p: withTheme,\n                        g: _ctx.g\n                    }, args);\n                    return [\n                        pClass,\n                        className2\n                    ].filter(Boolean).join(\" \");\n                }\n            });\n            const [local, newProps] = splitProps(clone, [\n                \"as\",\n                \"theme\"\n            ]);\n            const htmlProps = newProps;\n            const createTag = local.as || tag;\n            let el;\n            if (typeof createTag === \"function\") {\n                el = createTag(htmlProps);\n            } else {\n                {\n                    if (_ctx.g == 1) {\n                        el = document.createElement(createTag);\n                        spread(el, htmlProps);\n                    } else {\n                        el = Dynamic(mergeProps({\n                            component: createTag\n                        }, htmlProps));\n                    }\n                }\n            }\n            return el;\n        };\n        Styled.class = (props)=>{\n            return untrack(()=>{\n                return u.apply({\n                    target: _ctx.target,\n                    p: props,\n                    g: _ctx.g\n                }, args);\n            });\n        };\n        return Styled;\n    };\n}\nconst styled = new Proxy(makeStyled, {\n    get (target, tag) {\n        return target(tag);\n    }\n});\nfunction createGlobalStyles() {\n    const fn = makeStyled.call({\n        g: 1\n    }, \"div\").apply(null, arguments);\n    return function GlobalStyles2(props) {\n        fn(props);\n        return null;\n    };\n}\nconst globalStylesTag = \"tc-root\";\nconst disableScrollClass = \"tc-disable-scroll\";\nconst usingMouseClass = \"tc-using-mouse\";\nconst GlobalStyles = ()=>{\n    document.body.addEventListener(\"mousedown\", ()=>document.body.classList.add(usingMouseClass));\n    document.body.addEventListener(\"keydown\", (event)=>{\n        if (event.key === \"Tab\") {\n            document.body.classList.remove(usingMouseClass);\n        }\n    });\n    const Styles = createGlobalStyles`\n    ${globalStylesTag} * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        \n        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;        \n        -webkit-tap-highlight-color: transparent;\n    }\n    \n    ${globalStylesTag} img {\n      -webkit-user-select: none;\n      -webkit-touch-callout: none;\n    }   \n \n    ${globalStylesTag} *:focus {\n        outline: #08f auto 2px;\n    }\n    \n    ${globalStylesTag} li {\n        list-style: none;\n    }\n    \n    ${globalStylesTag} button {\n        outline: none;\n    }\n    \n    body.${disableScrollClass} {\n        position: fixed; \n        overflow-y: scroll;\n        right: 0;\n        left: 0;\n    }\n    \n    body.${usingMouseClass} ${globalStylesTag} *:focus {\n        outline: none;\n    }\n`;\n    return createComponent(Styles, {});\n};\nfunction hexToRgb(hex) {\n    if (hex[0] === \"#\") {\n        hex = hex.slice(1);\n    }\n    const bigint = parseInt(hex, 16);\n    const r = bigint >> 16 & 255;\n    const g = bigint >> 8 & 255;\n    const b = bigint & 255;\n    return [\n        r,\n        g,\n        b\n    ].join(\",\");\n}\nfunction rgba(color, opacity) {\n    if (color[0] === \"#\") {\n        color = hexToRgb(color);\n    }\n    return `rgba(${color}, ${opacity})`;\n}\nfunction toPx(value) {\n    return value.toString() + \"px\";\n}\nconst _InMemoryStorage = class {\n    constructor(){\n        __publicField(this, \"storage\", {});\n    }\n    static getInstance() {\n        if (!_InMemoryStorage.instance) {\n            _InMemoryStorage.instance = new _InMemoryStorage();\n        }\n        return _InMemoryStorage.instance;\n    }\n    get length() {\n        return Object.keys(this.storage).length;\n    }\n    clear() {\n        this.storage = {};\n    }\n    getItem(key) {\n        var _a2;\n        return (_a2 = this.storage[key]) != null ? _a2 : null;\n    }\n    key(index) {\n        var _a2;\n        const keys = Object.keys(this.storage);\n        if (index < 0 || index >= keys.length) {\n            return null;\n        }\n        return (_a2 = keys[index]) != null ? _a2 : null;\n    }\n    removeItem(key) {\n        delete this.storage[key];\n    }\n    setItem(key, value) {\n        this.storage[key] = value;\n    }\n};\nlet InMemoryStorage = _InMemoryStorage;\n__publicField(InMemoryStorage, \"instance\");\nclass TonConnectUIError extends _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnectError {\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, TonConnectUIError.prototype);\n    }\n}\nfunction logDebug(...args) {\n    {\n        try {\n            console.debug(\"[TON_CONNECT_UI]\", ...args);\n        } catch (e2) {}\n    }\n}\nfunction logError(...args) {\n    {\n        try {\n            console.error(\"[TON_CONNECT_UI]\", ...args);\n        } catch (e2) {}\n    }\n}\nfunction logWarning(...args) {\n    {\n        try {\n            console.warn(\"[TON_CONNECT_UI]\", ...args);\n        } catch (e2) {}\n    }\n}\nfunction openLink(href, target = \"_self\") {\n    logDebug(\"openLink\", href, target);\n    window.open(href, target, \"noopener noreferrer\");\n}\nfunction openLinkBlank(href) {\n    openLink(href, \"_blank\");\n}\nfunction openDeeplinkWithFallback(href, fallback) {\n    const doFallback = ()=>{\n        if (isBrowser(\"safari\") || isOS(\"android\") && isBrowser(\"firefox\")) {\n            return;\n        }\n        fallback();\n    };\n    const fallbackTimeout = setTimeout(()=>doFallback(), 200);\n    window.addEventListener(\"blur\", ()=>clearTimeout(fallbackTimeout), {\n        once: true\n    });\n    openLink(href, \"_self\");\n}\nfunction getSystemTheme() {\n    if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: light)\").matches) {\n        return THEME.LIGHT;\n    }\n    return THEME.DARK;\n}\nfunction subscribeToThemeChange(callback) {\n    const handler = (event)=>callback(event.matches ? THEME.DARK : THEME.LIGHT);\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", handler);\n    return ()=>window.matchMedia(\"(prefers-color-scheme: dark)\").removeEventListener(\"change\", handler);\n}\nfunction disableScroll() {\n    if (document.documentElement.scrollHeight === document.documentElement.clientHeight) {\n        return;\n    }\n    document.body.style.top = toPx(-document.documentElement.scrollTop);\n    document.body.classList.add(disableScrollClass);\n}\nfunction enableScroll() {\n    document.body.classList.remove(disableScrollClass);\n    document.documentElement.scrollTo({\n        top: -parseFloat(getComputedStyle(document.body).top)\n    });\n    document.body.style.top = \"auto\";\n}\nfunction fixMobileSafariActiveTransition() {\n    if (!document.body.hasAttribute(\"ontouchstart\")) {\n        document.body.setAttribute(\"ontouchstart\", \"\");\n    }\n}\nfunction defineStylesRoot() {\n    customElements.define(globalStylesTag, class TcRootElement extends HTMLElement {\n    });\n}\nfunction createMacrotask(callback) {\n    return __async(this, null, function*() {\n        yield new Promise((resolve)=>requestAnimationFrame(resolve));\n        callback();\n    });\n}\nfunction createMacrotaskAsync(callback) {\n    return __async(this, null, function*() {\n        yield new Promise((resolve)=>requestAnimationFrame(resolve));\n        return callback();\n    });\n}\nfunction preloadImages(images) {\n    if (document.readyState !== \"complete\") {\n        window.addEventListener(\"load\", ()=>createMacrotask(()=>preloadImages(images)), {\n            once: true\n        });\n    } else {\n        images.forEach((img)=>{\n            const node = new window.Image();\n            node.src = img;\n        });\n    }\n}\nfunction getWindow$1() {\n    if (false) {}\n    return void 0;\n}\nfunction tryGetLocalStorage() {\n    if (isLocalStorageAvailable()) {\n        return localStorage;\n    }\n    if (isNodeJs()) {\n        throw new TonConnectUIError(\"`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector\");\n    }\n    return InMemoryStorage.getInstance();\n}\nfunction isLocalStorageAvailable() {\n    try {\n        return typeof localStorage !== \"undefined\";\n    } catch (e2) {\n        return false;\n    }\n}\nfunction isNodeJs() {\n    return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n}\nfunction getUserAgent() {\n    var _a2, _b2, _c2;\n    const results = new ua_parser_js__WEBPACK_IMPORTED_MODULE_1__().getResult();\n    const osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();\n    const deviceModel = (_b2 = results.device.model) == null ? void 0 : _b2.toLowerCase();\n    let os;\n    switch(true){\n        case deviceModel === \"ipad\":\n            os = \"ipad\";\n            break;\n        case osName === \"ios\":\n            os = \"ios\";\n            break;\n        case osName === \"android\":\n            os = \"android\";\n            break;\n        case osName === \"mac os\":\n            os = \"macos\";\n            break;\n        case osName === \"linux\":\n            os = \"linux\";\n            break;\n        case osName == null ? void 0 : osName.includes(\"windows\"):\n            os = \"windows\";\n            break;\n    }\n    const browserName = (_c2 = results.browser.name) == null ? void 0 : _c2.toLowerCase();\n    let browser;\n    switch(true){\n        case browserName === \"chrome\":\n            browser = \"chrome\";\n            break;\n        case browserName === \"firefox\":\n            browser = \"firefox\";\n            break;\n        case browserName == null ? void 0 : browserName.includes(\"safari\"):\n            browser = \"safari\";\n            break;\n        case browserName == null ? void 0 : browserName.includes(\"opera\"):\n            browser = \"opera\";\n            break;\n    }\n    return {\n        os,\n        browser\n    };\n}\nfunction isOS(...os) {\n    return os.includes(getUserAgent().os);\n}\nfunction isBrowser(...browser) {\n    return browser.includes(getUserAgent().browser);\n}\nfunction toDeeplink(universalLink, deeplink) {\n    const url = new URL(universalLink);\n    return deeplink + url.search;\n}\nclass WalletInfoStorage {\n    constructor(){\n        __publicField(this, \"localStorage\");\n        __publicField(this, \"storageKey\", \"ton-connect-ui_wallet-info\");\n        this.localStorage = tryGetLocalStorage();\n    }\n    setWalletInfo(walletInfo) {\n        this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));\n    }\n    getWalletInfo() {\n        const walletInfoString = this.localStorage.getItem(this.storageKey);\n        if (!walletInfoString) {\n            return null;\n        }\n        return JSON.parse(walletInfoString);\n    }\n    removeWalletInfo() {\n        this.localStorage.removeItem(this.storageKey);\n    }\n}\nclass PreferredWalletStorage {\n    constructor(){\n        __publicField(this, \"localStorage\");\n        __publicField(this, \"storageKey\", \"ton-connect-ui_preferred-wallet\");\n        this.localStorage = tryGetLocalStorage();\n    }\n    setPreferredWalletAppName(name) {\n        this.localStorage.setItem(this.storageKey, name);\n    }\n    getPreferredWalletAppName() {\n        return this.localStorage.getItem(this.storageKey) || void 0;\n    }\n}\nclass LastSelectedWalletInfoStorage {\n    constructor(){\n        __publicField(this, \"localStorage\");\n        __publicField(this, \"storageKey\", \"ton-connect-ui_last-selected-wallet-info\");\n        this.localStorage = tryGetLocalStorage();\n    }\n    setLastSelectedWalletInfo(walletInfo) {\n        this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));\n    }\n    getLastSelectedWalletInfo() {\n        const walletInfoString = this.localStorage.getItem(this.storageKey);\n        if (!walletInfoString) {\n            return null;\n        }\n        return JSON.parse(walletInfoString);\n    }\n    removeLastSelectedWalletInfo() {\n        this.localStorage.removeItem(this.storageKey);\n    }\n}\nconst [walletsModalState, setWalletsModalState] = createSignal({\n    status: \"closed\",\n    closeReason: null\n});\nconst getWalletsModalIsOpened = createMemo(()=>walletsModalState().status === \"opened\");\nconst [singleWalletModalState, setSingleWalletModalState] = createSignal({\n    status: \"closed\",\n    closeReason: null\n});\nconst getSingleWalletModalIsOpened = createMemo(()=>singleWalletModalState().status === \"opened\");\nconst getSingleWalletModalWalletInfo = createMemo(()=>{\n    const state = singleWalletModalState();\n    if (state.status === \"opened\") {\n        return state.walletInfo;\n    }\n    return null;\n});\nlet lastSelectedWalletInfoStorage =  false ? 0 : void 0;\nconst [lastSelectedWalletInfo, _setLastSelectedWalletInfo] = createSignal((lastSelectedWalletInfoStorage == null ? void 0 : lastSelectedWalletInfoStorage.getLastSelectedWalletInfo()) || null);\nconst setLastSelectedWalletInfo = (walletInfo)=>{\n    if (!lastSelectedWalletInfoStorage) {\n        lastSelectedWalletInfoStorage = new LastSelectedWalletInfoStorage();\n    }\n    if (walletInfo) {\n        lastSelectedWalletInfoStorage.setLastSelectedWalletInfo(walletInfo);\n    } else {\n        lastSelectedWalletInfoStorage.removeLastSelectedWalletInfo();\n    }\n    _setLastSelectedWalletInfo(walletInfo);\n};\nconst [action, setAction] = createSignal(null);\nconst common$1 = {\n    close: \"Close\",\n    openWallet: \"Open wallet\",\n    copyLink: \"Copy Link\",\n    linkCopied: \"Link Copied\",\n    copied: \"Copied\",\n    yourWallet: \"Your Wallet\",\n    retry: \"Retry\",\n    get: \"GET\",\n    mobile: \"Mobile\",\n    browserExtension: \"Browser Extension\",\n    desktop: \"Desktop\"\n};\nconst button$1 = {\n    connectWallet: \"Connect Wallet\",\n    dropdown: {\n        copy: \"Copy address\",\n        copied: \"Address copied!\",\n        disconnect: \"Disconnect\"\n    }\n};\nconst notifications$1 = {\n    confirm: {\n        header: \"Open {{ name }} to\\xa0confirm the\\xa0transaction.\"\n    },\n    transactionSent: {\n        header: \"Transaction sent\",\n        text: \"Your transaction\\xa0will be\\xa0processed in\\xa0a\\xa0few seconds.\"\n    },\n    transactionCanceled: {\n        header: \"Transaction canceled\",\n        text: \"There will be no changes to\\xa0your account.\"\n    }\n};\nconst walletItem$1 = {\n    walletOn: \"Wallet in\",\n    recent: \"Recent\",\n    installed: \"Installed\",\n    popular: \"Popular\"\n};\nconst walletModal$1 = {\n    loading: \"Loading wallets\",\n    wallets: \"Wallets\",\n    mobileUniversalModal: {\n        connectYourWallet: \"Connect your TON\\xa0wallet\",\n        openWalletOnTelegramOrSelect: \"Use Wallet in Telegram or choose other application\",\n        openWalletOnTelegram: \"Connect Wallet in Telegram\",\n        chooseOtherApplication: \"Choose other application\",\n        openLink: \"Open Link\",\n        scan: \"Scan with your mobile\\xa0wallet\"\n    },\n    desktopUniversalModal: {\n        connectYourWallet: \"Connect your TON wallet\",\n        scan: \"Scan with your mobile wallet\",\n        availableWallets: \"Available wallets\"\n    },\n    mobileConnectionModal: {\n        showQR: \"Show QR Code\",\n        scanQR: \"Scan the\\xa0QR code below with your phone’s\\xa0or\\xa0{{ name }}’s camera\",\n        missingFeatures: \"Please update {{ name }}, your version does not support required features for this dApp\",\n        notSupportedWallet: \"{{ name }} doesn’t support the requested action. Please connect another wallet that supports it\",\n        continueIn: \"Continue in {{ name }}…\",\n        updateWallet: \"Update {{ name }}\",\n        chooseAnotherWallet: \"Choose Another Wallet\",\n        connectionDeclined: \"Connection declined\"\n    },\n    desktopConnectionModal: {\n        scanQR: \"Scan the\\xa0QR code below with your phone’s\\xa0or\\xa0{{ name }}’s camera\",\n        continueInExtension: \"Continue in\\xa0{{ name }} browser extension…\",\n        dontHaveExtension: \"Seems you don't have installed {{ name }}\\xa0browser\\xa0extension\",\n        missingFeatures: \"Please update {{ name }}, your version does not support required features for this dApp\",\n        notSupportedWallet: \"{{ name }} doesn’t support the requested action. Please connect another wallet that supports it\",\n        getWallet: \"Get {{ name }}\",\n        updateWallet: \"Update {{ name }}\",\n        chooseAnotherWallet: \"Choose Another Wallet\",\n        continueOnDesktop: \"Continue in\\xa0{{ name }} on desktop…\",\n        openWalletOnTelegram: \"Connect Wallet in Telegram on desktop\",\n        connectionDeclined: \"Connection declined\"\n    },\n    infoModal: {\n        whatIsAWallet: \"What is a wallet\",\n        secureDigitalAssets: \"Secure digital assets storage\",\n        walletProtects: \"A wallet protects and manages your digital assets\\xa0including TON, tokens and collectables.\",\n        controlIdentity: \"Control your Web3 identity\",\n        manageIdentity: \"Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in\\xa0the\\xa0blockchain ecosystem.\",\n        effortlessCryptoTransactions: \"Effortless crypto transactions\",\n        easilySend: \"Easily send, receive, monitor your cryptocurrencies.\\xa0Streamline your operations with\\xa0decentralized applications.\",\n        getAWallet: \"Get a Wallet\"\n    },\n    allWallets: {\n        walletsBelowNotSupported: \"The wallets below don’t support all features of\\xa0the connected service. You can use your recovery phrase in one of the supported wallets above.\",\n        walletNotSupportService: \"{{ name }} doesn’t support connected service\"\n    }\n};\nconst actionModal$1 = {\n    confirmTransaction: {\n        header: \"Confirm the\\xa0transaction in\\xa0{{ name }}\",\n        text: \"It will only take a\\xa0moment.\"\n    },\n    transactionSent: \"$notifications.transactionSent\",\n    transactionCanceled: \"$notifications.transactionCanceled\"\n};\nconst en = {\n    common: common$1,\n    button: button$1,\n    notifications: notifications$1,\n    walletItem: walletItem$1,\n    walletModal: walletModal$1,\n    actionModal: actionModal$1\n};\nconst common = {\n    close: \"Закрыть\",\n    openWallet: \"Открыть кошелёк\",\n    copyLink: \"Скопировать\",\n    linkCopied: \"Ссылка скопирована\",\n    copied: \"Скопировано\",\n    yourWallet: \"Ваш кошелёк\",\n    retry: \"Повторить\",\n    get: \"Скачать\",\n    mobile: \"Мобильный\",\n    browserExtension: \"Расширение\",\n    desktop: \"Десктоп\"\n};\nconst button = {\n    connectWallet: \"Подключить кошелёк\",\n    dropdown: {\n        copy: \"Скопировать адрес\",\n        copied: \"Адрес скопирован!\",\n        disconnect: \"Отключить кошелёк\"\n    }\n};\nconst notifications = {\n    confirm: {\n        header: \"Откройте {{ name }}, чтобы\\xa0подтвердить транзакцию.\"\n    },\n    transactionSent: {\n        header: \"Транзакция отправлена\",\n        text: \"Ваша транзакция\\xa0будет обработана через\\xa0несколько секунд.\"\n    },\n    transactionCanceled: {\n        header: \"Транзакция отменена\",\n        text: \"Состояние вашего счёта не\\xa0изменится.\"\n    }\n};\nconst walletItem = {\n    walletOn: \"Wallet в\",\n    recent: \"Недавний\",\n    installed: \"Установлен\",\n    popular: \"Популярен\"\n};\nconst walletModal = {\n    loading: \"Кошельки загружаются\",\n    wallets: \"Кошельки\",\n    mobileUniversalModal: {\n        connectYourWallet: \"Подключите TON\\xa0кошелёк\",\n        openWalletOnTelegramOrSelect: \"Подключите Wallet в\\xa0Telegram или\\xa0выберете другое приложение\",\n        openWalletOnTelegram: \"Открыть Wallet в Telegram\",\n        chooseOtherApplication: \"Выберите другое приложение\",\n        openLink: \"Открыть\",\n        scan: \"Отсканируйте камерой вашего\\xa0телефона\"\n    },\n    desktopUniversalModal: {\n        connectYourWallet: \"Подключите TON кошелёк\",\n        scan: \"Отсканируйте QR-код камерой вашего\\xa0телефона\",\n        availableWallets: \"Доступные кошельки\"\n    },\n    mobileConnectionModal: {\n        showQR: \"Показать QR-код\",\n        scanQR: \"Отсканируйте QR-код ниже камерой в\\xa0приложении {{ name }}, или\\xa0камерой телефона\",\n        missingFeatures: \"Обновите {{ name }}, ваша версия не поддерживает необходимые функции для этого dApp\",\n        notSupportedWallet: \"{{ name }} не поддерживает запрошенное действие. Пожалуйста, подключите другой кошелёк, который поддерживает это\",\n        continueIn: \"Продолжите в {{ name }}…\",\n        updateWallet: \"Обновить {{ name }}\",\n        chooseAnotherWallet: \"Выбрать другой кошелёк\",\n        connectionDeclined: \"Подключение отклонено\"\n    },\n    desktopConnectionModal: {\n        scanQR: \"Отсканируйте QR-код ниже камерой в\\xa0приложении {{ name }}, или\\xa0камерой телефона\",\n        continueInExtension: \"Откройте браузерное расширение {{ name }}\",\n        dontHaveExtension: \"Похоже, у вас не\\xa0установлено браузерное\\xa0расширение\\xa0{{ name }}\",\n        missingFeatures: \"Обновите {{ name }}, ваша версия не поддерживает необходимые функции для этого dApp\",\n        notSupportedWallet: \"{{ name }} не поддерживает запрошенное действие. Пожалуйста, подключите другой кошелёк, который поддерживает это\",\n        getWallet: \"Скачать {{ name }}\",\n        updateWallet: \"Обновить {{ name }}\",\n        chooseAnotherWallet: \"Выбрать другой кошелёк\",\n        continueOnDesktop: \"Откройте {{ name }} на\\xa0компьютере…\",\n        openWalletOnTelegram: \"Открыть Wallet в\\xa0Telegram\",\n        connectionDeclined: \"Подключение отклонено\"\n    },\n    infoModal: {\n        whatIsAWallet: \"Что такое кошелёк?\",\n        secureDigitalAssets: \"Надежное хранилище цифровых активов\",\n        walletProtects: \"Кошелёк защищает ваши цифровые активы, включая TON, токены и\\xa0предметы коллекционирования, и\\xa0управляет ими.\",\n        controlIdentity: \"Контроль своей личности Web3\",\n        manageIdentity: \"Управляйте своей цифровой идентификацией и\\xa0с\\xa0легкостью получайте доступ к\\xa0децентрализованным приложениям. Сохраняйте контроль над\\xa0своими данными и\\xa0безопасно участвуйте в\\xa0экосистеме\\xa0блокчейна.\",\n        effortlessCryptoTransactions: \"Простые криптотранзакции\",\n        easilySend: \"Легко отправляйте, получайте и\\xa0отслеживайте свои криптовалюты. Оптимизируйте свои операции с\\xa0помощью децентрализованных приложений.\",\n        getAWallet: \"Скачать кошелёк\"\n    },\n    allWallets: {\n        walletsBelowNotSupported: \"Кошельки ниже не поддерживают все функции подключённого сервиса. Вы можете использовать свою фразу восстановления в одном из поддерживаемых выше кошельков.\",\n        walletNotSupportService: \"{{ name }} не поддерживает подключённый сервис\"\n    }\n};\nconst actionModal = {\n    confirmTransaction: {\n        header: \"Подтвердите действие в\\xa0{{ name }}\",\n        text: \"Это займет пару секунд.\"\n    },\n    transactionSent: \"$notifications.transactionSent\",\n    transactionCanceled: \"$notifications.transactionCanceled\"\n};\nconst ru = {\n    common,\n    button,\n    notifications,\n    walletItem,\n    walletModal,\n    actionModal\n};\nconst i18nDictionary = {\n    en: parseDictionary(en),\n    ru: parseDictionary(ru)\n};\nfunction parseDictionary(dictionary) {\n    const refSymbol = \"$\";\n    const iterate = (subDictionary)=>{\n        Object.entries(subDictionary).forEach(([key, value])=>{\n            if (typeof value === \"object\" && value) {\n                return iterate(value);\n            }\n            if (typeof value === \"string\") {\n                if (value[0] === refSymbol) {\n                    const path = value.slice(1).split(\".\");\n                    let obj = dictionary;\n                    path.forEach((item)=>{\n                        if (item in obj) {\n                            obj = obj[item];\n                        } else {\n                            throw new Error(`Cannot parse translations: there is no property ${item} in translation`);\n                        }\n                    });\n                    subDictionary[key] = obj;\n                }\n                if (value.slice(0, 2) === `\\\\${refSymbol}`) {\n                    subDictionary[key] = value.slice(1);\n                }\n            }\n        });\n    };\n    iterate(dictionary);\n    return dictionary;\n}\nconst ConnectorContext = createContext();\nconst $RAW = Symbol(\"store-raw\"), $NODE = Symbol(\"store-node\"), $NAME = Symbol(\"store-name\");\nfunction wrap$1(value, name) {\n    let p2 = value[$PROXY];\n    if (!p2) {\n        Object.defineProperty(value, $PROXY, {\n            value: p2 = new Proxy(value, proxyTraps$1)\n        });\n        if (!Array.isArray(value)) {\n            const keys = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);\n            for(let i2 = 0, l2 = keys.length; i2 < l2; i2++){\n                const prop = keys[i2];\n                if (desc[prop].get) {\n                    Object.defineProperty(value, prop, {\n                        enumerable: desc[prop].enumerable,\n                        get: desc[prop].get.bind(p2)\n                    });\n                }\n            }\n        }\n    }\n    return p2;\n}\nfunction isWrappable(obj) {\n    let proto;\n    return obj != null && typeof obj === \"object\" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));\n}\nfunction unwrap(item, set = /* @__PURE__ */ new Set()) {\n    let result, unwrapped, v, prop;\n    if (result = item != null && item[$RAW]) return result;\n    if (!isWrappable(item) || set.has(item)) return item;\n    if (Array.isArray(item)) {\n        if (Object.isFrozen(item)) item = item.slice(0);\n        else set.add(item);\n        for(let i2 = 0, l2 = item.length; i2 < l2; i2++){\n            v = item[i2];\n            if ((unwrapped = unwrap(v, set)) !== v) item[i2] = unwrapped;\n        }\n    } else {\n        if (Object.isFrozen(item)) item = Object.assign({}, item);\n        else set.add(item);\n        const keys = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);\n        for(let i2 = 0, l2 = keys.length; i2 < l2; i2++){\n            prop = keys[i2];\n            if (desc[prop].get) continue;\n            v = item[prop];\n            if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;\n        }\n    }\n    return item;\n}\nfunction getDataNodes(target) {\n    let nodes = target[$NODE];\n    if (!nodes) Object.defineProperty(target, $NODE, {\n        value: nodes = {}\n    });\n    return nodes;\n}\nfunction getDataNode(nodes, property, value) {\n    return nodes[property] || (nodes[property] = createDataNode(value));\n}\nfunction proxyDescriptor$1(target, property) {\n    const desc = Reflect.getOwnPropertyDescriptor(target, property);\n    if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME) return desc;\n    delete desc.value;\n    delete desc.writable;\n    desc.get = ()=>target[$PROXY][property];\n    return desc;\n}\nfunction trackSelf(target) {\n    if (getListener()) {\n        const nodes = getDataNodes(target);\n        (nodes._ || (nodes._ = createDataNode()))();\n    }\n}\nfunction ownKeys(target) {\n    trackSelf(target);\n    return Reflect.ownKeys(target);\n}\nfunction createDataNode(value) {\n    const [s2, set] = createSignal(value, {\n        equals: false,\n        internal: true\n    });\n    s2.$ = set;\n    return s2;\n}\nconst proxyTraps$1 = {\n    get (target, property, receiver) {\n        if (property === $RAW) return target;\n        if (property === $PROXY) return receiver;\n        if (property === $TRACK) {\n            trackSelf(target);\n            return receiver;\n        }\n        const nodes = getDataNodes(target);\n        const tracked = nodes.hasOwnProperty(property);\n        let value = tracked ? nodes[property]() : target[property];\n        if (property === $NODE || property === \"__proto__\") return value;\n        if (!tracked) {\n            const desc = Object.getOwnPropertyDescriptor(target, property);\n            if (getListener() && (typeof value !== \"function\" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();\n        }\n        return isWrappable(value) ? wrap$1(value) : value;\n    },\n    has (target, property) {\n        if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === \"__proto__\") return true;\n        this.get(target, property, target);\n        return property in target;\n    },\n    set () {\n        return true;\n    },\n    deleteProperty () {\n        return true;\n    },\n    ownKeys,\n    getOwnPropertyDescriptor: proxyDescriptor$1\n};\nfunction setProperty(state, property, value, deleting = false) {\n    if (!deleting && state[property] === value) return;\n    const prev = state[property], len = state.length;\n    if (value === void 0) delete state[property];\n    else state[property] = value;\n    let nodes = getDataNodes(state), node;\n    if (node = getDataNode(nodes, property, prev)) node.$(()=>value);\n    if (Array.isArray(state) && state.length !== len) (node = getDataNode(nodes, \"length\", len)) && node.$(state.length);\n    (node = nodes._) && node.$();\n}\nfunction mergeStoreNode(state, value) {\n    const keys = Object.keys(value);\n    for(let i2 = 0; i2 < keys.length; i2 += 1){\n        const key = keys[i2];\n        setProperty(state, key, value[key]);\n    }\n}\nfunction updateArray(current, next) {\n    if (typeof next === \"function\") next = next(current);\n    next = unwrap(next);\n    if (Array.isArray(next)) {\n        if (current === next) return;\n        let i2 = 0, len = next.length;\n        for(; i2 < len; i2++){\n            const value = next[i2];\n            if (current[i2] !== value) setProperty(current, i2, value);\n        }\n        setProperty(current, \"length\", len);\n    } else mergeStoreNode(current, next);\n}\nfunction updatePath(current, path, traversed = []) {\n    let part, prev = current;\n    if (path.length > 1) {\n        part = path.shift();\n        const partType = typeof part, isArray = Array.isArray(current);\n        if (Array.isArray(part)) {\n            for(let i2 = 0; i2 < part.length; i2++){\n                updatePath(current, [\n                    part[i2]\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (isArray && partType === \"function\") {\n            for(let i2 = 0; i2 < current.length; i2++){\n                if (part(current[i2], i2)) updatePath(current, [\n                    i2\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (isArray && partType === \"object\") {\n            const { from = 0, to = current.length - 1, by = 1 } = part;\n            for(let i2 = from; i2 <= to; i2 += by){\n                updatePath(current, [\n                    i2\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (path.length > 1) {\n            updatePath(current[part], path, [\n                part\n            ].concat(traversed));\n            return;\n        }\n        prev = current[part];\n        traversed = [\n            part\n        ].concat(traversed);\n    }\n    let value = path[0];\n    if (typeof value === \"function\") {\n        value = value(prev, traversed);\n        if (value === prev) return;\n    }\n    if (part === void 0 && value == void 0) return;\n    value = unwrap(value);\n    if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {\n        mergeStoreNode(prev, value);\n    } else setProperty(current, part, value);\n}\nfunction createStore(...[store, options]) {\n    const unwrappedStore = unwrap(store || {});\n    const isArray = Array.isArray(unwrappedStore);\n    const wrappedStore = wrap$1(unwrappedStore);\n    function setStore(...args) {\n        batch(()=>{\n            isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);\n        });\n    }\n    return [\n        wrappedStore,\n        setStore\n    ];\n}\nconst defaultLightColorsSet = {\n    constant: {\n        black: \"#000000\",\n        white: \"#FFFFFF\"\n    },\n    connectButton: {\n        background: \"#0098EA\",\n        foreground: \"#FFFFFF\"\n    },\n    accent: \"#0098EA\",\n    telegramButton: \"#0098EA\",\n    icon: {\n        primary: \"#0F0F0F\",\n        secondary: \"#7A8999\",\n        tertiary: \"#C1CAD2\",\n        success: \"#29CC6A\",\n        error: \"#F5A73B\"\n    },\n    background: {\n        primary: \"#FFFFFF\",\n        secondary: \"#F1F3F5\",\n        segment: \"#FFFFFF\",\n        tint: \"#F1F3F5\",\n        qr: \"#F1F3F5\"\n    },\n    text: {\n        primary: \"#0F0F0F\",\n        secondary: \"#6A7785\"\n    }\n};\nconst defaultDarkColorsSet = {\n    constant: {\n        black: \"#000000\",\n        white: \"#FFFFFF\"\n    },\n    connectButton: {\n        background: \"#0098EA\",\n        foreground: \"#FFFFFF\"\n    },\n    accent: \"#E5E5EA\",\n    telegramButton: \"#31A6F5\",\n    icon: {\n        primary: \"#E5E5EA\",\n        secondary: \"#909099\",\n        tertiary: \"#434347\",\n        success: \"#29CC6A\",\n        error: \"#F5A73B\"\n    },\n    background: {\n        primary: \"#121214\",\n        secondary: \"#18181A\",\n        segment: \"#262629\",\n        tint: \"#222224\",\n        qr: \"#FFFFFF\"\n    },\n    text: {\n        primary: \"#E5E5EA\",\n        secondary: \"#7D7D85\"\n    }\n};\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */ function isObject(o2) {\n    return Object.prototype.toString.call(o2) === \"[object Object]\";\n}\nfunction isPlainObject(o2) {\n    var ctor, prot;\n    if (isObject(o2) === false) return false;\n    ctor = o2.constructor;\n    if (ctor === void 0) return true;\n    prot = ctor.prototype;\n    if (isObject(prot) === false) return false;\n    if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n        return false;\n    }\n    return true;\n}\nfunction mergeOptions(options, defaultOptions) {\n    if (!options) {\n        return defaultOptions;\n    }\n    const overwriteMerge = (_, sourceArray, __)=>sourceArray;\n    return deepmerge__WEBPACK_IMPORTED_MODULE_2__(defaultOptions, options, {\n        arrayMerge: overwriteMerge,\n        isMergeableObject: isPlainObject\n    });\n}\nconst [themeState, setThemeState] = createStore({\n    theme: THEME.LIGHT,\n    colors: defaultLightColorsSet,\n    borderRadius: \"m\"\n});\nconst themeColorsMappingDefault = {\n    [THEME.LIGHT]: defaultLightColorsSet,\n    [THEME.DARK]: defaultDarkColorsSet\n};\nconst themeCustomColors = {\n    [THEME.LIGHT]: void 0,\n    [THEME.DARK]: void 0\n};\nfunction setTheme(theme, colorsSet) {\n    if (colorsSet) {\n        themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);\n        themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);\n    }\n    setThemeState({\n        theme,\n        colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])\n    });\n}\nfunction setBorderRadius(borderRadius) {\n    setThemeState({\n        borderRadius\n    });\n}\nfunction setColors(colorsSet) {\n    themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);\n    themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);\n    setThemeState((state)=>({\n            colors: mergeOptions(themeCustomColors[state.theme], themeColorsMappingDefault[state.theme])\n        }));\n}\nconst ImagePlaceholder = styled.div`\n    background-color: ${(props)=>props.theme.colors.background.secondary};\n`;\nconst Image = (props)=>{\n    let imgRef;\n    const [image, setImage] = createSignal(null);\n    createEffect(()=>{\n        const img = new window.Image();\n        img.src = props.src;\n        img.alt = props.alt || \"\";\n        img.setAttribute(\"draggable\", \"false\");\n        if (props.class) {\n            img.classList.add(props.class);\n        }\n        if (img.complete) {\n            return setImage(img);\n        }\n        img.addEventListener(\"load\", ()=>setImage(img));\n        return ()=>img.removeEventListener(\"load\", ()=>setImage(img));\n    });\n    return [\n        createComponent(Show, {\n            get when () {\n                return image();\n            },\n            get children () {\n                return image();\n            }\n        }),\n        createComponent(Show, {\n            get when () {\n                return !image();\n            },\n            get children () {\n                return createComponent(ImagePlaceholder, {\n                    get [\"class\"] () {\n                        return props.class;\n                    },\n                    ref (r$) {\n                        const _ref$ = imgRef;\n                        typeof _ref$ === \"function\" ? _ref$(r$) : imgRef = r$;\n                    }\n                });\n            }\n        })\n    ];\n};\nlet initParams = {};\ntry {\n    let locationHash = location.hash.toString();\n    initParams = urlParseHashParams(locationHash);\n} catch (e2) {}\nlet tmaPlatform = \"unknown\";\nif (initParams == null ? void 0 : initParams.tgWebAppPlatform) {\n    tmaPlatform = (_a = initParams.tgWebAppPlatform) != null ? _a : \"unknown\";\n}\nif (tmaPlatform === \"unknown\") {\n    const window2 = getWindow$1();\n    tmaPlatform = (_d = (_c = (_b = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _b.WebApp) == null ? void 0 : _c.platform) != null ? _d : \"unknown\";\n}\nlet webAppVersion = \"6.0\";\nif (initParams == null ? void 0 : initParams.tgWebAppVersion) {\n    webAppVersion = initParams.tgWebAppVersion;\n}\nif (!webAppVersion) {\n    const window2 = getWindow$1();\n    webAppVersion = (_g = (_f = (_e = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _e.WebApp) == null ? void 0 : _f.version) != null ? _g : \"6.0\";\n}\nfunction isTmaPlatform(...platforms) {\n    return platforms.includes(tmaPlatform);\n}\nfunction isInTMA() {\n    var _a2;\n    return tmaPlatform !== \"unknown\" || !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebviewProxy);\n}\nfunction isInTelegramBrowser() {\n    var _a2;\n    const isTelegramWebview = !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebview);\n    return (isInTMA() || isTelegramWebview) && tmaPlatform === \"unknown\";\n}\nfunction sendExpand() {\n    postEvent(\"web_app_expand\", {});\n}\nfunction sendOpenTelegramLink(link, fallback) {\n    const url = new URL(link);\n    if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n        if (fallback) {\n            return fallback();\n        }\n        throw new TonConnectUIError(`Url protocol is not supported: ${url}`);\n    }\n    if (url.hostname !== \"t.me\") {\n        if (fallback) {\n            return fallback();\n        }\n        throw new TonConnectUIError(`Url host is not supported: ${url}`);\n    }\n    const pathFull = url.pathname + url.search;\n    if (isIframe() || versionAtLeast(\"6.1\")) {\n        postEvent(\"web_app_open_tg_link\", {\n            path_full: pathFull\n        });\n    } else {\n        openLinkBlank(\"https://t.me\" + pathFull);\n    }\n}\nfunction isIframe() {\n    try {\n        const window2 = getWindow$1();\n        if (!window2) {\n            return false;\n        }\n        return window2.parent != null && window2 !== window2.parent;\n    } catch (e2) {\n        return false;\n    }\n}\nfunction postEvent(eventType, eventData) {\n    try {\n        const window2 = getWindow$1();\n        if (!window2) {\n            throw new TonConnectUIError(`Can't post event to parent window: window is not defined`);\n        }\n        if (window2.TelegramWebviewProxy !== void 0) {\n            logDebug(\"postEvent\", eventType, eventData);\n            window2.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n        } else if (window2.external && \"notify\" in window2.external) {\n            logDebug(\"postEvent\", eventType, eventData);\n            window2.external.notify(JSON.stringify({\n                eventType,\n                eventData\n            }));\n        } else if (isIframe()) {\n            const trustedTarget = \"*\";\n            const message = JSON.stringify({\n                eventType,\n                eventData\n            });\n            logDebug(\"postEvent\", eventType, eventData);\n            window2.parent.postMessage(message, trustedTarget);\n        } else {\n            throw new TonConnectUIError(`Can't post event to TMA`);\n        }\n    } catch (e2) {\n        logError(`Can't post event to parent window: ${e2}`);\n    }\n}\nfunction urlParseHashParams(locationHash) {\n    locationHash = locationHash.replace(/^#/, \"\");\n    let params = {};\n    if (!locationHash.length) {\n        return params;\n    }\n    if (locationHash.indexOf(\"=\") < 0 && locationHash.indexOf(\"?\") < 0) {\n        params._path = urlSafeDecode(locationHash);\n        return params;\n    }\n    let qIndex = locationHash.indexOf(\"?\");\n    if (qIndex >= 0) {\n        let pathParam = locationHash.substr(0, qIndex);\n        params._path = urlSafeDecode(pathParam);\n        locationHash = locationHash.substr(qIndex + 1);\n    }\n    let query_params = urlParseQueryString(locationHash);\n    for(let k in query_params){\n        params[k] = query_params[k];\n    }\n    return params;\n}\nfunction urlSafeDecode(urlencoded) {\n    try {\n        urlencoded = urlencoded.replace(/\\+/g, \"%20\");\n        return decodeURIComponent(urlencoded);\n    } catch (e2) {\n        return urlencoded;\n    }\n}\nfunction urlParseQueryString(queryString) {\n    let params = {};\n    if (!queryString.length) {\n        return params;\n    }\n    let queryStringParams = queryString.split(\"&\");\n    let i2, param, paramName, paramValue;\n    for(i2 = 0; i2 < queryStringParams.length; i2++){\n        param = queryStringParams[i2].split(\"=\");\n        paramName = urlSafeDecode(param[0]);\n        paramValue = param[1] == null ? null : urlSafeDecode(param[1]);\n        params[paramName] = paramValue;\n    }\n    return params;\n}\nfunction versionCompare(v1, v2) {\n    if (typeof v1 !== \"string\") v1 = \"\";\n    if (typeof v2 !== \"string\") v2 = \"\";\n    let v1List = v1.replace(/^\\s+|\\s+$/g, \"\").split(\".\");\n    let v2List = v2.replace(/^\\s+|\\s+$/g, \"\").split(\".\");\n    let a2, i2, p1, p2;\n    a2 = Math.max(v1List.length, v2List.length);\n    for(i2 = 0; i2 < a2; i2++){\n        p1 = parseInt(v1List[i2]) || 0;\n        p2 = parseInt(v2List[i2]) || 0;\n        if (p1 === p2) continue;\n        if (p1 > p2) return 1;\n        return -1;\n    }\n    return 0;\n}\nfunction versionAtLeast(ver) {\n    return versionCompare(webAppVersion, ver) >= 0;\n}\nconst maxWidth = {\n    mobile: 440,\n    tablet: 1020\n};\nfunction isDevice(device) {\n    const window2 = getWindow$1();\n    if (!window2) {\n        return device === \"desktop\";\n    }\n    if (isTmaPlatform(\"weba\")) {\n        return true;\n    }\n    const width = window2.innerWidth;\n    switch(device){\n        case \"desktop\":\n            return width > maxWidth.tablet;\n        case \"tablet\":\n            return width > maxWidth.mobile;\n        default:\n        case \"mobile\":\n            return width <= maxWidth.mobile || isOS(\"ios\", \"android\", \"ipad\");\n    }\n}\nfunction media(device) {\n    switch(device){\n        case \"mobile\":\n            return `@media (max-width: ${maxWidth.mobile}px)`;\n        case \"tablet\":\n            return `@media (max-width: ${maxWidth.tablet}px) (min-width: ${maxWidth.mobile}px)`;\n        default:\n        case \"desktop\":\n            return `@media (min-width: ${maxWidth.tablet}px)`;\n    }\n}\nconst mediaTouch = \"@media (hover: none)\";\nconst mediaNotTouch = \"@media not all and (hover: none)\";\nconst borders$5 = {\n    m: \"100vh\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst scaleValues = {\n    s: 0.02,\n    m: 0.04\n};\nconst ButtonStyled$1 = styled.button`\n    display: ${(props)=>props.leftIcon || props.rightIcon ? \"flex\" : \"inline-block\"};\n    gap: ${(props)=>props.leftIcon || props.rightIcon ? \"6px\" : \"unset\"};\n    align-items: ${(props)=>props.leftIcon || props.rightIcon ? \"center\" : \"unset\"};\n    justify-content: ${(props)=>props.leftIcon || props.rightIcon ? \"space-between\" : \"unset\"};\n    background-color: ${(props)=>props.appearance === \"flat\" ? \"transparent\" : props.appearance === \"secondary\" ? props.theme.colors.background.tint : rgba(props.theme.colors.accent, 0.12)};\n    color: ${(props)=>props.appearance === \"secondary\" ? props.theme.colors.text.primary : props.theme.colors.accent};\n\n    padding: ${(props)=>props.appearance === \"flat\" ? \"0\" : \"9px 16px\"};\n    padding-left: ${(props)=>props.leftIcon && props.appearance !== \"flat\" ? \"12px\" : \"16px\"};\n    padding-right: ${(props)=>props.rightIcon && props.appearance !== \"flat\" ? \"12px\" : \"16px\"};\n    border: none;\n    border-radius: ${(props)=>borders$5[props.theme.borderRadius]};\n    cursor: ${(props)=>props.disabled ? \"not-allowed\" : \"pointer\"};\n\n    font-size: 14px;\n    font-weight: 510;\n    line-height: 18px;\n\n    transition: transform 0.125s ease-in-out;\n\n    ${mediaNotTouch} {\n        &:hover {\n            transform: ${(props)=>props.disabled ? \"unset\" : `scale(${1 + scaleValues[props.scale]})`};\n        }\n    }\n\n    &:active {\n        transform: ${(props)=>props.disabled ? \"unset\" : `scale(${1 - scaleValues[props.scale]})`};\n    }\n\n    ${mediaTouch} {\n        &:active {\n            transform: ${(props)=>props.disabled ? \"unset\" : `scale(${1 - scaleValues[props.scale] * 2})`};\n        }\n    }\n`;\nfunction useDataAttributes(props) {\n    const keys = untrack(()=>Object.keys(props).filter((key)=>key.startsWith(\"data-\")));\n    const [dataAttrs] = splitProps(props, keys);\n    return dataAttrs;\n}\nconst Button = (props)=>{\n    const dataAttrs = useDataAttributes(props);\n    return createComponent(ButtonStyled$1, mergeProps({\n        get appearance () {\n            return props.appearance || \"primary\";\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        onClick: (e2)=>{\n            var _a2;\n            return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);\n        },\n        onMouseEnter: (e2)=>{\n            var _a2;\n            return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);\n        },\n        onMouseLeave: (e2)=>{\n            var _a2;\n            return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);\n        },\n        ref (r$) {\n            const _ref$ = props.ref;\n            typeof _ref$ === \"function\" ? _ref$(r$) : props.ref = r$;\n        },\n        get disabled () {\n            return props.disabled;\n        },\n        get scale () {\n            return props.scale || \"m\";\n        },\n        get leftIcon () {\n            return !!props.leftIcon;\n        },\n        get rightIcon () {\n            return !!props.rightIcon;\n        },\n        \"data-tc-button\": \"true\"\n    }, dataAttrs, {\n        get children () {\n            return [\n                createMemo(()=>props.leftIcon),\n                createMemo(()=>props.children),\n                createMemo(()=>props.rightIcon)\n            ];\n        }\n    }));\n};\nfunction nextFrame(fn) {\n    requestAnimationFrame(()=>{\n        requestAnimationFrame(fn);\n    });\n}\nconst Transition = (props)=>{\n    let el;\n    let first = true;\n    const [s1, set1] = createSignal();\n    const [s2, set2] = createSignal();\n    const resolved = children(()=>props.children);\n    const { onBeforeEnter, onEnter, onAfterEnter, onBeforeExit, onExit, onAfterExit } = props;\n    const classnames = createMemo(()=>{\n        const name = props.name || \"s\";\n        return {\n            enterActiveClass: props.enterActiveClass || name + \"-enter-active\",\n            enterClass: props.enterClass || name + \"-enter\",\n            enterToClass: props.enterToClass || name + \"-enter-to\",\n            exitActiveClass: props.exitActiveClass || name + \"-exit-active\",\n            exitClass: props.exitClass || name + \"-exit\",\n            exitToClass: props.exitToClass || name + \"-exit-to\"\n        };\n    });\n    function enterTransition(el2, prev) {\n        if (!first || props.appear) {\n            let endTransition = function(e2) {\n                if (el2 && (!e2 || e2.target === el2)) {\n                    el2.removeEventListener(\"transitionend\", endTransition);\n                    el2.removeEventListener(\"animationend\", endTransition);\n                    el2.classList.remove(...enterActiveClasses);\n                    el2.classList.remove(...enterToClasses);\n                    batch(()=>{\n                        s1() !== el2 && set1(el2);\n                        s2() === el2 && set2(void 0);\n                    });\n                    onAfterEnter && onAfterEnter(el2);\n                    if (props.mode === \"inout\") exitTransition(el2, prev);\n                }\n            };\n            const enterClasses = classnames().enterClass.split(\" \");\n            const enterActiveClasses = classnames().enterActiveClass.split(\" \");\n            const enterToClasses = classnames().enterToClass.split(\" \");\n            onBeforeEnter && onBeforeEnter(el2);\n            el2.classList.add(...enterClasses);\n            el2.classList.add(...enterActiveClasses);\n            nextFrame(()=>{\n                el2.classList.remove(...enterClasses);\n                el2.classList.add(...enterToClasses);\n                onEnter && onEnter(el2, ()=>endTransition());\n                if (!onEnter || onEnter.length < 2) {\n                    el2.addEventListener(\"transitionend\", endTransition);\n                    el2.addEventListener(\"animationend\", endTransition);\n                }\n            });\n        }\n        prev && !props.mode ? set2(el2) : set1(el2);\n    }\n    function exitTransition(el2, prev) {\n        const exitClasses = classnames().exitClass.split(\" \");\n        const exitActiveClasses = classnames().exitActiveClass.split(\" \");\n        const exitToClasses = classnames().exitToClass.split(\" \");\n        if (!prev.parentNode) return endTransition();\n        onBeforeExit && onBeforeExit(prev);\n        prev.classList.add(...exitClasses);\n        prev.classList.add(...exitActiveClasses);\n        nextFrame(()=>{\n            prev.classList.remove(...exitClasses);\n            prev.classList.add(...exitToClasses);\n        });\n        onExit && onExit(prev, ()=>endTransition());\n        if (!onExit || onExit.length < 2) {\n            prev.addEventListener(\"transitionend\", endTransition);\n            prev.addEventListener(\"animationend\", endTransition);\n        }\n        function endTransition(e2) {\n            if (!e2 || e2.target === prev) {\n                prev.removeEventListener(\"transitionend\", endTransition);\n                prev.removeEventListener(\"animationend\", endTransition);\n                prev.classList.remove(...exitActiveClasses);\n                prev.classList.remove(...exitToClasses);\n                s1() === prev && set1(void 0);\n                onAfterExit && onAfterExit(prev);\n                if (props.mode === \"outin\") enterTransition(el2, prev);\n            }\n        }\n    }\n    createComputed((prev)=>{\n        el = resolved();\n        while(typeof el === \"function\")el = el();\n        return untrack(()=>{\n            if (el && el !== prev) {\n                if (props.mode !== \"outin\") enterTransition(el, prev);\n                else if (first) set1(el);\n            }\n            if (prev && prev !== el && props.mode !== \"inout\") exitTransition(el, prev);\n            first = false;\n            return el;\n        });\n    });\n    return [\n        s1,\n        s2\n    ];\n};\nfunction getRect(element) {\n    const { top, bottom, left, right, width, height } = element.getBoundingClientRect();\n    const parentRect = element.parentNode.getBoundingClientRect();\n    return {\n        top: top - parentRect.top,\n        bottom,\n        left: left - parentRect.left,\n        right,\n        width,\n        height\n    };\n}\nconst TransitionGroup = (props)=>{\n    const resolved = children(()=>props.children);\n    const classnames = createMemo(()=>{\n        const name = props.name || \"s\";\n        return {\n            enterActiveClass: props.enterActiveClass || name + \"-enter-active\",\n            enterClass: props.enterClass || name + \"-enter\",\n            enterToClass: props.enterToClass || name + \"-enter-to\",\n            exitActiveClass: props.exitActiveClass || name + \"-exit-active\",\n            exitClass: props.exitClass || name + \"-exit\",\n            exitToClass: props.exitToClass || name + \"-exit-to\",\n            moveClass: props.moveClass || name + \"-move\"\n        };\n    });\n    const { onBeforeEnter, onEnter, onAfterEnter, onBeforeExit, onExit, onAfterExit } = props;\n    const [combined, setCombined] = createSignal();\n    let p2 = [];\n    let first = true;\n    createComputed(()=>{\n        const c2 = resolved();\n        const comb = [\n            ...c2\n        ];\n        const next = new Set(c2);\n        const prev = new Set(p2);\n        const enterClasses = classnames().enterClass.split(\" \");\n        const enterActiveClasses = classnames().enterActiveClass.split(\" \");\n        const enterToClasses = classnames().enterToClass.split(\" \");\n        const exitClasses = classnames().exitClass.split(\" \");\n        const exitActiveClasses = classnames().exitActiveClass.split(\" \");\n        const exitToClasses = classnames().exitToClass.split(\" \");\n        for(let i2 = 0; i2 < c2.length; i2++){\n            const el = c2[i2];\n            if (!first && !prev.has(el)) {\n                let endTransition = function(e2) {\n                    if (el && (!e2 || e2.target === el)) {\n                        el.removeEventListener(\"transitionend\", endTransition);\n                        el.removeEventListener(\"animationend\", endTransition);\n                        el.classList.remove(...enterActiveClasses);\n                        el.classList.remove(...enterToClasses);\n                        onAfterEnter && onAfterEnter(el);\n                    }\n                };\n                onBeforeEnter && onBeforeEnter(el);\n                el.classList.add(...enterClasses);\n                el.classList.add(...enterActiveClasses);\n                nextFrame(()=>{\n                    el.classList.remove(...enterClasses);\n                    el.classList.add(...enterToClasses);\n                    onEnter && onEnter(el, ()=>endTransition());\n                    if (!onEnter || onEnter.length < 2) {\n                        el.addEventListener(\"transitionend\", endTransition);\n                        el.addEventListener(\"animationend\", endTransition);\n                    }\n                });\n            }\n        }\n        for(let i2 = 0; i2 < p2.length; i2++){\n            const old = p2[i2];\n            if (!next.has(old) && old.parentNode) {\n                let endTransition = function(e2) {\n                    if (!e2 || e2.target === old) {\n                        old.removeEventListener(\"transitionend\", endTransition);\n                        old.removeEventListener(\"animationend\", endTransition);\n                        old.classList.remove(...exitActiveClasses);\n                        old.classList.remove(...exitToClasses);\n                        onAfterExit && onAfterExit(old);\n                        p2 = p2.filter((i3)=>i3 !== old);\n                        setCombined(p2);\n                    }\n                };\n                comb.splice(i2, 0, old);\n                onBeforeExit && onBeforeExit(old);\n                old.classList.add(...exitClasses);\n                old.classList.add(...exitActiveClasses);\n                nextFrame(()=>{\n                    old.classList.remove(...exitClasses);\n                    old.classList.add(...exitToClasses);\n                });\n                onExit && onExit(old, ()=>endTransition());\n                if (!onExit || onExit.length < 2) {\n                    old.addEventListener(\"transitionend\", endTransition);\n                    old.addEventListener(\"animationend\", endTransition);\n                }\n            }\n        }\n        p2 = comb;\n        setCombined(comb);\n    });\n    createEffect((nodes)=>{\n        const c2 = combined();\n        c2.forEach((child)=>{\n            let n2;\n            if (!(n2 = nodes.get(child))) {\n                nodes.set(child, n2 = {\n                    pos: getRect(child),\n                    new: !first\n                });\n            } else if (n2.new) {\n                n2.new = false;\n                n2.newPos = getRect(child);\n            }\n            if (n2.new) {\n                child.addEventListener(\"transitionend\", ()=>{\n                    n2.new = false;\n                    child.parentNode && (n2.newPos = getRect(child));\n                }, {\n                    once: true\n                });\n            }\n            n2.newPos && (n2.pos = n2.newPos);\n            n2.newPos = getRect(child);\n        });\n        if (first) {\n            first = false;\n            return nodes;\n        }\n        c2.forEach((child)=>{\n            const c3 = nodes.get(child);\n            const oldPos = c3.pos;\n            const newPos = c3.newPos;\n            const dx = oldPos.left - newPos.left;\n            const dy = oldPos.top - newPos.top;\n            if (dx || dy) {\n                c3.moved = true;\n                const s2 = child.style;\n                s2.transform = `translate(${dx}px,${dy}px)`;\n                s2.transitionDuration = \"0s\";\n            }\n        });\n        document.body.offsetHeight;\n        c2.forEach((child)=>{\n            const c3 = nodes.get(child);\n            if (c3.moved) {\n                let endTransition = function(e2) {\n                    if (e2 && e2.target !== child || !child.parentNode) return;\n                    if (!e2 || /transform$/.test(e2.propertyName)) {\n                        child.removeEventListener(\"transitionend\", endTransition);\n                        child.classList.remove(...moveClasses);\n                    }\n                };\n                c3.moved = false;\n                const s2 = child.style;\n                const moveClasses = classnames().moveClass.split(\" \");\n                child.classList.add(...moveClasses);\n                s2.transform = s2.transitionDuration = \"\";\n                child.addEventListener(\"transitionend\", endTransition);\n            }\n        });\n        return nodes;\n    }, /* @__PURE__ */ new Map());\n    return combined;\n};\nfunction clickOutside$1(el, accessor) {\n    const onClick = (e2)=>{\n        var _a2;\n        return !el.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());\n    };\n    document.body.addEventListener(\"click\", onClick);\n    onCleanup(()=>document.body.removeEventListener(\"click\", onClick));\n}\nfunction escPressed(_, accessor) {\n    const onKeyPress = (e2)=>{\n        var _a2, _b2;\n        if (e2.key === \"Escape\") {\n            (_a2 = document.activeElement) == null ? void 0 : _a2.blur();\n            (_b2 = accessor()) == null ? void 0 : _b2();\n        }\n    };\n    document.body.addEventListener(\"keydown\", onKeyPress);\n    onCleanup(()=>document.body.removeEventListener(\"keydown\", onKeyPress));\n}\nfunction androidBackHandler$1(_, config) {\n    const { isEnabled, onClose } = config();\n    if (!isEnabled) {\n        return;\n    }\n    const userOSIsAndroid = getUserAgent().os === \"android\";\n    if (!userOSIsAndroid) {\n        return;\n    }\n    window.history.pushState(ROUTE_STATE, \"\");\n    const popstateHandler = (event)=>{\n        event.preventDefault();\n        onClose();\n    };\n    window.addEventListener(\"popstate\", popstateHandler, {\n        once: true\n    });\n    onCleanup(()=>{\n        window.removeEventListener(\"popstate\", popstateHandler);\n        createMacrotask(()=>{\n            var _a2;\n            if (((_a2 = window.history.state) == null ? void 0 : _a2[ROUTE_STATE_KEY]) === true) {\n                window.history.back();\n            }\n        });\n    });\n}\nconst ROUTE_STATE_KEY = \"androidBackHandler\";\nconst ROUTE_STATE = {\n    [ROUTE_STATE_KEY]: true\n};\nconst _tmpl$$v = /* @__PURE__ */ template$1(`<svg><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.2122 14.3407C10.5384 14.0854 10.5959 13.614 10.3406 13.2878L6.20237 8.00003L10.3406 2.71227C10.5959 2.38607 10.5384 1.91469 10.2122 1.6594C9.88604 1.40412 9.41465 1.46161 9.15937 1.7878L4.65937 7.5378C4.44688 7.80932 4.44688 8.19074 4.65937 8.46226L9.15937 14.2123C9.41465 14.5385 9.88604 14.5959 10.2122 14.3407Z\"></path></svg>`, 4, true);\nconst rotationDegrees = {\n    left: 0,\n    top: 90,\n    right: 180,\n    bottom: 270\n};\nconst ArrowIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    const direction = ()=>props.direction || \"left\";\n    const Svg = styled(\"svg\")`\n        transform: rotate(${(props2)=>rotationDegrees[props2.svgDirection]}deg);\n        transition: transform 0.1s ease-in-out;\n    `;\n    return createComponent(Svg, {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"16\",\n        height: \"16\",\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        get svgDirection () {\n            return direction();\n        },\n        get children () {\n            const _el$ = _tmpl$$v.cloneNode(true);\n            createRenderEffect(()=>setAttribute(_el$, \"fill\", fill()));\n            return _el$;\n        }\n    });\n};\nconst _tmpl$$u = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.71966 2.71968C3.01255 2.42678 3.48743 2.42677 3.78032 2.71966L8.00002 6.93925L12.2197 2.71967C12.5126 2.42677 12.9874 2.42678 13.2803 2.71967C13.5732 3.01257 13.5732 3.48744 13.2803 3.78033L9.06068 7.99991L13.2803 12.2197C13.5732 12.5126 13.5732 12.9874 13.2803 13.2803C12.9874 13.5732 12.5126 13.5732 12.2197 13.2803L8.00002 9.06057L3.78033 13.2803C3.48744 13.5732 3.01257 13.5732 2.71967 13.2803C2.42678 12.9874 2.42677 12.5126 2.71967 12.2197L6.93936 7.99991L2.71968 3.78034C2.42678 3.48745 2.42677 3.01257 2.71966 2.71968Z\"></path></svg>`);\nconst CloseIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$u.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst IconButtonStyled = styled.button`\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: ${(props)=>props.theme.colors.background.tint};\n    border: none;\n    cursor: pointer;\n\n    transition: transform 0.125s ease-in-out;\n\n    ${mediaNotTouch} {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ${mediaTouch} {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n`;\nconst IconButton = (props)=>{\n    const dataAttrs = useDataAttributes(props);\n    const icon = ()=>props.icon || \"close\";\n    return createComponent(IconButtonStyled, mergeProps({\n        get [\"class\"] () {\n            return props.class;\n        },\n        onClick: ()=>props.onClick(),\n        \"data-tc-icon-button\": \"true\"\n    }, dataAttrs, {\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return !!props.children;\n                    },\n                    get children () {\n                        return props.children;\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !props.children;\n                    },\n                    get children () {\n                        return createComponent(Switch, {\n                            get children () {\n                                return [\n                                    createComponent(Match, {\n                                        get when () {\n                                            return icon() === \"close\";\n                                        },\n                                        get children () {\n                                            return createComponent(CloseIcon, {\n                                                get fill () {\n                                                    return props.fill;\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return icon() === \"arrow\";\n                                        },\n                                        get children () {\n                                            return createComponent(ArrowIcon, {\n                                                get fill () {\n                                                    return props.fill;\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return icon() === \"question\";\n                                        },\n                                        get children () {\n                                            return createComponent(QuestionIcon, {\n                                                get fill () {\n                                                    return props.fill;\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return typeof icon() !== \"string\";\n                                        },\n                                        get children () {\n                                            return icon();\n                                        }\n                                    })\n                                ];\n                            }\n                        });\n                    }\n                })\n            ];\n        }\n    }));\n};\nconst borders$4 = {\n    m: \"24px\",\n    s: \"16px\",\n    none: \"0\"\n};\nconst ModalBackgroundStyled = styled.div`\n    display: flex;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.4);\n    padding: 20px 0;\n    overflow-y: auto;\n\n    ${media(\"mobile\")} {\n        padding-bottom: 0;\n    }\n`;\nconst ModalWrapperClass = u`\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);\n    width: fit-content;\n    margin: auto;\n\n    ${media(\"mobile\")} {\n        width: 100%;\n        height: fit-content;\n        margin: auto 0 0 0;\n    }\n`;\nconst ModalBodyStyled = styled.div`\n    position: relative;\n    min-height: 100px;\n    width: 416px;\n    padding: 44px 56px 24px;\n\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);\n\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    border-radius: ${(props)=>borders$4[props.theme.borderRadius]};\n\n    ${media(\"mobile\")} {\n        width: 100%;\n    }\n`;\nconst CloseButtonStyled = styled(IconButton)`\n    position: absolute;\n    right: 16px;\n    top: 16px;\n`;\nconst ModalFooterStyled = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px 16px 16px 18px;\n    border-radius: 0 0 ${(props)=>borders$4[props.theme.borderRadius]}\n        ${(props)=>borders$4[props.theme.borderRadius]};\n`;\nconst QuestionButtonStyled = styled(IconButton)`\n    background-color: ${(props)=>rgba(props.theme.colors.icon.secondary, 0.12)};\n`;\nclass AnimationTimelineNoop {\n    constructor(){\n        __publicField(this, \"currentTime\", 0);\n    }\n}\nconst _AnimationNoop = class {\n    constructor(){\n        __publicField(this, \"currentTime\", 0);\n        __publicField(this, \"playbackRate\", 1);\n        __publicField(this, \"startTime\", null);\n        __publicField(this, \"timeline\", new AnimationTimelineNoop());\n        __publicField(this, \"finished\", Promise.resolve(this));\n        __publicField(this, \"effect\", null);\n        __publicField(this, \"id\", \"\");\n        __publicField(this, \"pending\", false);\n        __publicField(this, \"playState\", \"finished\");\n        __publicField(this, \"replaceState\", \"active\");\n        __publicField(this, \"ready\", Promise.resolve(this));\n        __publicField(this, \"oncancel\", null);\n        __publicField(this, \"onfinish\", null);\n        __publicField(this, \"onremove\", null);\n    }\n    static create() {\n        if (!_AnimationNoop._instance) {\n            logWarning(\"Animation is not supported in this environment: please consider using the `web-animations-js` polyfill to provide a fallback implementation of the Web Animations API.\");\n            _AnimationNoop._instance = new _AnimationNoop();\n        }\n        return _AnimationNoop._instance;\n    }\n    cancel() {}\n    finish() {}\n    pause() {}\n    play() {}\n    reverse() {}\n    addEventListener(_type, _listener, _options) {}\n    dispatchEvent(_event) {\n        return false;\n    }\n    removeEventListener(_type, _callback, _options) {}\n    updatePlaybackRate(_playbackRate) {}\n    commitStyles() {}\n    persist() {}\n};\nlet AnimationNoop = _AnimationNoop;\n__publicField(AnimationNoop, \"_instance\", null);\nfunction animate(element, keyframes, options) {\n    if (\"animate\" in element) {\n        return element.animate(keyframes, options);\n    }\n    return AnimationNoop.create();\n}\nconst _tmpl$$t = /* @__PURE__ */ template$1(`<div></div>`);\nconst clickOutside = clickOutside$1;\nconst keyPressed = escPressed;\nconst androidBackHandler = androidBackHandler$1;\nconst Modal = (props)=>{\n    const theme = useTheme();\n    const dataAttrs = useDataAttributes(props);\n    createEffect(()=>{\n        if (props.opened) {\n            disableScroll();\n        } else {\n            enableScroll();\n        }\n    });\n    return createComponent(Transition, {\n        onBeforeEnter: (el)=>{\n            const duration = isDevice(\"mobile\") ? 200 : 100;\n            animate(el, [\n                {\n                    opacity: 0\n                },\n                {\n                    opacity: 1\n                }\n            ], {\n                duration\n            });\n            if (isDevice(\"mobile\")) {\n                animate(el.firstElementChild, [\n                    {\n                        transform: \"translateY(390px)\"\n                    },\n                    {\n                        transform: \"translateY(0)\"\n                    }\n                ], {\n                    duration\n                });\n            }\n        },\n        onExit: (el, done)=>{\n            const duration = isDevice(\"mobile\") ? 200 : 100;\n            const backgroundAnimation = animate(el, [\n                {\n                    opacity: 1\n                },\n                {\n                    opacity: 0\n                }\n            ], {\n                duration\n            });\n            if (isDevice(\"mobile\")) {\n                const contentAnimation = animate(el.firstElementChild, [\n                    {\n                        transform: \"translateY(0)\"\n                    },\n                    {\n                        transform: \"translateY(390px)\"\n                    }\n                ], {\n                    duration\n                });\n                Promise.all([\n                    backgroundAnimation.finished,\n                    contentAnimation.finished\n                ]).then(done);\n            } else {\n                backgroundAnimation.finished.then(done);\n            }\n        },\n        get children () {\n            return createComponent(Show, {\n                get when () {\n                    return props.opened;\n                },\n                get children () {\n                    return createComponent(ModalBackgroundStyled, mergeProps({\n                        \"data-tc-modal\": \"true\"\n                    }, dataAttrs, {\n                        get children () {\n                            const _el$ = _tmpl$$t.cloneNode(true);\n                            use(androidBackHandler, _el$, ()=>({\n                                    isEnabled: props.enableAndroidBackHandler,\n                                    onClose: ()=>props.onClose()\n                                }));\n                            use(keyPressed, _el$, ()=>()=>props.onClose());\n                            use(clickOutside, _el$, ()=>()=>props.onClose());\n                            insert(_el$, createComponent(ModalBodyStyled, {\n                                get [\"class\"] () {\n                                    return props.class;\n                                },\n                                get children () {\n                                    return [\n                                        createComponent(CloseButtonStyled, {\n                                            icon: \"close\",\n                                            onClick: ()=>props.onClose()\n                                        }),\n                                        createMemo(()=>props.children)\n                                    ];\n                                }\n                            }), null);\n                            insert(_el$, createComponent(Show, {\n                                get when () {\n                                    return props.onClickQuestion;\n                                },\n                                get children () {\n                                    return createComponent(ModalFooterStyled, {\n                                        get children () {\n                                            return [\n                                                createComponent(TonConnectBrand, {}),\n                                                createComponent(QuestionButtonStyled, {\n                                                    get onClick () {\n                                                        return props.onClickQuestion;\n                                                    },\n                                                    icon: \"question\"\n                                                })\n                                            ];\n                                        }\n                                    });\n                                }\n                            }), null);\n                            createRenderEffect(()=>className(_el$, classnames__WEBPACK_IMPORTED_MODULE_3__(ModalWrapperClass, u`\n                                border-radius: ${borders$4[theme.borderRadius]};\n                                background-color: ${theme.colors.background.tint};\n\n                                ${media(\"mobile\")} {\n                                    border-radius: ${borders$4[theme.borderRadius]}\n                                        ${borders$4[theme.borderRadius]} 0 0;\n                                }\n                            `)));\n                            return _el$;\n                        }\n                    }));\n                }\n            });\n        }\n    });\n};\nconst wrapperBorderRadius = {\n    m: \"22px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst sliderBorderRadius = {\n    m: \"18px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst TabBarStyled = styled.div`\n    display: grid;\n    grid-template: 1fr / 1fr 1fr;\n    width: fit-content;\n    justify-items: center;\n    gap: 4px;\n\n    position: relative;\n    padding: 4px;\n    border-radius: ${(props)=>wrapperBorderRadius[props.theme.borderRadius]};\n\n    background-color: ${(props)=>props.theme.colors.background.secondary};\n`;\nconst SliderStyled = styled.div`\n    position: absolute;\n    top: 4px;\n    left: 4px;\n\n    height: calc(100% - 8px);\n    width: calc(50% - 4px);\n\n    border-radius: ${(props)=>sliderBorderRadius[props.theme.borderRadius]};\n    background-color: ${(props)=>props.theme.colors.background.segment};\n\n    transform: ${(props)=>props.right ? \"translateX(100%)\" : \"translateX(0)\"};\n\n    transition: transform 0.13s ease-in-out;\n`;\nconst InputStyled = styled.input`\n    display: none;\n`;\nconst LabelStyled = styled.label`\n    padding: 9px 12px;\n    z-index: 1;\n\n    cursor: ${(props)=>props.isActive ? \"default\" : \"pointer\"};\n\n    transition: transform 0.13s ease-in-out;\n\n    &:hover {\n        transform: ${(props)=>props.isActive ? \"none\" : \"scale(1.025)\"};\n    }\n\n    > * {\n        ${(props)=>!props.isActive ? `color: ${props.theme.colors.text.secondary};` : \"\"}\n    }\n`;\nconst TabBar = (props)=>{\n    const groupName = \"tabBar\" + Math.floor(Math.random() * 1e4);\n    return createComponent(TabBarStyled, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-tab-bar\": \"true\",\n        get children () {\n            return [\n                createComponent(SliderStyled, {\n                    get right () {\n                        return props.selectedTabIndex === 1;\n                    }\n                }),\n                createComponent(LabelStyled, {\n                    get isActive () {\n                        return props.selectedTabIndex === 0;\n                    },\n                    get children () {\n                        return [\n                            createComponent(InputStyled, {\n                                type: \"radio\",\n                                name: groupName,\n                                get checked () {\n                                    return props.selectedTabIndex === 0;\n                                },\n                                onInput: ()=>{\n                                    var _a2;\n                                    return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);\n                                }\n                            }),\n                            createMemo(()=>props.tab1)\n                        ];\n                    }\n                }),\n                createComponent(LabelStyled, {\n                    get isActive () {\n                        return props.selectedTabIndex === 1;\n                    },\n                    get children () {\n                        return [\n                            createComponent(InputStyled, {\n                                type: \"radio\",\n                                get checked () {\n                                    return props.selectedTabIndex === 1;\n                                },\n                                name: groupName,\n                                onInput: ()=>{\n                                    var _a2;\n                                    return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);\n                                }\n                            }),\n                            createMemo(()=>props.tab2)\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst backgroundBorders = {\n    m: \"16px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst imageBorders = {\n    m: \"12px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst qrNormalSize = 256;\nconst imgSizeDefault = 60;\nconst picSizeDefault = 48;\nconst qrPaddingTop = 24;\nconst CopyIconButton = styled.div`\n    width: 52px;\n    height: 52px;\n    background: transparent;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: transform 0.125s ease-in-out;\n`;\nconst QrCodeBackground = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: ${(props)=>props.theme.colors.background.qr};\n    border-radius: ${(props)=>backgroundBorders[props.theme.borderRadius]};\n    padding: ${toPx(qrPaddingTop)} 0;\n    height: ${toPx(qrNormalSize + qrPaddingTop * 2)};\n    width: 100%;\n\n    overflow: hidden;\n    cursor: pointer;\n    border: none;\n\n    ${mediaNotTouch} {\n        &:hover {\n            ${CopyIconButton.class} {\n                transform: scale(1.04);\n            }\n        }\n    }\n\n    &:active {\n        ${CopyIconButton.class} {\n            transform: scale(0.96);\n        }\n    }\n\n    ${mediaTouch} {\n        &:active {\n            ${CopyIconButton.class} {\n                transform: scale(0.92);\n            }\n        }\n    }\n`;\nconst QrCodeWrapper$2 = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n\n    > div:first-child {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    rect {\n        fill: transparent;\n    }\n\n    path {\n        fill: ${(props)=>props.theme.colors.constant.black};\n    }\n`;\nconst ImageBackground = styled.div`\n    position: absolute;\n    width: ${toPx(imgSizeDefault)};\n    height: ${toPx(imgSizeDefault)};\n    background: ${(props)=>props.theme.colors.background.qr};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\nconst ImageStyled$3 = styled(Image)`\n    width: ${(props)=>toPx(props.size)};\n    height: ${(props)=>toPx(props.size)};\n    border-radius: ${(props)=>imageBorders[props.theme.borderRadius]};\n    background-color: ${(props)=>props.theme.colors.background.qr};\n`;\nconst CopiedBoxStyled = styled.div`\n    position: absolute;\n    bottom: 14px;\n    left: 50%;\n    transform: translate(-50%, 0);\n\n    display: flex;\n    gap: 6px;\n    align-items: center;\n    border-radius: 18px;\n    min-width: 126px;\n    padding: 9px 16px 9px 10px;\n\n    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));\n    background-color: ${(props)=>props.theme.colors.background.segment};\n`;\nvar qrcode$1 = {\n    exports: {}\n};\n(function(module, exports) {\n    var qrcode2 = function() {\n        var qrcode3 = function(typeNumber, errorCorrectionLevel) {\n            var PAD0 = 236;\n            var PAD1 = 17;\n            var _typeNumber = typeNumber;\n            var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n            var _modules = null;\n            var _moduleCount = 0;\n            var _dataCache = null;\n            var _dataList = [];\n            var _this = {};\n            var makeImpl = function(test, maskPattern) {\n                _moduleCount = _typeNumber * 4 + 17;\n                _modules = function(moduleCount) {\n                    var modules = new Array(moduleCount);\n                    for(var row = 0; row < moduleCount; row += 1){\n                        modules[row] = new Array(moduleCount);\n                        for(var col = 0; col < moduleCount; col += 1){\n                            modules[row][col] = null;\n                        }\n                    }\n                    return modules;\n                }(_moduleCount);\n                setupPositionProbePattern(0, 0);\n                setupPositionProbePattern(_moduleCount - 7, 0);\n                setupPositionProbePattern(0, _moduleCount - 7);\n                setupPositionAdjustPattern();\n                setupTimingPattern();\n                setupTypeInfo(test, maskPattern);\n                if (_typeNumber >= 7) {\n                    setupTypeNumber(test);\n                }\n                if (_dataCache == null) {\n                    _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n                }\n                mapData(_dataCache, maskPattern);\n            };\n            var setupPositionProbePattern = function(row, col) {\n                for(var r = -1; r <= 7; r += 1){\n                    if (row + r <= -1 || _moduleCount <= row + r) continue;\n                    for(var c2 = -1; c2 <= 7; c2 += 1){\n                        if (col + c2 <= -1 || _moduleCount <= col + c2) continue;\n                        if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) {\n                            _modules[row + r][col + c2] = true;\n                        } else {\n                            _modules[row + r][col + c2] = false;\n                        }\n                    }\n                }\n            };\n            var getBestMaskPattern = function() {\n                var minLostPoint = 0;\n                var pattern = 0;\n                for(var i2 = 0; i2 < 8; i2 += 1){\n                    makeImpl(true, i2);\n                    var lostPoint = QRUtil.getLostPoint(_this);\n                    if (i2 == 0 || minLostPoint > lostPoint) {\n                        minLostPoint = lostPoint;\n                        pattern = i2;\n                    }\n                }\n                return pattern;\n            };\n            var setupTimingPattern = function() {\n                for(var r = 8; r < _moduleCount - 8; r += 1){\n                    if (_modules[r][6] != null) {\n                        continue;\n                    }\n                    _modules[r][6] = r % 2 == 0;\n                }\n                for(var c2 = 8; c2 < _moduleCount - 8; c2 += 1){\n                    if (_modules[6][c2] != null) {\n                        continue;\n                    }\n                    _modules[6][c2] = c2 % 2 == 0;\n                }\n            };\n            var setupPositionAdjustPattern = function() {\n                var pos = QRUtil.getPatternPosition(_typeNumber);\n                for(var i2 = 0; i2 < pos.length; i2 += 1){\n                    for(var j = 0; j < pos.length; j += 1){\n                        var row = pos[i2];\n                        var col = pos[j];\n                        if (_modules[row][col] != null) {\n                            continue;\n                        }\n                        for(var r = -2; r <= 2; r += 1){\n                            for(var c2 = -2; c2 <= 2; c2 += 1){\n                                if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) {\n                                    _modules[row + r][col + c2] = true;\n                                } else {\n                                    _modules[row + r][col + c2] = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n            var setupTypeNumber = function(test) {\n                var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n                for(var i2 = 0; i2 < 18; i2 += 1){\n                    var mod = !test && (bits >> i2 & 1) == 1;\n                    _modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;\n                }\n                for(var i2 = 0; i2 < 18; i2 += 1){\n                    var mod = !test && (bits >> i2 & 1) == 1;\n                    _modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;\n                }\n            };\n            var setupTypeInfo = function(test, maskPattern) {\n                var data = _errorCorrectionLevel << 3 | maskPattern;\n                var bits = QRUtil.getBCHTypeInfo(data);\n                for(var i2 = 0; i2 < 15; i2 += 1){\n                    var mod = !test && (bits >> i2 & 1) == 1;\n                    if (i2 < 6) {\n                        _modules[i2][8] = mod;\n                    } else if (i2 < 8) {\n                        _modules[i2 + 1][8] = mod;\n                    } else {\n                        _modules[_moduleCount - 15 + i2][8] = mod;\n                    }\n                }\n                for(var i2 = 0; i2 < 15; i2 += 1){\n                    var mod = !test && (bits >> i2 & 1) == 1;\n                    if (i2 < 8) {\n                        _modules[8][_moduleCount - i2 - 1] = mod;\n                    } else if (i2 < 9) {\n                        _modules[8][15 - i2 - 1 + 1] = mod;\n                    } else {\n                        _modules[8][15 - i2 - 1] = mod;\n                    }\n                }\n                _modules[_moduleCount - 8][8] = !test;\n            };\n            var mapData = function(data, maskPattern) {\n                var inc = -1;\n                var row = _moduleCount - 1;\n                var bitIndex = 7;\n                var byteIndex = 0;\n                var maskFunc = QRUtil.getMaskFunction(maskPattern);\n                for(var col = _moduleCount - 1; col > 0; col -= 2){\n                    if (col == 6) col -= 1;\n                    while(true){\n                        for(var c2 = 0; c2 < 2; c2 += 1){\n                            if (_modules[row][col - c2] == null) {\n                                var dark = false;\n                                if (byteIndex < data.length) {\n                                    dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n                                }\n                                var mask = maskFunc(row, col - c2);\n                                if (mask) {\n                                    dark = !dark;\n                                }\n                                _modules[row][col - c2] = dark;\n                                bitIndex -= 1;\n                                if (bitIndex == -1) {\n                                    byteIndex += 1;\n                                    bitIndex = 7;\n                                }\n                            }\n                        }\n                        row += inc;\n                        if (row < 0 || _moduleCount <= row) {\n                            row -= inc;\n                            inc = -inc;\n                            break;\n                        }\n                    }\n                }\n            };\n            var createBytes = function(buffer, rsBlocks) {\n                var offset = 0;\n                var maxDcCount = 0;\n                var maxEcCount = 0;\n                var dcdata = new Array(rsBlocks.length);\n                var ecdata = new Array(rsBlocks.length);\n                for(var r = 0; r < rsBlocks.length; r += 1){\n                    var dcCount = rsBlocks[r].dataCount;\n                    var ecCount = rsBlocks[r].totalCount - dcCount;\n                    maxDcCount = Math.max(maxDcCount, dcCount);\n                    maxEcCount = Math.max(maxEcCount, ecCount);\n                    dcdata[r] = new Array(dcCount);\n                    for(var i2 = 0; i2 < dcdata[r].length; i2 += 1){\n                        dcdata[r][i2] = 255 & buffer.getBuffer()[i2 + offset];\n                    }\n                    offset += dcCount;\n                    var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n                    var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n                    var modPoly = rawPoly.mod(rsPoly);\n                    ecdata[r] = new Array(rsPoly.getLength() - 1);\n                    for(var i2 = 0; i2 < ecdata[r].length; i2 += 1){\n                        var modIndex = i2 + modPoly.getLength() - ecdata[r].length;\n                        ecdata[r][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n                    }\n                }\n                var totalCodeCount = 0;\n                for(var i2 = 0; i2 < rsBlocks.length; i2 += 1){\n                    totalCodeCount += rsBlocks[i2].totalCount;\n                }\n                var data = new Array(totalCodeCount);\n                var index = 0;\n                for(var i2 = 0; i2 < maxDcCount; i2 += 1){\n                    for(var r = 0; r < rsBlocks.length; r += 1){\n                        if (i2 < dcdata[r].length) {\n                            data[index] = dcdata[r][i2];\n                            index += 1;\n                        }\n                    }\n                }\n                for(var i2 = 0; i2 < maxEcCount; i2 += 1){\n                    for(var r = 0; r < rsBlocks.length; r += 1){\n                        if (i2 < ecdata[r].length) {\n                            data[index] = ecdata[r][i2];\n                            index += 1;\n                        }\n                    }\n                }\n                return data;\n            };\n            var createData = function(typeNumber2, errorCorrectionLevel2, dataList) {\n                var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);\n                var buffer = qrBitBuffer();\n                for(var i2 = 0; i2 < dataList.length; i2 += 1){\n                    var data = dataList[i2];\n                    buffer.put(data.getMode(), 4);\n                    buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));\n                    data.write(buffer);\n                }\n                var totalDataCount = 0;\n                for(var i2 = 0; i2 < rsBlocks.length; i2 += 1){\n                    totalDataCount += rsBlocks[i2].dataCount;\n                }\n                if (buffer.getLengthInBits() > totalDataCount * 8) {\n                    throw \"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\";\n                }\n                if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n                    buffer.put(0, 4);\n                }\n                while(buffer.getLengthInBits() % 8 != 0){\n                    buffer.putBit(false);\n                }\n                while(true){\n                    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                        break;\n                    }\n                    buffer.put(PAD0, 8);\n                    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                        break;\n                    }\n                    buffer.put(PAD1, 8);\n                }\n                return createBytes(buffer, rsBlocks);\n            };\n            _this.addData = function(data, mode) {\n                mode = mode || \"Byte\";\n                var newData = null;\n                switch(mode){\n                    case \"Numeric\":\n                        newData = qrNumber(data);\n                        break;\n                    case \"Alphanumeric\":\n                        newData = qrAlphaNum(data);\n                        break;\n                    case \"Byte\":\n                        newData = qr8BitByte(data);\n                        break;\n                    case \"Kanji\":\n                        newData = qrKanji(data);\n                        break;\n                    default:\n                        throw \"mode:\" + mode;\n                }\n                _dataList.push(newData);\n                _dataCache = null;\n            };\n            _this.isDark = function(row, col) {\n                if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n                    throw row + \",\" + col;\n                }\n                return _modules[row][col];\n            };\n            _this.getModuleCount = function() {\n                return _moduleCount;\n            };\n            _this.make = function() {\n                if (_typeNumber < 1) {\n                    var typeNumber2 = 1;\n                    for(; typeNumber2 < 40; typeNumber2++){\n                        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);\n                        var buffer = qrBitBuffer();\n                        for(var i2 = 0; i2 < _dataList.length; i2++){\n                            var data = _dataList[i2];\n                            buffer.put(data.getMode(), 4);\n                            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));\n                            data.write(buffer);\n                        }\n                        var totalDataCount = 0;\n                        for(var i2 = 0; i2 < rsBlocks.length; i2++){\n                            totalDataCount += rsBlocks[i2].dataCount;\n                        }\n                        if (buffer.getLengthInBits() <= totalDataCount * 8) {\n                            break;\n                        }\n                    }\n                    _typeNumber = typeNumber2;\n                }\n                makeImpl(false, getBestMaskPattern());\n            };\n            _this.createTableTag = function(cellSize, margin) {\n                cellSize = cellSize || 2;\n                margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n                var qrHtml = \"\";\n                qrHtml += '<table style=\"';\n                qrHtml += \" border-width: 0px; border-style: none;\";\n                qrHtml += \" border-collapse: collapse;\";\n                qrHtml += \" padding: 0px; margin: \" + margin + \"px;\";\n                qrHtml += '\">';\n                qrHtml += \"<tbody>\";\n                for(var r = 0; r < _this.getModuleCount(); r += 1){\n                    qrHtml += \"<tr>\";\n                    for(var c2 = 0; c2 < _this.getModuleCount(); c2 += 1){\n                        qrHtml += '<td style=\"';\n                        qrHtml += \" border-width: 0px; border-style: none;\";\n                        qrHtml += \" border-collapse: collapse;\";\n                        qrHtml += \" padding: 0px; margin: 0px;\";\n                        qrHtml += \" width: \" + cellSize + \"px;\";\n                        qrHtml += \" height: \" + cellSize + \"px;\";\n                        qrHtml += \" background-color: \";\n                        qrHtml += _this.isDark(r, c2) ? \"#000000\" : \"#ffffff\";\n                        qrHtml += \";\";\n                        qrHtml += '\"/>';\n                    }\n                    qrHtml += \"</tr>\";\n                }\n                qrHtml += \"</tbody>\";\n                qrHtml += \"</table>\";\n                return qrHtml;\n            };\n            _this.createSvgTag = function(cellSize, margin, alt, title) {\n                var opts = {};\n                if (typeof arguments[0] == \"object\") {\n                    opts = arguments[0];\n                    cellSize = opts.cellSize;\n                    margin = opts.margin;\n                    alt = opts.alt;\n                    title = opts.title;\n                }\n                cellSize = cellSize || 2;\n                margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n                alt = typeof alt === \"string\" ? {\n                    text: alt\n                } : alt || {};\n                alt.text = alt.text || null;\n                alt.id = alt.text ? alt.id || \"qrcode-description\" : null;\n                title = typeof title === \"string\" ? {\n                    text: title\n                } : title || {};\n                title.text = title.text || null;\n                title.id = title.text ? title.id || \"qrcode-title\" : null;\n                var size = _this.getModuleCount() * cellSize + margin * 2;\n                var c2, mc, r, mr, qrSvg = \"\", rect;\n                rect = \"l\" + cellSize + \",0 0,\" + cellSize + \" -\" + cellSize + \",0 0,-\" + cellSize + \"z \";\n                qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n                qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : \"\";\n                qrSvg += ' viewBox=\"0 0 ' + size + \" \" + size + '\" ';\n                qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n                qrSvg += title.text || alt.text ? ' role=\"img\" aria-labelledby=\"' + escapeXml([\n                    title.id,\n                    alt.id\n                ].join(\" \").trim()) + '\"' : \"\";\n                qrSvg += \">\";\n                qrSvg += title.text ? '<title id=\"' + escapeXml(title.id) + '\">' + escapeXml(title.text) + \"</title>\" : \"\";\n                qrSvg += alt.text ? '<description id=\"' + escapeXml(alt.id) + '\">' + escapeXml(alt.text) + \"</description>\" : \"\";\n                qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n                qrSvg += '<path d=\"';\n                for(r = 0; r < _this.getModuleCount(); r += 1){\n                    mr = r * cellSize + margin;\n                    for(c2 = 0; c2 < _this.getModuleCount(); c2 += 1){\n                        if (_this.isDark(r, c2)) {\n                            mc = c2 * cellSize + margin;\n                            qrSvg += \"M\" + mc + \",\" + mr + rect;\n                        }\n                    }\n                }\n                qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n                qrSvg += \"</svg>\";\n                return qrSvg;\n            };\n            _this.createDataURL = function(cellSize, margin) {\n                cellSize = cellSize || 2;\n                margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n                var size = _this.getModuleCount() * cellSize + margin * 2;\n                var min2 = margin;\n                var max2 = size - margin;\n                return createDataURL(size, size, function(x, y) {\n                    if (min2 <= x && x < max2 && min2 <= y && y < max2) {\n                        var c2 = Math.floor((x - min2) / cellSize);\n                        var r = Math.floor((y - min2) / cellSize);\n                        return _this.isDark(r, c2) ? 0 : 1;\n                    } else {\n                        return 1;\n                    }\n                });\n            };\n            _this.createImgTag = function(cellSize, margin, alt) {\n                cellSize = cellSize || 2;\n                margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n                var size = _this.getModuleCount() * cellSize + margin * 2;\n                var img = \"\";\n                img += \"<img\";\n                img += ' src=\"';\n                img += _this.createDataURL(cellSize, margin);\n                img += '\"';\n                img += ' width=\"';\n                img += size;\n                img += '\"';\n                img += ' height=\"';\n                img += size;\n                img += '\"';\n                if (alt) {\n                    img += ' alt=\"';\n                    img += escapeXml(alt);\n                    img += '\"';\n                }\n                img += \"/>\";\n                return img;\n            };\n            var escapeXml = function(s2) {\n                var escaped = \"\";\n                for(var i2 = 0; i2 < s2.length; i2 += 1){\n                    var c2 = s2.charAt(i2);\n                    switch(c2){\n                        case \"<\":\n                            escaped += \"&lt;\";\n                            break;\n                        case \">\":\n                            escaped += \"&gt;\";\n                            break;\n                        case \"&\":\n                            escaped += \"&amp;\";\n                            break;\n                        case '\"':\n                            escaped += \"&quot;\";\n                            break;\n                        default:\n                            escaped += c2;\n                            break;\n                    }\n                }\n                return escaped;\n            };\n            var _createHalfASCII = function(margin) {\n                var cellSize = 1;\n                margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n                var size = _this.getModuleCount() * cellSize + margin * 2;\n                var min2 = margin;\n                var max2 = size - margin;\n                var y, x, r1, r2, p2;\n                var blocks = {\n                    \"██\": \"█\",\n                    \"█ \": \"▀\",\n                    \" █\": \"▄\",\n                    \"  \": \" \"\n                };\n                var blocksLastLineNoMargin = {\n                    \"██\": \"▀\",\n                    \"█ \": \"▀\",\n                    \" █\": \" \",\n                    \"  \": \" \"\n                };\n                var ascii = \"\";\n                for(y = 0; y < size; y += 2){\n                    r1 = Math.floor((y - min2) / cellSize);\n                    r2 = Math.floor((y + 1 - min2) / cellSize);\n                    for(x = 0; x < size; x += 1){\n                        p2 = \"█\";\n                        if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r1, Math.floor((x - min2) / cellSize))) {\n                            p2 = \" \";\n                        }\n                        if (min2 <= x && x < max2 && min2 <= y + 1 && y + 1 < max2 && _this.isDark(r2, Math.floor((x - min2) / cellSize))) {\n                            p2 += \" \";\n                        } else {\n                            p2 += \"█\";\n                        }\n                        ascii += margin < 1 && y + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];\n                    }\n                    ascii += \"\\n\";\n                }\n                if (size % 2 && margin > 0) {\n                    return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join(\"▀\");\n                }\n                return ascii.substring(0, ascii.length - 1);\n            };\n            _this.createASCII = function(cellSize, margin) {\n                cellSize = cellSize || 1;\n                if (cellSize < 2) {\n                    return _createHalfASCII(margin);\n                }\n                cellSize -= 1;\n                margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n                var size = _this.getModuleCount() * cellSize + margin * 2;\n                var min2 = margin;\n                var max2 = size - margin;\n                var y, x, r, p2;\n                var white = Array(cellSize + 1).join(\"██\");\n                var black = Array(cellSize + 1).join(\"  \");\n                var ascii = \"\";\n                var line = \"\";\n                for(y = 0; y < size; y += 1){\n                    r = Math.floor((y - min2) / cellSize);\n                    line = \"\";\n                    for(x = 0; x < size; x += 1){\n                        p2 = 1;\n                        if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r, Math.floor((x - min2) / cellSize))) {\n                            p2 = 0;\n                        }\n                        line += p2 ? white : black;\n                    }\n                    for(r = 0; r < cellSize; r += 1){\n                        ascii += line + \"\\n\";\n                    }\n                }\n                return ascii.substring(0, ascii.length - 1);\n            };\n            _this.renderTo2dContext = function(context, cellSize) {\n                cellSize = cellSize || 2;\n                var length = _this.getModuleCount();\n                for(var row = 0; row < length; row++){\n                    for(var col = 0; col < length; col++){\n                        context.fillStyle = _this.isDark(row, col) ? \"black\" : \"white\";\n                        context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n                    }\n                }\n            };\n            return _this;\n        };\n        qrcode3.stringToBytesFuncs = {\n            \"default\": function(s2) {\n                var bytes = [];\n                for(var i2 = 0; i2 < s2.length; i2 += 1){\n                    var c2 = s2.charCodeAt(i2);\n                    bytes.push(c2 & 255);\n                }\n                return bytes;\n            }\n        };\n        qrcode3.stringToBytes = qrcode3.stringToBytesFuncs[\"default\"];\n        qrcode3.createStringToBytes = function(unicodeData, numChars) {\n            var unicodeMap = function() {\n                var bin = base64DecodeInputStream(unicodeData);\n                var read = function() {\n                    var b = bin.read();\n                    if (b == -1) throw \"eof\";\n                    return b;\n                };\n                var count = 0;\n                var unicodeMap2 = {};\n                while(true){\n                    var b0 = bin.read();\n                    if (b0 == -1) break;\n                    var b1 = read();\n                    var b2 = read();\n                    var b3 = read();\n                    var k = String.fromCharCode(b0 << 8 | b1);\n                    var v = b2 << 8 | b3;\n                    unicodeMap2[k] = v;\n                    count += 1;\n                }\n                if (count != numChars) {\n                    throw count + \" != \" + numChars;\n                }\n                return unicodeMap2;\n            }();\n            var unknownChar = \"?\".charCodeAt(0);\n            return function(s2) {\n                var bytes = [];\n                for(var i2 = 0; i2 < s2.length; i2 += 1){\n                    var c2 = s2.charCodeAt(i2);\n                    if (c2 < 128) {\n                        bytes.push(c2);\n                    } else {\n                        var b = unicodeMap[s2.charAt(i2)];\n                        if (typeof b == \"number\") {\n                            if ((b & 255) == b) {\n                                bytes.push(b);\n                            } else {\n                                bytes.push(b >>> 8);\n                                bytes.push(b & 255);\n                            }\n                        } else {\n                            bytes.push(unknownChar);\n                        }\n                    }\n                }\n                return bytes;\n            };\n        };\n        var QRMode = {\n            MODE_NUMBER: 1 << 0,\n            MODE_ALPHA_NUM: 1 << 1,\n            MODE_8BIT_BYTE: 1 << 2,\n            MODE_KANJI: 1 << 3\n        };\n        var QRErrorCorrectionLevel = {\n            L: 1,\n            M: 0,\n            Q: 3,\n            H: 2\n        };\n        var QRMaskPattern = {\n            PATTERN000: 0,\n            PATTERN001: 1,\n            PATTERN010: 2,\n            PATTERN011: 3,\n            PATTERN100: 4,\n            PATTERN101: 5,\n            PATTERN110: 6,\n            PATTERN111: 7\n        };\n        var QRUtil = function() {\n            var PATTERN_POSITION_TABLE = [\n                [],\n                [\n                    6,\n                    18\n                ],\n                [\n                    6,\n                    22\n                ],\n                [\n                    6,\n                    26\n                ],\n                [\n                    6,\n                    30\n                ],\n                [\n                    6,\n                    34\n                ],\n                [\n                    6,\n                    22,\n                    38\n                ],\n                [\n                    6,\n                    24,\n                    42\n                ],\n                [\n                    6,\n                    26,\n                    46\n                ],\n                [\n                    6,\n                    28,\n                    50\n                ],\n                [\n                    6,\n                    30,\n                    54\n                ],\n                [\n                    6,\n                    32,\n                    58\n                ],\n                [\n                    6,\n                    34,\n                    62\n                ],\n                [\n                    6,\n                    26,\n                    46,\n                    66\n                ],\n                [\n                    6,\n                    26,\n                    48,\n                    70\n                ],\n                [\n                    6,\n                    26,\n                    50,\n                    74\n                ],\n                [\n                    6,\n                    30,\n                    54,\n                    78\n                ],\n                [\n                    6,\n                    30,\n                    56,\n                    82\n                ],\n                [\n                    6,\n                    30,\n                    58,\n                    86\n                ],\n                [\n                    6,\n                    34,\n                    62,\n                    90\n                ],\n                [\n                    6,\n                    28,\n                    50,\n                    72,\n                    94\n                ],\n                [\n                    6,\n                    26,\n                    50,\n                    74,\n                    98\n                ],\n                [\n                    6,\n                    30,\n                    54,\n                    78,\n                    102\n                ],\n                [\n                    6,\n                    28,\n                    54,\n                    80,\n                    106\n                ],\n                [\n                    6,\n                    32,\n                    58,\n                    84,\n                    110\n                ],\n                [\n                    6,\n                    30,\n                    58,\n                    86,\n                    114\n                ],\n                [\n                    6,\n                    34,\n                    62,\n                    90,\n                    118\n                ],\n                [\n                    6,\n                    26,\n                    50,\n                    74,\n                    98,\n                    122\n                ],\n                [\n                    6,\n                    30,\n                    54,\n                    78,\n                    102,\n                    126\n                ],\n                [\n                    6,\n                    26,\n                    52,\n                    78,\n                    104,\n                    130\n                ],\n                [\n                    6,\n                    30,\n                    56,\n                    82,\n                    108,\n                    134\n                ],\n                [\n                    6,\n                    34,\n                    60,\n                    86,\n                    112,\n                    138\n                ],\n                [\n                    6,\n                    30,\n                    58,\n                    86,\n                    114,\n                    142\n                ],\n                [\n                    6,\n                    34,\n                    62,\n                    90,\n                    118,\n                    146\n                ],\n                [\n                    6,\n                    30,\n                    54,\n                    78,\n                    102,\n                    126,\n                    150\n                ],\n                [\n                    6,\n                    24,\n                    50,\n                    76,\n                    102,\n                    128,\n                    154\n                ],\n                [\n                    6,\n                    28,\n                    54,\n                    80,\n                    106,\n                    132,\n                    158\n                ],\n                [\n                    6,\n                    32,\n                    58,\n                    84,\n                    110,\n                    136,\n                    162\n                ],\n                [\n                    6,\n                    26,\n                    54,\n                    82,\n                    110,\n                    138,\n                    166\n                ],\n                [\n                    6,\n                    30,\n                    58,\n                    86,\n                    114,\n                    142,\n                    170\n                ]\n            ];\n            var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n            var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n            var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n            var _this = {};\n            var getBCHDigit = function(data) {\n                var digit = 0;\n                while(data != 0){\n                    digit += 1;\n                    data >>>= 1;\n                }\n                return digit;\n            };\n            _this.getBCHTypeInfo = function(data) {\n                var d = data << 10;\n                while(getBCHDigit(d) - getBCHDigit(G15) >= 0){\n                    d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n                }\n                return (data << 10 | d) ^ G15_MASK;\n            };\n            _this.getBCHTypeNumber = function(data) {\n                var d = data << 12;\n                while(getBCHDigit(d) - getBCHDigit(G18) >= 0){\n                    d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n                }\n                return data << 12 | d;\n            };\n            _this.getPatternPosition = function(typeNumber) {\n                return PATTERN_POSITION_TABLE[typeNumber - 1];\n            };\n            _this.getMaskFunction = function(maskPattern) {\n                switch(maskPattern){\n                    case QRMaskPattern.PATTERN000:\n                        return function(i2, j) {\n                            return (i2 + j) % 2 == 0;\n                        };\n                    case QRMaskPattern.PATTERN001:\n                        return function(i2, j) {\n                            return i2 % 2 == 0;\n                        };\n                    case QRMaskPattern.PATTERN010:\n                        return function(i2, j) {\n                            return j % 3 == 0;\n                        };\n                    case QRMaskPattern.PATTERN011:\n                        return function(i2, j) {\n                            return (i2 + j) % 3 == 0;\n                        };\n                    case QRMaskPattern.PATTERN100:\n                        return function(i2, j) {\n                            return (Math.floor(i2 / 2) + Math.floor(j / 3)) % 2 == 0;\n                        };\n                    case QRMaskPattern.PATTERN101:\n                        return function(i2, j) {\n                            return i2 * j % 2 + i2 * j % 3 == 0;\n                        };\n                    case QRMaskPattern.PATTERN110:\n                        return function(i2, j) {\n                            return (i2 * j % 2 + i2 * j % 3) % 2 == 0;\n                        };\n                    case QRMaskPattern.PATTERN111:\n                        return function(i2, j) {\n                            return (i2 * j % 3 + (i2 + j) % 2) % 2 == 0;\n                        };\n                    default:\n                        throw \"bad maskPattern:\" + maskPattern;\n                }\n            };\n            _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n                var a2 = qrPolynomial([\n                    1\n                ], 0);\n                for(var i2 = 0; i2 < errorCorrectLength; i2 += 1){\n                    a2 = a2.multiply(qrPolynomial([\n                        1,\n                        QRMath.gexp(i2)\n                    ], 0));\n                }\n                return a2;\n            };\n            _this.getLengthInBits = function(mode, type) {\n                if (1 <= type && type < 10) {\n                    switch(mode){\n                        case QRMode.MODE_NUMBER:\n                            return 10;\n                        case QRMode.MODE_ALPHA_NUM:\n                            return 9;\n                        case QRMode.MODE_8BIT_BYTE:\n                            return 8;\n                        case QRMode.MODE_KANJI:\n                            return 8;\n                        default:\n                            throw \"mode:\" + mode;\n                    }\n                } else if (type < 27) {\n                    switch(mode){\n                        case QRMode.MODE_NUMBER:\n                            return 12;\n                        case QRMode.MODE_ALPHA_NUM:\n                            return 11;\n                        case QRMode.MODE_8BIT_BYTE:\n                            return 16;\n                        case QRMode.MODE_KANJI:\n                            return 10;\n                        default:\n                            throw \"mode:\" + mode;\n                    }\n                } else if (type < 41) {\n                    switch(mode){\n                        case QRMode.MODE_NUMBER:\n                            return 14;\n                        case QRMode.MODE_ALPHA_NUM:\n                            return 13;\n                        case QRMode.MODE_8BIT_BYTE:\n                            return 16;\n                        case QRMode.MODE_KANJI:\n                            return 12;\n                        default:\n                            throw \"mode:\" + mode;\n                    }\n                } else {\n                    throw \"type:\" + type;\n                }\n            };\n            _this.getLostPoint = function(qrcode4) {\n                var moduleCount = qrcode4.getModuleCount();\n                var lostPoint = 0;\n                for(var row = 0; row < moduleCount; row += 1){\n                    for(var col = 0; col < moduleCount; col += 1){\n                        var sameCount = 0;\n                        var dark = qrcode4.isDark(row, col);\n                        for(var r = -1; r <= 1; r += 1){\n                            if (row + r < 0 || moduleCount <= row + r) {\n                                continue;\n                            }\n                            for(var c2 = -1; c2 <= 1; c2 += 1){\n                                if (col + c2 < 0 || moduleCount <= col + c2) {\n                                    continue;\n                                }\n                                if (r == 0 && c2 == 0) {\n                                    continue;\n                                }\n                                if (dark == qrcode4.isDark(row + r, col + c2)) {\n                                    sameCount += 1;\n                                }\n                            }\n                        }\n                        if (sameCount > 5) {\n                            lostPoint += 3 + sameCount - 5;\n                        }\n                    }\n                }\n                for(var row = 0; row < moduleCount - 1; row += 1){\n                    for(var col = 0; col < moduleCount - 1; col += 1){\n                        var count = 0;\n                        if (qrcode4.isDark(row, col)) count += 1;\n                        if (qrcode4.isDark(row + 1, col)) count += 1;\n                        if (qrcode4.isDark(row, col + 1)) count += 1;\n                        if (qrcode4.isDark(row + 1, col + 1)) count += 1;\n                        if (count == 0 || count == 4) {\n                            lostPoint += 3;\n                        }\n                    }\n                }\n                for(var row = 0; row < moduleCount; row += 1){\n                    for(var col = 0; col < moduleCount - 6; col += 1){\n                        if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) {\n                            lostPoint += 40;\n                        }\n                    }\n                }\n                for(var col = 0; col < moduleCount; col += 1){\n                    for(var row = 0; row < moduleCount - 6; row += 1){\n                        if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) {\n                            lostPoint += 40;\n                        }\n                    }\n                }\n                var darkCount = 0;\n                for(var col = 0; col < moduleCount; col += 1){\n                    for(var row = 0; row < moduleCount; row += 1){\n                        if (qrcode4.isDark(row, col)) {\n                            darkCount += 1;\n                        }\n                    }\n                }\n                var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n                lostPoint += ratio * 10;\n                return lostPoint;\n            };\n            return _this;\n        }();\n        var QRMath = function() {\n            var EXP_TABLE = new Array(256);\n            var LOG_TABLE = new Array(256);\n            for(var i2 = 0; i2 < 8; i2 += 1){\n                EXP_TABLE[i2] = 1 << i2;\n            }\n            for(var i2 = 8; i2 < 256; i2 += 1){\n                EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];\n            }\n            for(var i2 = 0; i2 < 255; i2 += 1){\n                LOG_TABLE[EXP_TABLE[i2]] = i2;\n            }\n            var _this = {};\n            _this.glog = function(n2) {\n                if (n2 < 1) {\n                    throw \"glog(\" + n2 + \")\";\n                }\n                return LOG_TABLE[n2];\n            };\n            _this.gexp = function(n2) {\n                while(n2 < 0){\n                    n2 += 255;\n                }\n                while(n2 >= 256){\n                    n2 -= 255;\n                }\n                return EXP_TABLE[n2];\n            };\n            return _this;\n        }();\n        function qrPolynomial(num, shift) {\n            if (typeof num.length == \"undefined\") {\n                throw num.length + \"/\" + shift;\n            }\n            var _num = function() {\n                var offset = 0;\n                while(offset < num.length && num[offset] == 0){\n                    offset += 1;\n                }\n                var _num2 = new Array(num.length - offset + shift);\n                for(var i2 = 0; i2 < num.length - offset; i2 += 1){\n                    _num2[i2] = num[i2 + offset];\n                }\n                return _num2;\n            }();\n            var _this = {};\n            _this.getAt = function(index) {\n                return _num[index];\n            };\n            _this.getLength = function() {\n                return _num.length;\n            };\n            _this.multiply = function(e2) {\n                var num2 = new Array(_this.getLength() + e2.getLength() - 1);\n                for(var i2 = 0; i2 < _this.getLength(); i2 += 1){\n                    for(var j = 0; j < e2.getLength(); j += 1){\n                        num2[i2 + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j)));\n                    }\n                }\n                return qrPolynomial(num2, 0);\n            };\n            _this.mod = function(e2) {\n                if (_this.getLength() - e2.getLength() < 0) {\n                    return _this;\n                }\n                var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));\n                var num2 = new Array(_this.getLength());\n                for(var i2 = 0; i2 < _this.getLength(); i2 += 1){\n                    num2[i2] = _this.getAt(i2);\n                }\n                for(var i2 = 0; i2 < e2.getLength(); i2 += 1){\n                    num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);\n                }\n                return qrPolynomial(num2, 0).mod(e2);\n            };\n            return _this;\n        }\n        var QRRSBlock = function() {\n            var RS_BLOCK_TABLE = [\n                [\n                    1,\n                    26,\n                    19\n                ],\n                [\n                    1,\n                    26,\n                    16\n                ],\n                [\n                    1,\n                    26,\n                    13\n                ],\n                [\n                    1,\n                    26,\n                    9\n                ],\n                [\n                    1,\n                    44,\n                    34\n                ],\n                [\n                    1,\n                    44,\n                    28\n                ],\n                [\n                    1,\n                    44,\n                    22\n                ],\n                [\n                    1,\n                    44,\n                    16\n                ],\n                [\n                    1,\n                    70,\n                    55\n                ],\n                [\n                    1,\n                    70,\n                    44\n                ],\n                [\n                    2,\n                    35,\n                    17\n                ],\n                [\n                    2,\n                    35,\n                    13\n                ],\n                [\n                    1,\n                    100,\n                    80\n                ],\n                [\n                    2,\n                    50,\n                    32\n                ],\n                [\n                    2,\n                    50,\n                    24\n                ],\n                [\n                    4,\n                    25,\n                    9\n                ],\n                [\n                    1,\n                    134,\n                    108\n                ],\n                [\n                    2,\n                    67,\n                    43\n                ],\n                [\n                    2,\n                    33,\n                    15,\n                    2,\n                    34,\n                    16\n                ],\n                [\n                    2,\n                    33,\n                    11,\n                    2,\n                    34,\n                    12\n                ],\n                [\n                    2,\n                    86,\n                    68\n                ],\n                [\n                    4,\n                    43,\n                    27\n                ],\n                [\n                    4,\n                    43,\n                    19\n                ],\n                [\n                    4,\n                    43,\n                    15\n                ],\n                [\n                    2,\n                    98,\n                    78\n                ],\n                [\n                    4,\n                    49,\n                    31\n                ],\n                [\n                    2,\n                    32,\n                    14,\n                    4,\n                    33,\n                    15\n                ],\n                [\n                    4,\n                    39,\n                    13,\n                    1,\n                    40,\n                    14\n                ],\n                [\n                    2,\n                    121,\n                    97\n                ],\n                [\n                    2,\n                    60,\n                    38,\n                    2,\n                    61,\n                    39\n                ],\n                [\n                    4,\n                    40,\n                    18,\n                    2,\n                    41,\n                    19\n                ],\n                [\n                    4,\n                    40,\n                    14,\n                    2,\n                    41,\n                    15\n                ],\n                [\n                    2,\n                    146,\n                    116\n                ],\n                [\n                    3,\n                    58,\n                    36,\n                    2,\n                    59,\n                    37\n                ],\n                [\n                    4,\n                    36,\n                    16,\n                    4,\n                    37,\n                    17\n                ],\n                [\n                    4,\n                    36,\n                    12,\n                    4,\n                    37,\n                    13\n                ],\n                [\n                    2,\n                    86,\n                    68,\n                    2,\n                    87,\n                    69\n                ],\n                [\n                    4,\n                    69,\n                    43,\n                    1,\n                    70,\n                    44\n                ],\n                [\n                    6,\n                    43,\n                    19,\n                    2,\n                    44,\n                    20\n                ],\n                [\n                    6,\n                    43,\n                    15,\n                    2,\n                    44,\n                    16\n                ],\n                [\n                    4,\n                    101,\n                    81\n                ],\n                [\n                    1,\n                    80,\n                    50,\n                    4,\n                    81,\n                    51\n                ],\n                [\n                    4,\n                    50,\n                    22,\n                    4,\n                    51,\n                    23\n                ],\n                [\n                    3,\n                    36,\n                    12,\n                    8,\n                    37,\n                    13\n                ],\n                [\n                    2,\n                    116,\n                    92,\n                    2,\n                    117,\n                    93\n                ],\n                [\n                    6,\n                    58,\n                    36,\n                    2,\n                    59,\n                    37\n                ],\n                [\n                    4,\n                    46,\n                    20,\n                    6,\n                    47,\n                    21\n                ],\n                [\n                    7,\n                    42,\n                    14,\n                    4,\n                    43,\n                    15\n                ],\n                [\n                    4,\n                    133,\n                    107\n                ],\n                [\n                    8,\n                    59,\n                    37,\n                    1,\n                    60,\n                    38\n                ],\n                [\n                    8,\n                    44,\n                    20,\n                    4,\n                    45,\n                    21\n                ],\n                [\n                    12,\n                    33,\n                    11,\n                    4,\n                    34,\n                    12\n                ],\n                [\n                    3,\n                    145,\n                    115,\n                    1,\n                    146,\n                    116\n                ],\n                [\n                    4,\n                    64,\n                    40,\n                    5,\n                    65,\n                    41\n                ],\n                [\n                    11,\n                    36,\n                    16,\n                    5,\n                    37,\n                    17\n                ],\n                [\n                    11,\n                    36,\n                    12,\n                    5,\n                    37,\n                    13\n                ],\n                [\n                    5,\n                    109,\n                    87,\n                    1,\n                    110,\n                    88\n                ],\n                [\n                    5,\n                    65,\n                    41,\n                    5,\n                    66,\n                    42\n                ],\n                [\n                    5,\n                    54,\n                    24,\n                    7,\n                    55,\n                    25\n                ],\n                [\n                    11,\n                    36,\n                    12,\n                    7,\n                    37,\n                    13\n                ],\n                [\n                    5,\n                    122,\n                    98,\n                    1,\n                    123,\n                    99\n                ],\n                [\n                    7,\n                    73,\n                    45,\n                    3,\n                    74,\n                    46\n                ],\n                [\n                    15,\n                    43,\n                    19,\n                    2,\n                    44,\n                    20\n                ],\n                [\n                    3,\n                    45,\n                    15,\n                    13,\n                    46,\n                    16\n                ],\n                [\n                    1,\n                    135,\n                    107,\n                    5,\n                    136,\n                    108\n                ],\n                [\n                    10,\n                    74,\n                    46,\n                    1,\n                    75,\n                    47\n                ],\n                [\n                    1,\n                    50,\n                    22,\n                    15,\n                    51,\n                    23\n                ],\n                [\n                    2,\n                    42,\n                    14,\n                    17,\n                    43,\n                    15\n                ],\n                [\n                    5,\n                    150,\n                    120,\n                    1,\n                    151,\n                    121\n                ],\n                [\n                    9,\n                    69,\n                    43,\n                    4,\n                    70,\n                    44\n                ],\n                [\n                    17,\n                    50,\n                    22,\n                    1,\n                    51,\n                    23\n                ],\n                [\n                    2,\n                    42,\n                    14,\n                    19,\n                    43,\n                    15\n                ],\n                [\n                    3,\n                    141,\n                    113,\n                    4,\n                    142,\n                    114\n                ],\n                [\n                    3,\n                    70,\n                    44,\n                    11,\n                    71,\n                    45\n                ],\n                [\n                    17,\n                    47,\n                    21,\n                    4,\n                    48,\n                    22\n                ],\n                [\n                    9,\n                    39,\n                    13,\n                    16,\n                    40,\n                    14\n                ],\n                [\n                    3,\n                    135,\n                    107,\n                    5,\n                    136,\n                    108\n                ],\n                [\n                    3,\n                    67,\n                    41,\n                    13,\n                    68,\n                    42\n                ],\n                [\n                    15,\n                    54,\n                    24,\n                    5,\n                    55,\n                    25\n                ],\n                [\n                    15,\n                    43,\n                    15,\n                    10,\n                    44,\n                    16\n                ],\n                [\n                    4,\n                    144,\n                    116,\n                    4,\n                    145,\n                    117\n                ],\n                [\n                    17,\n                    68,\n                    42\n                ],\n                [\n                    17,\n                    50,\n                    22,\n                    6,\n                    51,\n                    23\n                ],\n                [\n                    19,\n                    46,\n                    16,\n                    6,\n                    47,\n                    17\n                ],\n                [\n                    2,\n                    139,\n                    111,\n                    7,\n                    140,\n                    112\n                ],\n                [\n                    17,\n                    74,\n                    46\n                ],\n                [\n                    7,\n                    54,\n                    24,\n                    16,\n                    55,\n                    25\n                ],\n                [\n                    34,\n                    37,\n                    13\n                ],\n                [\n                    4,\n                    151,\n                    121,\n                    5,\n                    152,\n                    122\n                ],\n                [\n                    4,\n                    75,\n                    47,\n                    14,\n                    76,\n                    48\n                ],\n                [\n                    11,\n                    54,\n                    24,\n                    14,\n                    55,\n                    25\n                ],\n                [\n                    16,\n                    45,\n                    15,\n                    14,\n                    46,\n                    16\n                ],\n                [\n                    6,\n                    147,\n                    117,\n                    4,\n                    148,\n                    118\n                ],\n                [\n                    6,\n                    73,\n                    45,\n                    14,\n                    74,\n                    46\n                ],\n                [\n                    11,\n                    54,\n                    24,\n                    16,\n                    55,\n                    25\n                ],\n                [\n                    30,\n                    46,\n                    16,\n                    2,\n                    47,\n                    17\n                ],\n                [\n                    8,\n                    132,\n                    106,\n                    4,\n                    133,\n                    107\n                ],\n                [\n                    8,\n                    75,\n                    47,\n                    13,\n                    76,\n                    48\n                ],\n                [\n                    7,\n                    54,\n                    24,\n                    22,\n                    55,\n                    25\n                ],\n                [\n                    22,\n                    45,\n                    15,\n                    13,\n                    46,\n                    16\n                ],\n                [\n                    10,\n                    142,\n                    114,\n                    2,\n                    143,\n                    115\n                ],\n                [\n                    19,\n                    74,\n                    46,\n                    4,\n                    75,\n                    47\n                ],\n                [\n                    28,\n                    50,\n                    22,\n                    6,\n                    51,\n                    23\n                ],\n                [\n                    33,\n                    46,\n                    16,\n                    4,\n                    47,\n                    17\n                ],\n                [\n                    8,\n                    152,\n                    122,\n                    4,\n                    153,\n                    123\n                ],\n                [\n                    22,\n                    73,\n                    45,\n                    3,\n                    74,\n                    46\n                ],\n                [\n                    8,\n                    53,\n                    23,\n                    26,\n                    54,\n                    24\n                ],\n                [\n                    12,\n                    45,\n                    15,\n                    28,\n                    46,\n                    16\n                ],\n                [\n                    3,\n                    147,\n                    117,\n                    10,\n                    148,\n                    118\n                ],\n                [\n                    3,\n                    73,\n                    45,\n                    23,\n                    74,\n                    46\n                ],\n                [\n                    4,\n                    54,\n                    24,\n                    31,\n                    55,\n                    25\n                ],\n                [\n                    11,\n                    45,\n                    15,\n                    31,\n                    46,\n                    16\n                ],\n                [\n                    7,\n                    146,\n                    116,\n                    7,\n                    147,\n                    117\n                ],\n                [\n                    21,\n                    73,\n                    45,\n                    7,\n                    74,\n                    46\n                ],\n                [\n                    1,\n                    53,\n                    23,\n                    37,\n                    54,\n                    24\n                ],\n                [\n                    19,\n                    45,\n                    15,\n                    26,\n                    46,\n                    16\n                ],\n                [\n                    5,\n                    145,\n                    115,\n                    10,\n                    146,\n                    116\n                ],\n                [\n                    19,\n                    75,\n                    47,\n                    10,\n                    76,\n                    48\n                ],\n                [\n                    15,\n                    54,\n                    24,\n                    25,\n                    55,\n                    25\n                ],\n                [\n                    23,\n                    45,\n                    15,\n                    25,\n                    46,\n                    16\n                ],\n                [\n                    13,\n                    145,\n                    115,\n                    3,\n                    146,\n                    116\n                ],\n                [\n                    2,\n                    74,\n                    46,\n                    29,\n                    75,\n                    47\n                ],\n                [\n                    42,\n                    54,\n                    24,\n                    1,\n                    55,\n                    25\n                ],\n                [\n                    23,\n                    45,\n                    15,\n                    28,\n                    46,\n                    16\n                ],\n                [\n                    17,\n                    145,\n                    115\n                ],\n                [\n                    10,\n                    74,\n                    46,\n                    23,\n                    75,\n                    47\n                ],\n                [\n                    10,\n                    54,\n                    24,\n                    35,\n                    55,\n                    25\n                ],\n                [\n                    19,\n                    45,\n                    15,\n                    35,\n                    46,\n                    16\n                ],\n                [\n                    17,\n                    145,\n                    115,\n                    1,\n                    146,\n                    116\n                ],\n                [\n                    14,\n                    74,\n                    46,\n                    21,\n                    75,\n                    47\n                ],\n                [\n                    29,\n                    54,\n                    24,\n                    19,\n                    55,\n                    25\n                ],\n                [\n                    11,\n                    45,\n                    15,\n                    46,\n                    46,\n                    16\n                ],\n                [\n                    13,\n                    145,\n                    115,\n                    6,\n                    146,\n                    116\n                ],\n                [\n                    14,\n                    74,\n                    46,\n                    23,\n                    75,\n                    47\n                ],\n                [\n                    44,\n                    54,\n                    24,\n                    7,\n                    55,\n                    25\n                ],\n                [\n                    59,\n                    46,\n                    16,\n                    1,\n                    47,\n                    17\n                ],\n                [\n                    12,\n                    151,\n                    121,\n                    7,\n                    152,\n                    122\n                ],\n                [\n                    12,\n                    75,\n                    47,\n                    26,\n                    76,\n                    48\n                ],\n                [\n                    39,\n                    54,\n                    24,\n                    14,\n                    55,\n                    25\n                ],\n                [\n                    22,\n                    45,\n                    15,\n                    41,\n                    46,\n                    16\n                ],\n                [\n                    6,\n                    151,\n                    121,\n                    14,\n                    152,\n                    122\n                ],\n                [\n                    6,\n                    75,\n                    47,\n                    34,\n                    76,\n                    48\n                ],\n                [\n                    46,\n                    54,\n                    24,\n                    10,\n                    55,\n                    25\n                ],\n                [\n                    2,\n                    45,\n                    15,\n                    64,\n                    46,\n                    16\n                ],\n                [\n                    17,\n                    152,\n                    122,\n                    4,\n                    153,\n                    123\n                ],\n                [\n                    29,\n                    74,\n                    46,\n                    14,\n                    75,\n                    47\n                ],\n                [\n                    49,\n                    54,\n                    24,\n                    10,\n                    55,\n                    25\n                ],\n                [\n                    24,\n                    45,\n                    15,\n                    46,\n                    46,\n                    16\n                ],\n                [\n                    4,\n                    152,\n                    122,\n                    18,\n                    153,\n                    123\n                ],\n                [\n                    13,\n                    74,\n                    46,\n                    32,\n                    75,\n                    47\n                ],\n                [\n                    48,\n                    54,\n                    24,\n                    14,\n                    55,\n                    25\n                ],\n                [\n                    42,\n                    45,\n                    15,\n                    32,\n                    46,\n                    16\n                ],\n                [\n                    20,\n                    147,\n                    117,\n                    4,\n                    148,\n                    118\n                ],\n                [\n                    40,\n                    75,\n                    47,\n                    7,\n                    76,\n                    48\n                ],\n                [\n                    43,\n                    54,\n                    24,\n                    22,\n                    55,\n                    25\n                ],\n                [\n                    10,\n                    45,\n                    15,\n                    67,\n                    46,\n                    16\n                ],\n                [\n                    19,\n                    148,\n                    118,\n                    6,\n                    149,\n                    119\n                ],\n                [\n                    18,\n                    75,\n                    47,\n                    31,\n                    76,\n                    48\n                ],\n                [\n                    34,\n                    54,\n                    24,\n                    34,\n                    55,\n                    25\n                ],\n                [\n                    20,\n                    45,\n                    15,\n                    61,\n                    46,\n                    16\n                ]\n            ];\n            var qrRSBlock = function(totalCount, dataCount) {\n                var _this2 = {};\n                _this2.totalCount = totalCount;\n                _this2.dataCount = dataCount;\n                return _this2;\n            };\n            var _this = {};\n            var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n                switch(errorCorrectionLevel){\n                    case QRErrorCorrectionLevel.L:\n                        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n                    case QRErrorCorrectionLevel.M:\n                        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n                    case QRErrorCorrectionLevel.Q:\n                        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n                    case QRErrorCorrectionLevel.H:\n                        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n                    default:\n                        return void 0;\n                }\n            };\n            _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n                var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n                if (typeof rsBlock == \"undefined\") {\n                    throw \"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectionLevel:\" + errorCorrectionLevel;\n                }\n                var length = rsBlock.length / 3;\n                var list = [];\n                for(var i2 = 0; i2 < length; i2 += 1){\n                    var count = rsBlock[i2 * 3 + 0];\n                    var totalCount = rsBlock[i2 * 3 + 1];\n                    var dataCount = rsBlock[i2 * 3 + 2];\n                    for(var j = 0; j < count; j += 1){\n                        list.push(qrRSBlock(totalCount, dataCount));\n                    }\n                }\n                return list;\n            };\n            return _this;\n        }();\n        var qrBitBuffer = function() {\n            var _buffer = [];\n            var _length = 0;\n            var _this = {};\n            _this.getBuffer = function() {\n                return _buffer;\n            };\n            _this.getAt = function(index) {\n                var bufIndex = Math.floor(index / 8);\n                return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n            };\n            _this.put = function(num, length) {\n                for(var i2 = 0; i2 < length; i2 += 1){\n                    _this.putBit((num >>> length - i2 - 1 & 1) == 1);\n                }\n            };\n            _this.getLengthInBits = function() {\n                return _length;\n            };\n            _this.putBit = function(bit) {\n                var bufIndex = Math.floor(_length / 8);\n                if (_buffer.length <= bufIndex) {\n                    _buffer.push(0);\n                }\n                if (bit) {\n                    _buffer[bufIndex] |= 128 >>> _length % 8;\n                }\n                _length += 1;\n            };\n            return _this;\n        };\n        var qrNumber = function(data) {\n            var _mode = QRMode.MODE_NUMBER;\n            var _data = data;\n            var _this = {};\n            _this.getMode = function() {\n                return _mode;\n            };\n            _this.getLength = function(buffer) {\n                return _data.length;\n            };\n            _this.write = function(buffer) {\n                var data2 = _data;\n                var i2 = 0;\n                while(i2 + 2 < data2.length){\n                    buffer.put(strToNum(data2.substring(i2, i2 + 3)), 10);\n                    i2 += 3;\n                }\n                if (i2 < data2.length) {\n                    if (data2.length - i2 == 1) {\n                        buffer.put(strToNum(data2.substring(i2, i2 + 1)), 4);\n                    } else if (data2.length - i2 == 2) {\n                        buffer.put(strToNum(data2.substring(i2, i2 + 2)), 7);\n                    }\n                }\n            };\n            var strToNum = function(s2) {\n                var num = 0;\n                for(var i2 = 0; i2 < s2.length; i2 += 1){\n                    num = num * 10 + chatToNum(s2.charAt(i2));\n                }\n                return num;\n            };\n            var chatToNum = function(c2) {\n                if (\"0\" <= c2 && c2 <= \"9\") {\n                    return c2.charCodeAt(0) - \"0\".charCodeAt(0);\n                }\n                throw \"illegal char :\" + c2;\n            };\n            return _this;\n        };\n        var qrAlphaNum = function(data) {\n            var _mode = QRMode.MODE_ALPHA_NUM;\n            var _data = data;\n            var _this = {};\n            _this.getMode = function() {\n                return _mode;\n            };\n            _this.getLength = function(buffer) {\n                return _data.length;\n            };\n            _this.write = function(buffer) {\n                var s2 = _data;\n                var i2 = 0;\n                while(i2 + 1 < s2.length){\n                    buffer.put(getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)), 11);\n                    i2 += 2;\n                }\n                if (i2 < s2.length) {\n                    buffer.put(getCode(s2.charAt(i2)), 6);\n                }\n            };\n            var getCode = function(c2) {\n                if (\"0\" <= c2 && c2 <= \"9\") {\n                    return c2.charCodeAt(0) - \"0\".charCodeAt(0);\n                } else if (\"A\" <= c2 && c2 <= \"Z\") {\n                    return c2.charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n                } else {\n                    switch(c2){\n                        case \" \":\n                            return 36;\n                        case \"$\":\n                            return 37;\n                        case \"%\":\n                            return 38;\n                        case \"*\":\n                            return 39;\n                        case \"+\":\n                            return 40;\n                        case \"-\":\n                            return 41;\n                        case \".\":\n                            return 42;\n                        case \"/\":\n                            return 43;\n                        case \":\":\n                            return 44;\n                        default:\n                            throw \"illegal char :\" + c2;\n                    }\n                }\n            };\n            return _this;\n        };\n        var qr8BitByte = function(data) {\n            var _mode = QRMode.MODE_8BIT_BYTE;\n            var _bytes = qrcode3.stringToBytes(data);\n            var _this = {};\n            _this.getMode = function() {\n                return _mode;\n            };\n            _this.getLength = function(buffer) {\n                return _bytes.length;\n            };\n            _this.write = function(buffer) {\n                for(var i2 = 0; i2 < _bytes.length; i2 += 1){\n                    buffer.put(_bytes[i2], 8);\n                }\n            };\n            return _this;\n        };\n        var qrKanji = function(data) {\n            var _mode = QRMode.MODE_KANJI;\n            var stringToBytes = qrcode3.stringToBytesFuncs[\"SJIS\"];\n            if (!stringToBytes) {\n                throw \"sjis not supported.\";\n            }\n            !function(c2, code) {\n                var test = stringToBytes(c2);\n                if (test.length != 2 || (test[0] << 8 | test[1]) != code) {\n                    throw \"sjis not supported.\";\n                }\n            }(\"友\", 38726);\n            var _bytes = stringToBytes(data);\n            var _this = {};\n            _this.getMode = function() {\n                return _mode;\n            };\n            _this.getLength = function(buffer) {\n                return ~~(_bytes.length / 2);\n            };\n            _this.write = function(buffer) {\n                var data2 = _bytes;\n                var i2 = 0;\n                while(i2 + 1 < data2.length){\n                    var c2 = (255 & data2[i2]) << 8 | 255 & data2[i2 + 1];\n                    if (33088 <= c2 && c2 <= 40956) {\n                        c2 -= 33088;\n                    } else if (57408 <= c2 && c2 <= 60351) {\n                        c2 -= 49472;\n                    } else {\n                        throw \"illegal char at \" + (i2 + 1) + \"/\" + c2;\n                    }\n                    c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);\n                    buffer.put(c2, 13);\n                    i2 += 2;\n                }\n                if (i2 < data2.length) {\n                    throw \"illegal char at \" + (i2 + 1);\n                }\n            };\n            return _this;\n        };\n        var byteArrayOutputStream = function() {\n            var _bytes = [];\n            var _this = {};\n            _this.writeByte = function(b) {\n                _bytes.push(b & 255);\n            };\n            _this.writeShort = function(i2) {\n                _this.writeByte(i2);\n                _this.writeByte(i2 >>> 8);\n            };\n            _this.writeBytes = function(b, off, len) {\n                off = off || 0;\n                len = len || b.length;\n                for(var i2 = 0; i2 < len; i2 += 1){\n                    _this.writeByte(b[i2 + off]);\n                }\n            };\n            _this.writeString = function(s2) {\n                for(var i2 = 0; i2 < s2.length; i2 += 1){\n                    _this.writeByte(s2.charCodeAt(i2));\n                }\n            };\n            _this.toByteArray = function() {\n                return _bytes;\n            };\n            _this.toString = function() {\n                var s2 = \"\";\n                s2 += \"[\";\n                for(var i2 = 0; i2 < _bytes.length; i2 += 1){\n                    if (i2 > 0) {\n                        s2 += \",\";\n                    }\n                    s2 += _bytes[i2];\n                }\n                s2 += \"]\";\n                return s2;\n            };\n            return _this;\n        };\n        var base64EncodeOutputStream = function() {\n            var _buffer = 0;\n            var _buflen = 0;\n            var _length = 0;\n            var _base64 = \"\";\n            var _this = {};\n            var writeEncoded = function(b) {\n                _base64 += String.fromCharCode(encode(b & 63));\n            };\n            var encode = function(n2) {\n                if (n2 < 0) ;\n                else if (n2 < 26) {\n                    return 65 + n2;\n                } else if (n2 < 52) {\n                    return 97 + (n2 - 26);\n                } else if (n2 < 62) {\n                    return 48 + (n2 - 52);\n                } else if (n2 == 62) {\n                    return 43;\n                } else if (n2 == 63) {\n                    return 47;\n                }\n                throw \"n:\" + n2;\n            };\n            _this.writeByte = function(n2) {\n                _buffer = _buffer << 8 | n2 & 255;\n                _buflen += 8;\n                _length += 1;\n                while(_buflen >= 6){\n                    writeEncoded(_buffer >>> _buflen - 6);\n                    _buflen -= 6;\n                }\n            };\n            _this.flush = function() {\n                if (_buflen > 0) {\n                    writeEncoded(_buffer << 6 - _buflen);\n                    _buffer = 0;\n                    _buflen = 0;\n                }\n                if (_length % 3 != 0) {\n                    var padlen = 3 - _length % 3;\n                    for(var i2 = 0; i2 < padlen; i2 += 1){\n                        _base64 += \"=\";\n                    }\n                }\n            };\n            _this.toString = function() {\n                return _base64;\n            };\n            return _this;\n        };\n        var base64DecodeInputStream = function(str) {\n            var _str = str;\n            var _pos = 0;\n            var _buffer = 0;\n            var _buflen = 0;\n            var _this = {};\n            _this.read = function() {\n                while(_buflen < 8){\n                    if (_pos >= _str.length) {\n                        if (_buflen == 0) {\n                            return -1;\n                        }\n                        throw \"unexpected end of file./\" + _buflen;\n                    }\n                    var c2 = _str.charAt(_pos);\n                    _pos += 1;\n                    if (c2 == \"=\") {\n                        _buflen = 0;\n                        return -1;\n                    } else if (c2.match(/^\\s$/)) {\n                        continue;\n                    }\n                    _buffer = _buffer << 6 | decode(c2.charCodeAt(0));\n                    _buflen += 6;\n                }\n                var n2 = _buffer >>> _buflen - 8 & 255;\n                _buflen -= 8;\n                return n2;\n            };\n            var decode = function(c2) {\n                if (65 <= c2 && c2 <= 90) {\n                    return c2 - 65;\n                } else if (97 <= c2 && c2 <= 122) {\n                    return c2 - 97 + 26;\n                } else if (48 <= c2 && c2 <= 57) {\n                    return c2 - 48 + 52;\n                } else if (c2 == 43) {\n                    return 62;\n                } else if (c2 == 47) {\n                    return 63;\n                } else {\n                    throw \"c:\" + c2;\n                }\n            };\n            return _this;\n        };\n        var gifImage = function(width, height) {\n            var _width = width;\n            var _height = height;\n            var _data = new Array(width * height);\n            var _this = {};\n            _this.setPixel = function(x, y, pixel) {\n                _data[y * _width + x] = pixel;\n            };\n            _this.write = function(out) {\n                out.writeString(\"GIF87a\");\n                out.writeShort(_width);\n                out.writeShort(_height);\n                out.writeByte(128);\n                out.writeByte(0);\n                out.writeByte(0);\n                out.writeByte(0);\n                out.writeByte(0);\n                out.writeByte(0);\n                out.writeByte(255);\n                out.writeByte(255);\n                out.writeByte(255);\n                out.writeString(\",\");\n                out.writeShort(0);\n                out.writeShort(0);\n                out.writeShort(_width);\n                out.writeShort(_height);\n                out.writeByte(0);\n                var lzwMinCodeSize = 2;\n                var raster = getLZWRaster(lzwMinCodeSize);\n                out.writeByte(lzwMinCodeSize);\n                var offset = 0;\n                while(raster.length - offset > 255){\n                    out.writeByte(255);\n                    out.writeBytes(raster, offset, 255);\n                    offset += 255;\n                }\n                out.writeByte(raster.length - offset);\n                out.writeBytes(raster, offset, raster.length - offset);\n                out.writeByte(0);\n                out.writeString(\";\");\n            };\n            var bitOutputStream = function(out) {\n                var _out = out;\n                var _bitLength = 0;\n                var _bitBuffer = 0;\n                var _this2 = {};\n                _this2.write = function(data, length) {\n                    if (data >>> length != 0) {\n                        throw \"length over\";\n                    }\n                    while(_bitLength + length >= 8){\n                        _out.writeByte(255 & (data << _bitLength | _bitBuffer));\n                        length -= 8 - _bitLength;\n                        data >>>= 8 - _bitLength;\n                        _bitBuffer = 0;\n                        _bitLength = 0;\n                    }\n                    _bitBuffer = data << _bitLength | _bitBuffer;\n                    _bitLength = _bitLength + length;\n                };\n                _this2.flush = function() {\n                    if (_bitLength > 0) {\n                        _out.writeByte(_bitBuffer);\n                    }\n                };\n                return _this2;\n            };\n            var getLZWRaster = function(lzwMinCodeSize) {\n                var clearCode = 1 << lzwMinCodeSize;\n                var endCode = (1 << lzwMinCodeSize) + 1;\n                var bitLength = lzwMinCodeSize + 1;\n                var table = lzwTable();\n                for(var i2 = 0; i2 < clearCode; i2 += 1){\n                    table.add(String.fromCharCode(i2));\n                }\n                table.add(String.fromCharCode(clearCode));\n                table.add(String.fromCharCode(endCode));\n                var byteOut = byteArrayOutputStream();\n                var bitOut = bitOutputStream(byteOut);\n                bitOut.write(clearCode, bitLength);\n                var dataIndex = 0;\n                var s2 = String.fromCharCode(_data[dataIndex]);\n                dataIndex += 1;\n                while(dataIndex < _data.length){\n                    var c2 = String.fromCharCode(_data[dataIndex]);\n                    dataIndex += 1;\n                    if (table.contains(s2 + c2)) {\n                        s2 = s2 + c2;\n                    } else {\n                        bitOut.write(table.indexOf(s2), bitLength);\n                        if (table.size() < 4095) {\n                            if (table.size() == 1 << bitLength) {\n                                bitLength += 1;\n                            }\n                            table.add(s2 + c2);\n                        }\n                        s2 = c2;\n                    }\n                }\n                bitOut.write(table.indexOf(s2), bitLength);\n                bitOut.write(endCode, bitLength);\n                bitOut.flush();\n                return byteOut.toByteArray();\n            };\n            var lzwTable = function() {\n                var _map = {};\n                var _size = 0;\n                var _this2 = {};\n                _this2.add = function(key) {\n                    if (_this2.contains(key)) {\n                        throw \"dup key:\" + key;\n                    }\n                    _map[key] = _size;\n                    _size += 1;\n                };\n                _this2.size = function() {\n                    return _size;\n                };\n                _this2.indexOf = function(key) {\n                    return _map[key];\n                };\n                _this2.contains = function(key) {\n                    return typeof _map[key] != \"undefined\";\n                };\n                return _this2;\n            };\n            return _this;\n        };\n        var createDataURL = function(width, height, getPixel) {\n            var gif = gifImage(width, height);\n            for(var y = 0; y < height; y += 1){\n                for(var x = 0; x < width; x += 1){\n                    gif.setPixel(x, y, getPixel(x, y));\n                }\n            }\n            var b = byteArrayOutputStream();\n            gif.write(b);\n            var base64 = base64EncodeOutputStream();\n            var bytes = b.toByteArray();\n            for(var i2 = 0; i2 < bytes.length; i2 += 1){\n                base64.writeByte(bytes[i2]);\n            }\n            base64.flush();\n            return \"data:image/gif;base64,\" + base64;\n        };\n        return qrcode3;\n    }();\n    !function() {\n        qrcode2.stringToBytesFuncs[\"UTF-8\"] = function(s2) {\n            function toUTF8Array(str) {\n                var utf8 = [];\n                for(var i2 = 0; i2 < str.length; i2++){\n                    var charcode = str.charCodeAt(i2);\n                    if (charcode < 128) utf8.push(charcode);\n                    else if (charcode < 2048) {\n                        utf8.push(192 | charcode >> 6, 128 | charcode & 63);\n                    } else if (charcode < 55296 || charcode >= 57344) {\n                        utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);\n                    } else {\n                        i2++;\n                        charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);\n                        utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);\n                    }\n                }\n                return utf8;\n            }\n            return toUTF8Array(s2);\n        };\n    }();\n    (function(factory) {\n        {\n            module.exports = factory();\n        }\n    })(function() {\n        return qrcode2;\n    });\n})(qrcode$1);\nconst qrcode = qrcode$1.exports;\nfunction copyToClipboard(text) {\n    return __async(this, null, function*() {\n        try {\n            if (!(navigator == null ? void 0 : navigator.clipboard)) {\n                throw new TonConnectUIError(\"Clipboard API not available\");\n            }\n            return yield navigator.clipboard.writeText(text);\n        } catch (e2) {}\n        fallbackCopyTextToClipboard(text);\n    });\n}\nfunction fallbackCopyTextToClipboard(text) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n    textArea.style.top = \"0\";\n    textArea.style.left = \"0\";\n    textArea.style.position = \"fixed\";\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    try {\n        document.execCommand(\"copy\");\n    } finally{\n        document.body.removeChild(textArea);\n    }\n}\nconst _tmpl$$s = /* @__PURE__ */ template$1(`<div></div>`);\nconst QRCode = (props)=>{\n    let qrCodeCanvasRef;\n    let qrCodeWrapperRef;\n    let imageRef;\n    const [copyButtonOpened, setCopyButtonOpened] = createSignal(false);\n    const [picSize, setPicSize] = createSignal(picSizeDefault);\n    createEffect(()=>{\n        const errorCorrectionLevel = \"L\";\n        const cellSize = 4;\n        const qr = qrcode(0, errorCorrectionLevel);\n        qr.addData(props.sourceUrl);\n        qr.make();\n        qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);\n        const qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;\n        const scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;\n        if (imageRef) {\n            const imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;\n            const imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);\n            imageRef.style.top = imgOffset;\n            imageRef.style.left = imgOffset;\n            imageRef.style.height = toPx(imgSize);\n            imageRef.style.width = toPx(imgSize);\n            setPicSize(Math.round(picSizeDefault / scale));\n        }\n        qrCodeWrapperRef.style.transform = `scale(${scale})`;\n    });\n    let timeoutId = null;\n    const onCopyClick = ()=>{\n        setCopyButtonOpened(true);\n        copyToClipboard(props.sourceUrl);\n        if (timeoutId != null) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(()=>setCopyButtonOpened(false), 1500);\n    };\n    return createComponent(QrCodeBackground, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        onClick: onCopyClick,\n        get children () {\n            return [\n                createComponent(QrCodeWrapper$2, {\n                    ref (r$) {\n                        const _ref$ = qrCodeWrapperRef;\n                        typeof _ref$ === \"function\" ? _ref$(r$) : qrCodeWrapperRef = r$;\n                    },\n                    get children () {\n                        return [\n                            (()=>{\n                                const _el$ = _tmpl$$s.cloneNode(true);\n                                const _ref$2 = qrCodeCanvasRef;\n                                typeof _ref$2 === \"function\" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;\n                                return _el$;\n                            })(),\n                            createComponent(Show, {\n                                get when () {\n                                    return props.imageUrl;\n                                },\n                                get children () {\n                                    return createComponent(ImageBackground, {\n                                        ref (r$) {\n                                            const _ref$3 = imageRef;\n                                            typeof _ref$3 === \"function\" ? _ref$3(r$) : imageRef = r$;\n                                        },\n                                        get children () {\n                                            return createComponent(ImageStyled$3, {\n                                                get src () {\n                                                    return props.imageUrl;\n                                                },\n                                                alt: \"\",\n                                                get size () {\n                                                    return picSize();\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                }),\n                createComponent(Transition, {\n                    onBeforeEnter: (el)=>{\n                        animate(el, [\n                            {\n                                opacity: 0,\n                                transform: \"translate(-50%, 44px)\"\n                            },\n                            {\n                                opacity: 1,\n                                transform: \"translate(-50%, 0)\"\n                            }\n                        ], {\n                            duration: 150,\n                            easing: \"ease-out\"\n                        });\n                    },\n                    onExit: (el, done)=>{\n                        animate(el, [\n                            {\n                                opacity: 1,\n                                transform: \"translate(-50%, 0)\"\n                            },\n                            {\n                                opacity: 0,\n                                transform: \"translate(-50%, 44px)\"\n                            }\n                        ], {\n                            duration: 150,\n                            easing: \"ease-out\"\n                        }).finished.then(()=>{\n                            done();\n                        });\n                    },\n                    get children () {\n                        return createComponent(Show, {\n                            get when () {\n                                return copyButtonOpened() && !props.disableCopy;\n                            },\n                            get children () {\n                                return createComponent(CopiedBoxStyled, {\n                                    get children () {\n                                        return [\n                                            createComponent(SuccessIcon, {\n                                                size: \"xs\"\n                                            }),\n                                            createComponent(Text, {\n                                                translationKey: \"common.linkCopied\",\n                                                children: \"Link Copied\"\n                                            })\n                                        ];\n                                    }\n                                });\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !props.disableCopy;\n                    },\n                    get children () {\n                        return createComponent(CopyIconButton, {\n                            get children () {\n                                return createComponent(CopyLightIcon, {});\n                            }\n                        });\n                    }\n                })\n            ];\n        }\n    });\n};\nvar deepReadObject = (obj, path, defaultValue)=>{\n    const value = path.trim().split(\".\").reduce((a2, b)=>a2 ? a2[b] : void 0, obj);\n    return value !== void 0 ? value : defaultValue;\n};\nvar template = (str, params, reg = /{{(.*?)}}/g)=>str.replace(reg, (_, key)=>deepReadObject(params, key, \"\"));\nvar createI18nContext = (init = {}, lang = navigator.language in init ? navigator.language : Object.keys(init)[0])=>{\n    const [locale, setLocale] = createSignal(lang);\n    const [dict, setDict] = createStore(init);\n    const translate = (key, params, defaultValue)=>{\n        const val = deepReadObject(dict[locale()], key, defaultValue || \"\");\n        if (typeof val === \"function\") return val(params);\n        if (typeof val === \"string\") return template(val, params || {});\n        return val;\n    };\n    const actions = {\n        add (lang2, table) {\n            setDict(lang2, (t2)=>Object.assign(t2 || {}, table));\n        },\n        locale: (lang2)=>lang2 ? setLocale(lang2) : locale(),\n        dict: (lang2)=>deepReadObject(dict, lang2)\n    };\n    return [\n        translate,\n        actions\n    ];\n};\nvar I18nContext = createContext({});\nvar useI18n = ()=>useContext(I18nContext);\nconst TextStyled$3 = styled.div`\n    font-style: normal;\n    font-weight: ${(props)=>props.fontWeight};\n    font-size: ${(props)=>props.fontSize};\n    line-height: ${(props)=>props.lineHeight};\n\n    color: ${(props)=>props.color};\n`;\nconst Text = (inputs)=>{\n    const theme = useTheme();\n    const [t2] = useI18n();\n    let textRef;\n    const color = ()=>inputs.color || theme.colors.text.primary;\n    const props = mergeProps({\n        fontSize: \"14px\",\n        fontWeight: \"510\",\n        lineHeight: \"130%\"\n    }, inputs);\n    createEffect(()=>{\n        if (!textRef) {\n            return;\n        }\n        if (props.cursor === \"unset\") {\n            return;\n        }\n        if (getComputedStyle(textRef).cursor !== \"pointer\") {\n            textRef.style.cursor = \"default\";\n        }\n    });\n    return createComponent(TextStyled$3, {\n        get fontSize () {\n            return props.fontSize;\n        },\n        get fontWeight () {\n            return props.fontWeight;\n        },\n        get lineHeight () {\n            return props.lineHeight;\n        },\n        get color () {\n            return color();\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        ref (r$) {\n            const _ref$ = textRef;\n            typeof _ref$ === \"function\" ? _ref$(r$) : textRef = r$;\n        },\n        \"data-tc-text\": \"true\",\n        get children () {\n            var _a2;\n            return createMemo(()=>!!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;\n        }\n    });\n};\nconst ImageContainer = styled.div`\n    position: relative;\n\n    &::after {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border: 0.5px solid rgba(0, 0, 0, 0.08);\n        border-radius: inherit;\n    }\n`;\nconst ImageStyled$2 = styled(Image)`\n    width: 100%;\n    height: 100%;\n    border-radius: inherit;\n`;\nconst WalletImage = (props)=>{\n    return createComponent(ImageContainer, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        get children () {\n            return [\n                createComponent(ImageStyled$2, {\n                    get src () {\n                        return props.src;\n                    }\n                }),\n                createMemo(()=>props.badge)\n            ];\n        }\n    });\n};\nconst borders$3 = {\n    m: \"16px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst badgeBorders = {\n    m: \"6px\",\n    s: \"6px\",\n    none: \"0\"\n};\nconst WalletUlContainer = styled.ul`\n    display: flex;\n    gap: 0;\n    width: 100%;\n    overflow-x: auto;\n    padding: 8px 12px 16px 12px;\n    margin: 0;\n    list-style: none;\n    flex-wrap: nowrap;\n\n    &&::-webkit-scrollbar {\n        display: none;\n    }\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    > li {\n        display: flex;\n        flex: 1;\n        min-width: 78px;\n        height: fit-content;\n    }\n\n    > li > button {\n        width: 100%;\n    }\n`;\nconst WalletItemStyled = styled.button`\n    position: relative;\n    cursor: pointer;\n    border: none;\n    background-color: unset;\n    padding: 8px 4px;\n    width: 100%;\n    min-width: 78px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    transition: transform 0.125s ease-in-out;\n\n    ${mediaNotTouch} {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ${mediaTouch} {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n`;\nconst ImageStyled$1 = styled(WalletImage)`\n    width: 60px;\n    height: 60px;\n    border-radius: ${(props)=>borders$3[props.theme.borderRadius]};\n    margin-bottom: 8px;\n    position: relative;\n`;\nconst BadgeStyled = styled(Image)`\n    position: absolute;\n    right: -6px;\n    bottom: -6px;\n    width: 24px;\n    height: 24px;\n    border-radius: ${(props)=>badgeBorders[props.theme.borderRadius]};\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);\n`;\nconst StyledText = styled(Text)`\n    max-width: 90px;\n    font-weight: 510;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n\n    ${media(\"mobile\")} {\n        max-width: 80px;\n    }\n`;\nconst StyledSecondLine = styled(Text)`\n    font-weight: ${(props)=>props.colorPrimary ? \"510\" : \"400\"};\n    max-width: 90px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    color: ${(props)=>props.colorPrimary ? props.theme.colors.text.primary : props.theme.colors.text.secondary};\n\n    ${media(\"mobile\")} {\n        max-width: 80px;\n    }\n`;\nconst _tmpl$$r = /* @__PURE__ */ template$1(`<div></div>`);\nconst WalletItem = (props)=>{\n    let ctxRef = null;\n    const adjustLetterSpacing = ()=>{\n        const name = ctxRef == null ? void 0 : ctxRef.querySelector(\"div\");\n        if (name && name.scrollWidth > name.clientWidth) {\n            let spacing = 0;\n            const minSpacing = -0.4;\n            const step = 0.05;\n            while(name.scrollWidth > name.clientWidth && spacing >= minSpacing){\n                spacing -= step;\n                name.style.letterSpacing = `${spacing}px`;\n            }\n            if (spacing !== 0) {\n                spacing -= step;\n                name.style.letterSpacing = `${spacing}px`;\n            }\n        }\n    };\n    onMount(()=>adjustLetterSpacing());\n    createEffect(()=>{\n        adjustLetterSpacing();\n    });\n    return createComponent(WalletItemStyled, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        onClick: ()=>props.onClick(),\n        \"data-tc-wallet-item\": \"true\",\n        get children () {\n            return [\n                createMemo(()=>createMemo(()=>typeof props.icon === \"string\")() ? createComponent(ImageStyled$1, {\n                        get src () {\n                            return props.icon;\n                        },\n                        get badge () {\n                            return createMemo(()=>!!props.badgeUrl)() && createComponent(BadgeStyled, {\n                                get src () {\n                                    return props.badgeUrl;\n                                }\n                            });\n                        }\n                    }) : props.icon),\n                (()=>{\n                    const _el$ = _tmpl$$r.cloneNode(true);\n                    use((el)=>ctxRef = el, _el$);\n                    insert(_el$, createComponent(StyledText, {\n                        get children () {\n                            return props.name;\n                        }\n                    }));\n                    return _el$;\n                })(),\n                createMemo(()=>createMemo(()=>!!props.secondLine)() && createComponent(StyledSecondLine, {\n                        get colorPrimary () {\n                            var _a2;\n                            return (_a2 = props.secondLineColorPrimary) != null ? _a2 : true;\n                        },\n                        get children () {\n                            return props.secondLine;\n                        }\n                    }))\n            ];\n        }\n    });\n};\nconst H1Styled$9 = styled.h1`\n    font-style: normal;\n    font-weight: 590;\n    font-size: 20px;\n    line-height: 28px;\n\n    text-align: center;\n\n    color: ${(props)=>props.theme.colors.text.primary};\n\n    margin-top: 0;\n    margin-bottom: 0;\n\n    cursor: default;\n`;\nconst H1 = (props)=>{\n    const [t2] = useI18n();\n    return createComponent(H1Styled$9, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-h1\": \"true\",\n        get children () {\n            var _a2;\n            return createMemo(()=>!!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;\n        }\n    });\n};\nconst H2Styled$5 = styled.h2`\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 22px;\n\n    text-align: center;\n\n    color: ${(props)=>props.theme.colors.text.secondary};\n\n    margin-top: 0;\n    margin-bottom: 32px;\n\n    cursor: default;\n`;\nconst H2 = (props)=>{\n    const [t2] = useI18n();\n    return createComponent(H2Styled$5, {\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-h2\": \"true\",\n        get children () {\n            var _a2;\n            return createMemo(()=>!!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;\n        }\n    });\n};\nconst H3Styled$1 = styled.h3`\n    font-style: normal;\n    font-weight: 510;\n    font-size: 16px;\n    line-height: 20px;\n\n    color: ${(props)=>props.theme.colors.text.primary};\n\n    margin-top: 0;\n    margin-bottom: 0;\n\n    cursor: default;\n`;\nconst H3 = (props)=>{\n    const [t2] = useI18n();\n    return createComponent(H3Styled$1, {\n        \"data-tc-h3\": \"true\",\n        get [\"class\"] () {\n            return props.class;\n        },\n        get children () {\n            var _a2;\n            return createMemo(()=>!!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;\n        }\n    });\n};\nconst _tmpl$$q = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z\"></path></svg>`);\nconst TonIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$q.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$p = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><g clip-path=\"url(#clip0_3783_2045)\"><circle cx=\"8\" cy=\"8.00098\" r=\"8\"></circle><path d=\"M4.75 8.50098L7 10.751L11.75 6.00098\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g><defs><clipPath id=\"clip0_3783_2045\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0 0.000976562)\"></rect></clipPath></defs></svg>`), _tmpl$2$4 = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"11\"></circle><path d=\"M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z\"></path></svg>`), _tmpl$3$2 = /* @__PURE__ */ template$1(`<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"36\" cy=\"36\" r=\"33\"></circle><path d=\"M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z\"></path></svg>`);\nconst SuccessIcon = (props)=>{\n    const theme = useTheme();\n    const size = ()=>props.size || \"s\";\n    const fill = ()=>props.fill || theme.colors.icon.success;\n    return createMemo((()=>{\n        const _c$ = createMemo(()=>size() === \"xs\");\n        return ()=>_c$() ? (()=>{\n                const _el$ = _tmpl$$p.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;\n                createRenderEffect((_p$)=>{\n                    const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;\n                    _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n                    _v$2 !== _p$._v$2 && setAttribute(_el$3, \"fill\", _p$._v$2 = _v$2);\n                    _v$3 !== _p$._v$3 && setAttribute(_el$4, \"stroke\", _p$._v$3 = _v$3);\n                    return _p$;\n                }, {\n                    _v$: void 0,\n                    _v$2: void 0,\n                    _v$3: void 0\n                });\n                return _el$;\n            })() : (()=>{\n                const _c$2 = createMemo(()=>size() === \"s\");\n                return ()=>_c$2() ? (()=>{\n                        const _el$5 = _tmpl$2$4.cloneNode(true), _el$6 = _el$5.firstChild, _el$7 = _el$6.nextSibling;\n                        createRenderEffect((_p$)=>{\n                            const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;\n                            _v$4 !== _p$._v$4 && setAttribute(_el$5, \"class\", _p$._v$4 = _v$4);\n                            _v$5 !== _p$._v$5 && setAttribute(_el$6, \"fill\", _p$._v$5 = _v$5);\n                            _v$6 !== _p$._v$6 && setAttribute(_el$7, \"fill\", _p$._v$6 = _v$6);\n                            return _p$;\n                        }, {\n                            _v$4: void 0,\n                            _v$5: void 0,\n                            _v$6: void 0\n                        });\n                        return _el$5;\n                    })() : (()=>{\n                        const _el$8 = _tmpl$3$2.cloneNode(true), _el$9 = _el$8.firstChild, _el$10 = _el$9.nextSibling;\n                        createRenderEffect((_p$)=>{\n                            const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;\n                            _v$7 !== _p$._v$7 && setAttribute(_el$8, \"class\", _p$._v$7 = _v$7);\n                            _v$8 !== _p$._v$8 && setAttribute(_el$9, \"fill\", _p$._v$8 = _v$8);\n                            _v$9 !== _p$._v$9 && setAttribute(_el$10, \"fill\", _p$._v$9 = _v$9);\n                            return _p$;\n                        }, {\n                            _v$7: void 0,\n                            _v$8: void 0,\n                            _v$9: void 0\n                        });\n                        return _el$8;\n                    })();\n            })();\n    })());\n};\nconst _tmpl$$o = /* @__PURE__ */ template$1(`<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"36\" cy=\"36\" r=\"33\"></circle><path d=\"M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z\"></path></svg>`), _tmpl$2$3 = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><circle cx=\"24\" cy=\"24.001\" r=\"22\"></circle><path d=\"M24 24.001L31.5 16.501M24 24.001L16.5 16.501M24 24.001L16.5 31.501M24 24.001L31.5 31.501\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>`), _tmpl$3$1 = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"11\"></circle><path d=\"M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z\"></path></svg>`);\nconst ErrorIcon = (props)=>{\n    const theme = useTheme();\n    const size = ()=>props.size || \"m\";\n    const fill = ()=>props.fill || theme.colors.icon.error;\n    return createMemo((()=>{\n        const _c$ = createMemo(()=>size() === \"m\");\n        return ()=>_c$() ? (()=>{\n                const _el$ = _tmpl$$o.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;\n                createRenderEffect((_p$)=>{\n                    const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;\n                    _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n                    _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n                    _v$3 !== _p$._v$3 && setAttribute(_el$3, \"fill\", _p$._v$3 = _v$3);\n                    return _p$;\n                }, {\n                    _v$: void 0,\n                    _v$2: void 0,\n                    _v$3: void 0\n                });\n                return _el$;\n            })() : (()=>{\n                const _c$2 = createMemo(()=>size() === \"s\");\n                return ()=>_c$2() ? (()=>{\n                        const _el$4 = _tmpl$2$3.cloneNode(true), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;\n                        createRenderEffect((_p$)=>{\n                            const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;\n                            _v$4 !== _p$._v$4 && setAttribute(_el$4, \"class\", _p$._v$4 = _v$4);\n                            _v$5 !== _p$._v$5 && setAttribute(_el$5, \"fill\", _p$._v$5 = _v$5);\n                            _v$6 !== _p$._v$6 && setAttribute(_el$6, \"stroke\", _p$._v$6 = _v$6);\n                            return _p$;\n                        }, {\n                            _v$4: void 0,\n                            _v$5: void 0,\n                            _v$6: void 0\n                        });\n                        return _el$4;\n                    })() : (()=>{\n                        const _el$7 = _tmpl$3$1.cloneNode(true), _el$8 = _el$7.firstChild, _el$9 = _el$8.nextSibling;\n                        createRenderEffect((_p$)=>{\n                            const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;\n                            _v$7 !== _p$._v$7 && setAttribute(_el$7, \"class\", _p$._v$7 = _v$7);\n                            _v$8 !== _p$._v$8 && setAttribute(_el$8, \"fill\", _p$._v$8 = _v$8);\n                            _v$9 !== _p$._v$9 && setAttribute(_el$9, \"fill\", _p$._v$9 = _v$9);\n                            return _p$;\n                        }, {\n                            _v$7: void 0,\n                            _v$8: void 0,\n                            _v$9: void 0\n                        });\n                        return _el$7;\n                    })();\n            })();\n    })());\n};\nconst _tmpl$$n = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z\"></path></svg>`), _tmpl$2$2 = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22 2.99951C11.5066 2.99951 3 11.5061 3 21.9995C3 32.4929 11.5066 40.9995 22 40.9995C22.8284 40.9995 23.5 41.6711 23.5 42.4995C23.5 43.3279 22.8284 43.9995 22 43.9995C9.84974 43.9995 0 34.1498 0 21.9995C0 9.84925 9.84974 -0.000488281 22 -0.000488281C34.1503 -0.000488281 44 9.84925 44 21.9995C44 22.8279 43.3284 23.4995 42.5 23.4995C41.6716 23.4995 41 22.8279 41 21.9995C41 11.5061 32.4934 2.99951 22 2.99951Z\"></path></svg>`), _tmpl$3 = /* @__PURE__ */ template$1(`<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>`);\nconst LoaderIcon = (props)=>{\n    const theme = useTheme();\n    const size = ()=>props.size || \"xs\";\n    const fill = ()=>props.fill || theme.colors.icon.tertiary;\n    const rotateAnimation = h`\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n    `;\n    const svgClass = u`\n        animation: ${rotateAnimation} 1s linear infinite;\n    `;\n    return createMemo((()=>{\n        const _c$ = createMemo(()=>size() === \"xs\");\n        return ()=>_c$() ? (()=>{\n                const _el$ = _tmpl$$n.cloneNode(true), _el$2 = _el$.firstChild;\n                createRenderEffect((_p$)=>{\n                    const _v$ = classnames__WEBPACK_IMPORTED_MODULE_3__(svgClass, props.class), _v$2 = fill();\n                    _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n                    _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n                    return _p$;\n                }, {\n                    _v$: void 0,\n                    _v$2: void 0\n                });\n                return _el$;\n            })() : (()=>{\n                const _c$2 = createMemo(()=>size() === \"s\");\n                return ()=>_c$2() ? (()=>{\n                        const _el$3 = _tmpl$2$2.cloneNode(true), _el$4 = _el$3.firstChild;\n                        createRenderEffect((_p$)=>{\n                            const _v$3 = classnames__WEBPACK_IMPORTED_MODULE_3__(svgClass, props.class), _v$4 = fill();\n                            _v$3 !== _p$._v$3 && setAttribute(_el$3, \"class\", _p$._v$3 = _v$3);\n                            _v$4 !== _p$._v$4 && setAttribute(_el$4, \"fill\", _p$._v$4 = _v$4);\n                            return _p$;\n                        }, {\n                            _v$3: void 0,\n                            _v$4: void 0\n                        });\n                        return _el$3;\n                    })() : (()=>{\n                        const _el$5 = _tmpl$3.cloneNode(true), _el$6 = _el$5.firstChild;\n                        createRenderEffect((_p$)=>{\n                            const _v$5 = classnames__WEBPACK_IMPORTED_MODULE_3__(svgClass, props.class), _v$6 = fill();\n                            _v$5 !== _p$._v$5 && setAttribute(_el$5, \"class\", _p$._v$5 = _v$5);\n                            _v$6 !== _p$._v$6 && setAttribute(_el$6, \"stroke\", _p$._v$6 = _v$6);\n                            return _p$;\n                        }, {\n                            _v$5: void 0,\n                            _v$6: void 0\n                        });\n                        return _el$5;\n                    })();\n            })();\n    })());\n};\nconst _tmpl$$m = /* @__PURE__ */ template$1(`<svg width=\"158\" height=\"28\" viewBox=\"0 0 158 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28 14.001C28 21.733 21.732 28.001 14 28.001C6.26801 28.001 0 21.733 0 14.001C0 6.26899 6.26801 0.000976562 14 0.000976562C21.732 0.000976562 28 6.26899 28 14.001ZM9.21931 8.00098H18.7801H18.7813C20.538 8.00098 21.6522 9.89966 20.7691 11.4302L14.8672 21.6576C14.4822 22.3254 13.5172 22.3254 13.1322 21.6576L7.23158 11.4302C6.34721 9.89726 7.4614 8.00098 9.21931 8.00098ZM13.1262 18.5882V9.74806H9.21811C8.78976 9.74806 8.53708 10.2029 8.74163 10.5578L11.8423 16.1035L13.1262 18.5882ZM16.1559 16.1047L19.2554 10.5566C19.4599 10.2017 19.2073 9.74685 18.7789 9.74685H14.8709V18.5906L16.1559 16.1047Z\" fill=\"#0098EA\"></path><path d=\"M18.7802 8.00098H9.21936C7.46145 8.00098 6.34727 9.89726 7.23164 11.4302L13.1322 21.6576C13.5173 22.3254 14.4823 22.3254 14.8673 21.6576L20.7691 11.4302C21.6523 9.89966 20.5381 8.00098 18.7814 8.00098H18.7802ZM13.1274 18.5906L11.8424 16.1035L8.74168 10.5578C8.53714 10.2029 8.78981 9.74806 9.21816 9.74806H13.1262V18.5918L13.1274 18.5906ZM19.2555 10.5566L16.156 16.1047L14.8709 18.5906V9.74685H18.779C19.2073 9.74685 19.46 10.2017 19.2555 10.5566Z\" fill=\"white\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M51.7483 22.1967C55.7182 22.1967 58.9609 18.954 58.9609 14.9841C58.9609 11.0142 55.7182 7.77148 51.7483 7.77148C47.7588 7.77148 44.5357 11.0142 44.5357 14.9841C44.5357 18.954 47.7588 22.1967 51.7483 22.1967ZM51.7483 19.1702C49.4686 19.1702 47.6802 17.2442 47.6802 14.9841C47.6802 12.724 49.4686 10.798 51.7483 10.798C54.0084 10.798 55.7968 12.724 55.7968 14.9841C55.7968 17.2442 54.0084 19.1702 51.7483 19.1702ZM37.0698 21.9609H40.2142V10.9946H44.2843V8.00732H33V10.9946H37.0698V21.9609ZM69.9379 8.00732H73.0823V21.9609H70.3899L63.59 13.3333V21.9609H60.4652V8.00732H63.1576L69.9379 16.6153V8.00732ZM79.2259 14.9887C79.2259 10.9202 82.351 7.77539 86.4982 7.77539C89.8592 7.77539 92.5519 9.95709 93.2202 12.6891H90.7437C90.154 11.0971 88.4637 9.9964 86.4982 9.9964C83.5893 9.9964 81.5452 12.1781 81.5452 14.9887C81.5452 17.7994 83.5893 19.9811 86.4982 19.9811C88.4637 19.9811 90.154 18.8804 90.7437 17.2884H93.2202C92.5519 20.0204 89.8592 22.2021 86.4982 22.2021C82.351 22.2021 79.2259 19.0573 79.2259 14.9887ZM104.584 17.0525C104.584 19.9025 102.343 22.1628 99.4342 22.1628C96.5253 22.1628 94.2846 19.9025 94.2846 17.0525C94.2846 14.2025 96.5253 11.9422 99.4342 11.9422C102.343 11.9422 104.584 14.2025 104.584 17.0525ZM96.4663 17.0525C96.4663 18.8018 97.6849 20.158 99.4342 20.158C101.164 20.158 102.382 18.8018 102.382 17.0525C102.382 15.3032 101.164 13.947 99.4342 13.947C97.6849 13.947 96.4663 15.3032 96.4663 17.0525ZM108.626 12.1388H106.463V21.9662H108.626V17.1311C108.626 15.0281 109.726 13.9077 111.161 13.9077C112.419 13.9077 113.205 14.8512 113.205 16.4039V21.9662H115.367V16.0501C115.367 13.5539 113.893 11.9422 111.613 11.9422C110.335 11.9422 109.215 12.4926 108.626 13.4753V12.1388ZM117.839 12.1388H120.001V13.4753C120.59 12.4926 121.711 11.9422 122.988 11.9422C125.268 11.9422 126.742 13.5539 126.742 16.0501V21.9662H124.58V16.4039C124.58 14.8512 123.794 13.9077 122.536 13.9077C121.101 13.9077 120.001 15.0281 120.001 17.1311V21.9662H117.839V12.1388ZM133.558 22.1628C136.054 22.1628 137.823 20.728 138.373 18.8804H136.113C135.661 19.8238 134.717 20.2563 133.636 20.2563C131.887 20.2563 130.747 19.077 130.668 17.5832H138.491C138.688 14.2419 136.585 11.9422 133.577 11.9422C130.551 11.9422 128.526 14.1436 128.526 17.0525C128.526 20.0007 130.629 22.1628 133.558 22.1628ZM130.747 16.0501C131.042 14.5367 132.162 13.7505 133.518 13.7505C134.717 13.7505 135.838 14.4581 136.172 16.0501H130.747ZM149.851 18.3694C149.32 20.5511 147.453 22.1628 144.859 22.1628C141.871 22.1628 139.709 19.8828 139.709 17.0525C139.709 14.2222 141.871 11.9422 144.859 11.9422C147.453 11.9422 149.32 13.5539 149.851 15.7356H147.571C147.178 14.6743 146.215 13.9077 144.859 13.9077C143.109 13.9077 141.91 15.2246 141.91 17.0525C141.91 18.8804 143.109 20.1973 144.859 20.1973C146.215 20.1973 147.178 19.4307 147.571 18.3694H149.851ZM155.75 22.0645C156.418 22.0645 156.929 21.9859 157.362 21.8483V19.9221C157.047 20.0401 156.615 20.1187 156.202 20.1187C155.082 20.1187 154.551 19.6666 154.551 18.448V14.065H157.362V12.1388H154.551V9.40675H152.389V12.1388H150.345V14.065H152.389V18.8018C152.389 21.0228 153.863 22.0645 155.75 22.0645Z\"></path></svg>`);\nconst TonConnectBrand = ()=>{\n    const theme = useTheme();\n    const fill = ()=>theme.theme === THEME.DARK ? theme.colors.constant.white : theme.colors.constant.black;\n    return (()=>{\n        const _el$ = _tmpl$$m.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling, _el$4 = _el$3.nextSibling;\n        createRenderEffect(()=>setAttribute(_el$4, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$l = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.56608 4.42584C5.82527 3.32158 6.8176 2.5 8.00001 2.5C9.38072 2.5 10.5 3.61929 10.5 5C10.5 5.63026 10.3391 6.0386 10.1264 6.34455C9.90018 6.66993 9.58561 6.92478 9.18864 7.20877C9.12579 7.25372 9.05873 7.30025 8.9887 7.34883C8.27392 7.84472 7.25001 8.55507 7.25001 10V10.25C7.25001 10.6642 7.5858 11 8.00001 11C8.41422 11 8.75001 10.6642 8.75001 10.25V10C8.75001 9.36502 9.10777 9.1096 9.94554 8.51149L10.0614 8.42873C10.4769 8.13147 10.9748 7.75194 11.358 7.20076C11.7547 6.63015 12 5.91973 12 5C12 2.79086 10.2091 1 8.00001 1C6.10564 1 4.5205 2.31615 4.10577 4.08308C4.01112 4.48634 4.26129 4.88997 4.66454 4.98462C5.0678 5.07927 5.47143 4.8291 5.56608 4.42584ZM8.00001 15C8.60752 15 9.10001 14.5075 9.10001 13.9C9.10001 13.2925 8.60752 12.8 8.00001 12.8C7.39249 12.8 6.90001 13.2925 6.90001 13.9C6.90001 14.5075 7.39249 15 8.00001 15Z\"></path></svg>`);\nconst QuestionIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$l.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$k = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.98156 8.75C9.84854 11.4328 9.01206 13.5 8 13.5C6.98794 13.5 6.15146 11.4328 6.01844 8.75H9.98156ZM11.4832 8.75C11.4217 10.1155 11.1929 11.3869 10.8239 12.4017C10.7734 12.5405 10.7188 12.6789 10.6595 12.8154C12.1454 11.993 13.2103 10.5029 13.4493 8.75H11.4832ZM13.4493 7.25H11.4832C11.4217 5.88453 11.1929 4.61314 10.8239 3.5983C10.7734 3.4595 10.7188 3.32111 10.6595 3.18459C12.1454 4.00697 13.2103 5.49709 13.4493 7.25ZM9.98156 7.25H6.01844C6.15144 4.56764 6.98769 2.50062 7.99955 2.5H8C9.01206 2.5 9.84854 4.56724 9.98156 7.25ZM4.51678 7.25C4.57826 5.88453 4.80706 4.61314 5.1761 3.5983C5.22657 3.4595 5.28124 3.32111 5.3405 3.18459C3.85463 4.00697 2.78972 5.49709 2.55071 7.25H4.51678ZM2.55071 8.75C2.78972 10.5029 3.85463 11.993 5.3405 12.8154C5.28124 12.6789 5.22657 12.5405 5.1761 12.4017C4.80706 11.3869 4.57826 10.1155 4.51678 8.75H2.55071ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z\"></path></svg>`);\nconst BrowserIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$k.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$j = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.5 4.8C2.5 3.11984 2.5 2.27976 2.82698 1.63803C3.1146 1.07354 3.57354 0.614601 4.13803 0.32698C4.77976 0 5.61984 0 7.3 0H8.7C10.3802 0 11.2202 0 11.862 0.32698C12.4265 0.614601 12.8854 1.07354 13.173 1.63803C13.5 2.27976 13.5 3.11984 13.5 4.8V11.2C13.5 12.8802 13.5 13.7202 13.173 14.362C12.8854 14.9265 12.4265 15.3854 11.862 15.673C11.2202 16 10.3802 16 8.7 16H7.3C5.61984 16 4.77976 16 4.13803 15.673C3.57354 15.3854 3.1146 14.9265 2.82698 14.362C2.5 13.7202 2.5 12.8802 2.5 11.2V4.8ZM4 3.9C4 3.05992 4 2.63988 4.16349 2.31901C4.3073 2.03677 4.53677 1.8073 4.81901 1.66349C5.13988 1.5 5.55992 1.5 6.4 1.5H9.6C10.4401 1.5 10.8601 1.5 11.181 1.66349C11.4632 1.8073 11.6927 2.03677 11.8365 2.31901C12 2.63988 12 3.05992 12 3.9V12.1C12 12.9401 12 13.3601 11.8365 13.681C11.6927 13.9632 11.4632 14.1927 11.181 14.3365C10.8601 14.5 10.4401 14.5 9.6 14.5H6.4C5.55992 14.5 5.13988 14.5 4.81901 14.3365C4.53677 14.1927 4.3073 13.9632 4.16349 13.681C4 13.3601 4 12.9401 4 12.1V3.9ZM7 2.5C6.58579 2.5 6.25 2.83579 6.25 3.25C6.25 3.66421 6.58579 4 7 4H9C9.41421 4 9.75 3.66421 9.75 3.25C9.75 2.83579 9.41421 2.5 9 2.5H7Z\"></path></svg>`);\nconst MobileIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$j.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$i = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.5 6.8C1.5 5.11984 1.5 4.27976 1.82698 3.63803C2.1146 3.07354 2.57354 2.6146 3.13803 2.32698C3.77976 2 4.61984 2 6.3 2H9.7C11.3802 2 12.2202 2 12.862 2.32698C13.4265 2.6146 13.8854 3.07354 14.173 3.63803C14.5 4.27976 14.5 5.11984 14.5 6.8V11.5H15.25C15.6642 11.5 16 11.8358 16 12.25C16 12.6642 15.6642 13 15.25 13H0.75C0.335786 13 0 12.6642 0 12.25C0 11.8358 0.335786 11.5 0.75 11.5H1.5V6.8ZM3 11.5H13V5.9C13 5.05992 13 4.63988 12.8365 4.31901C12.6927 4.03677 12.4632 3.8073 12.181 3.66349C11.8601 3.5 11.4401 3.5 10.6 3.5H5.4C4.55992 3.5 4.13988 3.5 3.81901 3.66349C3.53677 3.8073 3.3073 4.03677 3.16349 4.31901C3 4.63988 3 5.05992 3 5.9V11.5Z\"></path></svg>`);\nconst DesktopIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$i.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$h = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"><g clip-path=\"url(#clip0_3676_1603)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.5 1.25049C15.5 0.836275 15.1642 0.500488 14.75 0.500488C14.3358 0.500488 14 0.836275 14 1.25049V3.67012C12.7187 2.04487 10.7318 1.00049 8.5 1.00049C4.63401 1.00049 1.5 4.1345 1.5 8.00049C1.5 11.8665 4.63401 15.0005 8.5 15.0005C11.6844 15.0005 14.3703 12.8748 15.2199 9.96661C15.3361 9.56902 15.1079 9.15254 14.7103 9.03638C14.3127 8.92023 13.8962 9.14838 13.7801 9.54597C13.1123 11.8319 11 13.5005 8.5 13.5005C5.46243 13.5005 3 11.0381 3 8.00049C3 4.96292 5.46243 2.50049 8.5 2.50049C10.321 2.50049 11.9363 3.3855 12.9377 4.75049H10.5C10.0858 4.75049 9.75 5.08627 9.75 5.50049C9.75 5.9147 10.0858 6.25049 10.5 6.25049H14.75C15.1642 6.25049 15.5 5.9147 15.5 5.50049V1.25049Z\"></path></g><defs><clipPath id=\"clip0_3676_1603\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5 0.000488281)\"></rect></clipPath></defs></svg>`);\nconst RetryIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.accent;\n    return (()=>{\n        const _el$ = _tmpl$$h.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;\n        createRenderEffect(()=>setAttribute(_el$3, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$g = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13 4.06119V6.75053C13 7.16474 13.3358 7.50053 13.75 7.50053C14.1642 7.50053 14.5 7.16474 14.5 6.75053V2.75053L14.5 2.72807C14.5001 2.63191 14.5003 2.49627 14.4842 2.37627C14.4638 2.22503 14.4063 1.99261 14.2071 1.79342C14.0079 1.59423 13.7755 1.5367 13.6243 1.51637C13.5043 1.50023 13.3686 1.50039 13.2725 1.50051L13.25 1.50053H9.25C8.83579 1.50053 8.5 1.83631 8.5 2.25053C8.5 2.66474 8.83579 3.00053 9.25 3.00053H11.9393L7.21967 7.7202C6.92678 8.01309 6.92678 8.48796 7.21967 8.78086C7.51256 9.07375 7.98744 9.07375 8.28033 8.78086L13 4.06119ZM5.85 1.50053H5.81903H5.81899C5.21528 1.50052 4.71702 1.50051 4.31113 1.53367C3.88956 1.56812 3.50203 1.64204 3.13803 1.82751C2.57354 2.11513 2.1146 2.57407 1.82698 3.13856C1.64151 3.50256 1.56759 3.89009 1.53315 4.31166C1.49998 4.71755 1.49999 5.21581 1.5 5.81953V5.81955V5.85053V10.1505V10.1815V10.1815C1.49999 10.7852 1.49998 11.2835 1.53315 11.6894C1.56759 12.111 1.64151 12.4985 1.82698 12.8625C2.1146 13.427 2.57354 13.8859 3.13803 14.1735C3.50203 14.359 3.88956 14.4329 4.31113 14.4674C4.71702 14.5005 5.21527 14.5005 5.81897 14.5005H5.81901H5.85H10.15H10.181H10.181C10.7847 14.5005 11.283 14.5005 11.6889 14.4674C12.1104 14.4329 12.498 14.359 12.862 14.1735C13.4265 13.8859 13.8854 13.427 14.173 12.8625C14.3585 12.4985 14.4324 12.111 14.4669 11.6894C14.5 11.2835 14.5 10.7853 14.5 10.1816V10.1815V10.1505V9.75053C14.5 9.33631 14.1642 9.00053 13.75 9.00053C13.3358 9.00053 13 9.33631 13 9.75053V10.1505C13 10.793 12.9994 11.2297 12.9718 11.5672C12.945 11.8961 12.8963 12.0642 12.8365 12.1815C12.6927 12.4638 12.4632 12.6932 12.181 12.837C12.0637 12.8968 11.8955 12.9455 11.5667 12.9724C11.2292 12.9999 10.7924 13.0005 10.15 13.0005H5.85C5.20757 13.0005 4.77085 12.9999 4.43328 12.9724C4.10447 12.9455 3.93632 12.8968 3.81902 12.837C3.53677 12.6932 3.3073 12.4638 3.16349 12.1815C3.10372 12.0642 3.05503 11.8961 3.02816 11.5672C3.00058 11.2297 3 10.793 3 10.1505V5.85053C3 5.20809 3.00058 4.77137 3.02816 4.43381C3.05503 4.10499 3.10372 3.93684 3.16349 3.81954C3.3073 3.5373 3.53677 3.30783 3.81902 3.16402C3.93632 3.10425 4.10447 3.05556 4.43328 3.02869C4.77085 3.00111 5.20757 3.00053 5.85 3.00053H6.25C6.66422 3.00053 7 2.66474 7 2.25053C7 1.83631 6.66422 1.50053 6.25 1.50053H5.85Z\"></path></svg>`);\nconst LinkIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.accent;\n    return (()=>{\n        const _el$ = _tmpl$$g.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$f = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"><g clip-path=\"url(#clip0_3676_1274)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.82698 2.63901C1.5 3.28074 1.5 4.12082 1.5 5.80098V8.80098V9.00098V10.201C1.5 11.8811 1.5 12.7212 1.82698 13.3629C2.1146 13.9274 2.57354 14.3864 3.13803 14.674C3.77976 15.001 4.61984 15.001 6.3 15.001H11.7C13.3802 15.001 14.2202 15.001 14.862 14.674C15.4265 14.3864 15.8854 13.9274 16.173 13.3629C16.5 12.7212 16.5 11.8811 16.5 10.201V8.80098C16.5 7.12082 16.5 6.28074 16.173 5.63901C15.8854 5.07452 15.4265 4.61558 14.862 4.32796C14.743 4.26733 14.6172 4.21795 14.4805 4.17772C14.4501 3.49449 14.3722 3.02994 14.173 2.63901C13.8854 2.07452 13.4265 1.61558 12.862 1.32796C12.2202 1.00098 11.3802 1.00098 9.7 1.00098H6.3C4.61984 1.00098 3.77976 1.00098 3.13803 1.32796C2.57354 1.61558 2.1146 2.07452 1.82698 2.63901ZM12.9861 4.00942C12.9684 3.7108 12.9281 3.49982 12.8365 3.31999C12.6927 3.03775 12.4632 2.80828 12.181 2.66447C11.8601 2.50098 11.4401 2.50098 10.6 2.50098H5.4C4.55992 2.50098 4.13988 2.50098 3.81901 2.66447C3.53677 2.80828 3.3073 3.03775 3.16349 3.31999C3.03615 3.56991 3.00799 3.88 3.00177 4.40188C3.04646 4.37612 3.09189 4.35146 3.13803 4.32796C3.77976 4.00098 4.61984 4.00098 6.3 4.00098H11.7C12.1966 4.00098 12.6197 4.00098 12.9861 4.00942ZM3 7.90098V8.10098C3 8.47468 3 8.76527 3.01439 9.00098H3V11.101C3 11.9411 3 12.3611 3.16349 12.682C3.3073 12.9642 3.53677 13.1937 3.81901 13.3375C4.13988 13.501 4.55992 13.501 5.4 13.501H12.6C13.4401 13.501 13.8601 13.501 14.181 13.3375C14.4632 13.1937 14.6927 12.9642 14.8365 12.682C15 12.3611 15 11.9411 15 11.101V7.90098C15 7.0609 15 6.64086 14.8365 6.31999C14.6927 6.03775 14.4632 5.80828 14.181 5.66447C13.8601 5.50098 13.4401 5.50098 12.6 5.50098H5.4C4.55992 5.50098 4.13988 5.50098 3.81901 5.66447C3.53677 5.80828 3.3073 6.03775 3.16349 6.31999C3 6.64086 3 7.0609 3 7.90098ZM10.5 9.75098C10.5 9.33676 10.8358 9.00098 11.25 9.00098H12.75C13.1642 9.00098 13.5 9.33676 13.5 9.75098C13.5 10.1652 13.1642 10.501 12.75 10.501H11.25C10.8358 10.501 10.5 10.1652 10.5 9.75098Z\"></path></g><defs><clipPath id=\"clip0_3676_1274\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5 0.000976562)\"></rect></clipPath></defs></svg>`);\nconst WalletIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.accent;\n    return (()=>{\n        const _el$ = _tmpl$$f.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;\n        createRenderEffect(()=>setAttribute(_el$3, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst _tmpl$$e = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M39.6319 16.8719C38.3212 16.2041 36.7002 16.0478 34 16.0112V11C34 5.47715 29.5228 1 24 1C18.4772 1 14 5.47715 14 11V16.0112C11.2998 16.0478 9.6788 16.2041 8.36808 16.8719C6.86278 17.6389 5.63893 18.8628 4.87195 20.3681C4 22.0794 4 24.3196 4 28.8V32.2C4 36.6804 4 38.9206 4.87195 40.6319C5.63893 42.1372 6.86278 43.3611 8.36808 44.1281C10.0794 45 12.3196 45 16.8 45H31.2C35.6804 45 37.9206 45 39.6319 44.1281C41.1372 43.3611 42.3611 42.1372 43.1281 40.6319C44 38.9206 44 36.6804 44 32.2V28.8C44 24.3196 44 22.0794 43.1281 20.3681C42.3611 18.8628 41.1372 17.6389 39.6319 16.8719ZM31 11V16H17V11C17 7.13401 20.134 4 24 4C27.866 4 31 7.13401 31 11ZM7.54497 21.73C7 22.7996 7 24.1997 7 27V34C7 36.8003 7 38.2004 7.54497 39.27C8.02433 40.2108 8.78924 40.9757 9.73005 41.455C10.7996 42 12.1997 42 15 42H33C35.8003 42 37.2004 42 38.27 41.455C39.2108 40.9757 39.9757 40.2108 40.455 39.27C41 38.2004 41 36.8003 41 34V27C41 24.1997 41 22.7996 40.455 21.73C39.9757 20.7892 39.2108 20.0243 38.27 19.545C37.2004 19 35.8003 19 33 19H15C12.1997 19 10.7996 19 9.73005 19.545C8.78924 20.0243 8.02433 20.7892 7.54497 21.73ZM24 24C23.1716 24 22.5 24.6716 22.5 25.5V29.5C22.5 30.3284 23.1716 31 24 31C24.8284 31 25.5 30.3284 25.5 29.5V25.5C25.5 24.6716 24.8284 24 24 24Z\"></path></svg>`);\nconst SecurityIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$e.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = props.class, _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$d = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M37.485 37.3849C40.894 33.9506 43 29.2212 43 24C43 13.5066 34.4934 5 24 5C13.5066 5 5 13.5066 5 24C5 29.2213 7.1061 33.9507 10.5151 37.385C13.3583 32.9438 18.3354 30 24.0001 30C29.6647 30 34.6418 32.9437 37.485 37.3849ZM35.1809 39.3635C32.9143 35.5532 28.7554 33 24.0001 33C19.2448 33 15.0858 35.5533 12.8193 39.3636C15.9564 41.6506 19.8206 43 24 43C28.1795 43 32.0437 41.6505 35.1809 39.3635ZM24 46C36.1503 46 46 36.1503 46 24C46 11.8497 36.1503 2 24 2C11.8497 2 2 11.8497 2 24C2 36.1503 11.8497 46 24 46ZM24 24C26.7614 24 29 21.7614 29 19C29 16.2386 26.7614 14 24 14C21.2386 14 19 16.2386 19 19C19 21.7614 21.2386 24 24 24ZM24 27C28.4183 27 32 23.4183 32 19C32 14.5817 28.4183 11 24 11C19.5817 11 16 14.5817 16 19C16 23.4183 19.5817 27 24 27Z\"></path></svg>`);\nconst PersonalityIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$d.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = props.class, _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$c = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M34.5607 4.43934C33.9749 3.85355 33.0251 3.85355 32.4393 4.43934C31.8536 5.02513 31.8536 5.97487 32.4393 6.56066L37.8787 12H10.5C9.67157 12 9 12.6716 9 13.5C9 14.3284 9.67157 15 10.5 15H37.8787L32.4393 20.4393C31.8536 21.0251 31.8536 21.9749 32.4393 22.5607C33.0251 23.1464 33.9749 23.1464 34.5607 22.5607L42.5607 14.5607C43.1464 13.9749 43.1464 13.0251 42.5607 12.4393L34.5607 4.43934ZM13.4393 25.4393C14.0251 24.8536 14.9749 24.8536 15.5607 25.4393C16.1464 26.0251 16.1464 26.9749 15.5607 27.5607L10.1213 33H37.5C38.3284 33 39 33.6716 39 34.5C39 35.3284 38.3284 36 37.5 36H10.1213L15.5607 41.4393C16.1464 42.0251 16.1464 42.9749 15.5607 43.5607C14.9749 44.1464 14.0251 44.1464 13.4393 43.5607L5.43934 35.5607C4.85355 34.9749 4.85355 34.0251 5.43934 33.4393L13.4393 25.4393Z\"></path></svg>`);\nconst SwapIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$c.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = props.class, _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$b = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.75 12.002C1.75 9.20169 1.75 7.80156 2.29497 6.732C2.77433 5.79119 3.53924 5.02629 4.48005 4.54692C5.54961 4.00195 6.94974 4.00195 9.75 4.00195H17.25C20.0503 4.00195 21.4504 4.00195 22.52 4.54692C23.4608 5.02629 24.2257 5.79119 24.705 6.732C24.8256 6.96861 24.9195 7.2214 24.9926 7.50195H21.5C19.6377 7.50195 18.7065 7.50195 17.9609 7.77334C16.711 8.22828 15.7263 9.21291 15.2714 10.4629C15 11.2085 15 12.1396 15 14.002C15 15.8643 15 16.7954 15.2714 17.541C15.7263 18.791 16.711 19.7756 17.9609 20.2306C18.7065 20.502 19.6377 20.502 21.5 20.502H24.9926C24.9195 20.7825 24.8256 21.0353 24.705 21.2719C24.2257 22.2127 23.4608 22.9776 22.52 23.457C21.4504 24.002 20.0503 24.002 17.25 24.002H9.75C6.94974 24.002 5.54961 24.002 4.48005 23.457C3.53924 22.9776 2.77433 22.2127 2.29497 21.2719C1.75 20.2023 1.75 18.8022 1.75 16.002V12.002ZM16.4999 13.802C16.4999 12.1218 16.4999 11.2817 16.8269 10.64C17.1145 10.0755 17.5735 9.61656 18.138 9.32894C18.7797 9.00196 19.6198 9.00196 21.2999 9.00196H23.1999C24.8801 9.00196 25.7202 9.00196 26.3619 9.32894C26.9264 9.61656 27.3853 10.0755 27.673 10.64C27.9999 11.2817 27.9999 12.1218 27.9999 13.802V14.202C27.9999 15.8821 27.9999 16.7222 27.673 17.3639C27.3853 17.9284 26.9264 18.3874 26.3619 18.675C25.7202 19.002 24.8801 19.002 23.1999 19.002H21.2999C19.6198 19.002 18.7797 19.002 18.138 18.675C17.5735 18.3874 17.1145 17.9284 16.8269 17.3639C16.4999 16.7222 16.4999 15.8821 16.4999 14.202V13.802ZM22.4999 14.002C22.4999 14.9685 21.7164 15.752 20.7499 15.752C19.7834 15.752 18.9999 14.9685 18.9999 14.002C18.9999 13.0355 19.7834 12.252 20.7499 12.252C21.7164 12.252 22.4999 13.0355 22.4999 14.002Z\"></path></svg>`);\nconst AtWalletIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.constant.white;\n    return (()=>{\n        const _el$ = _tmpl$$b.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = props.class, _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$a = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.0001 10.0001C10.0016 8.02333 10.0267 6.98719 10.436 6.18404C10.8195 5.43139 11.4314 4.81947 12.184 4.43597C13.0397 4 14.1598 4 16.4 4H17.6C19.8402 4 20.9603 4 21.816 4.43597C22.5686 4.81947 23.1805 5.43139 23.564 6.18404C24 7.03969 24 8.15979 24 10.4V11.6C24 13.8402 24 14.9603 23.564 15.816C23.1805 16.5686 22.5686 17.1805 21.816 17.564C21.0128 17.9733 19.9767 17.9984 17.9999 17.9999C17.9984 19.9767 17.9733 21.0128 17.564 21.816C17.1805 22.5686 16.5686 23.1805 15.816 23.564C14.9603 24 13.8402 24 11.6 24H10.4C8.15979 24 7.03969 24 6.18404 23.564C5.43139 23.1805 4.81947 22.5686 4.43597 21.816C4 20.9603 4 19.8402 4 17.6V16.4C4 14.1598 4 13.0397 4.43597 12.184C4.81947 11.4314 5.43139 10.8195 6.18404 10.436C6.98719 10.0267 8.02333 10.0016 10.0001 10.0001ZM10 11.5H9.5C8.09987 11.5 7.3998 11.5 6.86502 11.7725C6.39462 12.0122 6.01217 12.3946 5.77248 12.865C5.5 13.3998 5.5 14.0999 5.5 15.5V18.5C5.5 19.9001 5.5 20.6002 5.77248 21.135C6.01217 21.6054 6.39462 21.9878 6.86502 22.2275C7.3998 22.5 8.09987 22.5 9.5 22.5H12.5C13.9001 22.5 14.6002 22.5 15.135 22.2275C15.6054 21.9878 15.9878 21.6054 16.2275 21.135C16.5 20.6002 16.5 19.9001 16.5 18.5V18H16.4C14.1598 18 13.0397 18 12.184 17.564C11.4314 17.1805 10.8195 16.5686 10.436 15.816C10 14.9603 10 13.8402 10 11.6V11.5ZM11.5 9.5C11.5 8.09987 11.5 7.3998 11.7725 6.86502C12.0122 6.39462 12.3946 6.01217 12.865 5.77248C13.3998 5.5 14.0999 5.5 15.5 5.5H18.5C19.9001 5.5 20.6002 5.5 21.135 5.77248C21.6054 6.01217 21.9878 6.39462 22.2275 6.86502C22.5 7.3998 22.5 8.09987 22.5 9.5V12.5C22.5 13.9001 22.5 14.6002 22.2275 15.135C21.9878 15.6054 21.6054 15.9878 21.135 16.2275C20.6002 16.5 19.9001 16.5 18.5 16.5H15.5C14.0999 16.5 13.3998 16.5 12.865 16.2275C12.3946 15.9878 12.0122 15.6054 11.7725 15.135C11.5 14.6002 11.5 13.9001 11.5 12.5V9.5Z\"></path></svg>`);\nconst CopyLightIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$a.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = fill(), _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"fill\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$9 = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"17\" viewBox=\"0 0 16 17\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1 4.12695C1 3.07754 1 2.55284 1.19202 2.14684C1.38986 1.72856 1.7266 1.39181 2.14489 1.19397C2.55088 1.00195 3.07559 1.00195 4.125 1.00195C5.17441 1.00195 5.69912 1.00195 6.10511 1.19397C6.5234 1.39181 6.86014 1.72856 7.05798 2.14684C7.25 2.55284 7.25 3.07754 7.25 4.12695C7.25 5.17636 7.25 5.70107 7.05798 6.10706C6.86014 6.52535 6.5234 6.8621 6.10511 7.05993C5.69912 7.25195 5.17441 7.25195 4.125 7.25195C3.07559 7.25195 2.55088 7.25195 2.14489 7.05993C1.7266 6.8621 1.38986 6.52535 1.19202 6.10706C1 5.70107 1 5.17636 1 4.12695ZM2.5 3.30195C2.5 3.02193 2.5 2.88191 2.5545 2.77496C2.60243 2.68088 2.67892 2.60439 2.773 2.55645C2.87996 2.50195 3.01997 2.50195 3.3 2.50195H4.95C5.23003 2.50195 5.37004 2.50195 5.477 2.55645C5.57108 2.60439 5.64757 2.68088 5.6955 2.77496C5.75 2.88191 5.75 3.02193 5.75 3.30195V4.95195C5.75 5.23198 5.75 5.37199 5.6955 5.47895C5.64757 5.57303 5.57108 5.64952 5.477 5.69746C5.37004 5.75195 5.23003 5.75195 4.95 5.75195H3.3C3.01997 5.75195 2.87996 5.75195 2.773 5.69746C2.67892 5.64952 2.60243 5.57303 2.5545 5.47895C2.5 5.37199 2.5 5.23198 2.5 4.95195V3.30195ZM1 11.877C1 10.8275 1 10.3028 1.19202 9.89684C1.38986 9.47856 1.7266 9.14181 2.14489 8.94397C2.55088 8.75195 3.07559 8.75195 4.125 8.75195C5.17441 8.75195 5.69912 8.75195 6.10511 8.94397C6.5234 9.14181 6.86014 9.47856 7.05798 9.89684C7.25 10.3028 7.25 10.8275 7.25 11.877C7.25 12.9264 7.25 13.4511 7.05798 13.8571C6.86014 14.2753 6.5234 14.6121 6.10511 14.8099C5.69912 15.002 5.17441 15.002 4.125 15.002C3.07559 15.002 2.55088 15.002 2.14489 14.8099C1.7266 14.6121 1.38986 14.2753 1.19202 13.8571C1 13.4511 1 12.9264 1 11.877ZM2.5 11.052C2.5 10.7719 2.5 10.6319 2.5545 10.525C2.60243 10.4309 2.67892 10.3544 2.773 10.3064C2.87996 10.252 3.01997 10.252 3.3 10.252H4.95C5.23003 10.252 5.37004 10.252 5.477 10.3064C5.57108 10.3544 5.64757 10.4309 5.6955 10.525C5.75 10.6319 5.75 10.7719 5.75 11.052V12.702C5.75 12.982 5.75 13.122 5.6955 13.2289C5.64757 13.323 5.57108 13.3995 5.477 13.4475C5.37004 13.502 5.23003 13.502 4.95 13.502H3.3C3.01997 13.502 2.87996 13.502 2.773 13.4475C2.67892 13.3995 2.60243 13.323 2.5545 13.2289C2.5 13.122 2.5 12.982 2.5 12.702V11.052ZM8.94202 2.14684C8.75 2.55284 8.75 3.07754 8.75 4.12695C8.75 5.17636 8.75 5.70107 8.94202 6.10706C9.13986 6.52535 9.4766 6.8621 9.89489 7.05993C10.3009 7.25195 10.8256 7.25195 11.875 7.25195C12.9244 7.25195 13.4491 7.25195 13.8551 7.05993C14.2734 6.8621 14.6101 6.52535 14.808 6.10706C15 5.70107 15 5.17636 15 4.12695C15 3.07754 15 2.55284 14.808 2.14684C14.6101 1.72856 14.2734 1.39181 13.8551 1.19397C13.4491 1.00195 12.9244 1.00195 11.875 1.00195C10.8256 1.00195 10.3009 1.00195 9.89489 1.19397C9.4766 1.39181 9.13986 1.72856 8.94202 2.14684ZM10.3045 2.77496C10.25 2.88191 10.25 3.02193 10.25 3.30195V4.95195C10.25 5.23198 10.25 5.37199 10.3045 5.47895C10.3524 5.57303 10.4289 5.64952 10.523 5.69746C10.63 5.75195 10.77 5.75195 11.05 5.75195H12.7C12.98 5.75195 13.12 5.75195 13.227 5.69746C13.3211 5.64952 13.3976 5.57303 13.4455 5.47895C13.5 5.37199 13.5 5.23198 13.5 4.95195V3.30195C13.5 3.02193 13.5 2.88191 13.4455 2.77496C13.3976 2.68088 13.3211 2.60439 13.227 2.55645C13.12 2.50195 12.98 2.50195 12.7 2.50195H11.05C10.77 2.50195 10.63 2.50195 10.523 2.55645C10.4289 2.60439 10.3524 2.68088 10.3045 2.77496ZM8.80727 9.13518C8.75 9.26242 8.75 9.4256 8.75 9.75195C8.75 10.0783 8.75 10.2415 8.80727 10.3687C8.87245 10.5136 8.9884 10.6295 9.13323 10.6947C9.26047 10.752 9.42365 10.752 9.75 10.752C10.0764 10.752 10.2395 10.752 10.3668 10.6947C10.5116 10.6295 10.6276 10.5136 10.6927 10.3687C10.75 10.2415 10.75 10.0783 10.75 9.75195C10.75 9.4256 10.75 9.26242 10.6927 9.13518C10.6276 8.99035 10.5116 8.8744 10.3668 8.80922C10.2395 8.75195 10.0764 8.75195 9.75 8.75195C9.42365 8.75195 9.26047 8.75195 9.13323 8.80922C8.9884 8.8744 8.87245 8.99035 8.80727 9.13518ZM10.87 11.8771C10.87 11.546 10.87 11.3805 10.9289 11.2517C10.9938 11.1098 11.1077 10.9959 11.2497 10.931C11.3784 10.8721 11.5439 10.8721 11.875 10.8721C12.2061 10.8721 12.3716 10.8721 12.5003 10.931C12.6423 10.9959 12.7562 11.1098 12.8211 11.2517C12.88 11.3805 12.88 11.546 12.88 11.8771C12.88 12.2081 12.88 12.3737 12.8211 12.5024C12.7562 12.6444 12.6423 12.7583 12.5003 12.8232C12.3716 12.8821 12.2061 12.8821 11.875 12.8821C11.5439 12.8821 11.3784 12.8821 11.2497 12.8232C11.1077 12.7583 10.9938 12.6444 10.9289 12.5024C10.87 12.3737 10.87 12.2081 10.87 11.8771ZM8.80727 13.3852C8.75 13.5124 8.75 13.6756 8.75 14.002C8.75 14.3283 8.75 14.4915 8.80727 14.6187C8.87245 14.7636 8.9884 14.8795 9.13323 14.9447C9.26047 15.002 9.42365 15.002 9.75 15.002C10.0764 15.002 10.2395 15.002 10.3668 14.9447C10.5116 14.8795 10.6276 14.7636 10.6927 14.6187C10.75 14.4915 10.75 14.3283 10.75 14.002C10.75 13.6756 10.75 13.5124 10.6927 13.3852C10.6276 13.2404 10.5116 13.1244 10.3668 13.0592C10.2395 13.002 10.0764 13.002 9.75 13.002C9.42365 13.002 9.26047 13.002 9.13323 13.0592C8.9884 13.1244 8.87245 13.2404 8.80727 13.3852ZM13 9.75195C13 9.4256 13 9.26242 13.0573 9.13518C13.1224 8.99035 13.2384 8.8744 13.3832 8.80922C13.5105 8.75195 13.6736 8.75195 14 8.75195C14.3264 8.75195 14.4895 8.75195 14.6168 8.80922C14.7616 8.8744 14.8776 8.99035 14.9427 9.13518C15 9.26242 15 9.4256 15 9.75195C15 10.0783 15 10.2415 14.9427 10.3687C14.8776 10.5136 14.7616 10.6295 14.6168 10.6947C14.4895 10.752 14.3264 10.752 14 10.752C13.6736 10.752 13.5105 10.752 13.3832 10.6947C13.2384 10.6295 13.1224 10.5136 13.0573 10.3687C13 10.2415 13 10.0783 13 9.75195ZM13.0573 13.3852C13 13.5124 13 13.6756 13 14.002C13 14.3283 13 14.4915 13.0573 14.6187C13.1224 14.7636 13.2384 14.8795 13.3832 14.9447C13.5105 15.002 13.6736 15.002 14 15.002C14.3264 15.002 14.4895 15.002 14.6168 14.9447C14.7616 14.8795 14.8776 14.7636 14.9427 14.6187C15 14.4915 15 14.3283 15 14.002C15 13.6756 15 13.5124 14.9427 13.3852C14.8776 13.2404 14.7616 13.1244 14.6168 13.0592C14.4895 13.002 14.3264 13.002 14 13.002C13.6736 13.002 13.5105 13.002 13.3832 13.0592C13.2384 13.1244 13.1224 13.2404 13.0573 13.3852Z\"></path></svg>`);\nconst QRIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.secondary;\n    return (()=>{\n        const _el$ = _tmpl$$9.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect(()=>setAttribute(_el$2, \"fill\", fill()));\n        return _el$;\n    })();\n};\nconst containerBorders = {\n    m: \"16px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst walletBorders = {\n    m: \"6px\",\n    s: \"6px\",\n    none: \"0\"\n};\nconst FourWalletsCard = styled.div`\n    width: 60px;\n    height: 60px;\n    padding: 8px;\n    margin-bottom: 8px;\n    border-radius: ${(props)=>containerBorders[props.theme.borderRadius]};\n    background-color: ${(props)=>props.theme.colors.background.tint};\n    display: grid;\n    grid-template: 1fr 1fr / 1fr 1fr;\n    gap: 4px;\n`;\nconst FourWalletsImage = styled(WalletImage)`\n    width: 20px;\n    height: 20px;\n    border-radius: ${(props)=>walletBorders[props.theme.borderRadius]};\n`;\nconst FourWalletsItem = (props)=>{\n    return createComponent(WalletItem, {\n        get name () {\n            return props.labelLine1;\n        },\n        get secondLine () {\n            return props.labelLine2;\n        },\n        get icon () {\n            return createComponent(FourWalletsCard, {\n                get children () {\n                    return createComponent(For, {\n                        each: [\n                            0,\n                            1,\n                            2,\n                            3\n                        ],\n                        children: (index)=>createComponent(FourWalletsImage, {\n                                get src () {\n                                    return props.images[index];\n                                }\n                            })\n                    });\n                }\n            });\n        },\n        onClick: ()=>props.onClick()\n    });\n};\nconst AT_WALLET_APP_NAME = \"telegram-wallet\";\nconst IMG = {\n    TON: \"https://raw.githubusercontent.com/ton-connect/sdk/main/assets/ton-icon-48.png\",\n    TG: \"https://raw.githubusercontent.com/ton-connect/sdk/main/assets/tg.png\"\n};\nconst WalletLabeledItem = (props)=>{\n    const [t2] = useI18n();\n    const walletsSecondLine = ()=>{\n        if (props.wallet.appName === AT_WALLET_APP_NAME) {\n            return void 0;\n        }\n        if (\"isPreferred\" in props.wallet && props.wallet.isPreferred) {\n            return t2(\"walletItem.recent\", {}, \"Recent\");\n        }\n        if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected)(props.wallet)) {\n            return t2(\"walletItem.installed\", {}, \"Installed\");\n        }\n        if (props.wallet.name === \"Tonkeeper\") {\n            return t2(\"walletItem.popular\", {}, \"Popular\");\n        }\n        return void 0;\n    };\n    return createMemo((()=>{\n        const _c$ = createMemo(()=>props.wallet.appName === AT_WALLET_APP_NAME);\n        return ()=>_c$() ? createComponent(WalletItem, {\n                get icon () {\n                    return props.wallet.imageUrl;\n                },\n                get name () {\n                    return t2(\"walletItem.walletOn\", {}, \"Wallet in\");\n                },\n                secondLine: \"Telegram\",\n                get badgeUrl () {\n                    return IMG.TG;\n                },\n                onClick: ()=>props.onClick(),\n                get [\"class\"] () {\n                    return props.class;\n                }\n            }) : createComponent(WalletItem, {\n                get icon () {\n                    return props.wallet.imageUrl;\n                },\n                get name () {\n                    return props.wallet.name;\n                },\n                get secondLine () {\n                    return walletsSecondLine();\n                },\n                secondLineColorPrimary: false,\n                onClick: ()=>props.onClick(),\n                get [\"class\"] () {\n                    return props.class;\n                }\n            });\n    })());\n};\nconst ScrollContainerStyled = styled.div`\n    width: 100%;\n    overflow-y: auto;\n    max-height: ${(props)=>props.maxHeight};\n\n    scrollbar-width: none;\n    &&::-webkit-scrollbar {\n        display: none;\n    }\n\n    &&::-webkit-scrollbar-track {\n        background: transparent;\n    }\n\n    &&::-webkit-scrollbar-thumb {\n        display: none;\n    }\n`;\nconst ScrollDivider = styled.div`\n    height: 1px;\n    margin: 0 -24px;\n    width: calc(100% + 48px);\n    opacity: 0.08;\n    background: ${(props)=>props.isShown ? props.theme.colors.icon.secondary : \"transparent\"};\n    transition: background 0.15s ease-in-out;\n\n    ${media(\"mobile\")} {\n        width: 100%;\n        margin: 0;\n    }\n`;\nconst [windowHeight, setWindowHeight] = createSignal(((_h = getWindow$1()) == null ? void 0 : _h.innerHeight) || 0);\nif (getWindow$1()) {\n    window.addEventListener(\"resize\", ()=>setWindowHeight(window.innerHeight));\n}\nconst [isMobile, setIsMobile] = createSignal(isDevice(\"mobile\"));\nconst updateIsMobile = ()=>setIsMobile(isDevice(\"mobile\"));\nif (getWindow$1()) {\n    window.addEventListener(\"resize\", ()=>updateIsMobile());\n    window.addEventListener(\"load\", ()=>updateIsMobile(), {\n        once: true\n    });\n}\nconst ScrollContainer = (props)=>{\n    const [scrolled, setScrolled] = createSignal(false);\n    const onScroll = (e2)=>{\n        setScrolled(e2.target.scrollTop > 0);\n    };\n    const offset = ()=>isMobile() ? 150 : 200;\n    const maxHeight = ()=>props.maxHeight !== void 0 ? `${props.maxHeight}px` : `${windowHeight() - offset()}px`;\n    return [\n        createComponent(ScrollDivider, {\n            get isShown () {\n                return scrolled();\n            }\n        }),\n        createComponent(ScrollContainerStyled, {\n            get maxHeight () {\n                return maxHeight();\n            },\n            onScroll,\n            get [\"class\"] () {\n                return props.class;\n            },\n            get children () {\n                return props.children;\n            }\n        })\n    ];\n};\nconst AStyled = styled.a`\n    display: block;\n    text-decoration: unset;\n`;\nconst Link = (props)=>{\n    const attributes = ()=>props.blank ? {\n            rel: \"noreferrer noopener\"\n        } : {};\n    return createComponent(AStyled, mergeProps({\n        get href () {\n            return props.href;\n        },\n        get target () {\n            return props.blank ? \"_blank\" : \"_self\";\n        },\n        get [\"class\"] () {\n            return props.class;\n        }\n    }, attributes, {\n        get children () {\n            return props.children;\n        }\n    }));\n};\nconst TonConnectUiContext = createContext();\nconst _tmpl$$8 = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z\"></path></svg>`);\nconst CopyIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$8.cloneNode(true), _el$2 = _el$.firstChild;\n        createRenderEffect((_p$)=>{\n            const _v$ = props.class, _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$, \"class\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$2, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst _tmpl$$7 = /* @__PURE__ */ template$1(`<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z\"></path><path d=\"M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z\"></path></svg>`);\nconst DisconnectIcon = (props)=>{\n    const theme = useTheme();\n    const fill = ()=>props.fill || theme.colors.icon.primary;\n    return (()=>{\n        const _el$ = _tmpl$$7.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;\n        createRenderEffect((_p$)=>{\n            const _v$ = fill(), _v$2 = fill();\n            _v$ !== _p$._v$ && setAttribute(_el$2, \"fill\", _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && setAttribute(_el$3, \"fill\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$;\n    })();\n};\nconst hoverBorders$1 = {\n    m: \"8px\",\n    s: \"4px\",\n    none: \"0\"\n};\nconst dropdownBorders = {\n    m: \"16px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst AccountButtonDropdownStyled = styled.div`\n    width: 256px;\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n    border-radius: ${(props)=>dropdownBorders[props.theme.borderRadius]};\n\n    background-color: ${(props)=>props.theme.colors.background.primary}\n           \n    color: ${(props)=>props.theme.colors.text.primary}\n`;\nconst UlStyled = styled.ul`\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    padding: 8px;\n`;\nconst MenuButtonStyled = styled.button`\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    height: 40px;\n    padding-left: 8px;\n    width: 100%;\n\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    border: none;\n    border-radius: ${(props)=>hoverBorders$1[props.theme.borderRadius]};\n    cursor: pointer;\n\n    transition: background-color, transform 0.1s ease-in-out;\n\n    &:hover {\n        background-color: ${(props)=>props.theme.colors.background.secondary};\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n`;\nconst _tmpl$$6 = /* @__PURE__ */ template$1(`<li></li>`);\nconst MenuItemText = (props)=>createComponent(Text, {\n        get translationKey () {\n            return props.translationKey;\n        },\n        fontSize: \"15px\",\n        fontWeight: \"590\",\n        get children () {\n            return props.children;\n        }\n    });\nconst AccountButtonDropdown = (props)=>{\n    const tonConnectUi = useContext(TonConnectUiContext);\n    const [isCopiedShown, setIsCopiedShown] = createSignal(false);\n    const onCopy = ()=>__async(void 0, null, function*() {\n            const userFriendlyAddress = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.toUserFriendlyAddress)(tonConnectUi.account.address, tonConnectUi.account.chain === _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.CHAIN.TESTNET);\n            yield copyToClipboard(userFriendlyAddress);\n            setIsCopiedShown(true);\n            setTimeout(()=>setIsCopiedShown(false), 1e3);\n        });\n    const onDisconnect = ()=>{\n        tonConnectUi.disconnect();\n        props.onClose();\n    };\n    return createComponent(AccountButtonDropdownStyled, {\n        ref (r$) {\n            const _ref$ = props.ref;\n            typeof _ref$ === \"function\" ? _ref$(r$) : props.ref = r$;\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-dropdown\": \"true\",\n        get children () {\n            return createComponent(UlStyled, {\n                get children () {\n                    return [\n                        (()=>{\n                            const _el$ = _tmpl$$6.cloneNode(true);\n                            insert(_el$, createComponent(MenuButtonStyled, {\n                                onClick: ()=>onCopy(),\n                                get children () {\n                                    return [\n                                        createComponent(CopyIcon, {}),\n                                        createComponent(Show, {\n                                            get when () {\n                                                return !isCopiedShown();\n                                            },\n                                            get children () {\n                                                return createComponent(MenuItemText, {\n                                                    translationKey: \"button.dropdown.copy\",\n                                                    children: \"Copy address\"\n                                                });\n                                            }\n                                        }),\n                                        createComponent(Show, {\n                                            get when () {\n                                                return isCopiedShown();\n                                            },\n                                            get children () {\n                                                return createComponent(MenuItemText, {\n                                                    translationKey: \"button.dropdown.copied\",\n                                                    children: \"Address copied!\"\n                                                });\n                                            }\n                                        })\n                                    ];\n                                }\n                            }));\n                            return _el$;\n                        })(),\n                        (()=>{\n                            const _el$2 = _tmpl$$6.cloneNode(true);\n                            insert(_el$2, createComponent(MenuButtonStyled, {\n                                onClick: ()=>onDisconnect(),\n                                get children () {\n                                    return [\n                                        createComponent(DisconnectIcon, {}),\n                                        createComponent(MenuItemText, {\n                                            translationKey: \"button.dropdown.disconnect\",\n                                            children: \"Disconnect\"\n                                        })\n                                    ];\n                                }\n                            }));\n                            return _el$2;\n                        })()\n                    ];\n                }\n            });\n        }\n    });\n};\nconst borders$2 = {\n    m: \"16px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst NotificationStyled = styled.div`\n    width: 256px;\n    padding: 12px 16px;\n    display: flex;\n    gap: 9px;\n\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n    border-radius: ${(props)=>borders$2[props.theme.borderRadius]};\n`;\nconst NotificationContentStyled = styled.div`\n    width: 192px;\n\n    > h3 {\n        font-size: 15px;\n    }\n`;\nconst TextStyled$2 = styled(Text)`\n    margin-top: 4px;\n    color: ${(props)=>props.theme.colors.text.secondary};\n`;\nconst Notification = (props)=>{\n    const dataAttrs = useDataAttributes(props);\n    return createComponent(NotificationStyled, mergeProps({\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-notification\": \"true\"\n    }, dataAttrs, {\n        get children () {\n            return [\n                createComponent(NotificationContentStyled, {\n                    get children () {\n                        return [\n                            createComponent(H3, {\n                                get translationKey () {\n                                    return props.header.translationKey;\n                                },\n                                get translationValues () {\n                                    return props.header.translationValues;\n                                },\n                                get children () {\n                                    return props.children;\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return props.text;\n                                },\n                                get children () {\n                                    return createComponent(TextStyled$2, {\n                                        get translationKey () {\n                                            return props.text.translationKey;\n                                        },\n                                        get translationValues () {\n                                            return props.text.translationValues;\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                }),\n                createMemo(()=>props.icon)\n            ];\n        }\n    }));\n};\nconst LoaderIconStyled$2 = styled(LoaderIcon)`\n    align-self: center;\n`;\nconst ConfirmOperationNotification = (props)=>{\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [t2] = useI18n();\n    const name = ()=>tonConnectUI.wallet && \"name\" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2(\"common.yourWallet\", {}, \"Your wallet\");\n    return createComponent(Notification, {\n        get header () {\n            return {\n                translationKey: \"notifications.confirm.header\",\n                translationValues: {\n                    name: name()\n                }\n            };\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        get icon () {\n            return createComponent(LoaderIconStyled$2, {});\n        },\n        \"data-tc-notification-confirm\": \"true\",\n        children: \"Confirm operation in your wallet\"\n    });\n};\nconst ErrorIconStyled$2 = styled(ErrorIcon)`\n    margin-top: 2px;\n`;\nconst ErrorTransactionNotification = (props)=>{\n    return createComponent(Notification, {\n        header: {\n            translationKey: \"notifications.transactionCanceled.header\"\n        },\n        text: {\n            translationKey: \"notifications.transactionCanceled.text\"\n        },\n        get icon () {\n            return createComponent(ErrorIconStyled$2, {\n                size: \"xs\"\n            });\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-notification-tx-cancelled\": \"true\",\n        children: \"Transaction cancelled\"\n    });\n};\nconst SuccessIconStyled = styled(SuccessIcon)`\n    margin-top: 2px;\n`;\nconst SuccessTransactionNotification = (props)=>{\n    return createComponent(Notification, {\n        header: {\n            translationKey: \"notifications.transactionSent.header\"\n        },\n        text: {\n            translationKey: \"notifications.transactionSent.text\"\n        },\n        get icon () {\n            return createComponent(SuccessIconStyled, {});\n        },\n        get [\"class\"] () {\n            return props.class;\n        },\n        \"data-tc-notification-tx-sent\": \"true\",\n        children: \"Transaction sent\"\n    });\n};\nconst NotificationClass = u`\n    transform: translateY(-8px);\n    margin-bottom: 12px;\n`;\nconst defaultConfig = {\n    timeout: 4500\n};\nconst [latestAction, setLatestAction] = createSignal(null);\nfunction useOpenedNotifications(config) {\n    const { timeout } = __spreadValues(__spreadValues({}, defaultConfig), config);\n    const [openedNotifications, setOpenedNotifications] = createSignal([]);\n    const [timeoutIds, setTimeoutIds] = createSignal([]);\n    createEffect(on(action, (action2)=>{\n        var _a2;\n        if (!action2 || !action2.showNotification) {\n            return;\n        }\n        if (latestAction() === action2) {\n            return;\n        }\n        if (((_a2 = latestAction()) == null ? void 0 : _a2.name) === \"confirm-transaction\" && action2.name === \"confirm-transaction\") {\n            return;\n        }\n        setLatestAction(action2);\n        setOpenedNotifications((openedNotifications2)=>openedNotifications2.filter((n2)=>n2.action !== \"confirm-transaction\"));\n        const notification = {\n            action: action2.name\n        };\n        setOpenedNotifications((openedNotifications2)=>[\n                ...openedNotifications2,\n                notification\n            ]);\n        const timeoutId = setTimeout(()=>{\n            setOpenedNotifications((openedNotifications2)=>openedNotifications2.filter((n2)=>n2 !== notification));\n            setTimeoutIds((timeoutIds2)=>timeoutIds2.filter((id)=>id !== timeoutId));\n        }, timeout);\n        setTimeoutIds((timeoutIds2)=>[\n                ...timeoutIds2,\n                timeoutId\n            ]);\n    }));\n    onCleanup(()=>{\n        timeoutIds().forEach((id)=>clearTimeout(id));\n    });\n    return openedNotifications;\n}\nconst _tmpl$$5 = /* @__PURE__ */ template$1(`<div data-tc-list-notifications=\"true\"></div>`);\nconst Notifications = (props)=>{\n    const openedNotifications = useOpenedNotifications();\n    return (()=>{\n        const _el$ = _tmpl$$5.cloneNode(true);\n        insert(_el$, createComponent(TransitionGroup, {\n            onBeforeEnter: (el)=>{\n                animate(el, [\n                    {\n                        opacity: 0,\n                        transform: \"translateY(0)\"\n                    },\n                    {\n                        opacity: 1,\n                        transform: \"translateY(-8px)\"\n                    }\n                ], {\n                    duration: 200\n                });\n            },\n            onExit: (el, done)=>{\n                const a2 = animate(el, [\n                    {\n                        opacity: 1,\n                        transform: \"translateY(-8px)\"\n                    },\n                    {\n                        opacity: 0,\n                        transform: \"translateY(-30px)\"\n                    }\n                ], {\n                    duration: 200\n                });\n                a2.finished.then(done);\n            },\n            get children () {\n                return createComponent(For, {\n                    get each () {\n                        return openedNotifications();\n                    },\n                    children: (openedNotification)=>createComponent(Switch, {\n                            get children () {\n                                return [\n                                    createComponent(Match, {\n                                        get when () {\n                                            return openedNotification.action === \"transaction-sent\";\n                                        },\n                                        get children () {\n                                            return createComponent(SuccessTransactionNotification, {\n                                                \"class\": NotificationClass\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return openedNotification.action === \"transaction-canceled\";\n                                        },\n                                        get children () {\n                                            return createComponent(ErrorTransactionNotification, {\n                                                \"class\": NotificationClass\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return openedNotification.action === \"confirm-transaction\";\n                                        },\n                                        get children () {\n                                            return createComponent(ConfirmOperationNotification, {\n                                                \"class\": NotificationClass\n                                            });\n                                        }\n                                    })\n                                ];\n                            }\n                        })\n                });\n            }\n        }));\n        createRenderEffect(()=>className(_el$, props.class));\n        return _el$;\n    })();\n};\nconst AccountButtonStyled = styled(Button)`\n    background-color: ${(props)=>props.theme.colors.connectButton.background};\n    color: ${(props)=>props.theme.colors.connectButton.foreground};\n    box-shadow: ${(props)=>`0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};\n    padding: 8px 16px 8px 12px;\n\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    height: 40px;\n`;\nconst DropdownButtonStyled = styled(AccountButtonStyled)`\n    padding: 12px 16px;\n    min-width: 148px;\n    justify-content: center;\n    background-color: ${(props)=>props.theme.colors.background.primary};\n`;\nconst LoaderButtonStyled$1 = styled(Button)`\n    min-width: 148px;\n    height: 40px;\n\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    color: ${(props)=>props.theme.colors.connectButton.foreground};\n    box-shadow: ${(props)=>`0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\nconst LoaderIconStyled$1 = styled(LoaderIcon)`\n    height: 18px;\n    width: 18px;\n`;\nconst DropdownContainerStyled = styled.div`\n    width: fit-content;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n`;\nconst DropdownStyled = styled(AccountButtonDropdown)`\n    box-sizing: border-box;\n    overflow: hidden;\n    margin-top: 12px;\n`;\nconst NotificationsStyled = styled(Notifications)`\n    > div:first-child {\n        margin-top: 20px;\n    }\n`;\nfunction getSide(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n    return placement.split(\"-\")[1];\n}\nfunction getMainAxisFromPlacement(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(getSide(placement)) ? \"x\" : \"y\";\n}\nfunction getLengthFromAxis(axis) {\n    return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n    let { reference, floating } = _ref;\n    const commonX = reference.x + reference.width / 2 - floating.width / 2;\n    const commonY = reference.y + reference.height / 2 - floating.height / 2;\n    const mainAxis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(mainAxis);\n    const commonAlign = reference[length] / 2 - floating[length] / 2;\n    const side = getSide(placement);\n    const isVertical = mainAxis === \"x\";\n    let coords;\n    switch(side){\n        case \"top\":\n            coords = {\n                x: commonX,\n                y: reference.y - floating.height\n            };\n            break;\n        case \"bottom\":\n            coords = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case \"right\":\n            coords = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case \"left\":\n            coords = {\n                x: reference.x - floating.width,\n                y: commonY\n            };\n            break;\n        default:\n            coords = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    switch(getAlignment(placement)){\n        case \"start\":\n            coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n        case \"end\":\n            coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n    }\n    return coords;\n}\nconst computePosition$1 = (reference, floating, config)=>__async(void 0, null, function*() {\n        const { placement = \"bottom\", strategy = \"absolute\", middleware = [], platform: platform2 } = config;\n        const validMiddleware = middleware.filter(Boolean);\n        const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);\n        if (({}).NODE_ENV !== \"production\") {\n            if (platform2 == null) {\n                console.error([\n                    \"Floating UI: `platform` property was not passed to config. If you\",\n                    \"want to use Floating UI on the web, install @floating-ui/dom\",\n                    \"instead of the /core package. Otherwise, you can create your own\",\n                    \"`platform`: https://floating-ui.com/docs/platform\"\n                ].join(\" \"));\n            }\n            if (validMiddleware.filter((_ref)=>{\n                let { name } = _ref;\n                return name === \"autoPlacement\" || name === \"flip\";\n            }).length > 1) {\n                throw new Error([\n                    \"Floating UI: duplicate `flip` and/or `autoPlacement` middleware\",\n                    \"detected. This will lead to an infinite loop. Ensure only one of\",\n                    \"either has been passed to the `middleware` array.\"\n                ].join(\" \"));\n            }\n            if (!reference || !floating) {\n                console.error([\n                    \"Floating UI: The reference and/or floating element was not defined\",\n                    \"when `computePosition()` was called. Ensure that both elements have\",\n                    \"been created and can be measured.\"\n                ].join(\" \"));\n            }\n        }\n        let rects = yield platform2.getElementRects({\n            reference,\n            floating,\n            strategy\n        });\n        let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);\n        let statefulPlacement = placement;\n        let middlewareData = {};\n        let resetCount = 0;\n        for(let i2 = 0; i2 < validMiddleware.length; i2++){\n            const { name, fn } = validMiddleware[i2];\n            const { x: nextX, y: nextY, data, reset } = yield fn({\n                x,\n                y,\n                initialPlacement: placement,\n                placement: statefulPlacement,\n                strategy,\n                middlewareData,\n                rects,\n                platform: platform2,\n                elements: {\n                    reference,\n                    floating\n                }\n            });\n            x = nextX != null ? nextX : x;\n            y = nextY != null ? nextY : y;\n            middlewareData = __spreadProps(__spreadValues({}, middlewareData), {\n                [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)\n            });\n            if (({}).NODE_ENV !== \"production\") {\n                if (resetCount > 50) {\n                    console.warn([\n                        \"Floating UI: The middleware lifecycle appears to be running in an\",\n                        \"infinite loop. This is usually caused by a `reset` continually\",\n                        \"being returned without a break condition.\"\n                    ].join(\" \"));\n                }\n            }\n            if (reset && resetCount <= 50) {\n                resetCount++;\n                if (typeof reset === \"object\") {\n                    if (reset.placement) {\n                        statefulPlacement = reset.placement;\n                    }\n                    if (reset.rects) {\n                        rects = reset.rects === true ? yield platform2.getElementRects({\n                            reference,\n                            floating,\n                            strategy\n                        }) : reset.rects;\n                    }\n                    ({ x, y } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n                }\n                i2 = -1;\n                continue;\n            }\n        }\n        return {\n            x,\n            y,\n            placement: statefulPlacement,\n            strategy,\n            middlewareData\n        };\n    });\nfunction rectToClientRect(rect) {\n    return __spreadProps(__spreadValues({}, rect), {\n        top: rect.y,\n        left: rect.x,\n        right: rect.x + rect.width,\n        bottom: rect.y + rect.height\n    });\n}\nfunction getWindow(node) {\n    var _node$ownerDocument;\n    return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeName(node) {\n    return isNode(node) ? (node.nodeName || \"\").toLowerCase() : \"\";\n}\nlet uaString;\nfunction getUAString() {\n    if (uaString) {\n        return uaString;\n    }\n    const uaData = navigator.userAgentData;\n    if (uaData && Array.isArray(uaData.brands)) {\n        uaString = uaData.brands.map((item)=>item.brand + \"/\" + item.version).join(\" \");\n        return uaString;\n    }\n    return navigator.userAgent;\n}\nfunction isHTMLElement(value) {\n    return value instanceof getWindow(value).HTMLElement;\n}\nfunction isElement(value) {\n    return value instanceof getWindow(value).Element;\n}\nfunction isNode(value) {\n    return value instanceof getWindow(value).Node;\n}\nfunction isShadowRoot(node) {\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    const OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n}\nfunction isOverflowElement(element) {\n    const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element);\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(display);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n    const isFirefox = /firefox/i.test(getUAString());\n    const css = getComputedStyle$1(element);\n    const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;\n    return css.transform !== \"none\" || css.perspective !== \"none\" || (backdropFilter ? backdropFilter !== \"none\" : false) || isFirefox && css.willChange === \"filter\" || isFirefox && (css.filter ? css.filter !== \"none\" : false) || [\n        \"transform\",\n        \"perspective\"\n    ].some((value)=>css.willChange.includes(value)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((value)=>{\n        const contain = css.contain;\n        return contain != null ? contain.includes(value) : false;\n    });\n}\nfunction isLayoutViewport() {\n    return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\nfunction isLastTraversableNode(node) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(getNodeName(node));\n}\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst FALLBACK_SCALE = {\n    x: 1,\n    y: 1\n};\nfunction getScale(element) {\n    const domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;\n    if (!domElement) {\n        return FALLBACK_SCALE;\n    }\n    const rect = domElement.getBoundingClientRect();\n    const css = getComputedStyle$1(domElement);\n    if (css.boxSizing !== \"border-box\") {\n        if (!isHTMLElement(domElement)) {\n            return FALLBACK_SCALE;\n        }\n        return {\n            x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,\n            y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1\n        };\n    }\n    let x = rect.width / parseFloat(css.width);\n    let y = rect.height / parseFloat(css.height);\n    if (!x || !Number.isFinite(x)) {\n        x = 1;\n    }\n    if (!y || !Number.isFinite(y)) {\n        y = 1;\n    }\n    return {\n        x,\n        y\n    };\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n    var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    const clientRect = element.getBoundingClientRect();\n    let scale = FALLBACK_SCALE;\n    if (includeScale) {\n        if (offsetParent) {\n            if (isElement(offsetParent)) {\n                scale = getScale(offsetParent);\n            }\n        } else {\n            scale = getScale(element);\n        }\n    }\n    const win = isElement(element) ? getWindow(element) : window;\n    const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n    const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;\n    const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;\n    const width = clientRect.width / scale.x;\n    const height = clientRect.height / scale.y;\n    return {\n        width,\n        height,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x,\n        x,\n        y\n    };\n}\nfunction getDocumentElement(node) {\n    return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;\n}\nfunction getNodeScroll(element) {\n    if (isElement(element)) {\n        return {\n            scrollLeft: element.scrollLeft,\n            scrollTop: element.scrollTop\n        };\n    }\n    return {\n        scrollLeft: element.pageXOffset,\n        scrollTop: element.pageYOffset\n    };\n}\nfunction getWindowScrollBarX(element) {\n    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    const rect = getBoundingClientRect(element, true, strategy === \"fixed\", offsetParent);\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const offsets = {\n        x: 0,\n        y: 0\n    };\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== \"fixed\") {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            const offsetRect = getBoundingClientRect(offsetParent, true);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        } else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction getParentNode(node) {\n    if (getNodeName(node) === \"html\") {\n        return node;\n    }\n    const result = node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);\n    return isShadowRoot(result) ? result.host : result;\n}\nfunction getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || getComputedStyle$1(element).position === \"fixed\") {\n        return null;\n    }\n    return element.offsetParent;\n}\nfunction getContainingBlock(element) {\n    let currentNode = getParentNode(element);\n    while(isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)){\n        if (isContainingBlock(currentNode)) {\n            return currentNode;\n        } else {\n            currentNode = getParentNode(currentNode);\n        }\n    }\n    return null;\n}\nfunction getOffsetParent(element) {\n    const window2 = getWindow(element);\n    let offsetParent = getTrueOffsetParent(element);\n    while(offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === \"static\"){\n        offsetParent = getTrueOffsetParent(offsetParent);\n    }\n    if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle$1(offsetParent).position === \"static\" && !isContainingBlock(offsetParent))) {\n        return window2;\n    }\n    return offsetParent || getContainingBlock(element) || window2;\n}\nfunction getDimensions(element) {\n    if (isHTMLElement(element)) {\n        return {\n            width: element.offsetWidth,\n            height: element.offsetHeight\n        };\n    }\n    const rect = getBoundingClientRect(element);\n    return {\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n    let { rect, offsetParent, strategy } = _ref;\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    if (offsetParent === documentElement) {\n        return rect;\n    }\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    let scale = {\n        x: 1,\n        y: 1\n    };\n    const offsets = {\n        x: 0,\n        y: 0\n    };\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== \"fixed\") {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            const offsetRect = getBoundingClientRect(offsetParent);\n            scale = getScale(offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        }\n    }\n    return {\n        width: rect.width * scale.x,\n        height: rect.height * scale.y,\n        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n    };\n}\nfunction getViewportRect(element, strategy) {\n    const win = getWindow(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        const layoutViewport = isLayoutViewport();\n        if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getDocumentRect(element) {\n    var _element$ownerDocumen;\n    const html = getDocumentElement(element);\n    const scroll = getNodeScroll(element);\n    const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n    const y = -scroll.scrollTop;\n    if (getComputedStyle$1(body || html).direction === \"rtl\") {\n        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getNearestOverflowAncestor(node) {\n    const parentNode = getParentNode(node);\n    if (isLastTraversableNode(parentNode)) {\n        return node.ownerDocument.body;\n    }\n    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n        return parentNode;\n    }\n    return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n    var _node$ownerDocument;\n    if (list === void 0) {\n        list = [];\n    }\n    const scrollableAncestor = getNearestOverflowAncestor(node);\n    const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);\n    const win = getWindow(scrollableAncestor);\n    if (isBody) {\n        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n    }\n    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    const clientRect = getBoundingClientRect(element, true, strategy === \"fixed\");\n    const top = clientRect.top + element.clientTop;\n    const left = clientRect.left + element.clientLeft;\n    const scale = isHTMLElement(element) ? getScale(element) : {\n        x: 1,\n        y: 1\n    };\n    const width = element.clientWidth * scale.x;\n    const height = element.clientHeight * scale.y;\n    const x = left * scale.x;\n    const y = top * scale.y;\n    return {\n        top: y,\n        left: x,\n        right: x + width,\n        bottom: y + height,\n        x,\n        y,\n        width,\n        height\n    };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n    if (clippingAncestor === \"viewport\") {\n        return rectToClientRect(getViewportRect(element, strategy));\n    }\n    if (isElement(clippingAncestor)) {\n        return getInnerBoundingClientRect(clippingAncestor, strategy);\n    }\n    return rectToClientRect(getDocumentRect(getDocumentElement(element)));\n}\nfunction getClippingElementAncestors(element, cache) {\n    const cachedResult = cache.get(element);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    let result = getOverflowAncestors(element).filter((el)=>isElement(el) && getNodeName(el) !== \"body\");\n    let currentContainingBlockComputedStyle = null;\n    const elementIsFixed = getComputedStyle$1(element).position === \"fixed\";\n    let currentNode = elementIsFixed ? getParentNode(element) : element;\n    while(isElement(currentNode) && !isLastTraversableNode(currentNode)){\n        const computedStyle = getComputedStyle$1(currentNode);\n        const containingBlock = isContainingBlock(currentNode);\n        const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\n            \"absolute\",\n            \"fixed\"\n        ].includes(currentContainingBlockComputedStyle.position);\n        if (shouldDropCurrentNode) {\n            result = result.filter((ancestor)=>ancestor !== currentNode);\n        } else {\n            currentContainingBlockComputedStyle = computedStyle;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    cache.set(element, result);\n    return result;\n}\nfunction getClippingRect(_ref) {\n    let { element, boundary, rootBoundary, strategy } = _ref;\n    const elementClippingAncestors = boundary === \"clippingAncestors\" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n    const clippingAncestors = [\n        ...elementClippingAncestors,\n        rootBoundary\n    ];\n    const firstClippingAncestor = clippingAncestors[0];\n    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor)=>{\n        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n    return {\n        width: clippingRect.right - clippingRect.left,\n        height: clippingRect.bottom - clippingRect.top,\n        x: clippingRect.left,\n        y: clippingRect.top\n    };\n}\nconst platform = {\n    getClippingRect,\n    convertOffsetParentRelativeRectToViewportRelativeRect,\n    isElement,\n    getDimensions,\n    getOffsetParent,\n    getDocumentElement,\n    getScale,\n    getElementRects (_ref) {\n        return __async(this, null, function*() {\n            let { reference, floating, strategy } = _ref;\n            const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n            const getDimensionsFn = this.getDimensions;\n            return {\n                reference: getRectRelativeToOffsetParent(reference, (yield getOffsetParentFn(floating)), strategy),\n                floating: __spreadValues({\n                    x: 0,\n                    y: 0\n                }, (yield getDimensionsFn(floating)))\n            };\n        });\n    },\n    getClientRects: (element)=>Array.from(element.getClientRects()),\n    isRTL: (element)=>getComputedStyle$1(element).direction === \"rtl\"\n};\nfunction autoUpdate(reference, floating, update, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { ancestorScroll: _ancestorScroll = true, ancestorResize = true, elementResize = true, animationFrame = false } = options;\n    const ancestorScroll = _ancestorScroll && !animationFrame;\n    const ancestors = ancestorScroll || ancestorResize ? [\n        ...isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [],\n        ...getOverflowAncestors(floating)\n    ] : [];\n    ancestors.forEach((ancestor)=>{\n        ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n            passive: true\n        });\n        ancestorResize && ancestor.addEventListener(\"resize\", update);\n    });\n    let observer = null;\n    if (elementResize) {\n        let initialUpdate = true;\n        observer = new ResizeObserver(()=>{\n            if (!initialUpdate) {\n                update();\n            }\n            initialUpdate = false;\n        });\n        isElement(reference) && !animationFrame && observer.observe(reference);\n        if (!isElement(reference) && reference.contextElement && !animationFrame) {\n            observer.observe(reference.contextElement);\n        }\n        observer.observe(floating);\n    }\n    let frameId;\n    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n    if (animationFrame) {\n        frameLoop();\n    }\n    function frameLoop() {\n        const nextRefRect = getBoundingClientRect(reference);\n        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n            update();\n        }\n        prevRefRect = nextRefRect;\n        frameId = requestAnimationFrame(frameLoop);\n    }\n    update();\n    return ()=>{\n        var _observer;\n        ancestors.forEach((ancestor)=>{\n            ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n            ancestorResize && ancestor.removeEventListener(\"resize\", update);\n        });\n        (_observer = observer) == null ? void 0 : _observer.disconnect();\n        observer = null;\n        if (animationFrame) {\n            cancelAnimationFrame(frameId);\n        }\n    };\n}\nconst computePosition = (reference, floating, options)=>{\n    const cache = /* @__PURE__ */ new Map();\n    const mergedOptions = __spreadValues({\n        platform\n    }, options);\n    const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {\n        _c: cache\n    });\n    return computePosition$1(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {\n        platform: platformWithCache\n    }));\n};\nfunction P(l2, u2, e2) {\n    let c2 = ()=>{\n        var t2;\n        return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : \"bottom\";\n    }, d = ()=>{\n        var t2;\n        return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : \"absolute\";\n    }, [n2, o2] = createSignal({\n        x: null,\n        y: null,\n        placement: c2(),\n        strategy: d(),\n        middlewareData: {}\n    }), [x, F] = createSignal();\n    createEffect(()=>{\n        let t2 = x();\n        if (t2) throw t2.value;\n    });\n    let s2 = createMemo(()=>(l2(), u2(), {}));\n    function i2() {\n        let t2 = l2(), r = u2();\n        if (t2 && r) {\n            let a2 = s2();\n            computePosition(t2, r, {\n                middleware: e2 == null ? void 0 : e2.middleware,\n                placement: c2(),\n                strategy: d()\n            }).then((m)=>{\n                a2 === s2() && o2(m);\n            }, (m)=>{\n                F(m);\n            });\n        }\n    }\n    return createEffect(()=>{\n        let t2 = l2(), r = u2();\n        if (e2 == null || e2.middleware, c2(), d(), t2 && r) if (e2 != null && e2.whileElementsMounted) {\n            let a2 = e2.whileElementsMounted(t2, r, i2);\n            a2 && onCleanup(a2);\n        } else i2();\n    }), {\n        get x () {\n            return n2().x;\n        },\n        get y () {\n            return n2().y;\n        },\n        get placement () {\n            return n2().placement;\n        },\n        get strategy () {\n            return n2().strategy;\n        },\n        get middlewareData () {\n            return n2().middlewareData;\n        },\n        update: i2\n    };\n}\nconst _tmpl$$4 = /* @__PURE__ */ template$1(`<tc-root data-tc-dropdown-container=\"true\"></tc-root>`);\nconst AccountButton = ()=>{\n    const theme = useTheme();\n    const connector = useContext(ConnectorContext);\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [isOpened, setIsOpened] = createSignal(false);\n    const [account, setAccount] = createSignal(connector.account);\n    const [restoringProcess, setRestoringProcess] = createSignal(!connector.account);\n    let dropDownRef;\n    const [floating, setFloating] = createSignal();\n    const [anchor, setAnchor] = createSignal();\n    const position = P(anchor, floating, {\n        whileElementsMounted: autoUpdate,\n        placement: \"bottom-end\"\n    });\n    const normalizedAddress = ()=>{\n        const acc = account();\n        if (acc) {\n            const userFriendlyAddress = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.toUserFriendlyAddress)(acc.address, acc.chain === _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.CHAIN.TESTNET);\n            return userFriendlyAddress.slice(0, 4) + \"…\" + userFriendlyAddress.slice(-4);\n        }\n        return \"\";\n    };\n    tonConnectUI.connectionRestored.then(()=>setRestoringProcess(false));\n    const unsubscribe = connector.onStatusChange((wallet)=>{\n        if (!wallet) {\n            setIsOpened(false);\n            setAccount(null);\n            setRestoringProcess(false);\n            return;\n        }\n        setAccount(wallet.account);\n        setRestoringProcess(false);\n    });\n    const onClick = (e2)=>{\n        if (!account() || !isOpened()) {\n            return;\n        }\n        const clickToButton = anchor().contains(e2.target);\n        const clickToDropdown = dropDownRef.contains(e2.target);\n        if (!clickToButton && !clickToDropdown) {\n            setIsOpened(false);\n        }\n    };\n    onMount(()=>{\n        document.body.addEventListener(\"click\", onClick);\n    });\n    onCleanup(()=>{\n        document.body.removeEventListener(\"click\", onClick);\n        unsubscribe();\n    });\n    return createComponent(Dynamic, {\n        component: globalStylesTag,\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return restoringProcess();\n                    },\n                    get children () {\n                        return createComponent(LoaderButtonStyled$1, {\n                            disabled: true,\n                            \"data-tc-connect-button-loading\": \"true\",\n                            get children () {\n                                return createComponent(LoaderIconStyled$1, {});\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !restoringProcess();\n                    },\n                    get children () {\n                        return [\n                            createComponent(Show, {\n                                get when () {\n                                    return !account();\n                                },\n                                get children () {\n                                    return createComponent(AccountButtonStyled, {\n                                        onClick: ()=>tonConnectUI.openModal(),\n                                        \"data-tc-connect-button\": \"true\",\n                                        scale: \"s\",\n                                        get children () {\n                                            return [\n                                                createComponent(TonIcon, {\n                                                    get fill () {\n                                                        return theme.colors.connectButton.foreground;\n                                                    }\n                                                }),\n                                                createComponent(Text, {\n                                                    translationKey: \"button.connectWallet\",\n                                                    fontSize: \"15px\",\n                                                    lineHeight: \"18px\",\n                                                    fontWeight: \"590\",\n                                                    get color () {\n                                                        return theme.colors.connectButton.foreground;\n                                                    },\n                                                    children: \"Connect wallet\"\n                                                })\n                                            ];\n                                        }\n                                    });\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return account();\n                                },\n                                get children () {\n                                    return createComponent(DropdownContainerStyled, {\n                                        get children () {\n                                            return [\n                                                createComponent(DropdownButtonStyled, {\n                                                    onClick: ()=>setIsOpened((v)=>!v),\n                                                    ref: setAnchor,\n                                                    \"data-tc-dropdown-button\": \"true\",\n                                                    scale: \"s\",\n                                                    get children () {\n                                                        return [\n                                                            createComponent(Text, {\n                                                                fontSize: \"15px\",\n                                                                fontWeight: \"590\",\n                                                                lineHeight: \"18px\",\n                                                                get children () {\n                                                                    return normalizedAddress();\n                                                                }\n                                                            }),\n                                                            createComponent(ArrowIcon, {\n                                                                direction: \"bottom\"\n                                                            })\n                                                        ];\n                                                    }\n                                                }),\n                                                createComponent(Portal, {\n                                                    get children () {\n                                                        const _el$ = untrack(()=>document.importNode(_tmpl$$4, true));\n                                                        use(setFloating, _el$);\n                                                        _el$.style.setProperty(\"z-index\", \"999\");\n                                                        _el$._$owner = getOwner();\n                                                        insert(_el$, createComponent(Transition, {\n                                                            onBeforeEnter: (el)=>{\n                                                                animate(el, [\n                                                                    {\n                                                                        opacity: 0,\n                                                                        transform: \"translateY(-8px)\"\n                                                                    },\n                                                                    {\n                                                                        opacity: 1,\n                                                                        transform: \"translateY(0)\"\n                                                                    }\n                                                                ], {\n                                                                    duration: 150\n                                                                });\n                                                            },\n                                                            onExit: (el, done)=>{\n                                                                const a2 = animate(el, [\n                                                                    {\n                                                                        opacity: 1,\n                                                                        transform: \"translateY(0)\"\n                                                                    },\n                                                                    {\n                                                                        opacity: 0,\n                                                                        transform: \"translateY(-8px)\"\n                                                                    }\n                                                                ], {\n                                                                    duration: 150\n                                                                });\n                                                                a2.finished.then(done);\n                                                            },\n                                                            get children () {\n                                                                return createComponent(Show, {\n                                                                    get when () {\n                                                                        return isOpened();\n                                                                    },\n                                                                    get children () {\n                                                                        return createComponent(DropdownStyled, {\n                                                                            get hidden () {\n                                                                                return !isOpened();\n                                                                            },\n                                                                            onClose: ()=>setIsOpened(false),\n                                                                            ref (r$) {\n                                                                                const _ref$ = dropDownRef;\n                                                                                typeof _ref$ === \"function\" ? _ref$(r$) : dropDownRef = r$;\n                                                                            }\n                                                                        });\n                                                                    }\n                                                                });\n                                                            }\n                                                        }), null);\n                                                        insert(_el$, createComponent(NotificationsStyled, {}), null);\n                                                        createRenderEffect((_p$)=>{\n                                                            var _a2, _b2;\n                                                            const _v$ = position.strategy, _v$2 = `${(_a2 = position.y) != null ? _a2 : 0}px`, _v$3 = `${(_b2 = position.x) != null ? _b2 : 0}px`;\n                                                            _v$ !== _p$._v$ && _el$.style.setProperty(\"position\", _p$._v$ = _v$);\n                                                            _v$2 !== _p$._v$2 && _el$.style.setProperty(\"top\", _p$._v$2 = _v$2);\n                                                            _v$3 !== _p$._v$3 && _el$.style.setProperty(\"left\", _p$._v$3 = _v$3);\n                                                            return _p$;\n                                                        }, {\n                                                            _v$: void 0,\n                                                            _v$2: void 0,\n                                                            _v$3: void 0\n                                                        });\n                                                        return _el$;\n                                                    }\n                                                })\n                                            ];\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst StyledModal = styled(Modal)`\n    padding-left: 24px;\n    padding-right: 24px;\n    padding-top: 18px;\n    padding-bottom: 0;\n\n    ${media(\"mobile\")} {\n        padding-left: 0;\n        padding-right: 0;\n    }\n`;\nconst H1Styled$8 = styled(H1)`\n    margin-top: 12px;\n\n    ${media(\"mobile\")} {\n        padding: 0 10px;\n    }\n`;\nconst LoaderContainerStyled = styled.div`\n    margin: 30px 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n\n    ${media(\"mobile\")} {\n        height: 160px;\n        align-items: center;\n    }\n`;\nstyled(Text)`\n    min-width: 84px;\n    text-align: center;\n    font-weight: 590;\n`;\nstyled(TabBar)`\n    margin: 0 auto 22px;\n`;\nconst [appState, setAppState] = createStore({\n    buttonRootId: null,\n    language: \"en\",\n    returnStrategy: \"back\",\n    twaReturnUrl: void 0,\n    walletsListConfiguration: {},\n    enableAndroidBackHandler: true\n});\nfunction uniq(array) {\n    return [\n        ...new Set(array)\n    ];\n}\nfunction mergeConcat(idKey, array1, array2) {\n    return array1.map((item1)=>{\n        const item2 = array2.find((elem)=>elem[idKey] === item1[idKey]);\n        array2 = array2.filter((elem)=>elem[idKey] !== item1[idKey]);\n        return item2 === void 0 ? item1 : item2;\n    }).concat(array2);\n}\nfunction uiWalletToWalletInfo(uiWallet) {\n    if (\"jsBridgeKey\" in uiWallet) {\n        return __spreadProps(__spreadValues({}, uiWallet), {\n            injected: _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnect.isWalletInjected(uiWallet.jsBridgeKey),\n            embedded: _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)\n        });\n    }\n    return uiWallet;\n}\nfunction applyWalletsListConfiguration(walletsList, configuration) {\n    var _a2;\n    if (!configuration) {\n        return walletsList;\n    }\n    if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) {\n        walletsList = mergeConcat(\"name\", walletsList, configuration.includeWallets.map(uiWalletToWalletInfo));\n    }\n    return walletsList;\n}\nfunction supportsDesktop(walletInfo) {\n    return walletInfo.platforms.some((w)=>[\n            \"macos\",\n            \"linux\",\n            \"windows\"\n        ].includes(w));\n}\nfunction supportsMobile(walletInfo) {\n    return walletInfo.platforms.some((w)=>[\n            \"ios\",\n            \"android\"\n        ].includes(w));\n}\nfunction supportsExtension(walletInfo) {\n    return walletInfo.platforms.some((w)=>[\n            \"chrome\",\n            \"firefox\",\n            \"safari\"\n        ].includes(w));\n}\nfunction eqWalletName(wallet1, name) {\n    if (!name) {\n        return false;\n    }\n    return wallet1.name.toLowerCase() === name.toLowerCase() || wallet1.appName.toLowerCase() === name.toLowerCase();\n}\nconst DesktopSelectWalletModalStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst H1Styled$7 = styled(H1)`\n    margin-bottom: 18px;\n`;\nstyled.div`\n    height: 1px;\n    margin: 0 -24px;\n    width: calc(100% + 48px);\n    opacity: 0.12;\n    background: ${(props)=>props.isShown ? props.theme.colors.icon.secondary : \"transparent\"};\n    transition: background 0.15s ease-in-out;\n\n    ${media(\"mobile\")} {\n        width: 100%;\n    }\n`;\nconst WalletsUl = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 92px);\n    grid-template-rows: auto;\n    align-content: flex-start;\n    row-gap: 8px;\n    width: 100%;\n    padding: 0 0 16px;\n    align-self: flex-start;\n    max-width: 400px;\n    margin: 0 auto;\n    list-style: none;\n\n    > li {\n        display: block;\n        height: fit-content;\n    }\n\n    ${media(\"mobile\")} {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        gap: 0;\n        padding: 8px 12px 16px;\n        max-width: none;\n\n        > li {\n            min-width: 78px;\n            display: flex;\n        }\n\n        > li > * {\n            width: 100%;\n        }\n    }\n`;\nstyled(Button)`\n    display: block;\n    margin: 0 auto 1px;\n    font-size: 15px;\n`;\nconst StyledIconButton$3 = styled(IconButton)`\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\nconst WalletLabeledItemStyled = styled(WalletLabeledItem)`\n    opacity: ${(props)=>props.withOpacity ? \"0.4\" : \"1\"};\n`;\nconst WalletsNotSupportedNotifier = styled.div`\n    display: grid;\n    grid-template-columns: auto 28px;\n    gap: 16px;\n    padding: 16px;\n    margin-bottom: 16px;\n    border-radius: 16px;\n    color: ${(props)=>props.theme.colors.text.secondary};\n    background: ${(props)=>props.theme.colors.background.tint};\n\n    ${media(\"mobile\")} {\n        margin-left: 16px;\n        margin-right: 16px;\n    }\n`;\nconst WalletsNotSupportedNotifierText = styled(H2)`\n    color: ${(props)=>props.theme.colors.text.secondary};\n    text-align: left;\n    margin: 0;\n`;\nconst ErrorBoxStyled = styled.div`\n    position: absolute;\n    bottom: 14px;\n    left: 50%;\n    transform: translate(-50%, 0);\n\n    text-wrap: nowrap;\n    display: flex;\n    gap: 6px;\n    align-items: center;\n    border-radius: 18px;\n    min-width: 126px;\n    padding: 9px 16px 9px 10px;\n\n    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));\n    background-color: ${(props)=>props.theme.colors.background.segment};\n`;\nconst _tmpl$$3 = /* @__PURE__ */ template$1(`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_5122_10355)\"><circle cx=\"8\" cy=\"8\" r=\"8\"></circle><circle cx=\"8\" cy=\"11\" r=\"1\"></circle><path d=\"M7.04994 4.99875C7.02277 4.45542 7.45598 4 8 4C8.54402 4 8.97723 4.45541 8.95006 4.99875L8.78745 8.25094C8.76647 8.67055 8.42014 9 8 9C7.57986 9 7.23353 8.67055 7.21255 8.25094L7.04994 4.99875Z\"></path></g><defs><clipPath id=\"clip0_5122_10355\"><rect width=\"16\" height=\"16\"></rect></clipPath></defs></svg>`), _tmpl$2$1 = /* @__PURE__ */ template$1(`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\"><circle cx=\"14\" cy=\"14\" r=\"12\"></circle><circle cx=\"14\" cy=\"18.9\" r=\"1.4\"></circle><path d=\"M12.6658 8.89845C12.63 8.13698 13.2377 7.5 14 7.5C14.7623 7.5 15.37 8.13698 15.3342 8.89845L15.047 15.0013C15.0207 15.5604 14.5597 16.0002 14 16.0002C13.4403 16.0002 12.9793 15.5604 12.953 15.0013L12.6658 8.89845Z\"></path></svg>`);\nconst ExclamationIcon = (props)=>{\n    const theme = useTheme();\n    const size = ()=>props.size;\n    const fill = ()=>props.fill || theme.colors.icon.error;\n    return createMemo((()=>{\n        const _c$ = createMemo(()=>size() === \"16\");\n        return ()=>_c$() ? (()=>{\n                const _el$ = _tmpl$$3.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling, _el$5 = _el$4.nextSibling, _el$6 = _el$2.nextSibling, _el$7 = _el$6.firstChild, _el$8 = _el$7.firstChild;\n                createRenderEffect((_p$)=>{\n                    const _v$ = fill(), _v$2 = theme.colors.constant.white, _v$3 = theme.colors.constant.white, _v$4 = theme.colors.constant.white;\n                    _v$ !== _p$._v$ && setAttribute(_el$3, \"fill\", _p$._v$ = _v$);\n                    _v$2 !== _p$._v$2 && setAttribute(_el$4, \"fill\", _p$._v$2 = _v$2);\n                    _v$3 !== _p$._v$3 && setAttribute(_el$5, \"fill\", _p$._v$3 = _v$3);\n                    _v$4 !== _p$._v$4 && setAttribute(_el$8, \"fill\", _p$._v$4 = _v$4);\n                    return _p$;\n                }, {\n                    _v$: void 0,\n                    _v$2: void 0,\n                    _v$3: void 0,\n                    _v$4: void 0\n                });\n                return _el$;\n            })() : (()=>{\n                const _c$2 = createMemo(()=>size() === \"28\");\n                return ()=>_c$2() ? (()=>{\n                        const _el$9 = _tmpl$2$1.cloneNode(true), _el$10 = _el$9.firstChild, _el$11 = _el$10.nextSibling, _el$12 = _el$11.nextSibling;\n                        createRenderEffect((_p$)=>{\n                            const _v$5 = props.class, _v$6 = fill(), _v$7 = theme.colors.constant.white, _v$8 = theme.colors.constant.white;\n                            _v$5 !== _p$._v$5 && setAttribute(_el$9, \"class\", _p$._v$5 = _v$5);\n                            _v$6 !== _p$._v$6 && setAttribute(_el$10, \"fill\", _p$._v$6 = _v$6);\n                            _v$7 !== _p$._v$7 && setAttribute(_el$11, \"fill\", _p$._v$7 = _v$7);\n                            _v$8 !== _p$._v$8 && setAttribute(_el$12, \"fill\", _p$._v$8 = _v$8);\n                            return _p$;\n                        }, {\n                            _v$5: void 0,\n                            _v$6: void 0,\n                            _v$7: void 0,\n                            _v$8: void 0\n                        });\n                        return _el$9;\n                    })() : null;\n            })();\n    })());\n};\nconst _tmpl$$2 = /* @__PURE__ */ template$1(`<li></li>`);\nconst AllWalletsListModal = (props)=>{\n    const maxHeight = ()=>isMobile() ? void 0 : 510;\n    const [errorSupportOpened, setErrorSupportOpened] = createSignal(null);\n    let timeoutId = null;\n    const onErrorClick = (wallet)=>{\n        setErrorSupportOpened(wallet);\n        if (timeoutId != null) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(()=>setErrorSupportOpened(null), 1500);\n    };\n    const handleSelectWallet = (wallet)=>{\n        if (!wallet.isSupportRequiredFeatures) {\n            onErrorClick(wallet);\n            return;\n        }\n        props.onSelect(wallet);\n    };\n    const walletsList = ()=>isMobile() ? props.walletsList.filter(supportsMobile) : props.walletsList;\n    const supportedWallets = ()=>walletsList().filter((wallet)=>wallet.isSupportRequiredFeatures);\n    const unsupportedWallets = ()=>walletsList().filter((wallet)=>!wallet.isSupportRequiredFeatures);\n    return createComponent(DesktopSelectWalletModalStyled, {\n        \"data-tc-wallets-modal-list\": \"true\",\n        get children () {\n            return [\n                createComponent(StyledIconButton$3, {\n                    icon: \"arrow\",\n                    onClick: ()=>props.onBack()\n                }),\n                createComponent(H1Styled$7, {\n                    translationKey: \"walletModal.wallets\",\n                    children: \"Wallets\"\n                }),\n                createComponent(ScrollContainer, {\n                    get maxHeight () {\n                        return maxHeight();\n                    },\n                    get children () {\n                        return [\n                            createComponent(WalletsUl, {\n                                get children () {\n                                    return createComponent(For, {\n                                        get each () {\n                                            return supportedWallets();\n                                        },\n                                        children: (wallet)=>(()=>{\n                                                const _el$ = _tmpl$$2.cloneNode(true);\n                                                insert(_el$, createComponent(WalletLabeledItemStyled, {\n                                                    wallet,\n                                                    onClick: ()=>props.onSelect(wallet)\n                                                }));\n                                                return _el$;\n                                            })()\n                                    });\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return unsupportedWallets().length > 0;\n                                },\n                                get children () {\n                                    return [\n                                        createComponent(WalletsNotSupportedNotifier, {\n                                            get children () {\n                                                return [\n                                                    createComponent(WalletsNotSupportedNotifierText, {\n                                                        translationKey: \"walletModal.allWallets.walletsBelowNotSupported\",\n                                                        children: \"The wallets below don’t support all features of the connected service. You can use your recovery phrase in one of the supported wallets above.\"\n                                                    }),\n                                                    createComponent(ExclamationIcon, {\n                                                        size: \"28\"\n                                                    })\n                                                ];\n                                            }\n                                        }),\n                                        createComponent(WalletsUl, {\n                                            get children () {\n                                                return createComponent(For, {\n                                                    get each () {\n                                                        return unsupportedWallets();\n                                                    },\n                                                    children: (wallet)=>(()=>{\n                                                            const _el$2 = _tmpl$$2.cloneNode(true);\n                                                            insert(_el$2, createComponent(WalletLabeledItemStyled, {\n                                                                wallet,\n                                                                onClick: ()=>handleSelectWallet(wallet),\n                                                                withOpacity: true\n                                                            }));\n                                                            return _el$2;\n                                                        })()\n                                                });\n                                            }\n                                        }),\n                                        createComponent(Transition, {\n                                            onBeforeEnter: (el)=>{\n                                                animate(el, [\n                                                    {\n                                                        opacity: 0,\n                                                        transform: \"translate(-50%, 44px)\"\n                                                    },\n                                                    {\n                                                        opacity: 1,\n                                                        transform: \"translate(-50%, 0)\"\n                                                    }\n                                                ], {\n                                                    duration: 150,\n                                                    easing: \"ease-out\"\n                                                });\n                                            },\n                                            onExit: (el, done)=>{\n                                                animate(el, [\n                                                    {\n                                                        opacity: 1,\n                                                        transform: \"translate(-50%, 0)\"\n                                                    },\n                                                    {\n                                                        opacity: 0,\n                                                        transform: \"translate(-50%, 44px)\"\n                                                    }\n                                                ], {\n                                                    duration: 150,\n                                                    easing: \"ease-out\"\n                                                }).finished.then(()=>{\n                                                    done();\n                                                });\n                                            },\n                                            get children () {\n                                                return createComponent(Show, {\n                                                    get when () {\n                                                        return errorSupportOpened();\n                                                    },\n                                                    get children () {\n                                                        return createComponent(ErrorBoxStyled, {\n                                                            get children () {\n                                                                return [\n                                                                    createComponent(ErrorIcon, {\n                                                                        size: \"xs\"\n                                                                    }),\n                                                                    createComponent(Text, {\n                                                                        translationKey: \"walletModal.allWallets.walletNotSupportService\",\n                                                                        get translationValues () {\n                                                                            return {\n                                                                                name: errorSupportOpened().name\n                                                                            };\n                                                                        },\n                                                                        get children () {\n                                                                            return [\n                                                                                createMemo(()=>errorSupportOpened().name),\n                                                                                \" doesn’t support connected service\"\n                                                                            ];\n                                                                        }\n                                                                    })\n                                                                ];\n                                                            }\n                                                        });\n                                                    }\n                                                });\n                                            }\n                                        })\n                                    ];\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst tgButtonBorders = {\n    m: \"16px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst tgIconBorders = {\n    m: \"6px\",\n    s: \"6px\",\n    none: \"0\"\n};\nconst DesktopConnectionModalStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\nconst BodyStyled$1 = styled.div`\n    flex: 1;\n    margin-top: ${(props)=>props.qr ? \"0\" : \"18px\"};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 232px;\n`;\nconst QRCodeStyled$1 = styled(QRCode)`\n    margin-bottom: 24px;\n`;\nconst H1Styled$6 = styled(H1)`\n    max-width: 288px;\n    margin: 0 auto 2px;\n`;\nconst H2Styled$4 = styled(H2)`\n    max-width: 288px;\n    text-align: center;\n    margin: 0 auto 20px;\n`;\nconst StyledIconButton$2 = styled(IconButton)`\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\nconst ButtonsContainerStyled$1 = styled.div`\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    padding-bottom: 16px;\n`;\nconst BottomButtonsContainerStyled = styled(ButtonsContainerStyled$1)`\n    padding-bottom: 0;\n`;\nconst FooterButton$1 = styled(Button)`\n    margin-bottom: 24px;\n`;\nconst LoaderStyled$1 = styled(LoaderIcon)`\n    margin-bottom: 18px;\n    margin-top: 2px;\n`;\nconst ErrorIconStyled$1 = styled(ErrorIcon)`\n    margin-bottom: 16px;\n`;\nconst BodyTextStyled$1 = styled(H2)`\n    color: ${(props)=>props.theme.colors.text.secondary};\n    text-align: center;\n    margin-bottom: 20px;\n`;\nconst TgButtonStyled = styled(Button)`\n    margin-top: -8px;\n    margin-bottom: 24px;\n    width: 100%;\n    padding: 12px 12px 12px 20px;\n    border-radius: ${(props)=>tgButtonBorders[props.theme.borderRadius]};\n    font-size: 16px;\n    line-height: 20px;\n`;\nconst TgImageStyled = styled(Image)`\n    width: 32px;\n    height: 32px;\n    border-radius: ${(props)=>tgIconBorders[props.theme.borderRadius]};\n`;\nconst Translation = (props)=>{\n    const [t2] = useI18n();\n    return createMemo(()=>{\n        var _a2;\n        return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());\n    });\n};\nfunction addReturnStrategy(url, strategy) {\n    let returnStrategy;\n    if (typeof strategy === \"string\") {\n        returnStrategy = strategy;\n    } else {\n        returnStrategy = isInTMA() ? strategy.twaReturnUrl || strategy.returnStrategy : \"none\";\n    }\n    const newUrl = addQueryParameter(url, \"ret\", returnStrategy);\n    if (!(0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(url)) {\n        return newUrl;\n    }\n    const lastParam = newUrl.slice(newUrl.lastIndexOf(\"&\") + 1);\n    return newUrl.slice(0, newUrl.lastIndexOf(\"&\")) + \"-\" + (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.encodeTelegramUrlParameters)(lastParam);\n}\nfunction redirectToTelegram(universalLink, options) {\n    options = __spreadValues({}, options);\n    const directLink = convertToTGDirectLink(universalLink);\n    const directLinkUrl = new URL(directLink);\n    if (!directLinkUrl.searchParams.has(\"startapp\")) {\n        directLinkUrl.searchParams.append(\"startapp\", \"tonconnect\");\n    }\n    if (isInTelegramBrowser()) {\n        options.returnStrategy = \"back\";\n        const linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n        openLinkBlank(linkWitStrategy);\n    } else if (isInTMA()) {\n        if (isTmaPlatform(\"ios\", \"android\", \"macos\", \"tdesktop\", \"web\")) {\n            options.returnStrategy = \"back\";\n            const linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n            sendOpenTelegramLink(linkWitStrategy);\n        } else if (isTmaPlatform(\"weba\")) {\n            sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));\n        } else {\n            openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));\n        }\n    } else {\n        if (isOS(\"ios\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = \"back\";\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            const isChrome = isBrowser(\"chrome\");\n            const isFirefox = isBrowser(\"firefox\");\n            const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;\n            if (useDeepLink) {\n                const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n                const deepLink = convertToTGDeepLink(linkWithStrategy);\n                openDeeplinkWithFallback(deepLink, ()=>openLinkBlank(linkWithStrategy));\n            } else {\n                const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n                openLinkBlank(linkWithStrategy);\n            }\n        } else if (isOS(\"android\")) {\n            options.returnStrategy = \"back\";\n            const isChrome = isBrowser(\"chrome\");\n            const isFirefox = isBrowser(\"firefox\");\n            const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;\n            if (useDeepLink) {\n                const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n                const deepLink = convertToTGDeepLink(linkWithStrategy);\n                openDeeplinkWithFallback(deepLink, ()=>openLinkBlank(linkWithStrategy));\n            } else {\n                const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n                openLinkBlank(linkWithStrategy);\n            }\n        } else if (isOS(\"ipad\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = \"back\";\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            const isChrome = isBrowser(\"chrome\");\n            const isFirefox = isBrowser(\"firefox\");\n            const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;\n            const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n            if (useDeepLink) {\n                const deepLink = convertToTGDeepLink(linkWithStrategy);\n                openDeeplinkWithFallback(deepLink, ()=>openLinkBlank(linkWithStrategy));\n            } else {\n                openLinkBlank(linkWithStrategy);\n            }\n        } else if (isOS(\"macos\", \"windows\", \"linux\")) {\n            options.returnStrategy = \"back\";\n            options.twaReturnUrl = void 0;\n            const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);\n            if (options.forceRedirect) {\n                openLinkBlank(linkWithStrategy);\n            } else {\n                const deepLink = convertToTGDeepLink(linkWithStrategy);\n                openDeeplinkWithFallback(deepLink, ()=>openLinkBlank(linkWithStrategy));\n            }\n        } else {\n            openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));\n        }\n    }\n}\nfunction redirectToWallet(universalLink, deepLink, options, setOpenMethod) {\n    options = __spreadValues({}, options);\n    if (isInTelegramBrowser()) {\n        if (isOS(\"ios\", \"android\")) {\n            if (options.returnStrategy === \"back\") {\n                options.returnStrategy = \"tg://resolve\";\n            }\n            setOpenMethod(\"universal-link\");\n            openLink(addReturnStrategy(universalLink, options.returnStrategy), \"_self\");\n        } else {\n            setOpenMethod(\"universal-link\");\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            openLinkBlank(linkWitStrategy);\n        }\n    } else if (isInTMA()) {\n        if (isTmaPlatform(\"ios\", \"android\")) {\n            if (options.returnStrategy === \"back\") {\n                options.returnStrategy = \"tg://resolve\";\n            }\n            setOpenMethod(\"universal-link\");\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            sendOpenTelegramLink(linkWitStrategy, ()=>{\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(linkWitStrategy);\n            });\n        } else if (isTmaPlatform(\"macos\", \"tdesktop\")) {\n            if (options.returnStrategy === \"back\") {\n                options.returnStrategy = \"tg://resolve\";\n            }\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            const useDeepLink = !!deepLink && !options.forceRedirect;\n            if (useDeepLink) {\n                setOpenMethod(\"custom-deeplink\");\n                openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), ()=>{\n                    setOpenMethod(\"universal-link\");\n                    openLinkBlank(linkWitStrategy);\n                });\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(linkWitStrategy);\n            }\n        } else if (isTmaPlatform(\"weba\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = location.href;\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            const useDeepLink = !!deepLink && !options.forceRedirect;\n            if (useDeepLink) {\n                setOpenMethod(\"custom-deeplink\");\n                openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), ()=>{\n                    setOpenMethod(\"universal-link\");\n                    openLinkBlank(linkWitStrategy);\n                });\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(linkWitStrategy);\n            }\n        } else if (isTmaPlatform(\"web\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = location.href;\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            const useDeepLink = !!deepLink && !options.forceRedirect;\n            if (useDeepLink) {\n                setOpenMethod(\"custom-deeplink\");\n                openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), ()=>{\n                    setOpenMethod(\"universal-link\");\n                    openLinkBlank(linkWitStrategy);\n                });\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(linkWitStrategy);\n            }\n        } else {\n            setOpenMethod(\"universal-link\");\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            openLinkBlank(linkWitStrategy);\n        }\n    } else {\n        if (isOS(\"ios\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = \"none\";\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            if (isBrowser(\"chrome\")) {\n                setOpenMethod(\"universal-link\");\n                openLink(addReturnStrategy(universalLink, options.returnStrategy), \"_self\");\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));\n            }\n        } else if (isOS(\"android\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            setOpenMethod(\"universal-link\");\n            openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));\n        } else if (isOS(\"ipad\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = \"none\";\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = location.href;\n                }\n            }\n            if (isBrowser(\"chrome\")) {\n                setOpenMethod(\"universal-link\");\n                openLink(addReturnStrategy(universalLink, options.returnStrategy), \"_self\");\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));\n            }\n        } else if (isOS(\"macos\", \"windows\", \"linux\")) {\n            if (options.returnStrategy === \"back\") {\n                if (isBrowser(\"safari\")) {\n                    options.returnStrategy = \"none\";\n                } else if (isBrowser(\"chrome\")) {\n                    options.returnStrategy = \"googlechrome://\";\n                } else if (isBrowser(\"firefox\")) {\n                    options.returnStrategy = \"firefox://\";\n                } else if (isBrowser(\"opera\")) {\n                    options.returnStrategy = \"opera-http://\";\n                } else {\n                    options.returnStrategy = \"none\";\n                }\n            }\n            const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);\n            const useDeepLink = !!deepLink && !options.forceRedirect;\n            if (useDeepLink) {\n                setOpenMethod(\"custom-deeplink\");\n                openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), ()=>{\n                    setOpenMethod(\"universal-link\");\n                    openLinkBlank(linkWitStrategy);\n                });\n            } else {\n                setOpenMethod(\"universal-link\");\n                openLinkBlank(linkWitStrategy);\n            }\n        } else {\n            setOpenMethod(\"universal-link\");\n            openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));\n        }\n    }\n}\nfunction addQueryParameter(url, key, value) {\n    const parsed = new URL(url);\n    parsed.searchParams.append(key, value);\n    return parsed.toString();\n}\nfunction convertToTGDirectLink(universalLink) {\n    const url = new URL(universalLink);\n    if (url.searchParams.has(\"attach\")) {\n        url.searchParams.delete(\"attach\");\n        url.pathname += \"/start\";\n    }\n    return url.toString();\n}\nfunction convertToTGDeepLink(directLink) {\n    const parsed = new URL(directLink);\n    const [, domain, appname] = parsed.pathname.split(\"/\");\n    const startapp = parsed.searchParams.get(\"startapp\");\n    return `tg://resolve?domain=${domain}&appname=${appname}&startapp=${startapp}`;\n}\nconst DesktopConnectionModal = (props)=>{\n    const [mode, setMode] = createSignal(\"mobile\");\n    const [connectionErrored, setConnectionErrored] = createSignal(null);\n    createEffect(()=>{\n        var _a2;\n        setConnectionErrored((_a2 = props.defaultError) != null ? _a2 : null);\n    });\n    const [universalLink, setUniversalLink] = createSignal();\n    const [firstClick, setFirstClick] = createSignal(true);\n    const connector = useContext(ConnectorContext);\n    const unsubscribe = connector.onStatusChange(()=>{}, (error)=>{\n        if (error instanceof _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletMissingRequiredFeaturesError) {\n            setConnectionErrored(\"missing-features\");\n            return;\n        }\n        if (props.wallet.appName !== AT_WALLET_APP_NAME) {\n            setConnectionErrored(\"connection-declined\");\n        }\n    });\n    onCleanup(unsubscribe);\n    const generateUniversalLink = ()=>{\n        try {\n            const universalLink2 = connector.connect({\n                universalLink: props.wallet.universalLink,\n                bridgeUrl: props.wallet.bridgeUrl\n            }, props.additionalRequest);\n            setUniversalLink(universalLink2);\n        } catch (e2) {}\n    };\n    createEffect(()=>{\n        if (untrack(mode) !== \"extension\" && (supportsMobile(props.wallet) || supportsDesktop(props.wallet))) {\n            generateUniversalLink();\n        }\n    });\n    const onClickMobile = ()=>{\n        setConnectionErrored(null);\n        if (mode() === \"extension\") {\n            generateUniversalLink();\n        }\n        setMode(\"mobile\");\n        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n            openMethod: \"qrcode\"\n        }));\n    };\n    const onClickDesktop = ()=>{\n        setConnectionErrored(null);\n        if (mode() === \"extension\") {\n            generateUniversalLink();\n        }\n        setMode(\"desktop\");\n        if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(universalLink())) {\n            onClickTelegram();\n        } else {\n            const forceRedirect = !firstClick();\n            setFirstClick(false);\n            redirectToWallet(universalLink(), props.wallet.deepLink, {\n                returnStrategy: appState.returnStrategy,\n                forceRedirect\n            }, (method)=>{\n                setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n                    openMethod: method\n                }));\n            });\n        }\n    };\n    const onClickTelegram = ()=>{\n        const forceRedirect = !firstClick();\n        setFirstClick(false);\n        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n            openMethod: \"universal-link\"\n        }));\n        redirectToTelegram(universalLink(), {\n            returnStrategy: appState.returnStrategy,\n            twaReturnUrl: appState.twaReturnUrl,\n            forceRedirect\n        });\n    };\n    const onClickExtension = ()=>{\n        setConnectionErrored(null);\n        setMode(\"extension\");\n        if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected)(props.wallet)) {\n            setLastSelectedWalletInfo(props.wallet);\n            connector.connect({\n                jsBridgeKey: props.wallet.jsBridgeKey\n            }, props.additionalRequest);\n        }\n    };\n    if (supportsMobile(props.wallet)) {\n        onClickMobile();\n    } else if (supportsExtension(props.wallet)) {\n        onClickExtension();\n    } else {\n        onClickDesktop();\n    }\n    return createComponent(DesktopConnectionModalStyled, {\n        \"data-tc-wallets-modal-connection-desktop\": \"true\",\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return !props.backDisabled;\n                    },\n                    get children () {\n                        return createComponent(StyledIconButton$2, {\n                            icon: \"arrow\",\n                            onClick: ()=>props.onBackClick()\n                        });\n                    }\n                }),\n                createComponent(H1Styled$6, {\n                    get children () {\n                        return props.wallet.name;\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return createMemo(()=>mode() === \"mobile\")() && !connectionErrored();\n                    },\n                    get children () {\n                        return createComponent(H2Styled$4, {\n                            translationKey: \"walletModal.desktopConnectionModal.scanQR\",\n                            get translationValues () {\n                                return {\n                                    name: props.wallet.name\n                                };\n                            },\n                            get children () {\n                                return [\n                                    \"Scan the QR code below with your phone’s or \",\n                                    createMemo(()=>props.wallet.name),\n                                    \"’s camera\"\n                                ];\n                            }\n                        });\n                    }\n                }),\n                createComponent(BodyStyled$1, {\n                    get qr () {\n                        return mode() === \"mobile\";\n                    },\n                    get children () {\n                        return createComponent(Switch, {\n                            get children () {\n                                return [\n                                    createComponent(Match, {\n                                        get when () {\n                                            return connectionErrored();\n                                        },\n                                        get children () {\n                                            return [\n                                                createComponent(ErrorIconStyled$1, {\n                                                    size: \"s\"\n                                                }),\n                                                createComponent(Switch, {\n                                                    get children () {\n                                                        return [\n                                                            createComponent(Match, {\n                                                                get when () {\n                                                                    return connectionErrored() === \"missing-features\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(BodyTextStyled$1, {\n                                                                        translationKey: \"walletModal.desktopConnectionModal.missingFeatures\",\n                                                                        get translationValues () {\n                                                                            return {\n                                                                                name: props.wallet.name\n                                                                            };\n                                                                        },\n                                                                        children: \"Please update Wallet, your version does not support required features for this dApp\"\n                                                                    });\n                                                                }\n                                                            }),\n                                                            createComponent(Match, {\n                                                                get when () {\n                                                                    return connectionErrored() === \"connection-declined\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(BodyTextStyled$1, {\n                                                                        translationKey: \"walletModal.desktopConnectionModal.connectionDeclined\",\n                                                                        children: \"Connection declined\"\n                                                                    });\n                                                                }\n                                                            }),\n                                                            createComponent(Match, {\n                                                                get when () {\n                                                                    return connectionErrored() === \"not-supported\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(BodyTextStyled$1, {\n                                                                        translationKey: \"walletModal.desktopConnectionModal.notSupportedWallet\",\n                                                                        get translationValues () {\n                                                                            return {\n                                                                                name: props.wallet.name\n                                                                            };\n                                                                        },\n                                                                        get children () {\n                                                                            return [\n                                                                                createMemo(()=>props.wallet.name),\n                                                                                \" doesn’t support the requested action. Please connect another wallet that supports it.\"\n                                                                            ];\n                                                                        }\n                                                                    });\n                                                                }\n                                                            })\n                                                        ];\n                                                    }\n                                                }),\n                                                createComponent(ButtonsContainerStyled$1, {\n                                                    get children () {\n                                                        return [\n                                                            createComponent(Show, {\n                                                                get when () {\n                                                                    return connectionErrored() !== \"not-supported\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(Button, {\n                                                                        get leftIcon () {\n                                                                            return createComponent(RetryIcon, {});\n                                                                        },\n                                                                        get onClick () {\n                                                                            return mode() === \"extension\" ? onClickExtension : onClickDesktop;\n                                                                        },\n                                                                        get children () {\n                                                                            return createComponent(Translation, {\n                                                                                translationKey: \"common.retry\",\n                                                                                children: \"Retry\"\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            }),\n                                                            createComponent(Show, {\n                                                                get when () {\n                                                                    return connectionErrored() === \"missing-features\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(Link, {\n                                                                        get href () {\n                                                                            return props.wallet.aboutUrl;\n                                                                        },\n                                                                        blank: true,\n                                                                        get children () {\n                                                                            return createComponent(Button, {\n                                                                                get leftIcon () {\n                                                                                    return createComponent(LinkIcon, {});\n                                                                                },\n                                                                                get children () {\n                                                                                    return createComponent(Translation, {\n                                                                                        translationKey: \"walletModal.desktopConnectionModal.updateWallet\",\n                                                                                        get translationValues () {\n                                                                                            return {\n                                                                                                name: props.wallet.name\n                                                                                            };\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                \"Update \",\n                                                                                                createMemo(()=>props.wallet.name)\n                                                                                            ];\n                                                                                        }\n                                                                                    });\n                                                                                }\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            }),\n                                                            createComponent(Show, {\n                                                                get when () {\n                                                                    return connectionErrored() === \"not-supported\";\n                                                                },\n                                                                get children () {\n                                                                    return createComponent(Button, {\n                                                                        onClick: ()=>props.onBackClick(),\n                                                                        get children () {\n                                                                            return createComponent(Translation, {\n                                                                                translationKey: \"walletModal.desktopConnectionModal.chooseAnotherWallet\",\n                                                                                children: \"Choose Another Wallet\"\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            })\n                                                        ];\n                                                    }\n                                                })\n                                            ];\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return mode() === \"mobile\";\n                                        },\n                                        get children () {\n                                            return createComponent(QRCodeStyled$1, {\n                                                disableCopy: false,\n                                                get sourceUrl () {\n                                                    return addReturnStrategy(universalLink(), \"none\");\n                                                },\n                                                get imageUrl () {\n                                                    return props.wallet.imageUrl;\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return mode() === \"extension\";\n                                        },\n                                        get children () {\n                                            return [\n                                                createComponent(Show, {\n                                                    get when () {\n                                                        return (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected)(props.wallet);\n                                                    },\n                                                    get children () {\n                                                        return [\n                                                            createComponent(LoaderStyled$1, {\n                                                                size: \"s\"\n                                                            }),\n                                                            createComponent(BodyTextStyled$1, {\n                                                                translationKey: \"walletModal.desktopConnectionModal.continueInExtension\",\n                                                                get translationValues () {\n                                                                    return {\n                                                                        name: props.wallet.name\n                                                                    };\n                                                                },\n                                                                get children () {\n                                                                    return [\n                                                                        \"Continue in \",\n                                                                        createMemo(()=>props.wallet.name),\n                                                                        \" browser extension…\"\n                                                                    ];\n                                                                }\n                                                            }),\n                                                            createComponent(ButtonsContainerStyled$1, {\n                                                                get children () {\n                                                                    return createComponent(Button, {\n                                                                        get leftIcon () {\n                                                                            return createComponent(RetryIcon, {});\n                                                                        },\n                                                                        onClick: onClickExtension,\n                                                                        get children () {\n                                                                            return createComponent(Translation, {\n                                                                                translationKey: \"common.retry\",\n                                                                                children: \"Retry\"\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            })\n                                                        ];\n                                                    }\n                                                }),\n                                                createComponent(Show, {\n                                                    get when () {\n                                                        return !(0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected)(props.wallet);\n                                                    },\n                                                    get children () {\n                                                        return [\n                                                            createComponent(BodyTextStyled$1, {\n                                                                translationKey: \"walletModal.desktopConnectionModal.dontHaveExtension\",\n                                                                get translationValues () {\n                                                                    return {\n                                                                        name: props.wallet.name\n                                                                    };\n                                                                },\n                                                                get children () {\n                                                                    return [\n                                                                        \"Seems you don't have installed \",\n                                                                        createMemo(()=>props.wallet.name),\n                                                                        \" browser extension\"\n                                                                    ];\n                                                                }\n                                                            }),\n                                                            createComponent(ButtonsContainerStyled$1, {\n                                                                get children () {\n                                                                    return createComponent(Link, {\n                                                                        get href () {\n                                                                            return props.wallet.aboutUrl;\n                                                                        },\n                                                                        blank: true,\n                                                                        get children () {\n                                                                            return createComponent(Button, {\n                                                                                get rightIcon () {\n                                                                                    return createComponent(LinkIcon, {});\n                                                                                },\n                                                                                onClick: onClickExtension,\n                                                                                get children () {\n                                                                                    return createComponent(Translation, {\n                                                                                        translationKey: \"walletModal.desktopConnectionModal.getWallet\",\n                                                                                        get translationValues () {\n                                                                                            return {\n                                                                                                name: props.wallet.name\n                                                                                            };\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                \"Get \",\n                                                                                                createMemo(()=>props.wallet.name)\n                                                                                            ];\n                                                                                        }\n                                                                                    });\n                                                                                }\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            })\n                                                        ];\n                                                    }\n                                                })\n                                            ];\n                                        }\n                                    }),\n                                    createComponent(Match, {\n                                        get when () {\n                                            return mode() === \"desktop\";\n                                        },\n                                        get children () {\n                                            return [\n                                                createComponent(LoaderIcon, {\n                                                    size: \"m\"\n                                                }),\n                                                createComponent(BodyTextStyled$1, {\n                                                    translationKey: \"walletModal.desktopConnectionModal.continueOnDesktop\",\n                                                    get translationValues () {\n                                                        return {\n                                                            name: props.wallet.name\n                                                        };\n                                                    },\n                                                    get children () {\n                                                        return [\n                                                            \"Continue in \",\n                                                            createMemo(()=>props.wallet.name),\n                                                            \" on desktop…\"\n                                                        ];\n                                                    }\n                                                }),\n                                                createComponent(ButtonsContainerStyled$1, {\n                                                    get children () {\n                                                        return [\n                                                            createComponent(Button, {\n                                                                get leftIcon () {\n                                                                    return createComponent(RetryIcon, {});\n                                                                },\n                                                                onClick: onClickDesktop,\n                                                                get children () {\n                                                                    return createComponent(Translation, {\n                                                                        translationKey: \"common.retry\",\n                                                                        children: \"Retry\"\n                                                                    });\n                                                                }\n                                                            }),\n                                                            createComponent(Link, {\n                                                                get href () {\n                                                                    return props.wallet.aboutUrl;\n                                                                },\n                                                                blank: true,\n                                                                get children () {\n                                                                    return createComponent(Button, {\n                                                                        get rightIcon () {\n                                                                            return createComponent(LinkIcon, {});\n                                                                        },\n                                                                        get children () {\n                                                                            return createComponent(Translation, {\n                                                                                translationKey: \"walletModal.desktopConnectionModal.getWallet\",\n                                                                                get translationValues () {\n                                                                                    return {\n                                                                                        name: props.wallet.name\n                                                                                    };\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        \"Get \",\n                                                                                        createMemo(()=>props.wallet.name)\n                                                                                    ];\n                                                                                }\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                }\n                                                            })\n                                                        ];\n                                                    }\n                                                })\n                                            ];\n                                        }\n                                    })\n                                ];\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return props.wallet.appName === AT_WALLET_APP_NAME;\n                    },\n                    get children () {\n                        return createComponent(TgButtonStyled, {\n                            get rightIcon () {\n                                return createComponent(TgImageStyled, {\n                                    get src () {\n                                        return IMG.TG;\n                                    }\n                                });\n                            },\n                            scale: \"s\",\n                            onClick: onClickTelegram,\n                            get children () {\n                                return createComponent(Translation, {\n                                    translationKey: \"walletModal.desktopConnectionModal.openWalletOnTelegram\",\n                                    children: \"Open Wallet in Telegram on desktop\"\n                                });\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return props.wallet.appName !== AT_WALLET_APP_NAME;\n                    },\n                    get children () {\n                        return createComponent(BottomButtonsContainerStyled, {\n                            get children () {\n                                return [\n                                    createComponent(Show, {\n                                        get when () {\n                                            return createMemo(()=>mode() !== \"mobile\")() && supportsMobile(props.wallet);\n                                        },\n                                        get children () {\n                                            return createComponent(FooterButton$1, {\n                                                appearance: \"secondary\",\n                                                get leftIcon () {\n                                                    return createComponent(MobileIcon, {});\n                                                },\n                                                onClick: onClickMobile,\n                                                get children () {\n                                                    return createComponent(Translation, {\n                                                        translationKey: \"common.mobile\",\n                                                        children: \"Mobile\"\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Show, {\n                                        get when () {\n                                            return createMemo(()=>mode() !== \"extension\")() && supportsExtension(props.wallet);\n                                        },\n                                        get children () {\n                                            return createComponent(FooterButton$1, {\n                                                appearance: \"secondary\",\n                                                get leftIcon () {\n                                                    return createComponent(BrowserIcon, {});\n                                                },\n                                                onClick: onClickExtension,\n                                                get children () {\n                                                    return createComponent(Translation, {\n                                                        translationKey: \"common.browserExtension\",\n                                                        children: \"Browser Extension\"\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }),\n                                    createComponent(Show, {\n                                        get when () {\n                                            return createMemo(()=>mode() !== \"desktop\")() && supportsDesktop(props.wallet);\n                                        },\n                                        get children () {\n                                            return createComponent(FooterButton$1, {\n                                                appearance: \"secondary\",\n                                                get leftIcon () {\n                                                    return createComponent(DesktopIcon, {});\n                                                },\n                                                onClick: onClickDesktop,\n                                                get children () {\n                                                    return createComponent(Translation, {\n                                                        translationKey: \"common.desktop\",\n                                                        children: \"Desktop\"\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    })\n                                ];\n                            }\n                        });\n                    }\n                })\n            ];\n        }\n    });\n};\nconst InfoModalStyled = styled.div``;\nconst StyledIconButton$1 = styled(IconButton)`\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\nconst H1Styled$5 = styled(H1)`\n    margin-bottom: 18px;\n`;\nconst InfoBlock = styled.div`\n    padding: 16px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst InfoBlockIconClass = u`\n    margin-bottom: 12px;\n`;\nconst H3Styled = styled(H3)`\n    text-align: center;\n    margin-bottom: 4px;\n`;\nconst TextStyled$1 = styled(Text)`\n    text-align: center;\n    max-width: 352px;\n    color: ${(props)=>props.theme.colors.text.secondary};\n`;\nconst ButtonsBlock = styled.div`\n    padding: 16px 24px 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n`;\nconst LINKS = {\n    GET_A_WALLET: \"https://ton.org/wallets?filters[wallet_features][slug][$in]=dapp-auth&pagination[limit]=-1\"\n};\nconst InfoModal = (props)=>{\n    return createComponent(InfoModalStyled, {\n        \"data-tc-wallets-modal-info\": \"true\",\n        get children () {\n            return [\n                createComponent(StyledIconButton$1, {\n                    icon: \"arrow\",\n                    onClick: ()=>props.onBackClick()\n                }),\n                createComponent(H1Styled$5, {\n                    translationKey: \"walletModal.infoModal.whatIsAWallet\",\n                    children: \"What is a wallet\"\n                }),\n                createComponent(ScrollContainer, {\n                    get children () {\n                        return [\n                            createComponent(InfoBlock, {\n                                get children () {\n                                    return [\n                                        createComponent(SecurityIcon, {\n                                            \"class\": InfoBlockIconClass\n                                        }),\n                                        createComponent(H3Styled, {\n                                            translationKey: \"walletModal.infoModal.secureDigitalAssets\",\n                                            children: \"Secure digital assets storage\"\n                                        }),\n                                        createComponent(TextStyled$1, {\n                                            translationKey: \"walletModal.infoModal.walletProtects\",\n                                            children: \"A wallet protects and manages your digital assets including TON, tokens and collectables.\"\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(InfoBlock, {\n                                get children () {\n                                    return [\n                                        createComponent(PersonalityIcon, {\n                                            \"class\": InfoBlockIconClass\n                                        }),\n                                        createComponent(H3Styled, {\n                                            translationKey: \"walletModal.infoModal.controlIdentity\",\n                                            children: \"Control your Web3 identity\"\n                                        }),\n                                        createComponent(TextStyled$1, {\n                                            translationKey: \"walletModal.infoModal.manageIdentity\",\n                                            children: \"Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem.\"\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(InfoBlock, {\n                                get children () {\n                                    return [\n                                        createComponent(SwapIcon, {\n                                            \"class\": InfoBlockIconClass\n                                        }),\n                                        createComponent(H3Styled, {\n                                            translationKey: \"walletModal.infoModal.effortlessCryptoTransactions\",\n                                            children: \"Effortless crypto transactions\"\n                                        }),\n                                        createComponent(TextStyled$1, {\n                                            translationKey: \"walletModal.infoModal.easilySend\",\n                                            children: \"Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications.\"\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(ButtonsBlock, {\n                                get children () {\n                                    return createComponent(Link, {\n                                        get href () {\n                                            return LINKS.GET_A_WALLET;\n                                        },\n                                        blank: true,\n                                        get children () {\n                                            return createComponent(Button, {\n                                                get rightIcon () {\n                                                    return createComponent(WalletIcon, {});\n                                                },\n                                                get children () {\n                                                    return createComponent(Translation, {\n                                                        translationKey: \"walletModal.infoModal.getAWallet\",\n                                                        children: \"Get a Wallet\"\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst MobileConnectionModalStyled = styled.div``;\nconst BodyStyled = styled.div`\n    flex: 1;\n    margin-top: 18px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 232px;\n`;\nconst H1Styled$4 = styled(H1)`\n    max-width: 262px;\n    margin: 0 auto 8px;\n`;\nconst StyledIconButton = styled(IconButton)`\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\nconst FooterStyled = styled.div`\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    border-top: 0.5px solid ${(props)=>rgba(props.theme.colors.icon.secondary, 0.2)};\n`;\nconst ImageStyled = styled(Image)`\n    width: 36px;\n    height: 36px;\n    border-radius: 10px;\n`;\nconst FooterButton = styled(Link)`\n    margin-left: auto;\n`;\nconst LoaderStyled = styled(LoaderIcon)`\n    margin-bottom: 18px;\n    margin-top: 2px;\n`;\nconst ErrorIconStyled = styled(ErrorIcon)`\n    margin-bottom: 16px;\n`;\nconst BodyTextStyled = styled(H2)`\n    color: ${(props)=>props.theme.colors.text.secondary};\n    text-align: center;\n    margin-bottom: 20px;\n`;\nconst ButtonsContainerStyled = styled.div`\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    padding-bottom: 16px;\n`;\nconst actionButtonBorderRadius$1 = {\n    m: \"16px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst H1Styled$3 = styled(H1)`\n    margin-bottom: 2px;\n    padding: 0 52px;\n`;\nconst H2Styled$3 = styled(H2)`\n    margin-bottom: 20px;\n    padding: 0 64px;\n`;\nconst QrCodeWrapper$1 = styled.div`\n    padding: 0 24px 16px;\n`;\nconst ButtonsWrapper$1 = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n    padding: 0 24px 24px;\n    margin-top: 0;\n`;\nconst ActionButton$1 = styled(Button)`\n    width: 100%;\n    height: 56px;\n    border-radius: ${(props)=>actionButtonBorderRadius$1[props.theme.borderRadius]};\n    background-color: ${(props)=>rgba(props.theme.colors.accent, 0.12)};\n    color: ${(props)=>props.theme.colors.accent};\n    font-size: 16px;\n    line-height: 20px;\n    font-weight: 500;\n    padding: 17px 20px 19px 20px;\n`;\nconst MobileConnectionQR = (props)=>{\n    return [\n        createComponent(H1Styled$3, {\n            get children () {\n                return props.walletInfo.name;\n            }\n        }),\n        createComponent(H2Styled$3, {\n            translationKey: \"walletModal.mobileConnectionModal.scanQR\",\n            get translationValues () {\n                return {\n                    name: props.walletInfo.name\n                };\n            },\n            get children () {\n                return [\n                    \"Scan the QR code below with your phone’s or \",\n                    createMemo(()=>props.walletInfo.name),\n                    \"’s camera\"\n                ];\n            }\n        }),\n        createComponent(QrCodeWrapper$1, {\n            get children () {\n                return createComponent(QRCode, {\n                    get imageUrl () {\n                        return props.walletInfo.imageUrl;\n                    },\n                    get sourceUrl () {\n                        return addReturnStrategy(props.universalLink, \"none\");\n                    },\n                    disableCopy: true\n                });\n            }\n        }),\n        createComponent(ButtonsWrapper$1, {\n            get children () {\n                return [\n                    createComponent(ActionButton$1, {\n                        appearance: \"secondary\",\n                        onClick: ()=>{\n                            var _a2;\n                            return (_a2 = props.onOpenLink) == null ? void 0 : _a2.call(props);\n                        },\n                        get children () {\n                            return createComponent(Translation, {\n                                translationKey: \"walletModal.mobileUniversalModal.openLink\",\n                                children: \"Open Link\"\n                            });\n                        }\n                    }),\n                    createComponent(ActionButton$1, {\n                        appearance: \"secondary\",\n                        onClick: ()=>{\n                            var _a2;\n                            return (_a2 = props.onCopy) == null ? void 0 : _a2.call(props);\n                        },\n                        get children () {\n                            return createComponent(Translation, {\n                                get translationKey () {\n                                    return props.isCopiedShown !== void 0 ? \"common.copied\" : \"common.copyLink\";\n                                },\n                                get children () {\n                                    return props.isCopiedShown !== void 0 ? \"Copied\" : \"Copy Link\";\n                                }\n                            });\n                        }\n                    })\n                ];\n            }\n        })\n    ];\n};\nconst MobileConnectionModal = (props)=>{\n    const theme = useTheme();\n    const [firstClick, setFirstClick] = createSignal(true);\n    const [showQR, setShowQR] = createSignal(false);\n    const [connectionErrored, setConnectionErrored] = createSignal(null);\n    createEffect(()=>{\n        var _a2;\n        setConnectionErrored((_a2 = props.defaultError) != null ? _a2 : null);\n    });\n    const connector = useContext(ConnectorContext);\n    const unsubscribe = connector.onStatusChange(()=>{}, ()=>{\n        setConnectionErrored(null);\n    });\n    const universalLink = createMemo(()=>connector.connect({\n            universalLink: props.wallet.universalLink,\n            bridgeUrl: props.wallet.bridgeUrl\n        }, props.additionalRequest));\n    const onClickTelegram = ()=>{\n        const alwaysForceRedirect = true;\n        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n            openMethod: \"universal-link\"\n        }));\n        redirectToTelegram(universalLink(), {\n            returnStrategy: appState.returnStrategy,\n            twaReturnUrl: appState.twaReturnUrl,\n            forceRedirect: alwaysForceRedirect\n        });\n    };\n    const onRetry = ()=>{\n        const currentUniversalLink = universalLink();\n        if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(currentUniversalLink)) {\n            return onClickTelegram();\n        }\n        setConnectionErrored(null);\n        const forceRedirect = !firstClick();\n        setFirstClick(false);\n        redirectToWallet(universalLink(), props.wallet.deepLink, {\n            returnStrategy: appState.returnStrategy,\n            forceRedirect\n        }, (method)=>{\n            setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n                openMethod: method\n            }));\n        });\n    };\n    const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);\n    const onCopy = ()=>__async(void 0, null, function*() {\n            if (isCopiedShown() !== void 0) {\n                clearTimeout(isCopiedShown());\n            }\n            yield copyToClipboard(universalLink());\n            const timeoutId = setTimeout(()=>setIsCopiedShown(void 0), 1500);\n            setIsCopiedShown(timeoutId);\n        });\n    const onOpenQR = ()=>{\n        setConnectionErrored(null);\n        setShowQR(true);\n        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n            openMethod: \"qrcode\"\n        }));\n    };\n    const onCloseQR = ()=>{\n        setShowQR(false);\n        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {\n            openMethod: \"universal-link\"\n        }));\n    };\n    const onBack = ()=>{\n        if (showQR()) {\n            onCloseQR();\n        } else {\n            props.onBackClick();\n        }\n    };\n    onCleanup(unsubscribe);\n    onRetry();\n    return createComponent(MobileConnectionModalStyled, {\n        \"data-tc-wallets-modal-connection-mobile\": \"true\",\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return !props.backDisabled || showQR();\n                    },\n                    get children () {\n                        return createComponent(StyledIconButton, {\n                            icon: \"arrow\",\n                            onClick: onBack\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return showQR();\n                    },\n                    get children () {\n                        return createComponent(MobileConnectionQR, {\n                            get universalLink () {\n                                return universalLink();\n                            },\n                            get walletInfo () {\n                                return props.wallet;\n                            },\n                            onOpenLink: onRetry,\n                            onCopy,\n                            get isCopiedShown () {\n                                return isCopiedShown();\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !showQR();\n                    },\n                    get children () {\n                        return [\n                            createComponent(H1Styled$4, {\n                                get children () {\n                                    return props.wallet.name;\n                                }\n                            }),\n                            createComponent(BodyStyled, {\n                                get children () {\n                                    return [\n                                        createComponent(Show, {\n                                            get when () {\n                                                return connectionErrored();\n                                            },\n                                            get children () {\n                                                return [\n                                                    createComponent(ErrorIconStyled, {\n                                                        size: \"s\"\n                                                    }),\n                                                    createComponent(Switch, {\n                                                        get children () {\n                                                            return [\n                                                                createComponent(Match, {\n                                                                    get when () {\n                                                                        return connectionErrored() === \"missing-features\";\n                                                                    },\n                                                                    get children () {\n                                                                        return createComponent(BodyTextStyled, {\n                                                                            translationKey: \"walletModal.mobileConnectionModal.missingFeatures\",\n                                                                            get translationValues () {\n                                                                                return {\n                                                                                    name: props.wallet.name\n                                                                                };\n                                                                            },\n                                                                            children: \"Please update Wallet, your version does not support required features for this dApp\"\n                                                                        });\n                                                                    }\n                                                                }),\n                                                                createComponent(Match, {\n                                                                    get when () {\n                                                                        return connectionErrored() === \"connection-declined\";\n                                                                    },\n                                                                    get children () {\n                                                                        return createComponent(BodyTextStyled, {\n                                                                            translationKey: \"walletModal.mobileConnectionModal.connectionDeclined\",\n                                                                            children: \"Connection declined\"\n                                                                        });\n                                                                    }\n                                                                }),\n                                                                createComponent(Match, {\n                                                                    get when () {\n                                                                        return connectionErrored() === \"not-supported\";\n                                                                    },\n                                                                    get children () {\n                                                                        return createComponent(BodyTextStyled, {\n                                                                            translationKey: \"walletModal.mobileConnectionModal.notSupportedWallet\",\n                                                                            get translationValues () {\n                                                                                return {\n                                                                                    name: props.wallet.name\n                                                                                };\n                                                                            },\n                                                                            get children () {\n                                                                                return [\n                                                                                    createMemo(()=>props.wallet.name),\n                                                                                    \" doesn’t support the requested action. Please connect another wallet that supports it.\"\n                                                                                ];\n                                                                            }\n                                                                        });\n                                                                    }\n                                                                })\n                                                            ];\n                                                        }\n                                                    }),\n                                                    createComponent(ButtonsContainerStyled, {\n                                                        get children () {\n                                                            return createComponent(Switch, {\n                                                                get children () {\n                                                                    return [\n                                                                        createComponent(Match, {\n                                                                            get when () {\n                                                                                return connectionErrored() === \"missing-features\";\n                                                                            },\n                                                                            get children () {\n                                                                                return [\n                                                                                    createComponent(Button, {\n                                                                                        get leftIcon () {\n                                                                                            return createComponent(RetryIcon, {});\n                                                                                        },\n                                                                                        onClick: onRetry,\n                                                                                        get children () {\n                                                                                            return createComponent(Translation, {\n                                                                                                translationKey: \"common.retry\",\n                                                                                                children: \"Retry\"\n                                                                                            });\n                                                                                        }\n                                                                                    }),\n                                                                                    createComponent(Link, {\n                                                                                        get href () {\n                                                                                            return props.wallet.aboutUrl;\n                                                                                        },\n                                                                                        blank: true,\n                                                                                        get children () {\n                                                                                            return createComponent(Button, {\n                                                                                                get leftIcon () {\n                                                                                                    return createComponent(LinkIcon, {});\n                                                                                                },\n                                                                                                get children () {\n                                                                                                    return createComponent(Translation, {\n                                                                                                        translationKey: \"walletModal.mobileConnectionModal.updateWallet\",\n                                                                                                        get translationValues () {\n                                                                                                            return {\n                                                                                                                name: props.wallet.name\n                                                                                                            };\n                                                                                                        },\n                                                                                                        get children () {\n                                                                                                            return [\n                                                                                                                \"Update \",\n                                                                                                                createMemo(()=>props.wallet.name)\n                                                                                                            ];\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            });\n                                                                                        }\n                                                                                    })\n                                                                                ];\n                                                                            }\n                                                                        }),\n                                                                        createComponent(Match, {\n                                                                            get when () {\n                                                                                return connectionErrored() === \"not-supported\";\n                                                                            },\n                                                                            get children () {\n                                                                                return createComponent(Button, {\n                                                                                    onClick: ()=>props.onBackClick(),\n                                                                                    get children () {\n                                                                                        return createComponent(Translation, {\n                                                                                            translationKey: \"walletModal.mobileConnectionModal.chooseAnotherWallet\",\n                                                                                            children: \"Choose Another Wallet\"\n                                                                                        });\n                                                                                    }\n                                                                                });\n                                                                            }\n                                                                        }),\n                                                                        createComponent(Match, {\n                                                                            get when () {\n                                                                                return connectionErrored() === \"connection-declined\";\n                                                                            },\n                                                                            get children () {\n                                                                                return [\n                                                                                    createComponent(Button, {\n                                                                                        get leftIcon () {\n                                                                                            return createComponent(RetryIcon, {});\n                                                                                        },\n                                                                                        onClick: onRetry,\n                                                                                        get children () {\n                                                                                            return createComponent(Translation, {\n                                                                                                translationKey: \"common.retry\",\n                                                                                                children: \"Retry\"\n                                                                                            });\n                                                                                        }\n                                                                                    }),\n                                                                                    createComponent(Button, {\n                                                                                        get leftIcon () {\n                                                                                            return createComponent(QRIcon, {\n                                                                                                get fill () {\n                                                                                                    return theme.colors.accent;\n                                                                                                }\n                                                                                            });\n                                                                                        },\n                                                                                        onClick: onOpenQR,\n                                                                                        get children () {\n                                                                                            return createComponent(Translation, {\n                                                                                                translationKey: \"walletModal.mobileConnectionModal.showQR\",\n                                                                                                children: \"Show QR Code\"\n                                                                                            });\n                                                                                        }\n                                                                                    })\n                                                                                ];\n                                                                            }\n                                                                        })\n                                                                    ];\n                                                                }\n                                                            });\n                                                        }\n                                                    })\n                                                ];\n                                            }\n                                        }),\n                                        createComponent(Show, {\n                                            get when () {\n                                                return !connectionErrored();\n                                            },\n                                            get children () {\n                                                return [\n                                                    createComponent(LoaderStyled, {\n                                                        size: \"s\"\n                                                    }),\n                                                    createComponent(BodyTextStyled, {\n                                                        translationKey: \"walletModal.mobileConnectionModal.continueIn\",\n                                                        get translationValues () {\n                                                            return {\n                                                                name: props.wallet.name\n                                                            };\n                                                        },\n                                                        get children () {\n                                                            return [\n                                                                \"Continue in \",\n                                                                createMemo(()=>props.wallet.name),\n                                                                \"…\"\n                                                            ];\n                                                        }\n                                                    }),\n                                                    createComponent(ButtonsContainerStyled, {\n                                                        get children () {\n                                                            return [\n                                                                createComponent(Button, {\n                                                                    get leftIcon () {\n                                                                        return createComponent(RetryIcon, {});\n                                                                    },\n                                                                    onClick: onRetry,\n                                                                    get children () {\n                                                                        return createComponent(Translation, {\n                                                                            translationKey: \"common.retry\",\n                                                                            children: \"Retry\"\n                                                                        });\n                                                                    }\n                                                                }),\n                                                                createComponent(Button, {\n                                                                    get leftIcon () {\n                                                                        return createComponent(QRIcon, {\n                                                                            get fill () {\n                                                                                return theme.colors.accent;\n                                                                            }\n                                                                        });\n                                                                    },\n                                                                    onClick: onOpenQR,\n                                                                    get children () {\n                                                                        return createComponent(Translation, {\n                                                                            translationKey: \"walletModal.mobileConnectionModal.showQR\",\n                                                                            children: \"Show QR Code\"\n                                                                        });\n                                                                    }\n                                                                })\n                                                            ];\n                                                        }\n                                                    })\n                                                ];\n                                            }\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(FooterStyled, {\n                                get children () {\n                                    return [\n                                        createComponent(ImageStyled, {\n                                            get src () {\n                                                return props.wallet.imageUrl;\n                                            }\n                                        }),\n                                        createComponent(H3, {\n                                            get children () {\n                                                return props.wallet.name;\n                                            }\n                                        }),\n                                        createComponent(FooterButton, {\n                                            get href () {\n                                                return props.wallet.aboutUrl;\n                                            },\n                                            blank: true,\n                                            get children () {\n                                                return createComponent(Button, {\n                                                    get children () {\n                                                        return createComponent(Translation, {\n                                                            translationKey: \"common.get\",\n                                                            children: \"GET\"\n                                                        });\n                                                    }\n                                                });\n                                            }\n                                        })\n                                    ];\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst borders$1 = {\n    m: \"16px\",\n    s: \"12px\",\n    none: \"0\"\n};\nconst tgBorders = {\n    m: \"6px\",\n    s: \"6px\",\n    none: \"0\"\n};\nstyled.li`\n    width: 82px;\n    min-width: 82px;\n    height: 124px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 8px 4px;\n\n    text-align: center;\n    cursor: pointer;\n\n    transition: transform 0.1s ease-in-out;\n\n    ${mediaNotTouch} {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ${mediaTouch} {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n`;\nconst H1Styled$2 = styled(H1)`\n    margin-top: 38px;\n    margin-bottom: 4px;\n    padding: 0 24px;\n`;\nconst H2Styled$2 = styled(H2)`\n    margin: ${(props)=>{\n    var _a2;\n    return (_a2 = props.margin) != null ? _a2 : \"0 0 28px 0\";\n}};\n    padding: ${(props)=>{\n    var _a2;\n    return (_a2 = props.padding) != null ? _a2 : \"0 24px\";\n}};\n    min-height: ${(props)=>{\n    var _a2;\n    return (_a2 = props.padding) != null ? _a2 : \"44px\";\n}};\n    max-width: ${(props)=>props.maxWidth}px;\n    margin-left: ${(props)=>props.maxWidth ? \"auto\" : \"0px\"};\n    margin-right: ${(props)=>props.maxWidth ? \"auto\" : \"0px\"};\n`;\nstyled(Button)`\n    display: block;\n    margin: 0 auto;\n`;\nconst TelegramButtonStyled = styled(Button)`\n    margin: 0 28px 24px;\n    width: calc(100% - 56px);\n    border-radius: ${(props)=>borders$1[props.theme.borderRadius]};\n    padding: 14px 16px 14px 14px;\n    background-color: ${(props)=>props.theme.colors.telegramButton};\n\n    color: ${(props)=>props.theme.colors.constant.white};\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n\n    @media (max-width: 375px) {\n        margin: 0 16px 24px;\n        width: calc(100% - 32px);\n    }\n`;\nconst TGImageStyled = styled(Image)`\n    background-color: transparent;\n    border-radius: ${(props)=>tgBorders[props.theme.borderRadius]};\n    width: 24px;\n    height: 24px;\n`;\nconst StyledLeftActionButton = styled(IconButton)`\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\nconst actionButtonBorderRadius = {\n    m: \"16px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst H1Styled$1 = styled(H1)`\n    margin-bottom: 2px;\n    padding: 0 52px;\n`;\nconst H2Styled$1 = styled(H2)`\n    margin-bottom: 20px;\n    padding: 0 64px;\n`;\nconst QrCodeWrapper = styled.div`\n    padding: 0 24px 16px;\n`;\nconst ButtonsWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n    padding: 0 24px 24px;\n    margin-top: 0;\n`;\nconst ActionButton = styled(Button)`\n    width: 100%;\n    height: 56px;\n    border-radius: ${(props)=>actionButtonBorderRadius[props.theme.borderRadius]};\n    background-color: ${(props)=>rgba(props.theme.colors.accent, 0.12)};\n    color: ${(props)=>props.theme.colors.accent};\n    font-size: 16px;\n    line-height: 20px;\n    font-weight: 500;\n    padding: 17px 20px 19px 20px;\n`;\nconst MobileUniversalQR = (props)=>{\n    return [\n        createComponent(H1Styled$1, {\n            translationKey: \"walletModal.mobileUniversalModal.connectYourWallet\",\n            children: \"Connect your TON wallet\"\n        }),\n        createComponent(H2Styled$1, {\n            translationKey: \"walletModal.mobileUniversalModal.scan\",\n            children: \"Scan with your mobile wallet\"\n        }),\n        createComponent(QrCodeWrapper, {\n            get children () {\n                return createComponent(QRCode, {\n                    get imageUrl () {\n                        return IMG.TON;\n                    },\n                    get sourceUrl () {\n                        return addReturnStrategy(props.universalLink, \"none\");\n                    },\n                    disableCopy: true\n                });\n            }\n        }),\n        createComponent(ButtonsWrapper, {\n            get children () {\n                return [\n                    createComponent(ActionButton, {\n                        appearance: \"secondary\",\n                        onClick: ()=>props.onOpenLink(),\n                        get children () {\n                            return createComponent(Translation, {\n                                translationKey: \"walletModal.mobileUniversalModal.openLink\",\n                                children: \"Open Link\"\n                            });\n                        }\n                    }),\n                    createComponent(ActionButton, {\n                        appearance: \"secondary\",\n                        onClick: ()=>props.onCopy(),\n                        get children () {\n                            return createComponent(Translation, {\n                                get translationKey () {\n                                    return props.isCopiedShown !== void 0 ? \"common.copied\" : \"common.copyLink\";\n                                },\n                                get children () {\n                                    return props.isCopiedShown !== void 0 ? \"Copied\" : \"Copy Link\";\n                                }\n                            });\n                        }\n                    })\n                ];\n            }\n        })\n    ];\n};\nfunction getUniqueBridges(walletsList) {\n    const uniqueBridges = new Set(walletsList.filter(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoRemote).map((item)=>item.bridgeUrl));\n    return Array.from(uniqueBridges).map((bridgeUrl)=>({\n            bridgeUrl\n        }));\n}\nfunction bridgesIsEqual(left, right) {\n    const leftSet = new Set(left == null ? void 0 : left.map((i2)=>i2.bridgeUrl));\n    const rightSet = new Set(right == null ? void 0 : right.map((i2)=>i2.bridgeUrl));\n    return leftSet.size === rightSet.size && [\n        ...leftSet\n    ].every((value)=>rightSet.has(value));\n}\nconst _tmpl$$1 = /* @__PURE__ */ template$1(`<li></li>`), _tmpl$2 = /* @__PURE__ */ template$1(`<div data-tc-wallets-modal-universal-mobile=\"true\"></div>`);\nconst MobileUniversalModal = (props)=>{\n    const [showQR, setShowQR] = createSignal(false);\n    const [firstClick, setFirstClick] = createSignal(true);\n    const [universalLink, setUniversalLink] = createSignal(null);\n    const connector = appState.connector;\n    const walletsList = ()=>props.walletsList.filter((w)=>supportsMobile(w) && w.appName !== AT_WALLET_APP_NAME);\n    const shouldShowMoreButton = ()=>walletsList().length > 7;\n    const walletsBridges = createMemo(()=>getUniqueBridges(props.walletsList), null, {\n        equals: bridgesIsEqual\n    });\n    const atWalletSupportFeatures = createMemo(()=>{\n        var _a2, _b2;\n        return (_b2 = (_a2 = props.walletsList.find((wallet)=>wallet.appName === AT_WALLET_APP_NAME)) == null ? void 0 : _a2.isSupportRequiredFeatures) != null ? _b2 : false;\n    }, null);\n    const getUniversalLink = ()=>{\n        if (!universalLink()) {\n            setUniversalLink(connector.connect(walletsBridges(), props.additionalRequest));\n        }\n        return universalLink();\n    };\n    setLastSelectedWalletInfo({\n        openMethod: \"universal-link\"\n    });\n    const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);\n    const onCopy = ()=>__async(void 0, null, function*() {\n            if (isCopiedShown() !== void 0) {\n                clearTimeout(isCopiedShown());\n            }\n            yield copyToClipboard(getUniversalLink());\n            const timeoutId = setTimeout(()=>setIsCopiedShown(void 0), 1500);\n            setIsCopiedShown(timeoutId);\n        });\n    const onSelectUniversal = ()=>{\n        const forceRedirect = !firstClick();\n        setFirstClick(false);\n        redirectToWallet(getUniversalLink(), void 0, {\n            returnStrategy: appState.returnStrategy,\n            forceRedirect\n        }, (method)=>{\n            setLastSelectedWalletInfo({\n                openMethod: method\n            });\n        });\n    };\n    const onSelectTelegram = ()=>{\n        setUniversalLink(null);\n        const atWallet = props.walletsList.find((wallet)=>wallet.appName === AT_WALLET_APP_NAME);\n        if (!atWallet || !(0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoRemote)(atWallet)) {\n            throw new TonConnectUIError(\"@wallet bot not found in the wallets list\");\n        }\n        const walletLink = connector.connect({\n            bridgeUrl: atWallet.bridgeUrl,\n            universalLink: atWallet.universalLink\n        }, props.additionalRequest);\n        const forceRedirect = !firstClick();\n        setFirstClick(false);\n        redirectToTelegram(walletLink, {\n            returnStrategy: appState.returnStrategy,\n            twaReturnUrl: appState.twaReturnUrl,\n            forceRedirect\n        });\n    };\n    const onOpenQR = ()=>{\n        setShowQR(true);\n        setLastSelectedWalletInfo({\n            openMethod: \"qrcode\"\n        });\n    };\n    const onCloseQR = ()=>{\n        setShowQR(false);\n        setLastSelectedWalletInfo({\n            openMethod: \"universal-link\"\n        });\n    };\n    const supportedWallets = createMemo(()=>walletsList().filter((wallet)=>wallet.isSupportRequiredFeatures), null);\n    const visibleWallets = createMemo(()=>supportedWallets().slice(0, 3), null);\n    const fourWalletsItem = createMemo(()=>walletsList().filter((wallet)=>!visibleWallets().find((w)=>w.appName === wallet.appName)).slice(0, 4), null);\n    return (()=>{\n        const _el$ = _tmpl$2.cloneNode(true);\n        insert(_el$, createComponent(Show, {\n            get when () {\n                return showQR();\n            },\n            get children () {\n                return [\n                    createComponent(StyledLeftActionButton, {\n                        icon: \"arrow\",\n                        onClick: onCloseQR\n                    }),\n                    createComponent(MobileUniversalQR, {\n                        get universalLink () {\n                            return getUniversalLink();\n                        },\n                        get isCopiedShown () {\n                            return isCopiedShown();\n                        },\n                        onOpenLink: onSelectUniversal,\n                        onCopy\n                    })\n                ];\n            }\n        }), null);\n        insert(_el$, createComponent(Show, {\n            get when () {\n                return !showQR();\n            },\n            get children () {\n                return [\n                    createComponent(StyledLeftActionButton, {\n                        get icon () {\n                            return createComponent(QRIcon, {});\n                        },\n                        onClick: onOpenQR\n                    }),\n                    createComponent(H1Styled$2, {\n                        translationKey: \"walletModal.mobileUniversalModal.connectYourWallet\",\n                        children: \"Connect your TON wallet\"\n                    }),\n                    createComponent(Show, {\n                        get when () {\n                            return atWalletSupportFeatures();\n                        },\n                        get children () {\n                            return [\n                                createComponent(H2Styled$2, {\n                                    translationKey: \"walletModal.mobileUniversalModal.openWalletOnTelegramOrSelect\",\n                                    maxWidth: 320,\n                                    children: \"Use Wallet in Telegram or choose other application\"\n                                }),\n                                createComponent(TelegramButtonStyled, {\n                                    get leftIcon () {\n                                        return createComponent(AtWalletIcon, {});\n                                    },\n                                    get rightIcon () {\n                                        return createComponent(TGImageStyled, {\n                                            get src () {\n                                                return IMG.TG;\n                                            }\n                                        });\n                                    },\n                                    onClick: onSelectTelegram,\n                                    scale: \"s\",\n                                    get children () {\n                                        return createComponent(Translation, {\n                                            translationKey: \"walletModal.mobileUniversalModal.openWalletOnTelegram\",\n                                            children: \"Connect Wallet in Telegram\"\n                                        });\n                                    }\n                                })\n                            ];\n                        }\n                    }),\n                    createComponent(H2Styled$2, {\n                        translationKey: \"walletModal.mobileUniversalModal.chooseOtherApplication\",\n                        maxWidth: 342,\n                        padding: \"0 24px 8px 24px\",\n                        margin: \"0\",\n                        children: \"Choose other application\"\n                    }),\n                    createComponent(WalletUlContainer, {\n                        get children () {\n                            return [\n                                createComponent(For, {\n                                    get each () {\n                                        return createMemo(()=>!!shouldShowMoreButton())() ? visibleWallets() : supportedWallets();\n                                    },\n                                    children: (wallet)=>(()=>{\n                                            const _el$3 = _tmpl$$1.cloneNode(true);\n                                            insert(_el$3, createComponent(WalletItem, {\n                                                get icon () {\n                                                    return wallet.imageUrl;\n                                                },\n                                                get name () {\n                                                    return wallet.name;\n                                                },\n                                                onClick: ()=>props.onSelect(wallet)\n                                            }));\n                                            return _el$3;\n                                        })()\n                                }),\n                                createComponent(Show, {\n                                    get when () {\n                                        return shouldShowMoreButton();\n                                    },\n                                    get children () {\n                                        const _el$2 = _tmpl$$1.cloneNode(true);\n                                        insert(_el$2, createComponent(FourWalletsItem, {\n                                            labelLine1: \"View all\",\n                                            labelLine2: \"wallets\",\n                                            get images () {\n                                                return fourWalletsItem().map((i2)=>i2.imageUrl);\n                                            },\n                                            onClick: ()=>props.onSelectAllWallets()\n                                        }));\n                                        return _el$2;\n                                    }\n                                })\n                            ];\n                        }\n                    })\n                ];\n            }\n        }), null);\n        return _el$;\n    })();\n};\nconst borders = {\n    m: \"16px\",\n    s: \"8px\",\n    none: \"0\"\n};\nconst hoverBorders = {\n    m: \"8px\",\n    s: \"4px\",\n    none: \"0\"\n};\nconst DesktopUniversalModalStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-bottom: 16px;\n`;\nconst H2Styled = styled(H2)`\n    max-width: 320px;\n    margin-top: 2px;\n    margin-bottom: 20px;\n`;\nconst H2AvailableWalletsStyled = styled(H2)`\n    margin-bottom: 16px;\n`;\nconst QRCodeStyled = styled(QRCode)`\n    margin-bottom: 24px;\n`;\nconst WalletsContainerStyled = styled.ul`\n    display: flex;\n`;\nstyled.div`\n    display: flex;\n    gap: 16px;\n    width: 100%;\n`;\nstyled(Button)`\n    position: relative;\n    font-size: 16px;\n    line-height: 20px;\n    width: 100%;\n    padding: 0 16px;\n    height: 56px;\n    border-radius: ${(props)=>borders[props.theme.borderRadius]};\n\n    &:hover {\n        ${(props)=>props.disableEventsAnimation ? \"transform: unset;\" : \"\"}\n    }\n\n    &:active {\n        ${(props)=>props.disableEventsAnimation ? \"transform: unset;\" : \"\"}\n    }\n`;\nstyled.ul`\n    position: absolute;\n    bottom: 100%;\n    left: 0;\n    margin: 0;\n    padding: 8px;\n    width: 188px;\n    transform: translateY(-16px);\n\n    background-color: ${(props)=>props.theme.colors.background.primary};\n    border-radius: ${(props)=>borders[props.theme.borderRadius]};\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n`;\nstyled.li`\n    padding: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    cursor: pointer;\n    border-radius: ${(props)=>hoverBorders[props.theme.borderRadius]};\n\n    transition: background-color, transform 0.1s ease-in-out;\n\n    &:hover {\n        background-color: ${(props)=>props.theme.colors.background.secondary};\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n`;\nstyled(Image)`\n    width: 24px;\n    height: 24px;\n\n    border-radius: 6px;\n`;\nstyled.div`\n    margin-top: 23px;\n    margin-bottom: 1px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nstyled(Text)`\n    color: ${(props)=>props.theme.colors.text.secondary};\n    font-size: 16px;\n`;\nconst _tmpl$ = /* @__PURE__ */ template$1(`<li></li>`);\nconst DesktopUniversalModal = (props)=>{\n    const [popupOpened, setPopupOpened] = createSignal(false);\n    const connector = appState.connector;\n    const walletsBridges = createMemo(()=>getUniqueBridges(props.walletsList), null, {\n        equals: bridgesIsEqual\n    });\n    setLastSelectedWalletInfo({\n        openMethod: \"qrcode\"\n    });\n    const request = createMemo(()=>connector.connect(walletsBridges(), props.additionalRequest));\n    const supportedWallets = createMemo(()=>props.walletsList.filter((wallet)=>wallet.isSupportRequiredFeatures), null);\n    const visibleWallets = createMemo(()=>supportedWallets().slice(0, 3), null);\n    const fourWalletsItem = createMemo(()=>props.walletsList.filter((wallet)=>!visibleWallets().find((w)=>w.appName === wallet.appName)).slice(0, 4), null);\n    return createComponent(DesktopUniversalModalStyled, {\n        onClick: ()=>setPopupOpened(false),\n        \"data-tc-wallets-modal-universal-desktop\": \"true\",\n        get children () {\n            return [\n                createComponent(H1, {\n                    translationKey: \"walletModal.desktopUniversalModal.connectYourWallet\",\n                    children: \"Connect your wallet\"\n                }),\n                createComponent(H2Styled, {\n                    translationKey: \"walletModal.desktopUniversalModal.scan\",\n                    children: \"Scan with your mobile wallet\"\n                }),\n                createComponent(QRCodeStyled, {\n                    get sourceUrl () {\n                        return addReturnStrategy(request(), \"none\");\n                    },\n                    get disableCopy () {\n                        return popupOpened();\n                    },\n                    get imageUrl () {\n                        return IMG.TON;\n                    }\n                }),\n                createComponent(H2AvailableWalletsStyled, {\n                    translationKey: \"walletModal.desktopUniversalModal.availableWallets\",\n                    children: \"Available wallets\"\n                }),\n                createComponent(WalletsContainerStyled, {\n                    get children () {\n                        return [\n                            createComponent(For, {\n                                get each () {\n                                    return visibleWallets();\n                                },\n                                children: (wallet)=>(()=>{\n                                        const _el$ = _tmpl$.cloneNode(true);\n                                        insert(_el$, createComponent(WalletLabeledItem, {\n                                            wallet,\n                                            onClick: ()=>props.onSelect(wallet)\n                                        }));\n                                        return _el$;\n                                    })()\n                            }),\n                            createComponent(FourWalletsItem, {\n                                labelLine1: \"View all\",\n                                labelLine2: \"wallets\",\n                                get images () {\n                                    return fourWalletsItem().map((i2)=>i2.imageUrl);\n                                },\n                                onClick: ()=>props.onSelectAllWallets()\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst WalletsModal = ()=>{\n    const { locale } = useI18n()[1];\n    createEffect(()=>locale(appState.language));\n    createEffect(()=>{\n        if (getWalletsModalIsOpened()) {\n            updateIsMobile();\n        } else {\n            setSelectedWalletInfo(null);\n            setSelectedTab(\"universal\");\n            setInfoTab(false);\n        }\n    });\n    const connector = useContext(ConnectorContext);\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [fetchedWalletsList] = createResource(()=>tonConnectUI.getWallets());\n    const [selectedWalletInfo, setSelectedWalletInfo] = createSignal(null);\n    const [selectedWalletError, setSelectedWalletError] = createSignal(null);\n    const [selectedTab, setSelectedTab] = createSignal(\"universal\");\n    const [infoTab, setInfoTab] = createSignal(false);\n    const walletsList = createMemo(()=>{\n        if (fetchedWalletsList.state !== \"ready\") {\n            return null;\n        }\n        let walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);\n        const injectedWallets = walletsList2.filter(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected);\n        const notInjectedWallets = walletsList2.filter((w)=>!(0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyInjected)(w));\n        walletsList2 = (injectedWallets || []).concat(notInjectedWallets);\n        const preferredWalletAppName = appState.preferredWalletAppName;\n        const preferredWallet = walletsList2.find((item)=>eqWalletName(item, preferredWalletAppName));\n        const someWalletsWithSameName = walletsList2.filter((item)=>eqWalletName(item, preferredWalletAppName)).length >= 2;\n        if (preferredWalletAppName && preferredWallet && !someWalletsWithSameName) {\n            walletsList2 = [\n                __spreadProps(__spreadValues({}, preferredWallet), {\n                    isPreferred: true\n                })\n            ].concat(walletsList2.filter((item)=>!eqWalletName(item, preferredWalletAppName)));\n        }\n        const atWallet = walletsList2.find((item)=>eqWalletName(item, AT_WALLET_APP_NAME));\n        if (atWallet) {\n            walletsList2 = [\n                atWallet\n            ].concat(walletsList2.filter((item)=>!eqWalletName(item, AT_WALLET_APP_NAME)));\n        }\n        const uiWallets = walletsList2.map((wallet)=>{\n            var _a2;\n            return __spreadProps(__spreadValues({}, wallet), {\n                isSupportRequiredFeatures: (tonConnectUI == null ? void 0 : tonConnectUI.walletsRequiredFeatures) ? (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.checkRequiredWalletFeatures)((_a2 = wallet.features) != null ? _a2 : [], tonConnectUI.walletsRequiredFeatures) : true\n            });\n        });\n        return uiWallets;\n    });\n    const additionalRequestLoading = ()=>{\n        var _a2;\n        return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === \"loading\";\n    };\n    const additionalRequest = createMemo(()=>{\n        var _a2;\n        if (additionalRequestLoading()) {\n            return void 0;\n        }\n        return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;\n    });\n    const onClose = (closeReason)=>{\n        tonConnectUI.closeModal(closeReason);\n    };\n    const unsubscribe = connector.onStatusChange((wallet)=>{\n        if (wallet) {\n            onClose(\"wallet-selected\");\n        }\n    }, (err)=>{\n        var _a2;\n        if (err instanceof _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.WalletMissingRequiredFeaturesError) {\n            const errorAppName = err.cause.connectEvent.device.appName.toLowerCase();\n            const wallet = (_a2 = walletsList()) == null ? void 0 : _a2.find((w)=>w.appName.toLowerCase() === errorAppName);\n            if (!wallet) {\n                throw new _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnectError(\"Wallet not found\");\n            }\n            const walletErrorType = wallet.isSupportRequiredFeatures ? \"missing-features\" : \"not-supported\";\n            setSelectedWalletError(walletErrorType);\n            setSelectedWalletInfo(wallet);\n        }\n    });\n    const onSelectAllWallets = ()=>{\n        setSelectedTab(\"all-wallets\");\n    };\n    const onSelectUniversal = ()=>{\n        setSelectedTab(\"universal\");\n    };\n    const clearSelectedWalletInfo = ()=>{\n        setSelectedWalletInfo(null);\n        setSelectedWalletError(null);\n    };\n    onCleanup(()=>{\n        setSelectedWalletInfo(null);\n        setSelectedWalletError(null);\n        setInfoTab(false);\n    });\n    onCleanup(unsubscribe);\n    return createComponent(StyledModal, {\n        get opened () {\n            return getWalletsModalIsOpened();\n        },\n        get enableAndroidBackHandler () {\n            return appState.enableAndroidBackHandler;\n        },\n        onClose: ()=>onClose(\"action-cancelled\"),\n        onClickQuestion: ()=>setInfoTab((v)=>!v),\n        \"data-tc-wallets-modal-container\": \"true\",\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return infoTab();\n                    },\n                    get children () {\n                        return createComponent(InfoModal, {\n                            onBackClick: ()=>setInfoTab(false)\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !infoTab();\n                    },\n                    get children () {\n                        return [\n                            createComponent(Show, {\n                                get when () {\n                                    return additionalRequestLoading() || !walletsList();\n                                },\n                                get children () {\n                                    return [\n                                        createComponent(H1Styled$8, {\n                                            translationKey: \"walletModal.loading\",\n                                            children: \"Wallets list is loading\"\n                                        }),\n                                        createComponent(LoaderContainerStyled, {\n                                            get children () {\n                                                return createComponent(LoaderIcon, {\n                                                    size: \"m\"\n                                                });\n                                            }\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return createMemo(()=>!!!additionalRequestLoading())() && walletsList();\n                                },\n                                get children () {\n                                    return createComponent(Switch, {\n                                        get children () {\n                                            return [\n                                                createComponent(Match, {\n                                                    get when () {\n                                                        return selectedWalletInfo();\n                                                    },\n                                                    get children () {\n                                                        return createComponent(Dynamic, {\n                                                            get component () {\n                                                                return isMobile() ? MobileConnectionModal : DesktopConnectionModal;\n                                                            },\n                                                            get wallet () {\n                                                                return selectedWalletInfo();\n                                                            },\n                                                            get additionalRequest () {\n                                                                return additionalRequest();\n                                                            },\n                                                            onBackClick: clearSelectedWalletInfo,\n                                                            get defaultError () {\n                                                                return selectedWalletError();\n                                                            }\n                                                        });\n                                                    }\n                                                }),\n                                                createComponent(Match, {\n                                                    get when () {\n                                                        return selectedTab() === \"universal\";\n                                                    },\n                                                    get children () {\n                                                        return createComponent(Dynamic, {\n                                                            get component () {\n                                                                return isMobile() ? MobileUniversalModal : DesktopUniversalModal;\n                                                            },\n                                                            onSelect: setSelectedWalletInfo,\n                                                            get walletsList () {\n                                                                return walletsList();\n                                                            },\n                                                            get additionalRequest () {\n                                                                return additionalRequest();\n                                                            },\n                                                            onSelectAllWallets\n                                                        });\n                                                    }\n                                                }),\n                                                createComponent(Match, {\n                                                    get when () {\n                                                        return selectedTab() === \"all-wallets\";\n                                                    },\n                                                    get children () {\n                                                        return createComponent(AllWalletsListModal, {\n                                                            get walletsList () {\n                                                                return walletsList();\n                                                            },\n                                                            onBack: onSelectUniversal,\n                                                            onSelect: setSelectedWalletInfo\n                                                        });\n                                                    }\n                                                })\n                                            ];\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst ActionModalStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-bottom: 8px;\n`;\nconst H1Styled = styled(H1)`\n    margin-top: 16px;\n`;\nconst TextStyled = styled(Text)`\n    font-weight: 510;\n    font-size: 16px;\n    line-height: 20px;\n    text-align: center;\n    max-width: 250px;\n\n    color: ${(props)=>props.theme.colors.text.secondary};\n`;\nconst LoaderButtonStyled = styled(Button)`\n    min-width: 112px;\n    margin-top: 32px;\n`;\nconst LoaderIconStyled = styled(LoaderIcon)`\n    height: 16px;\n    width: 16px;\n`;\nconst ButtonStyled = styled(Button)`\n    margin-top: 32px;\n`;\nconst ActionModal = (props)=>{\n    const dataAttrs = useDataAttributes(props);\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [firstClick, setFirstClick] = createSignal(true);\n    const [sent, setSent] = createSignal(false);\n    createEffect(()=>{\n        const currentAction = action();\n        setSent(!!currentAction && \"sent\" in currentAction && currentAction.sent);\n    });\n    let universalLink;\n    if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && \"universalLink\" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === \"universal-link\" || (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(tonConnectUI.wallet.universalLink) && isInTMA())) {\n        universalLink = tonConnectUI.wallet.universalLink;\n    }\n    let deepLink;\n    if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && \"deepLink\" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === \"custom-deeplink\" || (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(tonConnectUI.wallet.deepLink) && isInTMA())) {\n        deepLink = tonConnectUI.wallet.deepLink;\n    }\n    const onOpenWallet = ()=>{\n        const currentAction = action();\n        const returnStrategy = \"returnStrategy\" in currentAction ? currentAction.returnStrategy : appState.returnStrategy;\n        const forceRedirect = !firstClick();\n        setFirstClick(false);\n        if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(universalLink)) {\n            redirectToTelegram(universalLink, {\n                returnStrategy,\n                twaReturnUrl: \"twaReturnUrl\" in currentAction ? currentAction.twaReturnUrl : appState.twaReturnUrl,\n                forceRedirect\n            });\n        } else {\n            redirectToWallet(universalLink, deepLink, {\n                returnStrategy,\n                forceRedirect\n            }, ()=>{});\n        }\n    };\n    return createComponent(ActionModalStyled, mergeProps(dataAttrs, {\n        get children () {\n            return [\n                createMemo(()=>props.icon),\n                createComponent(H1Styled, {\n                    get translationKey () {\n                        return props.headerTranslationKey;\n                    },\n                    get translationValues () {\n                        return props.headerTranslationValues;\n                    }\n                }),\n                createComponent(TextStyled, {\n                    get translationKey () {\n                        return props.textTranslationKey;\n                    },\n                    get translationValues () {\n                        return props.textTranslationValues;\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !sent() && (props.showButton === \"open-wallet\" && universalLink || props.showButton !== \"open-wallet\");\n                    },\n                    get children () {\n                        return createComponent(LoaderButtonStyled, {\n                            disabled: true,\n                            \"data-tc-connect-button-loading\": \"true\",\n                            get children () {\n                                return createComponent(LoaderIconStyled, {});\n                            }\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return sent();\n                    },\n                    get children () {\n                        return [\n                            createComponent(Show, {\n                                get when () {\n                                    return props.showButton !== \"open-wallet\";\n                                },\n                                get children () {\n                                    return createComponent(ButtonStyled, {\n                                        onClick: ()=>props.onClose(),\n                                        get children () {\n                                            return createComponent(Translation, {\n                                                translationKey: \"common.close\",\n                                                children: \"Close\"\n                                            });\n                                        }\n                                    });\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return props.showButton === \"open-wallet\" && universalLink;\n                                },\n                                get children () {\n                                    return createComponent(ButtonStyled, {\n                                        onClick: onOpenWallet,\n                                        get children () {\n                                            return createComponent(Translation, {\n                                                translationKey: \"common.openWallet\",\n                                                children: \"Open wallet\"\n                                            });\n                                        }\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    }));\n};\nconst ConfirmTransactionModal = (props)=>{\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [t2] = useI18n();\n    const name = ()=>tonConnectUI.wallet && \"name\" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2(\"common.yourWallet\", {}, \"Your wallet\");\n    return createComponent(ActionModal, {\n        headerTranslationKey: \"actionModal.confirmTransaction.header\",\n        get headerTranslationValues () {\n            return {\n                name: name()\n            };\n        },\n        textTranslationKey: \"actionModal.confirmTransaction.text\",\n        get icon () {\n            return createComponent(LoaderIcon, {\n                size: \"m\"\n            });\n        },\n        onClose: ()=>props.onClose(),\n        showButton: \"open-wallet\",\n        \"data-tc-confirm-modal\": \"true\"\n    });\n};\nconst TransactionCanceledModal = (props)=>{\n    return createComponent(ActionModal, {\n        headerTranslationKey: \"actionModal.transactionCanceled.header\",\n        textTranslationKey: \"actionModal.transactionCanceled.text\",\n        get icon () {\n            return createComponent(ErrorIcon, {\n                size: \"m\"\n            });\n        },\n        onClose: ()=>props.onClose(),\n        \"data-tc-transaction-canceled-modal\": \"true\"\n    });\n};\nconst TransactionSentModal = (props)=>{\n    return createComponent(ActionModal, {\n        headerTranslationKey: \"actionModal.transactionSent.header\",\n        textTranslationKey: \"actionModal.transactionSent.text\",\n        get icon () {\n            return createComponent(SuccessIcon, {\n                size: \"m\"\n            });\n        },\n        onClose: ()=>props.onClose(),\n        \"data-tc-transaction-sent-modal\": \"true\"\n    });\n};\nconst ActionsModal = ()=>{\n    return createComponent(Modal, {\n        get opened () {\n            var _a2;\n            return createMemo(()=>action() !== null)() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;\n        },\n        get enableAndroidBackHandler () {\n            return appState.enableAndroidBackHandler;\n        },\n        onClose: ()=>setAction(null),\n        \"data-tc-actions-modal-container\": \"true\",\n        get children () {\n            return createComponent(Switch, {\n                get children () {\n                    return [\n                        createComponent(Match, {\n                            get when () {\n                                return action().name === \"transaction-sent\";\n                            },\n                            get children () {\n                                return createComponent(TransactionSentModal, {\n                                    onClose: ()=>setAction(null)\n                                });\n                            }\n                        }),\n                        createComponent(Match, {\n                            get when () {\n                                return action().name === \"transaction-canceled\";\n                            },\n                            get children () {\n                                return createComponent(TransactionCanceledModal, {\n                                    onClose: ()=>setAction(null)\n                                });\n                            }\n                        }),\n                        createComponent(Match, {\n                            get when () {\n                                return action().name === \"confirm-transaction\";\n                            },\n                            get children () {\n                                return createComponent(ConfirmTransactionModal, {\n                                    onClose: ()=>setAction(null)\n                                });\n                            }\n                        })\n                    ];\n                }\n            });\n        }\n    });\n};\nconst SingleWalletModal = ()=>{\n    const { locale } = useI18n()[1];\n    createEffect(()=>locale(appState.language));\n    createEffect(()=>{\n        if (getSingleWalletModalIsOpened()) {\n            updateIsMobile();\n        }\n    });\n    const connector = useContext(ConnectorContext);\n    const tonConnectUI = useContext(TonConnectUiContext);\n    const [infoTab, setInfoTab] = createSignal(false);\n    const additionalRequestLoading = ()=>{\n        var _a2;\n        return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === \"loading\";\n    };\n    const additionalRequest = createMemo(()=>{\n        var _a2;\n        if (additionalRequestLoading()) {\n            return void 0;\n        }\n        return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;\n    });\n    const onClose = (closeReason)=>{\n        tonConnectUI.closeSingleWalletModal(closeReason);\n    };\n    const unsubscribe = connector.onStatusChange((wallet)=>{\n        if (wallet) {\n            onClose(\"wallet-selected\");\n        }\n    });\n    onCleanup(unsubscribe);\n    onCleanup(()=>{\n        setInfoTab(false);\n    });\n    return createComponent(StyledModal, {\n        get opened () {\n            return getSingleWalletModalIsOpened();\n        },\n        get enableAndroidBackHandler () {\n            return appState.enableAndroidBackHandler;\n        },\n        onClose: ()=>onClose(\"action-cancelled\"),\n        onClickQuestion: ()=>setInfoTab((v)=>!v),\n        \"data-tc-wallets-modal-container\": \"true\",\n        get children () {\n            return [\n                createComponent(Show, {\n                    get when () {\n                        return infoTab();\n                    },\n                    get children () {\n                        return createComponent(InfoModal, {\n                            onBackClick: ()=>setInfoTab(false)\n                        });\n                    }\n                }),\n                createComponent(Show, {\n                    get when () {\n                        return !infoTab();\n                    },\n                    get children () {\n                        return [\n                            createComponent(Show, {\n                                get when () {\n                                    return additionalRequestLoading();\n                                },\n                                get children () {\n                                    return [\n                                        createComponent(H1Styled$8, {\n                                            translationKey: \"walletModal.loading\",\n                                            children: \"Wallets list is loading\"\n                                        }),\n                                        createComponent(LoaderContainerStyled, {\n                                            get children () {\n                                                return createComponent(LoaderIcon, {\n                                                    size: \"m\"\n                                                });\n                                            }\n                                        })\n                                    ];\n                                }\n                            }),\n                            createComponent(Show, {\n                                get when () {\n                                    return !additionalRequestLoading();\n                                },\n                                get children () {\n                                    return createComponent(Dynamic, {\n                                        get component () {\n                                            return isMobile() ? MobileConnectionModal : DesktopConnectionModal;\n                                        },\n                                        get wallet () {\n                                            return getSingleWalletModalWalletInfo();\n                                        },\n                                        get additionalRequest () {\n                                            return additionalRequest();\n                                        },\n                                        onBackClick: ()=>{},\n                                        backDisabled: true\n                                    });\n                                }\n                            })\n                        ];\n                    }\n                })\n            ];\n        }\n    });\n};\nconst App = (props)=>{\n    const translations = createI18nContext(i18nDictionary, appState.language);\n    defineStylesRoot();\n    fixMobileSafariActiveTransition();\n    return createComponent(I18nContext.Provider, {\n        value: translations,\n        get children () {\n            return createComponent(TonConnectUiContext.Provider, {\n                get value () {\n                    return props.tonConnectUI;\n                },\n                get children () {\n                    return createComponent(ConnectorContext.Provider, {\n                        get value () {\n                            return appState.connector;\n                        },\n                        get children () {\n                            return [\n                                createComponent(GlobalStyles, {}),\n                                createComponent(ThemeProvider, {\n                                    theme: themeState,\n                                    get children () {\n                                        return [\n                                            createComponent(Show, {\n                                                get when () {\n                                                    return appState.buttonRootId;\n                                                },\n                                                get children () {\n                                                    return createComponent(Portal, {\n                                                        get mount () {\n                                                            return document.getElementById(appState.buttonRootId);\n                                                        },\n                                                        get children () {\n                                                            return createComponent(AccountButton, {});\n                                                        }\n                                                    });\n                                                }\n                                            }),\n                                            createComponent(Dynamic, {\n                                                component: globalStylesTag,\n                                                get children () {\n                                                    return [\n                                                        createComponent(WalletsModal, {}),\n                                                        createComponent(SingleWalletModal, {}),\n                                                        createComponent(ActionsModal, {})\n                                                    ];\n                                                }\n                                            })\n                                        ];\n                                    }\n                                })\n                            ];\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\nconst widgetController = {\n    openWalletsModal: ()=>void setTimeout(()=>setWalletsModalState({\n                status: \"opened\",\n                closeReason: null\n            })),\n    closeWalletsModal: (reason)=>void setTimeout(()=>setWalletsModalState({\n                status: \"closed\",\n                closeReason: reason\n            })),\n    openSingleWalletModal: (walletInfo)=>{\n        void setTimeout(()=>setSingleWalletModalState({\n                status: \"opened\",\n                closeReason: null,\n                walletInfo\n            }));\n    },\n    closeSingleWalletModal: (reason)=>void setTimeout(()=>setSingleWalletModalState({\n                status: \"closed\",\n                closeReason: reason\n            })),\n    setAction: (action2)=>void setTimeout(()=>setAction(action2)),\n    clearAction: ()=>void setTimeout(()=>setAction(null)),\n    getSelectedWalletInfo: ()=>lastSelectedWalletInfo(),\n    removeSelectedWalletInfo: ()=>setLastSelectedWalletInfo(null),\n    renderApp: (root, tonConnectUI)=>render(()=>createComponent(App, {\n                tonConnectUI\n            }), document.getElementById(root))\n};\nclass WalletsModalManager {\n    constructor(options){\n        __publicField(this, \"connector\");\n        __publicField(this, \"setConnectRequestParametersCallback\");\n        __publicField(this, \"consumers\", []);\n        __publicField(this, \"tracker\");\n        __publicField(this, \"state\", walletsModalState());\n        this.connector = options.connector;\n        this.tracker = options.tracker;\n        this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;\n        createEffect(()=>{\n            const state = walletsModalState();\n            this.state = state;\n            this.consumers.forEach((consumer)=>consumer(state));\n        });\n    }\n    open() {\n        return __async(this, null, function*() {\n            this.tracker.trackConnectionStarted();\n            const walletsList = yield this.connector.getWallets();\n            const embeddedWallet = walletsList.find(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyEmbedded);\n            if (embeddedWallet) {\n                return this.connectEmbeddedWallet(embeddedWallet);\n            } else {\n                return this.openWalletsModal();\n            }\n        });\n    }\n    close(reason = \"action-cancelled\") {\n        if (reason === \"action-cancelled\") {\n            this.tracker.trackConnectionError(\"Connection was cancelled\");\n        }\n        widgetController.closeWalletsModal(reason);\n    }\n    onStateChange(onChange) {\n        this.consumers.push(onChange);\n        return ()=>{\n            this.consumers = this.consumers.filter((consumer)=>consumer !== onChange);\n        };\n    }\n    connectEmbeddedWallet(embeddedWallet) {\n        const connect = (parameters)=>{\n            setLastSelectedWalletInfo(embeddedWallet);\n            this.connector.connect({\n                jsBridgeKey: embeddedWallet.jsBridgeKey\n            }, parameters);\n        };\n        const additionalRequest = appState.connectRequestParameters;\n        if ((additionalRequest == null ? void 0 : additionalRequest.state) === \"loading\") {\n            this.setConnectRequestParametersCallback(connect);\n        } else {\n            connect(additionalRequest == null ? void 0 : additionalRequest.value);\n        }\n    }\n    openWalletsModal() {\n        return __async(this, null, function*() {\n            if (isInTMA()) {\n                sendExpand();\n            }\n            widgetController.openWalletsModal();\n            return new Promise((resolve)=>{\n                const unsubscribe = this.onStateChange((state)=>{\n                    const { status } = state;\n                    if (status === \"opened\") {\n                        unsubscribe();\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n}\nclass TransactionModalManager {\n    constructor(options){\n        __publicField(this, \"connector\");\n        __publicField(this, \"consumers\", []);\n        this.connector = options.connector;\n        createEffect(()=>{\n            const currentAction = action();\n            this.consumers.forEach((consumer)=>consumer(currentAction));\n        });\n    }\n    onStateChange(consumer) {\n        this.consumers.push(consumer);\n        return ()=>{\n            this.consumers = this.consumers.filter((c2)=>c2 !== consumer);\n        };\n    }\n}\nclass SingleWalletModalManager {\n    constructor(options){\n        __publicField(this, \"connector\");\n        __publicField(this, \"setConnectRequestParametersCallback\");\n        __publicField(this, \"consumers\", []);\n        __publicField(this, \"tracker\");\n        __publicField(this, \"state\", singleWalletModalState());\n        this.connector = options.connector;\n        this.tracker = options.tracker;\n        this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;\n        createEffect(()=>{\n            const state = singleWalletModalState();\n            this.state = state;\n            this.consumers.forEach((consumer)=>consumer(state));\n        });\n    }\n    open(wallet) {\n        return __async(this, null, function*() {\n            this.tracker.trackConnectionStarted();\n            const fetchedWalletsList = yield this.connector.getWallets();\n            const walletsList = applyWalletsListConfiguration(fetchedWalletsList, appState.walletsListConfiguration);\n            const embeddedWallet = walletsList.find(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyEmbedded);\n            const isEmbeddedWalletExist = !!embeddedWallet;\n            if (isEmbeddedWalletExist) {\n                return this.connectEmbeddedWallet(embeddedWallet);\n            }\n            const externalWallets = walletsList.filter(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoRemote);\n            const externalWallet = externalWallets.find((walletInfo)=>eqWalletName(walletInfo, wallet));\n            const isExternalWalletExist = !!externalWallet;\n            if (isExternalWalletExist) {\n                return this.openSingleWalletModal(externalWallet);\n            }\n            const error = `Trying to open modal window with unknown wallet \"${wallet}\".`;\n            this.tracker.trackConnectionError(error);\n            throw new TonConnectUIError(error);\n        });\n    }\n    close(reason = \"action-cancelled\") {\n        if (reason === \"action-cancelled\") {\n            this.tracker.trackConnectionError(\"Connection was cancelled\");\n        }\n        widgetController.closeSingleWalletModal(\"action-cancelled\");\n    }\n    onStateChange(onChange) {\n        this.consumers.push(onChange);\n        return ()=>{\n            this.consumers = this.consumers.filter((consumer)=>consumer !== onChange);\n        };\n    }\n    connectEmbeddedWallet(embeddedWallet) {\n        const connect = (parameters)=>{\n            setLastSelectedWalletInfo(embeddedWallet);\n            this.connector.connect({\n                jsBridgeKey: embeddedWallet.jsBridgeKey\n            }, parameters);\n        };\n        const additionalRequest = appState.connectRequestParameters;\n        if ((additionalRequest == null ? void 0 : additionalRequest.state) === \"loading\") {\n            this.setConnectRequestParametersCallback(connect);\n        } else {\n            connect(additionalRequest == null ? void 0 : additionalRequest.value);\n        }\n    }\n    openSingleWalletModal(wallet) {\n        return __async(this, null, function*() {\n            if (isInTMA()) {\n                sendExpand();\n            }\n            widgetController.openSingleWalletModal(wallet);\n            return new Promise((resolve)=>{\n                const unsubscribe = this.onStateChange((state)=>{\n                    const { status } = state;\n                    if (status === \"opened\") {\n                        unsubscribe();\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n}\nclass TonConnectUITracker {\n    constructor(options){\n        __publicField(this, \"eventPrefix\", \"ton-connect-ui-\");\n        __publicField(this, \"tonConnectUiVersion\");\n        __publicField(this, \"tonConnectSdkVersion\", null);\n        __publicField(this, \"eventDispatcher\");\n        var _a2;\n        this.eventDispatcher = (_a2 = options == null ? void 0 : options.eventDispatcher) != null ? _a2 : new _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.BrowserEventDispatcher();\n        this.tonConnectUiVersion = options.tonConnectUiVersion;\n        this.init().catch();\n    }\n    get version() {\n        return (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createVersionInfo)({\n            ton_connect_sdk_lib: this.tonConnectSdkVersion,\n            ton_connect_ui_lib: this.tonConnectUiVersion\n        });\n    }\n    init() {\n        return __async(this, null, function*() {\n            try {\n                yield this.setRequestVersionHandler();\n                this.tonConnectSdkVersion = yield this.requestTonConnectSdkVersion();\n            } catch (e2) {}\n        });\n    }\n    setRequestVersionHandler() {\n        return __async(this, null, function*() {\n            yield this.eventDispatcher.addEventListener(\"ton-connect-ui-request-version\", ()=>__async(this, null, function*() {\n                    yield this.eventDispatcher.dispatchEvent(\"ton-connect-ui-response-version\", (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createResponseVersionEvent)(this.tonConnectUiVersion));\n                }));\n        });\n    }\n    requestTonConnectSdkVersion() {\n        return __async(this, null, function*() {\n            return new Promise((resolve, reject)=>__async(this, null, function*() {\n                    try {\n                        yield this.eventDispatcher.addEventListener(\"ton-connect-response-version\", (event)=>{\n                            resolve(event.detail.version);\n                        }, {\n                            once: true\n                        });\n                        yield this.eventDispatcher.dispatchEvent(\"ton-connect-request-version\", (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createRequestVersionEvent)());\n                    } catch (e2) {\n                        reject(e2);\n                    }\n                }));\n        });\n    }\n    dispatchUserActionEvent(eventDetails) {\n        var _a2;\n        try {\n            (_a2 = this.eventDispatcher) == null ? void 0 : _a2.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();\n        } catch (e2) {}\n    }\n    trackConnectionStarted(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionStartedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackConnectionCompleted(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionCompletedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackConnectionError(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionErrorEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackConnectionRestoringStarted(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringStartedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackConnectionRestoringCompleted(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringCompletedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackConnectionRestoringError(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createConnectionRestoringErrorEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackDisconnection(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createDisconnectionEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackTransactionSentForSignature(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSentForSignatureEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackTransactionSigned(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSignedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n    trackTransactionSigningFailed(...args) {\n        try {\n            const event = (0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.createTransactionSigningFailedEvent)(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e2) {}\n    }\n}\nconst tonConnectUiVersion = \"2.1.0\";\nclass TonConnectUI {\n    constructor(options){\n        __publicField(this, \"walletInfoStorage\", new WalletInfoStorage());\n        __publicField(this, \"preferredWalletStorage\", new PreferredWalletStorage());\n        __publicField(this, \"tracker\");\n        __publicField(this, \"walletInfo\", null);\n        __publicField(this, \"systemThemeChangeUnsubscribe\", null);\n        __publicField(this, \"actionsConfiguration\");\n        __publicField(this, \"walletsList\");\n        __publicField(this, \"walletsRequiredFeatures\");\n        __publicField(this, \"connectRequestParametersCallback\");\n        __publicField(this, \"connector\");\n        __publicField(this, \"modal\");\n        __publicField(this, \"singleWalletModal\");\n        __publicField(this, \"transactionModal\");\n        __publicField(this, \"connectionRestored\", Promise.resolve(false));\n        if (options && \"connector\" in options && options.connector) {\n            this.connector = options.connector;\n        } else if (options && \"manifestUrl\" in options && options.manifestUrl) {\n            this.connector = new _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnect({\n                manifestUrl: options.manifestUrl,\n                eventDispatcher: options.eventDispatcher,\n                walletsRequiredFeatures: options.walletsRequiredFeatures\n            });\n        } else {\n            throw new TonConnectUIError(\"You have to specify a `manifestUrl` or a `connector` in the options.\");\n        }\n        this.tracker = new TonConnectUITracker({\n            eventDispatcher: options == null ? void 0 : options.eventDispatcher,\n            tonConnectUiVersion\n        });\n        this.modal = new WalletsModalManager({\n            connector: this.connector,\n            tracker: this.tracker,\n            setConnectRequestParametersCallback: (callback)=>{\n                this.connectRequestParametersCallback = callback;\n            }\n        });\n        this.singleWalletModal = new SingleWalletModalManager({\n            connector: this.connector,\n            tracker: this.tracker,\n            setConnectRequestParametersCallback: (callback)=>{\n                this.connectRequestParametersCallback = callback;\n            }\n        });\n        this.transactionModal = new TransactionModalManager({\n            connector: this.connector\n        });\n        this.walletsRequiredFeatures = options.walletsRequiredFeatures;\n        this.walletsList = this.getWallets();\n        this.walletsList.then((list)=>preloadImages(uniq(list.map((item)=>item.imageUrl))));\n        const rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);\n        this.subscribeToWalletChange();\n        if ((options == null ? void 0 : options.restoreConnection) !== false) {\n            this.connectionRestored = createMacrotaskAsync(()=>__async(this, null, function*() {\n                    this.tracker.trackConnectionRestoringStarted();\n                    yield this.connector.restoreConnection();\n                    if (!this.connector.connected) {\n                        this.tracker.trackConnectionRestoringError(\"Connection was not restored\");\n                        this.walletInfoStorage.removeWalletInfo();\n                    } else {\n                        this.tracker.trackConnectionRestoringCompleted(this.wallet);\n                    }\n                    return this.connector.connected;\n                }));\n        }\n        this.uiOptions = mergeOptions(options, {\n            uiPreferences: {\n                theme: \"SYSTEM\"\n            }\n        });\n        const preferredWalletName = this.preferredWalletStorage.getPreferredWalletAppName();\n        setAppState({\n            connector: this.connector,\n            preferredWalletAppName: preferredWalletName\n        });\n        widgetController.renderApp(rootId, this);\n    }\n    static getWallets() {\n        return _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnect.getWallets();\n    }\n    get connected() {\n        return this.connector.connected;\n    }\n    get account() {\n        return this.connector.account;\n    }\n    get wallet() {\n        if (!this.connector.wallet) {\n            return null;\n        }\n        return __spreadValues(__spreadValues({}, this.connector.wallet), this.walletInfo);\n    }\n    set uiOptions(options) {\n        var _a2, _b2, _c2, _d2, _e2;\n        this.checkButtonRootExist(options.buttonRootId);\n        this.actionsConfiguration = options.actionsConfiguration;\n        if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) {\n            if (((_b2 = options.uiPreferences) == null ? void 0 : _b2.theme) !== \"SYSTEM\") {\n                (_c2 = this.systemThemeChangeUnsubscribe) == null ? void 0 : _c2.call(this);\n                setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);\n            } else {\n                setTheme(getSystemTheme(), options.uiPreferences.colorsSet);\n                if (!this.systemThemeChangeUnsubscribe) {\n                    this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);\n                }\n            }\n        } else {\n            if ((_d2 = options.uiPreferences) == null ? void 0 : _d2.colorsSet) {\n                setColors(options.uiPreferences.colorsSet);\n            }\n        }\n        if ((_e2 = options.uiPreferences) == null ? void 0 : _e2.borderRadius) {\n            setBorderRadius(options.uiPreferences.borderRadius);\n        }\n        setAppState((state)=>{\n            var _a3, _b3;\n            const merged = mergeOptions(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, options.language && {\n                language: options.language\n            }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && {\n                returnStrategy: options.actionsConfiguration.returnStrategy\n            }), !!((_b3 = options.actionsConfiguration) == null ? void 0 : _b3.twaReturnUrl) && {\n                twaReturnUrl: options.actionsConfiguration.twaReturnUrl\n            }), !!options.walletsListConfiguration && {\n                walletsListConfiguration: options.walletsListConfiguration\n            }), unwrap(state));\n            if (options.buttonRootId !== void 0) {\n                merged.buttonRootId = options.buttonRootId;\n            }\n            if (options.enableAndroidBackHandler !== void 0) {\n                merged.enableAndroidBackHandler = options.enableAndroidBackHandler;\n            }\n            return merged;\n        });\n    }\n    setConnectRequestParameters(connectRequestParameters) {\n        var _a2;\n        setAppState({\n            connectRequestParameters\n        });\n        if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === \"ready\" || !connectRequestParameters) {\n            (_a2 = this.connectRequestParametersCallback) == null ? void 0 : _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);\n        }\n    }\n    getWallets() {\n        return __async(this, null, function*() {\n            return this.connector.getWallets();\n        });\n    }\n    onStatusChange(callback, errorsHandler) {\n        return this.connector.onStatusChange((wallet)=>__async(this, null, function*() {\n                if (wallet) {\n                    const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);\n                    callback(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));\n                } else {\n                    callback(wallet);\n                }\n            }), errorsHandler);\n    }\n    openModal() {\n        return __async(this, null, function*() {\n            return this.modal.open();\n        });\n    }\n    closeModal(reason) {\n        this.modal.close(reason);\n    }\n    onModalStateChange(onChange) {\n        return this.modal.onStateChange(onChange);\n    }\n    get modalState() {\n        return this.modal.state;\n    }\n    openSingleWalletModal(wallet) {\n        return __async(this, null, function*() {\n            return this.singleWalletModal.open(wallet);\n        });\n    }\n    closeSingleWalletModal(closeReason) {\n        this.singleWalletModal.close(closeReason);\n    }\n    onSingleWalletModalStateChange(onChange) {\n        return this.singleWalletModal.onStateChange(onChange);\n    }\n    get singleWalletModalState() {\n        return this.singleWalletModal.state;\n    }\n    connectWallet() {\n        return __async(this, null, function*() {\n            const walletsList = yield this.getWallets();\n            const embeddedWallet = walletsList.find(_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isWalletInfoCurrentlyEmbedded);\n            if (embeddedWallet) {\n                return yield this.connectEmbeddedWallet(embeddedWallet);\n            } else {\n                return yield this.connectExternalWallet();\n            }\n        });\n    }\n    disconnect() {\n        this.tracker.trackDisconnection(this.wallet, \"dapp\");\n        widgetController.clearAction();\n        widgetController.removeSelectedWalletInfo();\n        this.walletInfoStorage.removeWalletInfo();\n        return this.connector.disconnect();\n    }\n    sendTransaction(tx, options) {\n        return __async(this, null, function*() {\n            this.tracker.trackTransactionSentForSignature(this.wallet, tx);\n            if (!this.connected) {\n                this.tracker.trackTransactionSigningFailed(this.wallet, tx, \"Wallet was not connected\");\n                throw new TonConnectUIError(\"Connect wallet to send a transaction.\");\n            }\n            if (isInTMA()) {\n                sendExpand();\n            }\n            const { notifications: notifications2, modals, returnStrategy, twaReturnUrl } = this.getModalsAndNotificationsConfiguration(options);\n            widgetController.setAction({\n                name: \"confirm-transaction\",\n                showNotification: notifications2.includes(\"before\"),\n                openModal: modals.includes(\"before\"),\n                sent: false\n            });\n            const onRequestSent = ()=>{\n                if (abortController.signal.aborted) {\n                    return;\n                }\n                widgetController.setAction({\n                    name: \"confirm-transaction\",\n                    showNotification: notifications2.includes(\"before\"),\n                    openModal: modals.includes(\"before\"),\n                    sent: true\n                });\n                if (this.walletInfo && \"universalLink\" in this.walletInfo && (this.walletInfo.openMethod === \"universal-link\" || this.walletInfo.openMethod === \"custom-deeplink\")) {\n                    if ((0,_tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.isTelegramUrl)(this.walletInfo.universalLink)) {\n                        redirectToTelegram(this.walletInfo.universalLink, {\n                            returnStrategy,\n                            twaReturnUrl: twaReturnUrl || appState.twaReturnUrl,\n                            forceRedirect: false\n                        });\n                    } else {\n                        redirectToWallet(this.walletInfo.universalLink, this.walletInfo.deepLink, {\n                            returnStrategy,\n                            forceRedirect: false\n                        }, ()=>{});\n                    }\n                }\n            };\n            const abortController = new AbortController();\n            const unsubscribe = this.onTransactionModalStateChange((action2)=>{\n                if (action2 == null ? void 0 : action2.openModal) {\n                    return;\n                }\n                unsubscribe();\n                if (!action2) {\n                    abortController.abort();\n                }\n            });\n            try {\n                const result = yield this.waitForSendTransaction({\n                    transaction: tx,\n                    signal: abortController.signal\n                }, onRequestSent);\n                this.tracker.trackTransactionSigned(this.wallet, tx, result);\n                widgetController.setAction({\n                    name: \"transaction-sent\",\n                    showNotification: notifications2.includes(\"success\"),\n                    openModal: modals.includes(\"success\")\n                });\n                return result;\n            } catch (e2) {\n                widgetController.setAction({\n                    name: \"transaction-canceled\",\n                    showNotification: notifications2.includes(\"error\"),\n                    openModal: modals.includes(\"error\")\n                });\n                if (e2 instanceof _tonconnect_sdk__WEBPACK_IMPORTED_MODULE_0__.TonConnectError) {\n                    throw e2;\n                } else {\n                    console.error(e2);\n                    throw new TonConnectUIError(\"Unhandled error:\" + e2);\n                }\n            } finally{\n                unsubscribe();\n            }\n        });\n    }\n    connectEmbeddedWallet(embeddedWallet) {\n        return __async(this, null, function*() {\n            const connect = (parameters)=>{\n                setLastSelectedWalletInfo(embeddedWallet);\n                this.connector.connect({\n                    jsBridgeKey: embeddedWallet.jsBridgeKey\n                }, parameters);\n            };\n            const additionalRequest = appState.connectRequestParameters;\n            if ((additionalRequest == null ? void 0 : additionalRequest.state) === \"loading\") {\n                this.connectRequestParametersCallback = connect;\n            } else {\n                connect(additionalRequest == null ? void 0 : additionalRequest.value);\n            }\n            return yield this.waitForWalletConnection({\n                ignoreErrors: false\n            });\n        });\n    }\n    connectExternalWallet() {\n        return __async(this, null, function*() {\n            const abortController = new AbortController();\n            widgetController.openWalletsModal();\n            const unsubscribe = this.onModalStateChange((state)=>{\n                const { status, closeReason } = state;\n                if (status === \"opened\") {\n                    return;\n                }\n                unsubscribe();\n                if (closeReason === \"action-cancelled\") {\n                    abortController.abort();\n                }\n            });\n            return yield this.waitForWalletConnection({\n                ignoreErrors: true,\n                signal: abortController.signal\n            });\n        });\n    }\n    waitForWalletConnection(options) {\n        return __async(this, null, function*() {\n            return new Promise((resolve, reject)=>{\n                this.tracker.trackConnectionStarted();\n                const { ignoreErrors = false, signal = null } = options;\n                if (signal && signal.aborted) {\n                    this.tracker.trackConnectionError(\"Connection was cancelled\");\n                    return reject(new TonConnectUIError(\"Wallet was not connected\"));\n                }\n                const onStatusChangeHandler = (wallet)=>__async(this, null, function*() {\n                        if (!wallet) {\n                            this.tracker.trackConnectionError(\"Connection was cancelled\");\n                            if (ignoreErrors) {\n                                return;\n                            }\n                            unsubscribe();\n                            reject(new TonConnectUIError(\"Wallet was not connected\"));\n                        } else {\n                            this.tracker.trackConnectionCompleted(wallet);\n                            unsubscribe();\n                            resolve(wallet);\n                        }\n                    });\n                const onErrorsHandler = (reason)=>{\n                    this.tracker.trackConnectionError(reason.message);\n                    if (ignoreErrors) {\n                        return;\n                    }\n                    unsubscribe();\n                    reject(reason);\n                };\n                const unsubscribe = this.onStatusChange((wallet)=>onStatusChangeHandler(wallet), (reason)=>onErrorsHandler(reason));\n                if (signal) {\n                    signal.addEventListener(\"abort\", ()=>{\n                        unsubscribe();\n                        reject(new TonConnectUIError(\"Wallet was not connected\"));\n                    }, {\n                        once: true\n                    });\n                }\n            });\n        });\n    }\n    waitForSendTransaction(options, onRequestSent) {\n        return __async(this, null, function*() {\n            return new Promise((resolve, reject)=>{\n                const { transaction, signal } = options;\n                if (signal.aborted) {\n                    this.tracker.trackTransactionSigningFailed(this.wallet, transaction, \"Transaction was cancelled\");\n                    return reject(new TonConnectUIError(\"Transaction was not sent\"));\n                }\n                const onTransactionHandler = (transaction2)=>__async(this, null, function*() {\n                        resolve(transaction2);\n                    });\n                const onErrorsHandler = (reason)=>{\n                    reject(reason);\n                };\n                const onCanceledHandler = ()=>{\n                    this.tracker.trackTransactionSigningFailed(this.wallet, transaction, \"Transaction was cancelled\");\n                    reject(new TonConnectUIError(\"Transaction was not sent\"));\n                };\n                signal.addEventListener(\"abort\", onCanceledHandler, {\n                    once: true\n                });\n                this.connector.sendTransaction(transaction, {\n                    onRequestSent,\n                    signal\n                }).then((result)=>{\n                    signal.removeEventListener(\"abort\", onCanceledHandler);\n                    return onTransactionHandler(result);\n                }).catch((reason)=>{\n                    signal.removeEventListener(\"abort\", onCanceledHandler);\n                    return onErrorsHandler(reason);\n                });\n            });\n        });\n    }\n    onTransactionModalStateChange(onChange) {\n        return this.transactionModal.onStateChange(onChange);\n    }\n    subscribeToWalletChange() {\n        this.connector.onStatusChange((wallet)=>__async(this, null, function*() {\n                var _a2;\n                if (wallet) {\n                    yield this.updateWalletInfo(wallet);\n                    this.setPreferredWalletAppName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);\n                } else {\n                    this.walletInfoStorage.removeWalletInfo();\n                }\n            }));\n    }\n    setPreferredWalletAppName(value) {\n        this.preferredWalletStorage.setPreferredWalletAppName(value);\n        setAppState({\n            preferredWalletAppName: value\n        });\n    }\n    getSelectedWalletInfo(wallet) {\n        return __async(this, null, function*() {\n            let lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();\n            if (!lastSelectedWalletInfo2) {\n                return null;\n            }\n            let fullLastSelectedWalletInfo;\n            if (!(\"name\" in lastSelectedWalletInfo2)) {\n                const walletsList = applyWalletsListConfiguration((yield this.walletsList), appState.walletsListConfiguration);\n                const walletInfo = walletsList.find((item)=>eqWalletName(item, wallet.device.appName));\n                if (!walletInfo) {\n                    throw new TonConnectUIError(`Cannot find WalletInfo for the '${wallet.device.appName}' wallet`);\n                }\n                fullLastSelectedWalletInfo = __spreadValues(__spreadValues({}, walletInfo), lastSelectedWalletInfo2);\n            } else {\n                fullLastSelectedWalletInfo = lastSelectedWalletInfo2;\n            }\n            return fullLastSelectedWalletInfo;\n        });\n    }\n    updateWalletInfo(wallet) {\n        return __async(this, null, function*() {\n            const selectedWalletInfo = yield this.getSelectedWalletInfo(wallet);\n            if (selectedWalletInfo) {\n                this.walletInfo = selectedWalletInfo;\n                this.walletInfoStorage.setWalletInfo(selectedWalletInfo);\n                return;\n            }\n            const storedWalletInfo = this.walletInfoStorage.getWalletInfo();\n            if (storedWalletInfo) {\n                this.walletInfo = storedWalletInfo;\n                return;\n            }\n            this.walletInfo = (yield this.walletsList).find((walletInfo)=>eqWalletName(walletInfo, wallet.device.appName)) || null;\n        });\n    }\n    normalizeWidgetRoot(rootId) {\n        if (!rootId || !document.getElementById(rootId)) {\n            rootId = \"tc-widget-root\";\n            const rootElement = document.createElement(\"div\");\n            rootElement.id = rootId;\n            document.body.appendChild(rootElement);\n        }\n        return rootId;\n    }\n    checkButtonRootExist(buttonRootId) {\n        if (buttonRootId == null) {\n            return;\n        }\n        if (!document.getElementById(buttonRootId)) {\n            throw new TonConnectUIError(`${buttonRootId} element not found in the document.`);\n        }\n    }\n    getModalsAndNotificationsConfiguration(options) {\n        var _a2, _b2, _c2, _d2, _e2, _f2;\n        const allActions = [\n            \"before\",\n            \"success\",\n            \"error\"\n        ];\n        let notifications2 = allActions;\n        if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b2 = this.actionsConfiguration) == null ? void 0 : _b2.notifications) !== \"all\") {\n            notifications2 = this.actionsConfiguration.notifications;\n        }\n        if (options == null ? void 0 : options.notifications) {\n            if (options.notifications === \"all\") {\n                notifications2 = allActions;\n            } else {\n                notifications2 = options.notifications;\n            }\n        }\n        let modals = [\n            \"before\"\n        ];\n        if ((_c2 = this.actionsConfiguration) == null ? void 0 : _c2.modals) {\n            if (this.actionsConfiguration.modals === \"all\") {\n                modals = allActions;\n            } else {\n                modals = this.actionsConfiguration.modals;\n            }\n        }\n        if (options == null ? void 0 : options.modals) {\n            if (options.modals === \"all\") {\n                modals = allActions;\n            } else {\n                modals = options.modals;\n            }\n        }\n        const returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d2 = this.actionsConfiguration) == null ? void 0 : _d2.returnStrategy) || \"back\";\n        const twaReturnUrl = (options == null ? void 0 : options.twaReturnUrl) || ((_e2 = this.actionsConfiguration) == null ? void 0 : _e2.twaReturnUrl);\n        let skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_f2 = this.actionsConfiguration) == null ? void 0 : _f2.skipRedirectToWallet) || \"ios\";\n        if (isInTMA()) {\n            skipRedirectToWallet = \"never\";\n        }\n        return {\n            notifications: notifications2,\n            modals,\n            returnStrategy,\n            twaReturnUrl,\n            skipRedirectToWallet\n        };\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/ui/lib/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-eventsource/index.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-eventsource/index.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var eventsource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventsource */ \"(ssr)/./node_modules/eventsource/lib/eventsource.js\");\n\nif (!global.EventSource) {\n    global.EventSource = eventsource__WEBPACK_IMPORTED_MODULE_0__;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbmNvbm5lY3QvdWkvbm9kZV9tb2R1bGVzL0B0b25jb25uZWN0L2lzb21vcnBoaWMtZXZlbnRzb3VyY2UvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7O0FBQXNDO0FBRXRDLElBQUksQ0FBQ0MsT0FBT0QsV0FBVyxFQUFFO0lBQ3JCQyxPQUFPRCxXQUFXLEdBQUdBLHdDQUFXQTtBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbmNvbm5lY3QvdWkvbm9kZV9tb2R1bGVzL0B0b25jb25uZWN0L2lzb21vcnBoaWMtZXZlbnRzb3VyY2UvaW5kZXgubWpzP2E5YzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50U291cmNlIGZyb20gJ2V2ZW50c291cmNlJztcblxuaWYgKCFnbG9iYWwuRXZlbnRTb3VyY2UpIHtcbiAgICBnbG9iYWwuRXZlbnRTb3VyY2UgPSBFdmVudFNvdXJjZTtcbn1cbiJdLCJuYW1lcyI6WyJFdmVudFNvdXJjZSIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-eventsource/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-fetch/index.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-fetch/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\n\nfunction fetch(url, options) {\n    if (/^\\/\\//.test(url)) {\n        url = \"https:\" + url;\n    }\n    return node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].call(this, url, options);\n}\nif (!global.fetch) {\n    global.fetch = fetch;\n    global.Response = node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Response;\n    global.Headers = node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Headers;\n    global.Request = node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Request;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbmNvbm5lY3QvdWkvbm9kZV9tb2R1bGVzL0B0b25jb25uZWN0L2lzb21vcnBoaWMtZmV0Y2gvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7O0FBQW1DO0FBQ25DLFNBQVNDLE1BQU1DLEdBQUcsRUFBRUMsT0FBTztJQUN2QixJQUFJLFFBQVFDLElBQUksQ0FBQ0YsTUFBTTtRQUNuQkEsTUFBTSxXQUFXQTtJQUNyQjtJQUNBLE9BQU9GLGtEQUFTQSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFSCxLQUFLQztBQUNyQztBQUVBLElBQUksQ0FBQ0csT0FBT0wsS0FBSyxFQUFFO0lBQ2ZLLE9BQU9MLEtBQUssR0FBR0E7SUFDZkssT0FBT0MsUUFBUSxHQUFHUCwyREFBa0I7SUFDcENNLE9BQU9FLE9BQU8sR0FBR1IsMERBQWlCO0lBQ2xDTSxPQUFPRyxPQUFPLEdBQUdULDBEQUFpQjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbmNvbm5lY3QvdWkvbm9kZV9tb2R1bGVzL0B0b25jb25uZWN0L2lzb21vcnBoaWMtZmV0Y2gvaW5kZXgubWpzPzc5MGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlYWxGZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmZ1bmN0aW9uIGZldGNoKHVybCwgb3B0aW9ucykge1xuICAgIGlmICgvXlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgICAgIHVybCA9ICdodHRwczonICsgdXJsO1xuICAgIH1cbiAgICByZXR1cm4gcmVhbEZldGNoLmNhbGwodGhpcywgdXJsLCBvcHRpb25zKTtcbn1cblxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcbiAgICBnbG9iYWwuZmV0Y2ggPSBmZXRjaDtcbiAgICBnbG9iYWwuUmVzcG9uc2UgPSByZWFsRmV0Y2guUmVzcG9uc2U7XG4gICAgZ2xvYmFsLkhlYWRlcnMgPSByZWFsRmV0Y2guSGVhZGVycztcbiAgICBnbG9iYWwuUmVxdWVzdCA9IHJlYWxGZXRjaC5SZXF1ZXN0O1xufVxuIl0sIm5hbWVzIjpbInJlYWxGZXRjaCIsImZldGNoIiwidXJsIiwib3B0aW9ucyIsInRlc3QiLCJjYWxsIiwiZ2xvYmFsIiwiUmVzcG9uc2UiLCJIZWFkZXJzIiwiUmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-fetch/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/sdk/lib/esm/index.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@tonconnect/ui/node_modules/@tonconnect/sdk/lib/esm/index.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   BrowserEventDispatcher: () => (/* binding */ BrowserEventDispatcher),\n/* harmony export */   CHAIN: () => (/* reexport safe */ _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CHAIN),\n/* harmony export */   CONNECT_EVENT_ERROR_CODES: () => (/* reexport safe */ _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES),\n/* harmony export */   CONNECT_ITEM_ERROR_CODES: () => (/* reexport safe */ _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_ITEM_ERROR_CODES),\n/* harmony export */   FetchWalletsError: () => (/* binding */ FetchWalletsError),\n/* harmony export */   LocalstorageNotFoundError: () => (/* binding */ LocalstorageNotFoundError),\n/* harmony export */   ParseHexError: () => (/* binding */ ParseHexError),\n/* harmony export */   SEND_TRANSACTION_ERROR_CODES: () => (/* reexport safe */ _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES),\n/* harmony export */   TonConnect: () => (/* binding */ TonConnect),\n/* harmony export */   TonConnectError: () => (/* binding */ TonConnectError),\n/* harmony export */   UnknownAppError: () => (/* binding */ UnknownAppError),\n/* harmony export */   UnknownError: () => (/* binding */ UnknownError),\n/* harmony export */   UserRejectsError: () => (/* binding */ UserRejectsError),\n/* harmony export */   WalletAlreadyConnectedError: () => (/* binding */ WalletAlreadyConnectedError),\n/* harmony export */   WalletMissingRequiredFeaturesError: () => (/* binding */ WalletMissingRequiredFeaturesError),\n/* harmony export */   WalletNotConnectedError: () => (/* binding */ WalletNotConnectedError),\n/* harmony export */   WalletNotInjectedError: () => (/* binding */ WalletNotInjectedError),\n/* harmony export */   WalletNotSupportFeatureError: () => (/* binding */ WalletNotSupportFeatureError),\n/* harmony export */   WalletsListManager: () => (/* binding */ WalletsListManager),\n/* harmony export */   WrongAddressError: () => (/* binding */ WrongAddressError),\n/* harmony export */   checkRequiredWalletFeatures: () => (/* binding */ checkRequiredWalletFeatures),\n/* harmony export */   createConnectionCompletedEvent: () => (/* binding */ createConnectionCompletedEvent),\n/* harmony export */   createConnectionErrorEvent: () => (/* binding */ createConnectionErrorEvent),\n/* harmony export */   createConnectionRestoringCompletedEvent: () => (/* binding */ createConnectionRestoringCompletedEvent),\n/* harmony export */   createConnectionRestoringErrorEvent: () => (/* binding */ createConnectionRestoringErrorEvent),\n/* harmony export */   createConnectionRestoringStartedEvent: () => (/* binding */ createConnectionRestoringStartedEvent),\n/* harmony export */   createConnectionStartedEvent: () => (/* binding */ createConnectionStartedEvent),\n/* harmony export */   createDisconnectionEvent: () => (/* binding */ createDisconnectionEvent),\n/* harmony export */   createRequestVersionEvent: () => (/* binding */ createRequestVersionEvent),\n/* harmony export */   createResponseVersionEvent: () => (/* binding */ createResponseVersionEvent),\n/* harmony export */   createTransactionSentForSignatureEvent: () => (/* binding */ createTransactionSentForSignatureEvent),\n/* harmony export */   createTransactionSignedEvent: () => (/* binding */ createTransactionSignedEvent),\n/* harmony export */   createTransactionSigningFailedEvent: () => (/* binding */ createTransactionSigningFailedEvent),\n/* harmony export */   createVersionInfo: () => (/* binding */ createVersionInfo),\n/* harmony export */   \"default\": () => (/* binding */ TonConnect),\n/* harmony export */   encodeTelegramUrlParameters: () => (/* binding */ encodeTelegramUrlParameters),\n/* harmony export */   isTelegramUrl: () => (/* binding */ isTelegramUrl),\n/* harmony export */   isWalletInfoCurrentlyEmbedded: () => (/* binding */ isWalletInfoCurrentlyEmbedded),\n/* harmony export */   isWalletInfoCurrentlyInjected: () => (/* binding */ isWalletInfoCurrentlyInjected),\n/* harmony export */   isWalletInfoInjectable: () => (/* binding */ isWalletInfoInjectable),\n/* harmony export */   isWalletInfoInjected: () => (/* binding */ isWalletInfoInjected),\n/* harmony export */   isWalletInfoRemote: () => (/* binding */ isWalletInfoRemote),\n/* harmony export */   toUserFriendlyAddress: () => (/* binding */ toUserFriendlyAddress)\n/* harmony export */ });\n/* harmony import */ var _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tonconnect/protocol */ \"(ssr)/./node_modules/@tonconnect/protocol/lib/esm/index.mjs\");\n/* harmony import */ var _tonconnect_isomorphic_eventsource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tonconnect/isomorphic-eventsource */ \"(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-eventsource/index.mjs\");\n/* harmony import */ var _tonconnect_isomorphic_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tonconnect/isomorphic-fetch */ \"(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/isomorphic-fetch/index.mjs\");\n\n\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n/**\n * Base class for TonConnect errors. You can check if the error was triggered by the @tonconnect/sdk using `err instanceof TonConnectError`.\n */ class TonConnectError extends Error {\n    constructor(message, options){\n        super(message, options);\n        this.message = `${TonConnectError.prefix} ${this.constructor.name}${this.info ? \": \" + this.info : \"\"}${message ? \"\\n\" + message : \"\"}`;\n        Object.setPrototypeOf(this, TonConnectError.prototype);\n    }\n    get info() {\n        return \"\";\n    }\n}\nTonConnectError.prefix = \"[TON_CONNECT_SDK_ERROR]\";\n/**\n * Thrown when passed DappMetadata is in incorrect format.\n */ class DappMetadataError extends TonConnectError {\n    get info() {\n        return \"Passed DappMetadata is in incorrect format.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, DappMetadataError.prototype);\n    }\n}\n/**\n * Thrown when passed manifest contains errors.\n */ class ManifestContentErrorError extends TonConnectError {\n    get info() {\n        return \"Passed `tonconnect-manifest.json` contains errors. Check format of your manifest. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, ManifestContentErrorError.prototype);\n    }\n}\n/**\n * Thrown when wallet can't get manifest by passed manifestUrl.\n */ class ManifestNotFoundError extends TonConnectError {\n    get info() {\n        return \"Manifest not found. Make sure you added `tonconnect-manifest.json` to the root of your app or passed correct manifestUrl. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, ManifestNotFoundError.prototype);\n    }\n}\n/**\n * Thrown when wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.\n */ class WalletAlreadyConnectedError extends TonConnectError {\n    get info() {\n        return \"Wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, WalletAlreadyConnectedError.prototype);\n    }\n}\n/**\n * Thrown when send transaction or other protocol methods called while wallet is not connected.\n */ class WalletNotConnectedError extends TonConnectError {\n    get info() {\n        return \"Send transaction or other protocol methods called while wallet is not connected.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, WalletNotConnectedError.prototype);\n    }\n}\n/**\n * Thrown when there is an attempt to connect to the injected wallet while it is not exists in the webpage.\n */ class WalletNotInjectedError extends TonConnectError {\n    get info() {\n        return \"There is an attempt to connect to the injected wallet while it is not exists in the webpage.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, WalletNotInjectedError.prototype);\n    }\n}\n/**\n * Thrown when wallet doesn't support requested feature method.\n */ class WalletNotSupportFeatureError extends TonConnectError {\n    get info() {\n        return \"Wallet doesn't support requested feature method.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, WalletNotSupportFeatureError.prototype);\n    }\n}\n/**\n * Thrown when wallet can't get manifest by passed manifestUrl.\n */ class WalletMissingRequiredFeaturesError extends TonConnectError {\n    get info() {\n        return \"Missing required features. You need to update your wallet.\";\n    }\n    constructor(message, options){\n        super(message, options);\n        Object.setPrototypeOf(this, WalletMissingRequiredFeaturesError.prototype);\n    }\n}\nfunction isWalletConnectionSourceJS(value) {\n    return \"jsBridgeKey\" in value;\n}\n/**\n * Thrown when user rejects the action in the wallet.\n */ class UserRejectsError extends TonConnectError {\n    get info() {\n        return \"User rejects the action in the wallet.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, UserRejectsError.prototype);\n    }\n}\n/**\n * Thrown when request to the wallet contains errors.\n */ class BadRequestError extends TonConnectError {\n    get info() {\n        return \"Request to the wallet contains errors.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, BadRequestError.prototype);\n    }\n}\n/**\n * Thrown when app tries to send rpc request to the injected wallet while not connected.\n */ class UnknownAppError extends TonConnectError {\n    get info() {\n        return \"App tries to send rpc request to the injected wallet while not connected.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, UnknownAppError.prototype);\n    }\n}\n/**\n * Thrown when `Storage` was not specified in the `DappMetadata` and default `localStorage` was not detected in the Node.js environment.\n */ class LocalstorageNotFoundError extends TonConnectError {\n    get info() {\n        return \"Storage was not specified in the `DappMetadata` and default `localStorage` was not detected in the environment.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, LocalstorageNotFoundError.prototype);\n    }\n}\n/**\n * Thrown when an error occurred while fetching the wallets list.\n */ class FetchWalletsError extends TonConnectError {\n    get info() {\n        return \"An error occurred while fetching the wallets list.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, FetchWalletsError.prototype);\n    }\n}\n/**\n * Thrown when passed address is in incorrect format.\n */ class WrongAddressError extends TonConnectError {\n    get info() {\n        return \"Passed address is in incorrect format.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, WrongAddressError.prototype);\n    }\n}\n/**\n * Thrown when passed hex is in incorrect format.\n */ class ParseHexError extends TonConnectError {\n    get info() {\n        return \"Passed hex is in incorrect format.\";\n    }\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, ParseHexError.prototype);\n    }\n}\n/**\n * Unhanded unknown error.\n */ class UnknownError extends TonConnectError {\n    constructor(...args){\n        super(...args);\n        Object.setPrototypeOf(this, UnknownError.prototype);\n    }\n}\nconst connectEventErrorsCodes = {\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR]: ManifestNotFoundError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR]: ManifestContentErrorError\n};\nclass ConnectErrorsParser {\n    parseError(error) {\n        let ErrorConstructor = UnknownError;\n        if (error.code in connectEventErrorsCodes) {\n            ErrorConstructor = connectEventErrorsCodes[error.code] || UnknownError;\n        }\n        return new ErrorConstructor(error.message);\n    }\n}\nconst connectErrorsParser = new ConnectErrorsParser();\nclass RpcParser {\n    isError(response) {\n        return \"error\" in response;\n    }\n}\nconst sendTransactionErrors = {\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,\n    [_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError\n};\nclass SendTransactionParser extends RpcParser {\n    convertToRpcRequest(request) {\n        return {\n            method: \"sendTransaction\",\n            params: [\n                JSON.stringify(request)\n            ]\n        };\n    }\n    parseAndThrowError(response) {\n        let ErrorConstructor = UnknownError;\n        if (response.error.code in sendTransactionErrors) {\n            ErrorConstructor = sendTransactionErrors[response.error.code] || UnknownError;\n        }\n        throw new ErrorConstructor(response.error.message);\n    }\n    convertFromRpcResponse(rpcResponse) {\n        return {\n            boc: rpcResponse.result\n        };\n    }\n}\nconst sendTransactionParser = new SendTransactionParser();\nclass HttpBridgeGatewayStorage {\n    constructor(storage, bridgeUrl){\n        this.storage = storage;\n        this.storeKey = \"ton-connect-storage_http-bridge-gateway::\" + bridgeUrl;\n    }\n    storeLastEventId(lastEventId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.storage.setItem(this.storeKey, lastEventId);\n        });\n    }\n    removeLastEventId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.storage.removeItem(this.storeKey);\n        });\n    }\n    getLastEventId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const stored = yield this.storage.getItem(this.storeKey);\n            if (!stored) {\n                return null;\n            }\n            return stored;\n        });\n    }\n}\nfunction removeUrlLastSlash(url) {\n    if (url.slice(-1) === \"/\") {\n        return url.slice(0, -1);\n    }\n    return url;\n}\nfunction addPathToUrl(url, path) {\n    return removeUrlLastSlash(url) + \"/\" + path;\n}\nfunction isTelegramUrl(link) {\n    if (!link) {\n        return false;\n    }\n    const url = new URL(link);\n    return url.protocol === \"tg:\" || url.hostname === \"t.me\";\n}\nfunction encodeTelegramUrlParameters(parameters) {\n    return parameters.replaceAll(\".\", \"%2E\").replaceAll(\"-\", \"%2D\").replaceAll(\"_\", \"%5F\").replaceAll(\"&\", \"-\").replaceAll(\"=\", \"__\").replaceAll(\"%\", \"--\");\n}\n/**\n * Delays the execution of code for a specified number of milliseconds.\n * @param {number} timeout - The number of milliseconds to delay the execution.\n * @param {DelayOptions} [options] - Optional configuration options for the delay.\n * @return {Promise<void>} - A promise that resolves after the specified delay, or rejects if the delay is aborted.\n */ function delay(timeout, options) {\n    return __awaiter(this, void 0, void 0, function*() {\n        return new Promise((resolve, reject)=>{\n            var _a, _b;\n            if ((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                reject(new TonConnectError(\"Delay aborted\"));\n                return;\n            }\n            const timeoutId = setTimeout(()=>resolve(), timeout);\n            (_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.addEventListener(\"abort\", ()=>{\n                clearTimeout(timeoutId);\n                reject(new TonConnectError(\"Delay aborted\"));\n            });\n        });\n    });\n}\n/**\n * Creates an AbortController instance with an optional AbortSignal.\n *\n * @param {AbortSignal} [signal] - An optional AbortSignal to use for aborting the controller.\n * @returns {AbortController} - An instance of AbortController.\n */ function createAbortController(signal) {\n    const abortController = new AbortController();\n    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {\n        abortController.abort();\n    } else {\n        signal === null || signal === void 0 ? void 0 : signal.addEventListener(\"abort\", ()=>abortController.abort(), {\n            once: true\n        });\n    }\n    return abortController;\n}\n/**\n * Function to call ton api until we get response.\n * Because ton network is pretty unstable we need to make sure response is final.\n * @param {T} fn - function to call\n * @param {CallForSuccessOptions} [options] - optional configuration options\n */ function callForSuccess(fn, options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function*() {\n        const attempts = (_a = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a !== void 0 ? _a : 10;\n        const delayMs = (_b = options === null || options === void 0 ? void 0 : options.delayMs) !== null && _b !== void 0 ? _b : 200;\n        const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n        if (typeof fn !== \"function\") {\n            throw new TonConnectError(`Expected a function, got ${typeof fn}`);\n        }\n        let i = 0;\n        let lastError;\n        while(i < attempts){\n            if (abortController.signal.aborted) {\n                throw new TonConnectError(`Aborted after attempts ${i}`);\n            }\n            try {\n                return yield fn({\n                    signal: abortController.signal\n                });\n            } catch (err) {\n                lastError = err;\n                i++;\n                if (i < attempts) {\n                    yield delay(delayMs);\n                }\n            }\n        }\n        throw lastError;\n    });\n}\nfunction logDebug(...args) {\n    {\n        try {\n            console.debug(\"[TON_CONNECT_SDK]\", ...args);\n        } catch (_a) {}\n    }\n}\nfunction logError(...args) {\n    {\n        try {\n            console.error(\"[TON_CONNECT_SDK]\", ...args);\n        } catch (_a) {}\n    }\n}\nfunction logWarning(...args) {\n    {\n        try {\n            console.warn(\"[TON_CONNECT_SDK]\", ...args);\n        } catch (_a) {}\n    }\n}\n/**\n * Create a resource.\n *\n * @template T - The type of the resource.\n * @template Args - The type of the arguments for creating the resource.\n *\n * @param {(...args: Args) => Promise<T>} createFn - A function that creates the resource.\n * @param {(resource: T) => Promise<void>} [disposeFn] - An optional function that disposes the resource.\n */ function createResource(createFn, disposeFn) {\n    let currentResource = null;\n    let currentArgs = null;\n    let currentPromise = null;\n    let currentSignal = null;\n    let abortController = null;\n    // create a new resource\n    const create = (signal, ...args)=>__awaiter(this, void 0, void 0, function*() {\n            currentSignal = signal !== null && signal !== void 0 ? signal : null;\n            abortController === null || abortController === void 0 ? void 0 : abortController.abort();\n            abortController = createAbortController(signal);\n            if (abortController.signal.aborted) {\n                throw new TonConnectError(\"Resource creation was aborted\");\n            }\n            currentArgs = args !== null && args !== void 0 ? args : null;\n            const promise = createFn(abortController.signal, ...args);\n            currentPromise = promise;\n            const resource = yield promise;\n            if (currentPromise !== promise && resource !== currentResource) {\n                yield disposeFn(resource);\n                throw new TonConnectError(\"Resource creation was aborted by a new resource creation\");\n            }\n            currentResource = resource;\n            return currentResource;\n        });\n    // get the current resource\n    const current = ()=>{\n        return currentResource !== null && currentResource !== void 0 ? currentResource : null;\n    };\n    // dispose the current resource\n    const dispose = ()=>__awaiter(this, void 0, void 0, function*() {\n            try {\n                const resource = currentResource;\n                currentResource = null;\n                const promise = currentPromise;\n                currentPromise = null;\n                try {\n                    abortController === null || abortController === void 0 ? void 0 : abortController.abort();\n                } catch (e) {}\n                yield Promise.allSettled([\n                    resource ? disposeFn(resource) : Promise.resolve(),\n                    promise ? disposeFn((yield promise)) : Promise.resolve()\n                ]);\n            } catch (e) {}\n        });\n    // recreate the current resource\n    const recreate = (delayMs)=>__awaiter(this, void 0, void 0, function*() {\n            const resource = currentResource;\n            const promise = currentPromise;\n            const args = currentArgs;\n            const signal = currentSignal;\n            yield delay(delayMs);\n            if (resource === currentResource && promise === currentPromise && args === currentArgs && signal === currentSignal) {\n                return yield create(currentSignal, ...args !== null && args !== void 0 ? args : []);\n            }\n            throw new TonConnectError(\"Resource recreation was aborted by a new resource creation\");\n        });\n    return {\n        create,\n        current,\n        dispose,\n        recreate\n    };\n}\n/**\n * Executes a function and provides deferred behavior, allowing for a timeout and abort functionality.\n *\n * @param {Deferrable<T>} fn - The function to execute. It should return a promise that resolves with the desired result.\n * @param {DeferOptions} options - Optional configuration options for the defer behavior.\n * @returns {Promise<T>} - A promise that resolves with the result of the executed function, or rejects with an error if it times out or is aborted.\n */ function timeout(fn, options) {\n    const timeout = options === null || options === void 0 ? void 0 : options.timeout;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    const abortController = createAbortController(signal);\n    return new Promise((resolve, reject)=>__awaiter(this, void 0, void 0, function*() {\n            if (abortController.signal.aborted) {\n                reject(new TonConnectError(\"Operation aborted\"));\n                return;\n            }\n            let timeoutId;\n            if (typeof timeout !== \"undefined\") {\n                timeoutId = setTimeout(()=>{\n                    abortController.abort();\n                    reject(new TonConnectError(`Timeout after ${timeout}ms`));\n                }, timeout);\n            }\n            abortController.signal.addEventListener(\"abort\", ()=>{\n                clearTimeout(timeoutId);\n                reject(new TonConnectError(\"Operation aborted\"));\n            }, {\n                once: true\n            });\n            const deferOptions = {\n                timeout,\n                abort: abortController.signal\n            };\n            yield fn((...args)=>{\n                clearTimeout(timeoutId);\n                resolve(...args);\n            }, ()=>{\n                clearTimeout(timeoutId);\n                reject();\n            }, deferOptions);\n        }));\n}\nclass BridgeGateway {\n    constructor(storage, bridgeUrl, sessionId, listener, errorsListener){\n        this.bridgeUrl = bridgeUrl;\n        this.sessionId = sessionId;\n        this.listener = listener;\n        this.errorsListener = errorsListener;\n        this.ssePath = \"events\";\n        this.postPath = \"message\";\n        this.heartbeatMessage = \"heartbeat\";\n        this.defaultTtl = 300;\n        this.defaultReconnectDelay = 2000;\n        this.defaultResendDelay = 5000;\n        this.eventSource = createResource((signal, openingDeadlineMS)=>__awaiter(this, void 0, void 0, function*() {\n                const eventSourceConfig = {\n                    bridgeUrl: this.bridgeUrl,\n                    ssePath: this.ssePath,\n                    sessionId: this.sessionId,\n                    bridgeGatewayStorage: this.bridgeGatewayStorage,\n                    errorHandler: this.errorsHandler.bind(this),\n                    messageHandler: this.messagesHandler.bind(this),\n                    signal: signal,\n                    openingDeadlineMS: openingDeadlineMS\n                };\n                return yield createEventSource(eventSourceConfig);\n            }), (resource)=>__awaiter(this, void 0, void 0, function*() {\n                resource.close();\n            }));\n        this.bridgeGatewayStorage = new HttpBridgeGatewayStorage(storage, bridgeUrl);\n    }\n    get isReady() {\n        const eventSource = this.eventSource.current();\n        return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.OPEN;\n    }\n    get isClosed() {\n        const eventSource = this.eventSource.current();\n        return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) !== EventSource.OPEN;\n    }\n    get isConnecting() {\n        const eventSource = this.eventSource.current();\n        return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.CONNECTING;\n    }\n    registerSession(options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.eventSource.create(options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.openingDeadlineMS);\n        });\n    }\n    send(message, receiver, topic, ttlOrOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: remove deprecated method\n            const options = {};\n            if (typeof ttlOrOptions === \"number\") {\n                options.ttl = ttlOrOptions;\n            } else {\n                options.ttl = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.ttl;\n                options.signal = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.signal;\n                options.attempts = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.attempts;\n            }\n            const url = new URL(addPathToUrl(this.bridgeUrl, this.postPath));\n            url.searchParams.append(\"client_id\", this.sessionId);\n            url.searchParams.append(\"to\", receiver);\n            url.searchParams.append(\"ttl\", ((options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtl).toString());\n            url.searchParams.append(\"topic\", topic);\n            const body = _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.Base64.encode(message);\n            yield callForSuccess((options)=>__awaiter(this, void 0, void 0, function*() {\n                    const response = yield this.post(url, body, options.signal);\n                    if (!response.ok) {\n                        throw new TonConnectError(`Bridge send failed, status ${response.status}`);\n                    }\n                }), {\n                attempts: (_a = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a !== void 0 ? _a : Number.MAX_SAFE_INTEGER,\n                delayMs: this.defaultResendDelay,\n                signal: options === null || options === void 0 ? void 0 : options.signal\n            });\n        });\n    }\n    pause() {\n        this.eventSource.dispose().catch((e)=>logError(`Bridge pause failed, ${e}`));\n    }\n    unPause() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const RECREATE_WITHOUT_DELAY = 0;\n            yield this.eventSource.recreate(RECREATE_WITHOUT_DELAY);\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.eventSource.dispose().catch((e)=>logError(`Bridge close failed, ${e}`));\n        });\n    }\n    setListener(listener) {\n        this.listener = listener;\n    }\n    setErrorsListener(errorsListener) {\n        this.errorsListener = errorsListener;\n    }\n    post(url, body, signal) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const response = yield fetch(url, {\n                method: \"post\",\n                body: body,\n                signal: signal\n            });\n            if (!response.ok) {\n                throw new TonConnectError(`Bridge send failed, status ${response.status}`);\n            }\n            return response;\n        });\n    }\n    errorsHandler(eventSource, e) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.isConnecting) {\n                eventSource.close();\n                throw new TonConnectError(\"Bridge error, failed to connect\");\n            }\n            if (this.isReady) {\n                try {\n                    this.errorsListener(e);\n                } catch (e) {}\n                return;\n            }\n            if (this.isClosed) {\n                eventSource.close();\n                logDebug(`Bridge reconnecting, ${this.defaultReconnectDelay}ms delay`);\n                return yield this.eventSource.recreate(this.defaultReconnectDelay);\n            }\n            throw new TonConnectError(\"Bridge error, unknown state\");\n        });\n    }\n    messagesHandler(e) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (e.data === this.heartbeatMessage) {\n                return;\n            }\n            yield this.bridgeGatewayStorage.storeLastEventId(e.lastEventId);\n            if (this.isClosed) {\n                return;\n            }\n            let bridgeIncomingMessage;\n            try {\n                bridgeIncomingMessage = JSON.parse(e.data);\n            } catch (e) {\n                throw new TonConnectError(`Bridge message parse failed, message ${e.data}`);\n            }\n            this.listener(bridgeIncomingMessage);\n        });\n    }\n}\n/**\n * Creates an event source.\n * @param {CreateEventSourceConfig} config - Configuration for creating an event source.\n */ function createEventSource(config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        return yield timeout((resolve, reject, deferOptions)=>__awaiter(this, void 0, void 0, function*() {\n                var _a;\n                const abortController = createAbortController(deferOptions.signal);\n                const signal = abortController.signal;\n                if (signal.aborted) {\n                    reject(new TonConnectError(\"Bridge connection aborted\"));\n                    return;\n                }\n                const url = new URL(addPathToUrl(config.bridgeUrl, config.ssePath));\n                url.searchParams.append(\"client_id\", config.sessionId);\n                const lastEventId = yield config.bridgeGatewayStorage.getLastEventId();\n                if (lastEventId) {\n                    url.searchParams.append(\"last_event_id\", lastEventId);\n                }\n                if (signal.aborted) {\n                    reject(new TonConnectError(\"Bridge connection aborted\"));\n                    return;\n                }\n                const eventSource = new EventSource(url.toString());\n                eventSource.onerror = (reason)=>__awaiter(this, void 0, void 0, function*() {\n                        if (signal.aborted) {\n                            eventSource.close();\n                            reject(new TonConnectError(\"Bridge connection aborted\"));\n                            return;\n                        }\n                        try {\n                            const newInstance = yield config.errorHandler(eventSource, reason);\n                            if (newInstance !== eventSource) {\n                                eventSource.close();\n                            }\n                            if (newInstance && newInstance !== eventSource) {\n                                resolve(newInstance);\n                            }\n                        } catch (e) {\n                            eventSource.close();\n                            reject(e);\n                        }\n                    });\n                eventSource.onopen = ()=>{\n                    if (signal.aborted) {\n                        eventSource.close();\n                        reject(new TonConnectError(\"Bridge connection aborted\"));\n                        return;\n                    }\n                    resolve(eventSource);\n                };\n                eventSource.onmessage = (event)=>{\n                    if (signal.aborted) {\n                        eventSource.close();\n                        reject(new TonConnectError(\"Bridge connection aborted\"));\n                        return;\n                    }\n                    config.messageHandler(event);\n                };\n                (_a = config.signal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", ()=>{\n                    eventSource.close();\n                    reject(new TonConnectError(\"Bridge connection aborted\"));\n                });\n            }), {\n            timeout: config.openingDeadlineMS,\n            signal: config.signal\n        });\n    });\n}\nfunction isPendingConnectionHttp(connection) {\n    return !(\"connectEvent\" in connection);\n}\nclass BridgeConnectionStorage {\n    constructor(storage){\n        this.storage = storage;\n        this.storeKey = \"ton-connect-storage_bridge-connection\";\n    }\n    storeConnection(connection) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (connection.type === \"injected\") {\n                return this.storage.setItem(this.storeKey, JSON.stringify(connection));\n            }\n            if (!isPendingConnectionHttp(connection)) {\n                const rawSession = {\n                    sessionKeyPair: connection.session.sessionCrypto.stringifyKeypair(),\n                    walletPublicKey: connection.session.walletPublicKey,\n                    bridgeUrl: connection.session.bridgeUrl\n                };\n                const rawConnection = {\n                    type: \"http\",\n                    connectEvent: connection.connectEvent,\n                    session: rawSession,\n                    lastWalletEventId: connection.lastWalletEventId,\n                    nextRpcRequestId: connection.nextRpcRequestId\n                };\n                return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));\n            }\n            const rawConnection = {\n                type: \"http\",\n                connectionSource: connection.connectionSource,\n                sessionCrypto: connection.sessionCrypto.stringifyKeypair()\n            };\n            return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));\n        });\n    }\n    removeConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.storage.removeItem(this.storeKey);\n        });\n    }\n    getConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const stored = yield this.storage.getItem(this.storeKey);\n            if (!stored) {\n                return null;\n            }\n            const connection = JSON.parse(stored);\n            if (connection.type === \"injected\") {\n                return connection;\n            }\n            if (\"connectEvent\" in connection) {\n                const sessionCrypto = new _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SessionCrypto(connection.session.sessionKeyPair);\n                return {\n                    type: \"http\",\n                    connectEvent: connection.connectEvent,\n                    lastWalletEventId: connection.lastWalletEventId,\n                    nextRpcRequestId: connection.nextRpcRequestId,\n                    session: {\n                        sessionCrypto,\n                        bridgeUrl: connection.session.bridgeUrl,\n                        walletPublicKey: connection.session.walletPublicKey\n                    }\n                };\n            }\n            return {\n                type: \"http\",\n                sessionCrypto: new _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SessionCrypto(connection.sessionCrypto),\n                connectionSource: connection.connectionSource\n            };\n        });\n    }\n    getHttpConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (!connection) {\n                throw new TonConnectError(\"Trying to read HTTP connection source while nothing is stored\");\n            }\n            if (connection.type === \"injected\") {\n                throw new TonConnectError(\"Trying to read HTTP connection source while injected connection is stored\");\n            }\n            return connection;\n        });\n    }\n    getHttpPendingConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (!connection) {\n                throw new TonConnectError(\"Trying to read HTTP connection source while nothing is stored\");\n            }\n            if (connection.type === \"injected\") {\n                throw new TonConnectError(\"Trying to read HTTP connection source while injected connection is stored\");\n            }\n            if (!isPendingConnectionHttp(connection)) {\n                throw new TonConnectError(\"Trying to read HTTP-pending connection while http connection is stored\");\n            }\n            return connection;\n        });\n    }\n    getInjectedConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (!connection) {\n                throw new TonConnectError(\"Trying to read Injected bridge connection source while nothing is stored\");\n            }\n            if ((connection === null || connection === void 0 ? void 0 : connection.type) === \"http\") {\n                throw new TonConnectError(\"Trying to read Injected bridge connection source while HTTP connection is stored\");\n            }\n            return connection;\n        });\n    }\n    storedConnectionType() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const stored = yield this.storage.getItem(this.storeKey);\n            if (!stored) {\n                return null;\n            }\n            const connection = JSON.parse(stored);\n            return connection.type;\n        });\n    }\n    storeLastWalletEventId(id) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (connection && connection.type === \"http\" && !isPendingConnectionHttp(connection)) {\n                connection.lastWalletEventId = id;\n                return this.storeConnection(connection);\n            }\n        });\n    }\n    getLastWalletEventId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (connection && \"lastWalletEventId\" in connection) {\n                return connection.lastWalletEventId;\n            }\n            return undefined;\n        });\n    }\n    increaseNextRpcRequestId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (connection && \"nextRpcRequestId\" in connection) {\n                const lastId = connection.nextRpcRequestId || 0;\n                connection.nextRpcRequestId = lastId + 1;\n                return this.storeConnection(connection);\n            }\n        });\n    }\n    getNextRpcRequestId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const connection = yield this.getConnection();\n            if (connection && \"nextRpcRequestId\" in connection) {\n                return connection.nextRpcRequestId || 0;\n            }\n            return 0;\n        });\n    }\n}\nconst PROTOCOL_VERSION = 2;\nclass BridgeProvider {\n    constructor(storage, walletConnectionSource){\n        this.storage = storage;\n        this.walletConnectionSource = walletConnectionSource;\n        this.type = \"http\";\n        this.standardUniversalLink = \"tc://\";\n        this.pendingRequests = new Map();\n        this.session = null;\n        this.gateway = null;\n        this.pendingGateways = [];\n        this.listeners = [];\n        this.defaultOpeningDeadlineMS = 12000;\n        this.defaultRetryTimeoutMS = 2000;\n        this.connectionStorage = new BridgeConnectionStorage(storage);\n    }\n    static fromStorage(storage) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bridgeConnectionStorage = new BridgeConnectionStorage(storage);\n            const connection = yield bridgeConnectionStorage.getHttpConnection();\n            if (isPendingConnectionHttp(connection)) {\n                return new BridgeProvider(storage, connection.connectionSource);\n            }\n            return new BridgeProvider(storage, {\n                bridgeUrl: connection.session.bridgeUrl\n            });\n        });\n    }\n    connect(message, options) {\n        var _a;\n        const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n        (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        this.abortController = abortController;\n        this.closeGateways();\n        const sessionCrypto = new _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.SessionCrypto();\n        this.session = {\n            sessionCrypto,\n            bridgeUrl: \"bridgeUrl\" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : \"\"\n        };\n        this.connectionStorage.storeConnection({\n            type: \"http\",\n            connectionSource: this.walletConnectionSource,\n            sessionCrypto\n        }).then(()=>__awaiter(this, void 0, void 0, function*() {\n                if (abortController.signal.aborted) {\n                    return;\n                }\n                yield callForSuccess((_options)=>{\n                    var _a;\n                    return this.openGateways(sessionCrypto, {\n                        openingDeadlineMS: (_a = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a !== void 0 ? _a : this.defaultOpeningDeadlineMS,\n                        signal: _options === null || _options === void 0 ? void 0 : _options.signal\n                    });\n                }, {\n                    attempts: Number.MAX_SAFE_INTEGER,\n                    delayMs: this.defaultRetryTimeoutMS,\n                    signal: abortController.signal\n                });\n            }));\n        const universalLink = \"universalLink\" in this.walletConnectionSource && this.walletConnectionSource.universalLink ? this.walletConnectionSource.universalLink : this.standardUniversalLink;\n        return this.generateUniversalLink(universalLink, message);\n    }\n    restoreConnection(options) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function*() {\n            const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n            (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();\n            this.abortController = abortController;\n            if (abortController.signal.aborted) {\n                return;\n            }\n            this.closeGateways();\n            const storedConnection = yield this.connectionStorage.getHttpConnection();\n            if (!storedConnection) {\n                return;\n            }\n            if (abortController.signal.aborted) {\n                return;\n            }\n            const openingDeadlineMS = (_b = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _b !== void 0 ? _b : this.defaultOpeningDeadlineMS;\n            if (isPendingConnectionHttp(storedConnection)) {\n                this.session = {\n                    sessionCrypto: storedConnection.sessionCrypto,\n                    bridgeUrl: \"bridgeUrl\" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : \"\"\n                };\n                return yield this.openGateways(storedConnection.sessionCrypto, {\n                    openingDeadlineMS: openingDeadlineMS,\n                    signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal\n                });\n            }\n            if (Array.isArray(this.walletConnectionSource)) {\n                throw new TonConnectError(\"Internal error. Connection source is array while WalletConnectionSourceHTTP was expected.\");\n            }\n            this.session = storedConnection.session;\n            if (this.gateway) {\n                logDebug(\"Gateway is already opened, closing previous gateway\");\n                yield this.gateway.close();\n            }\n            this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, storedConnection.session.sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));\n            if (abortController.signal.aborted) {\n                return;\n            }\n            // notify listeners about stored connection\n            this.listeners.forEach((listener)=>listener(storedConnection.connectEvent));\n            // wait for the connection to be opened\n            try {\n                yield callForSuccess((options)=>this.gateway.registerSession({\n                        openingDeadlineMS: openingDeadlineMS,\n                        signal: options.signal\n                    }), {\n                    attempts: Number.MAX_SAFE_INTEGER,\n                    delayMs: this.defaultRetryTimeoutMS,\n                    signal: abortController.signal\n                });\n            } catch (e) {\n                yield this.disconnect({\n                    signal: abortController.signal\n                });\n                return;\n            }\n        });\n    }\n    sendRequest(request, optionsOrOnRequestSent) {\n        // TODO: remove deprecated method\n        const options = {};\n        if (typeof optionsOrOnRequestSent === \"function\") {\n            options.onRequestSent = optionsOrOnRequestSent;\n        } else {\n            options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;\n            options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;\n            options.attempts = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.attempts;\n        }\n        return new Promise((resolve, reject)=>__awaiter(this, void 0, void 0, function*() {\n                var _a;\n                if (!this.gateway || !this.session || !(\"walletPublicKey\" in this.session)) {\n                    throw new TonConnectError(\"Trying to send bridge request without session\");\n                }\n                const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();\n                yield this.connectionStorage.increaseNextRpcRequestId();\n                logDebug(\"Send http-bridge request:\", Object.assign(Object.assign({}, request), {\n                    id\n                }));\n                const encodedRequest = this.session.sessionCrypto.encrypt(JSON.stringify(Object.assign(Object.assign({}, request), {\n                    id\n                })), (0,_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.hexToByteArray)(this.session.walletPublicKey));\n                try {\n                    yield this.gateway.send(encodedRequest, this.session.walletPublicKey, request.method, {\n                        attempts: options === null || options === void 0 ? void 0 : options.attempts,\n                        signal: options === null || options === void 0 ? void 0 : options.signal\n                    });\n                    (_a = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a === void 0 ? void 0 : _a.call(options);\n                    this.pendingRequests.set(id.toString(), resolve);\n                } catch (e) {\n                    reject(e);\n                }\n            }));\n    }\n    closeConnection() {\n        this.closeGateways();\n        this.listeners = [];\n        this.session = null;\n        this.gateway = null;\n    }\n    disconnect(options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return new Promise((resolve)=>__awaiter(this, void 0, void 0, function*() {\n                    let called = false;\n                    let timeoutId = null;\n                    const onRequestSent = ()=>{\n                        if (!called) {\n                            called = true;\n                            this.removeBridgeAndSession().then(resolve);\n                        }\n                    };\n                    try {\n                        this.closeGateways();\n                        const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n                        timeoutId = setTimeout(()=>{\n                            abortController.abort();\n                        }, this.defaultOpeningDeadlineMS);\n                        yield this.sendRequest({\n                            method: \"disconnect\",\n                            params: []\n                        }, {\n                            onRequestSent: onRequestSent,\n                            signal: abortController.signal,\n                            attempts: 1\n                        });\n                    } catch (e) {\n                        logDebug(\"Disconnect error:\", e);\n                        if (!called) {\n                            this.removeBridgeAndSession().then(resolve);\n                        }\n                    } finally{\n                        if (timeoutId) {\n                            clearTimeout(timeoutId);\n                        }\n                        onRequestSent();\n                    }\n                }));\n        });\n    }\n    listen(callback) {\n        this.listeners.push(callback);\n        return ()=>this.listeners = this.listeners.filter((listener)=>listener !== callback);\n    }\n    pause() {\n        var _a;\n        (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.pause();\n        this.pendingGateways.forEach((bridge)=>bridge.pause());\n    }\n    unPause() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const promises = this.pendingGateways.map((bridge)=>bridge.unPause());\n            if (this.gateway) {\n                promises.push(this.gateway.unPause());\n            }\n            yield Promise.all(promises);\n        });\n    }\n    pendingGatewaysListener(gateway, bridgeUrl, bridgeIncomingMessage) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.pendingGateways.includes(gateway)) {\n                yield gateway.close();\n                return;\n            }\n            this.closeGateways({\n                except: gateway\n            });\n            if (this.gateway) {\n                logDebug(\"Gateway is already opened, closing previous gateway\");\n                yield this.gateway.close();\n            }\n            this.session.bridgeUrl = bridgeUrl;\n            this.gateway = gateway;\n            this.gateway.setErrorsListener(this.gatewayErrorsListener.bind(this));\n            this.gateway.setListener(this.gatewayListener.bind(this));\n            return this.gatewayListener(bridgeIncomingMessage);\n        });\n    }\n    gatewayListener(bridgeIncomingMessage) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const walletMessage = JSON.parse(this.session.sessionCrypto.decrypt(_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.Base64.decode(bridgeIncomingMessage.message).toUint8Array(), (0,_tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.hexToByteArray)(bridgeIncomingMessage.from)));\n            logDebug(\"Wallet message received:\", walletMessage);\n            if (!(\"event\" in walletMessage)) {\n                const id = walletMessage.id.toString();\n                const resolve = this.pendingRequests.get(id);\n                if (!resolve) {\n                    logDebug(`Response id ${id} doesn't match any request's id`);\n                    return;\n                }\n                resolve(walletMessage);\n                this.pendingRequests.delete(id);\n                return;\n            }\n            if (walletMessage.id !== undefined) {\n                const lastId = yield this.connectionStorage.getLastWalletEventId();\n                if (lastId !== undefined && walletMessage.id <= lastId) {\n                    logError(`Received event id (=${walletMessage.id}) must be greater than stored last wallet event id (=${lastId}) `);\n                    return;\n                }\n                if (walletMessage.event !== \"connect\") {\n                    yield this.connectionStorage.storeLastWalletEventId(walletMessage.id);\n                }\n            }\n            // `this.listeners` might be modified in the event handler\n            const listeners = this.listeners;\n            if (walletMessage.event === \"connect\") {\n                yield this.updateSession(walletMessage, bridgeIncomingMessage.from);\n            }\n            if (walletMessage.event === \"disconnect\") {\n                logDebug(`Removing bridge and session: received disconnect event`);\n                yield this.removeBridgeAndSession();\n            }\n            listeners.forEach((listener)=>listener(walletMessage));\n        });\n    }\n    gatewayErrorsListener(e) {\n        return __awaiter(this, void 0, void 0, function*() {\n            throw new TonConnectError(`Bridge error ${JSON.stringify(e)}`);\n        });\n    }\n    updateSession(connectEvent, walletPublicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.session = Object.assign(Object.assign({}, this.session), {\n                walletPublicKey\n            });\n            const tonAddrItem = connectEvent.payload.items.find((item)=>item.name === \"ton_addr\");\n            const connectEventToSave = Object.assign(Object.assign({}, connectEvent), {\n                payload: Object.assign(Object.assign({}, connectEvent.payload), {\n                    items: [\n                        tonAddrItem\n                    ]\n                })\n            });\n            yield this.connectionStorage.storeConnection({\n                type: \"http\",\n                session: this.session,\n                lastWalletEventId: connectEvent.id,\n                connectEvent: connectEventToSave,\n                nextRpcRequestId: 0\n            });\n        });\n    }\n    removeBridgeAndSession() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.closeConnection();\n            yield this.connectionStorage.removeConnection();\n        });\n    }\n    generateUniversalLink(universalLink, message) {\n        if (isTelegramUrl(universalLink)) {\n            return this.generateTGUniversalLink(universalLink, message);\n        }\n        return this.generateRegularUniversalLink(universalLink, message);\n    }\n    generateRegularUniversalLink(universalLink, message) {\n        const url = new URL(universalLink);\n        url.searchParams.append(\"v\", PROTOCOL_VERSION.toString());\n        url.searchParams.append(\"id\", this.session.sessionCrypto.sessionId);\n        url.searchParams.append(\"r\", JSON.stringify(message));\n        return url.toString();\n    }\n    generateTGUniversalLink(universalLink, message) {\n        const urlToWrap = this.generateRegularUniversalLink(\"about:blank\", message);\n        const linkParams = urlToWrap.split(\"?\")[1];\n        const startapp = \"tonconnect-\" + encodeTelegramUrlParameters(linkParams);\n        // TODO: Remove this line after all dApps and the wallets-list.json have been updated\n        const updatedUniversalLink = this.convertToDirectLink(universalLink);\n        const url = new URL(updatedUniversalLink);\n        url.searchParams.append(\"startapp\", startapp);\n        return url.toString();\n    }\n    // TODO: Remove this method after all dApps and the wallets-list.json have been updated\n    convertToDirectLink(universalLink) {\n        const url = new URL(universalLink);\n        if (url.searchParams.has(\"attach\")) {\n            url.searchParams.delete(\"attach\");\n            url.pathname += \"/start\";\n        }\n        return url.toString();\n    }\n    openGateways(sessionCrypto, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (Array.isArray(this.walletConnectionSource)) {\n                // close all gateways before opening new ones\n                this.pendingGateways.map((bridge)=>bridge.close().catch());\n                // open new gateways\n                this.pendingGateways = this.walletConnectionSource.map((source)=>{\n                    const gateway = new BridgeGateway(this.storage, source.bridgeUrl, sessionCrypto.sessionId, ()=>{}, ()=>{});\n                    gateway.setListener((message)=>this.pendingGatewaysListener(gateway, source.bridgeUrl, message));\n                    return gateway;\n                });\n                yield Promise.allSettled(this.pendingGateways.map((bridge)=>callForSuccess((_options)=>{\n                        var _a;\n                        if (!this.pendingGateways.some((item)=>item === bridge)) {\n                            return bridge.close();\n                        }\n                        return bridge.registerSession({\n                            openingDeadlineMS: (_a = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a !== void 0 ? _a : this.defaultOpeningDeadlineMS,\n                            signal: _options.signal\n                        });\n                    }, {\n                        attempts: Number.MAX_SAFE_INTEGER,\n                        delayMs: this.defaultRetryTimeoutMS,\n                        signal: options === null || options === void 0 ? void 0 : options.signal\n                    })));\n                return;\n            } else {\n                if (this.gateway) {\n                    logDebug(`Gateway is already opened, closing previous gateway`);\n                    yield this.gateway.close();\n                }\n                this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));\n                return yield this.gateway.registerSession({\n                    openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,\n                    signal: options === null || options === void 0 ? void 0 : options.signal\n                });\n            }\n        });\n    }\n    closeGateways(options) {\n        var _a;\n        (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.close();\n        this.pendingGateways.filter((item)=>item !== (options === null || options === void 0 ? void 0 : options.except)).forEach((bridge)=>bridge.close());\n        this.pendingGateways = [];\n    }\n}\nfunction hasProperty(value, propertyKey) {\n    return hasProperties(value, [\n        propertyKey\n    ]);\n}\nfunction hasProperties(value, propertyKeys) {\n    if (!value || typeof value !== \"object\") {\n        return false;\n    }\n    return propertyKeys.every((propertyKey)=>propertyKey in value);\n}\nfunction isJSBridgeWithMetadata(value) {\n    try {\n        if (!hasProperty(value, \"tonconnect\") || !hasProperty(value.tonconnect, \"walletInfo\")) {\n            return false;\n        }\n        return hasProperties(value.tonconnect.walletInfo, [\n            \"name\",\n            \"app_name\",\n            \"image\",\n            \"about_url\",\n            \"platforms\"\n        ]);\n    } catch (_a) {\n        return false;\n    }\n}\n/**\n * In memory storage like localStorage, but without persistence.\n * Uses as a fallback for localStorage in Safari's private mode.\n */ class InMemoryStorage {\n    constructor(){\n        this.storage = {};\n    }\n    static getInstance() {\n        if (!InMemoryStorage.instance) {\n            InMemoryStorage.instance = new InMemoryStorage();\n        }\n        return InMemoryStorage.instance;\n    }\n    get length() {\n        return Object.keys(this.storage).length;\n    }\n    clear() {\n        this.storage = {};\n    }\n    getItem(key) {\n        var _a;\n        return (_a = this.storage[key]) !== null && _a !== void 0 ? _a : null;\n    }\n    key(index) {\n        var _a;\n        const keys = Object.keys(this.storage);\n        if (index < 0 || index >= keys.length) {\n            return null;\n        }\n        return (_a = keys[index]) !== null && _a !== void 0 ? _a : null;\n    }\n    removeItem(key) {\n        delete this.storage[key];\n    }\n    setItem(key, value) {\n        this.storage[key] = value;\n    }\n}\nfunction getWindow() {\n    if (true) {\n        return undefined;\n    }\n    return window;\n}\n/**\n * The function try to get window keys, if it is not available it returns empty array.\n * As an example, for Safari's private mode it returns empty array, because the browser does not allow to get window keys.\n */ function tryGetWindowKeys() {\n    const window1 = getWindow();\n    if (!window1) {\n        return [];\n    }\n    try {\n        return Object.keys(window1);\n    } catch (_a) {\n        return [];\n    }\n}\nfunction getDocument() {\n    if (typeof document === \"undefined\") {\n        return undefined;\n    }\n    return document;\n}\nfunction getWebPageManifest() {\n    var _a;\n    const origin = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.location.origin;\n    if (origin) {\n        return origin + \"/tonconnect-manifest.json\";\n    }\n    return \"\";\n}\n/**\n * Returns `localStorage` if it is available. In Safari's private mode, it returns `InMemoryStorage`. In Node.js, it throws an error.\n */ function tryGetLocalStorage() {\n    if (isLocalStorageAvailable()) {\n        return localStorage;\n    }\n    if (isNodeJs()) {\n        throw new TonConnectError(\"`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector\");\n    }\n    return InMemoryStorage.getInstance();\n}\n/**\n * Checks if `localStorage` is available.\n */ function isLocalStorageAvailable() {\n    // We use a try/catch block because Safari's private mode throws an error when attempting to access localStorage.\n    try {\n        return typeof localStorage !== \"undefined\";\n    } catch (_a) {\n        return false;\n    }\n}\n/**\n * Checks if the environment is Node.js.\n */ function isNodeJs() {\n    return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n}\nclass InjectedProvider {\n    constructor(storage, injectedWalletKey){\n        this.injectedWalletKey = injectedWalletKey;\n        this.type = \"injected\";\n        this.unsubscribeCallback = null;\n        this.listenSubscriptions = false;\n        this.listeners = [];\n        const window1 = InjectedProvider.window;\n        if (!InjectedProvider.isWindowContainsWallet(window1, injectedWalletKey)) {\n            throw new WalletNotInjectedError();\n        }\n        this.connectionStorage = new BridgeConnectionStorage(storage);\n        this.injectedWallet = window1[injectedWalletKey].tonconnect;\n    }\n    static fromStorage(storage) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bridgeConnectionStorage = new BridgeConnectionStorage(storage);\n            const connection = yield bridgeConnectionStorage.getInjectedConnection();\n            return new InjectedProvider(storage, connection.jsBridgeKey);\n        });\n    }\n    static isWalletInjected(injectedWalletKey) {\n        return InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey);\n    }\n    static isInsideWalletBrowser(injectedWalletKey) {\n        if (InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey)) {\n            return this.window[injectedWalletKey].tonconnect.isWalletBrowser;\n        }\n        return false;\n    }\n    static getCurrentlyInjectedWallets() {\n        if (!this.window) {\n            return [];\n        }\n        const windowKeys = tryGetWindowKeys();\n        const wallets = windowKeys.filter(([_, value])=>isJSBridgeWithMetadata(value));\n        return wallets.map(([jsBridgeKey, wallet])=>({\n                name: wallet.tonconnect.walletInfo.name,\n                appName: wallet.tonconnect.walletInfo.app_name,\n                aboutUrl: wallet.tonconnect.walletInfo.about_url,\n                imageUrl: wallet.tonconnect.walletInfo.image,\n                tondns: wallet.tonconnect.walletInfo.tondns,\n                jsBridgeKey,\n                injected: true,\n                embedded: wallet.tonconnect.isWalletBrowser,\n                platforms: wallet.tonconnect.walletInfo.platforms,\n                features: wallet.tonconnect.walletInfo.features\n            }));\n    }\n    static isWindowContainsWallet(window1, injectedWalletKey) {\n        return !!window1 && injectedWalletKey in window1 && typeof window1[injectedWalletKey] === \"object\" && \"tonconnect\" in window1[injectedWalletKey];\n    }\n    connect(message) {\n        this._connect(PROTOCOL_VERSION, message);\n    }\n    restoreConnection() {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                logDebug(`Injected Provider restoring connection...`);\n                const connectEvent = yield this.injectedWallet.restoreConnection();\n                logDebug(\"Injected Provider restoring connection response\", connectEvent);\n                if (connectEvent.event === \"connect\") {\n                    this.makeSubscriptions();\n                    this.listeners.forEach((listener)=>listener(connectEvent));\n                } else {\n                    yield this.connectionStorage.removeConnection();\n                }\n            } catch (e) {\n                yield this.connectionStorage.removeConnection();\n                console.error(e);\n            }\n        });\n    }\n    closeConnection() {\n        if (this.listenSubscriptions) {\n            this.injectedWallet.disconnect();\n        }\n        this.closeAllListeners();\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return new Promise((resolve)=>{\n                const onRequestSent = ()=>{\n                    this.closeAllListeners();\n                    this.connectionStorage.removeConnection().then(resolve);\n                };\n                try {\n                    this.injectedWallet.disconnect();\n                    onRequestSent();\n                } catch (e) {\n                    logDebug(e);\n                    this.sendRequest({\n                        method: \"disconnect\",\n                        params: []\n                    }, onRequestSent);\n                }\n            });\n        });\n    }\n    closeAllListeners() {\n        var _a;\n        this.listenSubscriptions = false;\n        this.listeners = [];\n        (_a = this.unsubscribeCallback) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    listen(eventsCallback) {\n        this.listeners.push(eventsCallback);\n        return ()=>this.listeners = this.listeners.filter((listener)=>listener !== eventsCallback);\n    }\n    sendRequest(request, optionsOrOnRequestSent) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: remove deprecated method\n            const options = {};\n            if (typeof optionsOrOnRequestSent === \"function\") {\n                options.onRequestSent = optionsOrOnRequestSent;\n            } else {\n                options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;\n                options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;\n            }\n            const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();\n            yield this.connectionStorage.increaseNextRpcRequestId();\n            logDebug(\"Send injected-bridge request:\", Object.assign(Object.assign({}, request), {\n                id\n            }));\n            const result = this.injectedWallet.send(Object.assign(Object.assign({}, request), {\n                id\n            }));\n            result.then((response)=>logDebug(\"Wallet message received:\", response));\n            (_a = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a === void 0 ? void 0 : _a.call(options);\n            return result;\n        });\n    }\n    _connect(protocolVersion, message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                logDebug(`Injected Provider connect request: protocolVersion: ${protocolVersion}, message:`, message);\n                const connectEvent = yield this.injectedWallet.connect(protocolVersion, message);\n                logDebug(\"Injected Provider connect response:\", connectEvent);\n                if (connectEvent.event === \"connect\") {\n                    yield this.updateSession();\n                    this.makeSubscriptions();\n                }\n                this.listeners.forEach((listener)=>listener(connectEvent));\n            } catch (e) {\n                logDebug(\"Injected Provider connect error:\", e);\n                const connectEventError = {\n                    event: \"connect_error\",\n                    payload: {\n                        code: 0,\n                        message: e === null || e === void 0 ? void 0 : e.toString()\n                    }\n                };\n                this.listeners.forEach((listener)=>listener(connectEventError));\n            }\n        });\n    }\n    makeSubscriptions() {\n        this.listenSubscriptions = true;\n        this.unsubscribeCallback = this.injectedWallet.listen((e)=>{\n            logDebug(\"Wallet message received:\", e);\n            if (this.listenSubscriptions) {\n                this.listeners.forEach((listener)=>listener(e));\n            }\n            if (e.event === \"disconnect\") {\n                this.disconnect();\n            }\n        });\n    }\n    updateSession() {\n        return this.connectionStorage.storeConnection({\n            type: \"injected\",\n            jsBridgeKey: this.injectedWalletKey,\n            nextRpcRequestId: 0\n        });\n    }\n}\nInjectedProvider.window = getWindow();\n/**\n * Default storage to save protocol data, uses `localStorage` if it is available. In Safari's private mode, it uses `InMemoryStorage`. In Node.js, it throws an error.\n */ class DefaultStorage {\n    constructor(){\n        this.localStorage = tryGetLocalStorage();\n    }\n    getItem(key) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.localStorage.getItem(key);\n        });\n    }\n    removeItem(key) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.localStorage.removeItem(key);\n        });\n    }\n    setItem(key, value) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.localStorage.setItem(key, value);\n        });\n    }\n}\n/**\n * Checks if `WalletInfo` is `WalletInfoInjectable` and `WalletInfo` is injected to the current webpage (`walletInfo.injected === true`).\n * @param value WalletInfo to check.\n */ function isWalletInfoCurrentlyInjected(value) {\n    return isWalletInfoInjectable(value) && value.injected;\n}\n/**\n * Checks if `WalletInfo` is `WalletInfoInjectable` and dApp is opened inside this wallet's browser.\n * @param value WalletInfo to check.\n */ function isWalletInfoCurrentlyEmbedded(value) {\n    return isWalletInfoCurrentlyInjected(value) && value.embedded;\n}\n/**\n * Checks if `WalletInfo` is `WalletInfoInjected`, but doesn't check if it is injected to the page or not.\n * @param value WalletInfo to check.\n */ function isWalletInfoInjectable(value) {\n    return \"jsBridgeKey\" in value;\n}\n/**\n * Checks if `WalletInfo` is `WalletInfoRemote`.\n * @param value WalletInfo to check.\n */ function isWalletInfoRemote(value) {\n    return \"bridgeUrl\" in value;\n}\n/**\n * @deprecated use `isWalletInfoInjectable` or `isWalletInfoCurrentlyInjected` instead.\n * @param value WalletInfo to check.\n */ function isWalletInfoInjected(value) {\n    return \"jsBridgeKey\" in value;\n}\nconst FALLBACK_WALLETS_LIST = [\n    {\n        app_name: \"telegram-wallet\",\n        name: \"Wallet\",\n        image: \"https://wallet.tg/images/logo-288.png\",\n        about_url: \"https://wallet.tg/\",\n        universal_url: \"https://t.me/wallet?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://walletbot.me/tonconnect-bridge/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"tonkeeper\",\n        name: \"Tonkeeper\",\n        image: \"https://tonkeeper.com/assets/tonconnect-icon.png\",\n        tondns: \"tonkeeper.ton\",\n        about_url: \"https://tonkeeper.com\",\n        universal_url: \"https://app.tonkeeper.com/ton-connect\",\n        deepLink: \"tonkeeper-tc://\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://bridge.tonapi.io/bridge\"\n            },\n            {\n                type: \"js\",\n                key: \"tonkeeper\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"chrome\",\n            \"firefox\",\n            \"macos\"\n        ]\n    },\n    {\n        app_name: \"mytonwallet\",\n        name: \"MyTonWallet\",\n        image: \"https://static.mytonwallet.io/icon-256.png\",\n        about_url: \"https://mytonwallet.io\",\n        universal_url: \"https://connect.mytonwallet.org\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"mytonwallet\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://tonconnectbridge.mytonwallet.org/bridge/\"\n            }\n        ],\n        platforms: [\n            \"chrome\",\n            \"windows\",\n            \"macos\",\n            \"linux\",\n            \"ios\",\n            \"android\",\n            \"firefox\"\n        ]\n    },\n    {\n        app_name: \"tonhub\",\n        name: \"Tonhub\",\n        image: \"https://tonhub.com/tonconnect_logo.png\",\n        about_url: \"https://tonhub.com\",\n        universal_url: \"https://tonhub.com/ton-connect\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"tonhub\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://connect.tonhubapi.com/tonconnect\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\"\n        ]\n    },\n    {\n        app_name: \"bitgetTonWallet\",\n        name: \"Bitget Wallet\",\n        image: \"https://raw.githubusercontent.com/bitgetwallet/download/refs/heads/main/logo/png/bitget_wallet_logo_288_mini.png\",\n        about_url: \"https://web3.bitget.com\",\n        deepLink: \"bitkeep://\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"bitgetTonWallet\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://ton-connect-bridge.bgwapi.io/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"chrome\"\n        ],\n        universal_url: \"https://bkcode.vip/ton-connect\"\n    },\n    {\n        app_name: \"okxMiniWallet\",\n        name: \"OKX Mini Wallet\",\n        image: \"https://static.okx.com/cdn/assets/imgs/2411/8BE1A4A434D8F58A.png\",\n        about_url: \"https://www.okx.com/web3\",\n        universal_url: \"https://t.me/OKX_WALLET_BOT?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://www.okx.com/tonbridge/discover/rpc/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"binanceWeb3TonWallet\",\n        name: \"Binance Web3 Wallet\",\n        image: \"https://public.bnbstatic.com/static/binance-w3w/ton-provider/binancew3w.png\",\n        about_url: \"https://www.binance.com/en/web3wallet\",\n        deepLink: \"bnc://app.binance.com/cedefi/ton-connect\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"binancew3w\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://wallet.binance.com/tonbridge/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ],\n        universal_url: \"https://app.binance.com/cedefi/ton-connect\"\n    },\n    {\n        app_name: \"fintopio-tg\",\n        name: \"Fintopio\",\n        image: \"https://fintopio.com/tonconnect-icon.png\",\n        about_url: \"https://fintopio.com\",\n        universal_url: \"https://t.me/fintopio?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://wallet-bridge.fintopio.com/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"okxTonWallet\",\n        name: \"OKX Wallet\",\n        image: \"https://static.okx.com/cdn/assets/imgs/247/58E63FEA47A2B7D7.png\",\n        about_url: \"https://www.okx.com/web3\",\n        universal_url: \"https://www.okx.com/download?appendQuery=true&deeplink=okx://web3/wallet/tonconnect\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"okxTonWallet\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://www.okx.com/tonbridge/discover/rpc/bridge\"\n            }\n        ],\n        platforms: [\n            \"chrome\",\n            \"safari\",\n            \"firefox\",\n            \"ios\",\n            \"android\"\n        ]\n    },\n    {\n        app_name: \"hot\",\n        name: \"HOT\",\n        image: \"https://raw.githubusercontent.com/hot-dao/media/main/logo.png\",\n        about_url: \"https://hot-labs.org/\",\n        universal_url: \"https://t.me/herewalletbot?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://sse-bridge.hot-labs.org\"\n            },\n            {\n                type: \"js\",\n                key: \"hotWallet\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"bybitTonWallet\",\n        name: \"Bybit Wallet\",\n        image: \"https://raw.githubusercontent.com/bybit-web3/bybit-web3.github.io/main/docs/images/bybit-logo.png\",\n        about_url: \"https://www.bybit.com/web3\",\n        universal_url: \"https://app.bybit.com/ton-connect\",\n        deepLink: \"bybitapp://\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"bybitTonWallet\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://api-node.bybit.com/spot/api/web3/bridge/ton/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"chrome\"\n        ]\n    },\n    {\n        app_name: \"dewallet\",\n        name: \"DeWallet\",\n        image: \"https://raw.githubusercontent.com/delab-team/manifests-images/main/WalletAvatar.png\",\n        about_url: \"https://delabwallet.com\",\n        universal_url: \"https://t.me/dewallet?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://bridge.dewallet.pro/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"safepalwallet\",\n        name: \"SafePal\",\n        image: \"https://s.pvcliping.com/web/public_image/SafePal_x288.png\",\n        tondns: \"\",\n        about_url: \"https://www.safepal.com\",\n        universal_url: \"https://link.safepal.io/ton-connect\",\n        deepLink: \"safepal-tc://\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://ton-bridge.safepal.com/tonbridge/v1/bridge\"\n            },\n            {\n                type: \"js\",\n                key: \"safepalwallet\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"chrome\",\n            \"firefox\"\n        ]\n    },\n    {\n        app_name: \"GateWallet\",\n        name: \"GateWallet\",\n        image: \"https://img.gatedataimg.com/prd-ordinal-imgs/036f07bb8730716e/gateio-0925.png\",\n        about_url: \"https://www.gate.io/\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"gatetonwallet\"\n            },\n            {\n                type: \"sse\",\n                url: \"https://dapp.gateio.services/tonbridge_api/bridge/v1\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\"\n        ],\n        universal_url: \"https://gateio.go.link/gateio/web3?adj_t=1ff8khdw_1fu4ccc7\"\n    },\n    {\n        app_name: \"openmask\",\n        name: \"OpenMask\",\n        image: \"https://raw.githubusercontent.com/OpenProduct/openmask-extension/main/public/openmask-logo-288.png\",\n        about_url: \"https://www.openmask.app/\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"openmask\"\n            }\n        ],\n        platforms: [\n            \"chrome\"\n        ]\n    },\n    {\n        app_name: \"BitgetWeb3\",\n        name: \"BitgetWeb3\",\n        image: \"https://img.bitgetimg.com/image/third/1731638059795.png\",\n        about_url: \"​https://www.bitget.com\",\n        universal_url: \"https://t.me/BitgetOfficialBot?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://ton-connect-bridge.bgwapi.io/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"windows\",\n            \"macos\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"tobi\",\n        name: \"Tobi\",\n        image: \"https://app.tobiwallet.app/icons/logo-288.png\",\n        about_url: \"https://tobi.fun\",\n        universal_url: \"https://t.me/TobiCopilotBot?attach=wallet\",\n        bridge: [\n            {\n                type: \"sse\",\n                url: \"https://ton-bridge.tobiwallet.app/bridge\"\n            }\n        ],\n        platforms: [\n            \"ios\",\n            \"android\",\n            \"macos\",\n            \"windows\",\n            \"linux\"\n        ]\n    },\n    {\n        app_name: \"xtonwallet\",\n        name: \"XTONWallet\",\n        image: \"https://xtonwallet.com/assets/img/icon-256-back.png\",\n        about_url: \"https://xtonwallet.com\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"xtonwallet\"\n            }\n        ],\n        platforms: [\n            \"chrome\",\n            \"firefox\"\n        ]\n    },\n    {\n        app_name: \"tonwallet\",\n        name: \"TON Wallet\",\n        image: \"https://wallet.ton.org/assets/ui/qr-logo.png\",\n        about_url: \"https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd\",\n        bridge: [\n            {\n                type: \"js\",\n                key: \"tonwallet\"\n            }\n        ],\n        platforms: [\n            \"chrome\"\n        ]\n    }\n];\nclass WalletsListManager {\n    constructor(options){\n        var _a;\n        this.walletsListCache = null;\n        this.walletsListCacheCreationTimestamp = null;\n        this.walletsListSource = (_a = options === null || options === void 0 ? void 0 : options.walletsListSource) !== null && _a !== void 0 ? _a : \"https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets-v2.json\";\n        this.cacheTTLMs = options === null || options === void 0 ? void 0 : options.cacheTTLMs;\n    }\n    getWallets() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.cacheTTLMs && this.walletsListCacheCreationTimestamp && Date.now() > this.walletsListCacheCreationTimestamp + this.cacheTTLMs) {\n                this.walletsListCache = null;\n            }\n            if (!this.walletsListCache) {\n                this.walletsListCache = this.fetchWalletsList();\n                this.walletsListCache.then(()=>{\n                    this.walletsListCacheCreationTimestamp = Date.now();\n                }).catch(()=>{\n                    this.walletsListCache = null;\n                    this.walletsListCacheCreationTimestamp = null;\n                });\n            }\n            return this.walletsListCache;\n        });\n    }\n    getEmbeddedWallet() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const walletsList = yield this.getWallets();\n            const embeddedWallets = walletsList.filter(isWalletInfoCurrentlyEmbedded);\n            return embeddedWallets.length === 1 ? embeddedWallets[0] : null;\n        });\n    }\n    fetchWalletsList() {\n        return __awaiter(this, void 0, void 0, function*() {\n            let walletsList = [];\n            try {\n                const walletsResponse = yield fetch(this.walletsListSource);\n                walletsList = yield walletsResponse.json();\n                if (!Array.isArray(walletsList)) {\n                    throw new FetchWalletsError(\"Wrong wallets list format, wallets list must be an array.\");\n                }\n                const wrongFormatWallets = walletsList.filter((wallet)=>!this.isCorrectWalletConfigDTO(wallet));\n                if (wrongFormatWallets.length) {\n                    logError(`Wallet(s) ${wrongFormatWallets.map((wallet)=>(wallet === null || wallet === void 0 ? void 0 : wallet.name) || \"unknown\").join(\", \")} config format is wrong. They were removed from the wallets list.`);\n                    walletsList = walletsList.filter((wallet)=>this.isCorrectWalletConfigDTO(wallet));\n                }\n            } catch (e) {\n                logError(e);\n                walletsList = FALLBACK_WALLETS_LIST;\n            }\n            let currentlyInjectedWallets = [];\n            try {\n                currentlyInjectedWallets = InjectedProvider.getCurrentlyInjectedWallets();\n            } catch (e) {\n                logError(e);\n            }\n            return this.mergeWalletsLists(this.walletConfigDTOListToWalletConfigList(walletsList), currentlyInjectedWallets);\n        });\n    }\n    walletConfigDTOListToWalletConfigList(walletConfigDTO) {\n        return walletConfigDTO.map((walletConfigDTO)=>{\n            const walletConfig = {\n                name: walletConfigDTO.name,\n                appName: walletConfigDTO.app_name,\n                imageUrl: walletConfigDTO.image,\n                aboutUrl: walletConfigDTO.about_url,\n                tondns: walletConfigDTO.tondns,\n                platforms: walletConfigDTO.platforms,\n                features: walletConfigDTO.features\n            };\n            walletConfigDTO.bridge.forEach((bridge)=>{\n                if (bridge.type === \"sse\") {\n                    walletConfig.bridgeUrl = bridge.url;\n                    walletConfig.universalLink = walletConfigDTO.universal_url;\n                    walletConfig.deepLink = walletConfigDTO.deepLink;\n                }\n                if (bridge.type === \"js\") {\n                    const jsBridgeKey = bridge.key;\n                    walletConfig.jsBridgeKey = jsBridgeKey;\n                    walletConfig.injected = InjectedProvider.isWalletInjected(jsBridgeKey);\n                    walletConfig.embedded = InjectedProvider.isInsideWalletBrowser(jsBridgeKey);\n                }\n            });\n            return walletConfig;\n        });\n    }\n    mergeWalletsLists(list1, list2) {\n        const names = new Set(list1.concat(list2).map((item)=>item.name));\n        return [\n            ...names.values()\n        ].map((name)=>{\n            const list1Item = list1.find((item)=>item.name === name);\n            const list2Item = list2.find((item)=>item.name === name);\n            return Object.assign(Object.assign({}, list1Item && Object.assign({}, list1Item)), list2Item && Object.assign({}, list2Item));\n        });\n    }\n    // eslint-disable-next-line complexity\n    isCorrectWalletConfigDTO(value) {\n        if (!value || !(typeof value === \"object\")) {\n            return false;\n        }\n        const containsName = \"name\" in value;\n        const containsAppName = \"app_name\" in value;\n        const containsImage = \"image\" in value;\n        const containsAbout = \"about_url\" in value;\n        const containsPlatforms = \"platforms\" in value;\n        if (!containsName || !containsImage || !containsAbout || !containsPlatforms || !containsAppName) {\n            return false;\n        }\n        if (!value.platforms || !Array.isArray(value.platforms) || !value.platforms.length) {\n            return false;\n        }\n        if (!(\"bridge\" in value) || !Array.isArray(value.bridge) || !value.bridge.length) {\n            return false;\n        }\n        const bridge = value.bridge;\n        if (bridge.some((item)=>!item || typeof item !== \"object\" || !(\"type\" in item))) {\n            return false;\n        }\n        const sseBridge = bridge.find((item)=>item.type === \"sse\");\n        if (sseBridge) {\n            if (!(typeof sseBridge === \"object\" && \"url\" in sseBridge) || !sseBridge.url || !value.universal_url) {\n                return false;\n            }\n        }\n        const jsBridge = bridge.find((item)=>item.type === \"js\");\n        if (jsBridge) {\n            if (typeof jsBridge !== \"object\" || !(\"key\" in jsBridge) || !jsBridge.key) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction checkSendTransactionSupport(features, options) {\n    const supportsDeprecatedSendTransactionFeature = features.includes(\"SendTransaction\");\n    const sendTransactionFeature = findFeature(features, \"SendTransaction\");\n    if (!supportsDeprecatedSendTransactionFeature && !sendTransactionFeature) {\n        throw new WalletNotSupportFeatureError(\"Wallet doesn't support SendTransaction feature.\");\n    }\n    if (options.requireExtraCurrencies) {\n        if (!sendTransactionFeature || !sendTransactionFeature.extraCurrencySupported) {\n            throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Extra currencies support is required.`);\n        }\n    }\n    if (sendTransactionFeature && sendTransactionFeature.maxMessages !== undefined) {\n        if (sendTransactionFeature.maxMessages < options.requiredMessagesNumber) {\n            throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Max support messages number is ${sendTransactionFeature.maxMessages}, but ${options.requiredMessagesNumber} is required.`);\n        }\n        return;\n    }\n    logWarning(\"Connected wallet didn't provide information about max allowed messages in the SendTransaction request. Request may be rejected by the wallet.\");\n}\nfunction checkRequiredWalletFeatures(features, walletsRequiredFeatures) {\n    if (typeof walletsRequiredFeatures !== \"object\") {\n        return true;\n    }\n    const { sendTransaction } = walletsRequiredFeatures;\n    if (sendTransaction) {\n        const feature = findFeature(features, \"SendTransaction\");\n        if (!feature) {\n            return false;\n        }\n        if (!checkSendTransaction(feature, sendTransaction)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction findFeature(features, requiredFeatureName) {\n    return features.find((f)=>f && typeof f === \"object\" && f.name === requiredFeatureName);\n}\nfunction checkSendTransaction(feature, requiredFeature) {\n    const correctMessagesNumber = requiredFeature.minMessages === undefined || requiredFeature.minMessages <= feature.maxMessages;\n    const correctExtraCurrency = !requiredFeature.extraCurrencyRequired || feature.extraCurrencySupported;\n    return !!(correctMessagesNumber && correctExtraCurrency);\n}\n/**\n * Create a request version event.\n */ function createRequestVersionEvent() {\n    return {\n        type: \"request-version\"\n    };\n}\n/**\n * Create a response version event.\n * @param version\n */ function createResponseVersionEvent(version) {\n    return {\n        type: \"response-version\",\n        version: version\n    };\n}\n/**\n * Create a version info.\n * @param version\n */ function createVersionInfo(version) {\n    return {\n        ton_connect_sdk_lib: version.ton_connect_sdk_lib,\n        ton_connect_ui_lib: version.ton_connect_ui_lib\n    };\n}\nfunction createConnectionInfo(version, wallet) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const isTonProof = ((_a = wallet === null || wallet === void 0 ? void 0 : wallet.connectItems) === null || _a === void 0 ? void 0 : _a.tonProof) && \"proof\" in wallet.connectItems.tonProof;\n    const authType = isTonProof ? \"ton_proof\" : \"ton_addr\";\n    return {\n        wallet_address: (_c = (_b = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _b === void 0 ? void 0 : _b.address) !== null && _c !== void 0 ? _c : null,\n        wallet_type: (_d = wallet === null || wallet === void 0 ? void 0 : wallet.device.appName) !== null && _d !== void 0 ? _d : null,\n        wallet_version: (_e = wallet === null || wallet === void 0 ? void 0 : wallet.device.appVersion) !== null && _e !== void 0 ? _e : null,\n        auth_type: authType,\n        custom_data: Object.assign({\n            chain_id: (_g = (_f = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _f === void 0 ? void 0 : _f.chain) !== null && _g !== void 0 ? _g : null,\n            provider: (_h = wallet === null || wallet === void 0 ? void 0 : wallet.provider) !== null && _h !== void 0 ? _h : null\n        }, createVersionInfo(version))\n    };\n}\n/**\n * Create a connection init event.\n */ function createConnectionStartedEvent(version) {\n    return {\n        type: \"connection-started\",\n        custom_data: createVersionInfo(version)\n    };\n}\n/**\n * Create a connection completed event.\n * @param version\n * @param wallet\n */ function createConnectionCompletedEvent(version, wallet) {\n    return Object.assign({\n        type: \"connection-completed\",\n        is_success: true\n    }, createConnectionInfo(version, wallet));\n}\n/**\n * Create a connection error event.\n * @param version\n * @param error_message\n * @param errorCode\n */ function createConnectionErrorEvent(version, error_message, errorCode) {\n    return {\n        type: \"connection-error\",\n        is_success: false,\n        error_message: error_message,\n        error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null,\n        custom_data: createVersionInfo(version)\n    };\n}\n/**\n * Create a connection restoring started event.\n */ function createConnectionRestoringStartedEvent(version) {\n    return {\n        type: \"connection-restoring-started\",\n        custom_data: createVersionInfo(version)\n    };\n}\n/**\n * Create a connection restoring completed event.\n * @param version\n * @param wallet\n */ function createConnectionRestoringCompletedEvent(version, wallet) {\n    return Object.assign({\n        type: \"connection-restoring-completed\",\n        is_success: true\n    }, createConnectionInfo(version, wallet));\n}\n/**\n * Create a connection restoring error event.\n * @param version\n * @param errorMessage\n */ function createConnectionRestoringErrorEvent(version, errorMessage) {\n    return {\n        type: \"connection-restoring-error\",\n        is_success: false,\n        error_message: errorMessage,\n        custom_data: createVersionInfo(version)\n    };\n}\nfunction createTransactionInfo(wallet, transaction) {\n    var _a, _b, _c, _d;\n    return {\n        valid_until: (_a = String(transaction.validUntil)) !== null && _a !== void 0 ? _a : null,\n        from: (_d = (_b = transaction.from) !== null && _b !== void 0 ? _b : (_c = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _c === void 0 ? void 0 : _c.address) !== null && _d !== void 0 ? _d : null,\n        messages: transaction.messages.map((message)=>{\n            var _a, _b;\n            return {\n                address: (_a = message.address) !== null && _a !== void 0 ? _a : null,\n                amount: (_b = message.amount) !== null && _b !== void 0 ? _b : null\n            };\n        })\n    };\n}\n/**\n * Create a transaction init event.\n * @param version\n * @param wallet\n * @param transaction\n */ function createTransactionSentForSignatureEvent(version, wallet, transaction) {\n    return Object.assign(Object.assign({\n        type: \"transaction-sent-for-signature\"\n    }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));\n}\n/**\n * Create a transaction signed event.\n * @param version\n * @param wallet\n * @param transaction\n * @param signedTransaction\n */ function createTransactionSignedEvent(version, wallet, transaction, signedTransaction) {\n    return Object.assign(Object.assign({\n        type: \"transaction-signed\",\n        is_success: true,\n        signed_transaction: signedTransaction.boc\n    }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));\n}\n/**\n * Create a transaction error event.\n * @param version\n * @param wallet\n * @param transaction\n * @param errorMessage\n * @param errorCode\n */ function createTransactionSigningFailedEvent(version, wallet, transaction, errorMessage, errorCode) {\n    return Object.assign(Object.assign({\n        type: \"transaction-signing-failed\",\n        is_success: false,\n        error_message: errorMessage,\n        error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null\n    }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));\n}\n/**\n * Create a disconnect event.\n * @param version\n * @param wallet\n * @param scope\n * @returns\n */ function createDisconnectionEvent(version, wallet, scope) {\n    return Object.assign({\n        type: \"disconnection\",\n        scope: scope\n    }, createConnectionInfo(version, wallet));\n}\n/**\n * A concrete implementation of EventDispatcher that dispatches events to the browser window.\n */ class BrowserEventDispatcher {\n    constructor(){\n        /**\n         * The window object, possibly undefined in a server environment.\n         * @private\n         */ this.window = getWindow();\n    }\n    /**\n     * Dispatches an event with the given name and details to the browser window.\n     * @param eventName - The name of the event to dispatch.\n     * @param eventDetails - The details of the event to dispatch.\n     * @returns A promise that resolves when the event has been dispatched.\n     */ dispatchEvent(eventName, eventDetails) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const event = new CustomEvent(eventName, {\n                detail: eventDetails\n            });\n            (_a = this.window) === null || _a === void 0 ? void 0 : _a.dispatchEvent(event);\n        });\n    }\n    /**\n     * Adds an event listener to the browser window.\n     * @param eventName - The name of the event to listen for.\n     * @param listener - The listener to add.\n     * @param options - The options for the listener.\n     * @returns A function that removes the listener.\n     */ addEventListener(eventName, listener, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            (_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener(eventName, listener, options);\n            return ()=>{\n                var _a;\n                return (_a = this.window) === null || _a === void 0 ? void 0 : _a.removeEventListener(eventName, listener);\n            };\n        });\n    }\n}\n/**\n * Tracker for TonConnect user actions, such as transaction signing, connection, etc.\n *\n * List of events:\n *  * `connection-started`: when a user starts connecting a wallet.\n *  * `connection-completed`: when a user successfully connected a wallet.\n *  * `connection-error`: when a user cancels a connection or there is an error during the connection process.\n *  * `connection-restoring-started`: when the dApp starts restoring a connection.\n *  * `connection-restoring-completed`: when the dApp successfully restores a connection.\n *  * `connection-restoring-error`: when the dApp fails to restore a connection.\n *  * `disconnection`: when a user starts disconnecting a wallet.\n *  * `transaction-sent-for-signature`: when a user sends a transaction for signature.\n *  * `transaction-signed`: when a user successfully signs a transaction.\n *  * `transaction-signing-failed`: when a user cancels transaction signing or there is an error during the signing process.\n *\n * If you want to track user actions, you can subscribe to the window events with prefix `ton-connect-`:\n *\n * @example\n * window.addEventListener('ton-connect-transaction-sent-for-signature', (event) => {\n *    console.log('Transaction init', event.detail);\n * });\n *\n * @internal\n */ class TonConnectTracker {\n    constructor(options){\n        var _a;\n        /**\n         * Event prefix for user actions.\n         * @private\n         */ this.eventPrefix = \"ton-connect-\";\n        /**\n         * TonConnect UI version.\n         */ this.tonConnectUiVersion = null;\n        this.eventDispatcher = (_a = options === null || options === void 0 ? void 0 : options.eventDispatcher) !== null && _a !== void 0 ? _a : new BrowserEventDispatcher();\n        this.tonConnectSdkVersion = options.tonConnectSdkVersion;\n        this.init().catch();\n    }\n    /**\n     * Version of the library.\n     */ get version() {\n        return createVersionInfo({\n            ton_connect_sdk_lib: this.tonConnectSdkVersion,\n            ton_connect_ui_lib: this.tonConnectUiVersion\n        });\n    }\n    /**\n     * Called once when the tracker is created and request version other libraries.\n     */ init() {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                yield this.setRequestVersionHandler();\n                this.tonConnectUiVersion = yield this.requestTonConnectUiVersion();\n            } catch (e) {}\n        });\n    }\n    /**\n     * Set request version handler.\n     * @private\n     */ setRequestVersionHandler() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.eventDispatcher.addEventListener(\"ton-connect-request-version\", ()=>__awaiter(this, void 0, void 0, function*() {\n                    yield this.eventDispatcher.dispatchEvent(\"ton-connect-response-version\", createResponseVersionEvent(this.tonConnectSdkVersion));\n                }));\n        });\n    }\n    /**\n     * Request TonConnect UI version.\n     * @private\n     */ requestTonConnectUiVersion() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return new Promise((resolve, reject)=>__awaiter(this, void 0, void 0, function*() {\n                    try {\n                        yield this.eventDispatcher.addEventListener(\"ton-connect-ui-response-version\", (event)=>{\n                            resolve(event.detail.version);\n                        }, {\n                            once: true\n                        });\n                        yield this.eventDispatcher.dispatchEvent(\"ton-connect-ui-request-version\", createRequestVersionEvent());\n                    } catch (e) {\n                        reject(e);\n                    }\n                }));\n        });\n    }\n    /**\n     * Emit user action event to the window.\n     * @param eventDetails\n     * @private\n     */ dispatchUserActionEvent(eventDetails) {\n        try {\n            this.eventDispatcher.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();\n        } catch (e) {}\n    }\n    /**\n     * Track connection init event.\n     * @param args\n     */ trackConnectionStarted(...args) {\n        try {\n            const event = createConnectionStartedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track connection success event.\n     * @param args\n     */ trackConnectionCompleted(...args) {\n        try {\n            const event = createConnectionCompletedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track connection error event.\n     * @param args\n     */ trackConnectionError(...args) {\n        try {\n            const event = createConnectionErrorEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track connection restoring init event.\n     * @param args\n     */ trackConnectionRestoringStarted(...args) {\n        try {\n            const event = createConnectionRestoringStartedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track connection restoring success event.\n     * @param args\n     */ trackConnectionRestoringCompleted(...args) {\n        try {\n            const event = createConnectionRestoringCompletedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track connection restoring error event.\n     * @param args\n     */ trackConnectionRestoringError(...args) {\n        try {\n            const event = createConnectionRestoringErrorEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track disconnect event.\n     * @param args\n     */ trackDisconnection(...args) {\n        try {\n            const event = createDisconnectionEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track transaction init event.\n     * @param args\n     */ trackTransactionSentForSignature(...args) {\n        try {\n            const event = createTransactionSentForSignatureEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track transaction signed event.\n     * @param args\n     */ trackTransactionSigned(...args) {\n        try {\n            const event = createTransactionSignedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n    /**\n     * Track transaction error event.\n     * @param args\n     */ trackTransactionSigningFailed(...args) {\n        try {\n            const event = createTransactionSigningFailedEvent(this.version, ...args);\n            this.dispatchUserActionEvent(event);\n        } catch (e) {}\n    }\n}\nconst tonConnectSdkVersion = \"3.1.0\";\nclass TonConnect {\n    constructor(options){\n        this.walletsList = new WalletsListManager();\n        this._wallet = null;\n        this.provider = null;\n        this.statusChangeSubscriptions = [];\n        this.statusChangeErrorSubscriptions = [];\n        this.dappSettings = {\n            manifestUrl: (options === null || options === void 0 ? void 0 : options.manifestUrl) || getWebPageManifest(),\n            storage: (options === null || options === void 0 ? void 0 : options.storage) || new DefaultStorage()\n        };\n        this.walletsRequiredFeatures = options === null || options === void 0 ? void 0 : options.walletsRequiredFeatures;\n        this.walletsList = new WalletsListManager({\n            walletsListSource: options === null || options === void 0 ? void 0 : options.walletsListSource,\n            cacheTTLMs: options === null || options === void 0 ? void 0 : options.walletsListCacheTTLMs\n        });\n        this.tracker = new TonConnectTracker({\n            eventDispatcher: options === null || options === void 0 ? void 0 : options.eventDispatcher,\n            tonConnectSdkVersion: tonConnectSdkVersion\n        });\n        if (!this.dappSettings.manifestUrl) {\n            throw new DappMetadataError(\"Dapp tonconnect-manifest.json must be specified if window.location.origin is undefined. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest\");\n        }\n        this.bridgeConnectionStorage = new BridgeConnectionStorage(this.dappSettings.storage);\n        if (!(options === null || options === void 0 ? void 0 : options.disableAutoPauseConnection)) {\n            this.addWindowFocusAndBlurSubscriptions();\n        }\n    }\n    /**\n     * Returns available wallets list.\n     */ static getWallets() {\n        return this.walletsList.getWallets();\n    }\n    /**\n     * Shows if the wallet is connected right now.\n     */ get connected() {\n        return this._wallet !== null;\n    }\n    /**\n     * Current connected account or null if no account is connected.\n     */ get account() {\n        var _a;\n        return ((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.account) || null;\n    }\n    /**\n     * Current connected wallet or null if no account is connected.\n     */ get wallet() {\n        return this._wallet;\n    }\n    set wallet(value) {\n        this._wallet = value;\n        this.statusChangeSubscriptions.forEach((callback)=>callback(this._wallet));\n    }\n    /**\n     * Returns available wallets list.\n     */ getWallets() {\n        return this.walletsList.getWallets();\n    }\n    /**\n     * Allows to subscribe to connection status changes and handle connection errors.\n     * @param callback will be called after connections status changes with actual wallet or null.\n     * @param errorsHandler (optional) will be called with some instance of TonConnectError when connect error is received.\n     * @returns unsubscribe callback.\n     */ onStatusChange(callback, errorsHandler) {\n        this.statusChangeSubscriptions.push(callback);\n        if (errorsHandler) {\n            this.statusChangeErrorSubscriptions.push(errorsHandler);\n        }\n        return ()=>{\n            this.statusChangeSubscriptions = this.statusChangeSubscriptions.filter((item)=>item !== callback);\n            if (errorsHandler) {\n                this.statusChangeErrorSubscriptions = this.statusChangeErrorSubscriptions.filter((item)=>item !== errorsHandler);\n            }\n        };\n    }\n    connect(wallet, requestOrOptions) {\n        var _a, _b;\n        // TODO: remove deprecated method\n        const options = {};\n        if (typeof requestOrOptions === \"object\" && \"tonProof\" in requestOrOptions) {\n            options.request = requestOrOptions;\n        }\n        if (typeof requestOrOptions === \"object\" && (\"openingDeadlineMS\" in requestOrOptions || \"signal\" in requestOrOptions || \"request\" in requestOrOptions)) {\n            options.request = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.request;\n            options.openingDeadlineMS = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.openingDeadlineMS;\n            options.signal = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.signal;\n        }\n        if (this.connected) {\n            throw new WalletAlreadyConnectedError();\n        }\n        const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n        (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        this.abortController = abortController;\n        if (abortController.signal.aborted) {\n            throw new TonConnectError(\"Connection was aborted\");\n        }\n        (_b = this.provider) === null || _b === void 0 ? void 0 : _b.closeConnection();\n        this.provider = this.createProvider(wallet);\n        abortController.signal.addEventListener(\"abort\", ()=>{\n            var _a;\n            (_a = this.provider) === null || _a === void 0 ? void 0 : _a.closeConnection();\n            this.provider = null;\n        });\n        this.tracker.trackConnectionStarted();\n        return this.provider.connect(this.createConnectRequest(options === null || options === void 0 ? void 0 : options.request), {\n            openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,\n            signal: abortController.signal\n        });\n    }\n    /**\n     * Try to restore existing session and reconnect to the corresponding wallet. Call it immediately when your app is loaded.\n     */ restoreConnection(options) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function*() {\n            this.tracker.trackConnectionRestoringStarted();\n            const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n            (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();\n            this.abortController = abortController;\n            if (abortController.signal.aborted) {\n                this.tracker.trackConnectionRestoringError(\"Connection restoring was aborted\");\n                return;\n            }\n            // TODO: potentially race condition here\n            const [bridgeConnectionType, embeddedWallet] = yield Promise.all([\n                this.bridgeConnectionStorage.storedConnectionType(),\n                this.walletsList.getEmbeddedWallet()\n            ]);\n            if (abortController.signal.aborted) {\n                this.tracker.trackConnectionRestoringError(\"Connection restoring was aborted\");\n                return;\n            }\n            let provider = null;\n            try {\n                switch(bridgeConnectionType){\n                    case \"http\":\n                        provider = yield BridgeProvider.fromStorage(this.dappSettings.storage);\n                        break;\n                    case \"injected\":\n                        provider = yield InjectedProvider.fromStorage(this.dappSettings.storage);\n                        break;\n                    default:\n                        if (embeddedWallet) {\n                            provider = this.createProvider(embeddedWallet);\n                        } else {\n                            return;\n                        }\n                }\n            } catch (_c) {\n                this.tracker.trackConnectionRestoringError(\"Provider is not restored\");\n                yield this.bridgeConnectionStorage.removeConnection();\n                provider === null || provider === void 0 ? void 0 : provider.closeConnection();\n                provider = null;\n                return;\n            }\n            if (abortController.signal.aborted) {\n                provider === null || provider === void 0 ? void 0 : provider.closeConnection();\n                this.tracker.trackConnectionRestoringError(\"Connection restoring was aborted\");\n                return;\n            }\n            if (!provider) {\n                logError(\"Provider is not restored\");\n                this.tracker.trackConnectionRestoringError(\"Provider is not restored\");\n                return;\n            }\n            (_b = this.provider) === null || _b === void 0 ? void 0 : _b.closeConnection();\n            this.provider = provider;\n            provider.listen(this.walletEventsListener.bind(this));\n            const onAbortRestore = ()=>{\n                this.tracker.trackConnectionRestoringError(\"Connection restoring was aborted\");\n                provider === null || provider === void 0 ? void 0 : provider.closeConnection();\n                provider = null;\n            };\n            abortController.signal.addEventListener(\"abort\", onAbortRestore);\n            const restoreConnectionTask = callForSuccess((_options)=>__awaiter(this, void 0, void 0, function*() {\n                    yield provider === null || provider === void 0 ? void 0 : provider.restoreConnection({\n                        openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,\n                        signal: _options.signal\n                    });\n                    abortController.signal.removeEventListener(\"abort\", onAbortRestore);\n                    if (this.connected) {\n                        this.tracker.trackConnectionRestoringCompleted(this.wallet);\n                    } else {\n                        this.tracker.trackConnectionRestoringError(\"Connection restoring failed\");\n                    }\n                }), {\n                attempts: Number.MAX_SAFE_INTEGER,\n                delayMs: 2000,\n                signal: options === null || options === void 0 ? void 0 : options.signal\n            });\n            const restoreConnectionTimeout = new Promise((resolve)=>setTimeout(()=>resolve(), 12000) // connection deadline\n            );\n            return Promise.race([\n                restoreConnectionTask,\n                restoreConnectionTimeout\n            ]);\n        });\n    }\n    sendTransaction(transaction, optionsOrOnRequestSent) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: remove deprecated method\n            const options = {};\n            if (typeof optionsOrOnRequestSent === \"function\") {\n                options.onRequestSent = optionsOrOnRequestSent;\n            } else {\n                options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;\n                options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;\n            }\n            const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n            if (abortController.signal.aborted) {\n                throw new TonConnectError(\"Transaction sending was aborted\");\n            }\n            this.checkConnection();\n            const requiredMessagesNumber = transaction.messages.length;\n            const requireExtraCurrencies = transaction.messages.some((m)=>m.extraCurrency && Object.keys(m.extraCurrency).length > 0);\n            checkSendTransactionSupport(this.wallet.device.features, {\n                requiredMessagesNumber,\n                requireExtraCurrencies\n            });\n            this.tracker.trackTransactionSentForSignature(this.wallet, transaction);\n            const { validUntil, messages } = transaction, tx = __rest(transaction, [\n                \"validUntil\",\n                \"messages\"\n            ]);\n            const from = transaction.from || this.account.address;\n            const network = transaction.network || this.account.chain;\n            const response = yield this.provider.sendRequest(sendTransactionParser.convertToRpcRequest(Object.assign(Object.assign({}, tx), {\n                from,\n                network,\n                valid_until: validUntil,\n                messages: messages.map((_a)=>{\n                    var { extraCurrency } = _a, msg = __rest(_a, [\n                        \"extraCurrency\"\n                    ]);\n                    return Object.assign(Object.assign({}, msg), {\n                        extra_currency: extraCurrency\n                    });\n                })\n            })), {\n                onRequestSent: options.onRequestSent,\n                signal: abortController.signal\n            });\n            if (sendTransactionParser.isError(response)) {\n                this.tracker.trackTransactionSigningFailed(this.wallet, transaction, response.error.message, response.error.code);\n                return sendTransactionParser.parseAndThrowError(response);\n            }\n            const result = sendTransactionParser.convertFromRpcResponse(response);\n            this.tracker.trackTransactionSigned(this.wallet, transaction, result);\n            return result;\n        });\n    }\n    /**\n     * Disconnect form thw connected wallet and drop current session.\n     */ disconnect(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected) {\n                throw new WalletNotConnectedError();\n            }\n            const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);\n            const prevAbortController = this.abortController;\n            this.abortController = abortController;\n            if (abortController.signal.aborted) {\n                throw new TonConnectError(\"Disconnect was aborted\");\n            }\n            this.onWalletDisconnected(\"dapp\");\n            yield (_a = this.provider) === null || _a === void 0 ? void 0 : _a.disconnect({\n                signal: abortController.signal\n            });\n            prevAbortController === null || prevAbortController === void 0 ? void 0 : prevAbortController.abort();\n        });\n    }\n    /**\n     * Pause bridge HTTP connection. Might be helpful, if you want to pause connections while browser tab is unfocused,\n     * or if you use SDK with NodeJS and want to save server resources.\n     */ pauseConnection() {\n        var _a;\n        if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== \"http\") {\n            return;\n        }\n        this.provider.pause();\n    }\n    /**\n     * Unpause bridge HTTP connection if it is paused.\n     */ unPauseConnection() {\n        var _a;\n        if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== \"http\") {\n            return Promise.resolve();\n        }\n        return this.provider.unPause();\n    }\n    addWindowFocusAndBlurSubscriptions() {\n        const document1 = getDocument();\n        if (!document1) {\n            return;\n        }\n        try {\n            document1.addEventListener(\"visibilitychange\", ()=>{\n                if (document1.hidden) {\n                    this.pauseConnection();\n                } else {\n                    this.unPauseConnection().catch();\n                }\n            });\n        } catch (e) {\n            logError(\"Cannot subscribe to the document.visibilitychange: \", e);\n        }\n    }\n    createProvider(wallet) {\n        let provider;\n        if (!Array.isArray(wallet) && isWalletConnectionSourceJS(wallet)) {\n            provider = new InjectedProvider(this.dappSettings.storage, wallet.jsBridgeKey);\n        } else {\n            provider = new BridgeProvider(this.dappSettings.storage, wallet);\n        }\n        provider.listen(this.walletEventsListener.bind(this));\n        return provider;\n    }\n    walletEventsListener(e) {\n        switch(e.event){\n            case \"connect\":\n                this.onWalletConnected(e.payload);\n                break;\n            case \"connect_error\":\n                this.tracker.trackConnectionError(e.payload.message, e.payload.code);\n                const walletError = connectErrorsParser.parseError(e.payload);\n                this.onWalletConnectError(walletError);\n                break;\n            case \"disconnect\":\n                this.onWalletDisconnected(\"wallet\");\n        }\n    }\n    onWalletConnected(connectEvent) {\n        var _a;\n        const tonAccountItem = connectEvent.items.find((item)=>item.name === \"ton_addr\");\n        const tonProofItem = connectEvent.items.find((item)=>item.name === \"ton_proof\");\n        if (!tonAccountItem) {\n            throw new TonConnectError(\"ton_addr connection item was not found\");\n        }\n        const hasRequiredFeatures = checkRequiredWalletFeatures(connectEvent.device.features, this.walletsRequiredFeatures);\n        if (!hasRequiredFeatures) {\n            (_a = this.provider) === null || _a === void 0 ? void 0 : _a.disconnect();\n            this.onWalletConnectError(new WalletMissingRequiredFeaturesError(\"Wallet does not support required features\", {\n                cause: {\n                    connectEvent\n                }\n            }));\n            return;\n        }\n        const wallet = {\n            device: connectEvent.device,\n            provider: this.provider.type,\n            account: {\n                address: tonAccountItem.address,\n                chain: tonAccountItem.network,\n                walletStateInit: tonAccountItem.walletStateInit,\n                publicKey: tonAccountItem.publicKey\n            }\n        };\n        if (tonProofItem) {\n            wallet.connectItems = {\n                tonProof: tonProofItem\n            };\n        }\n        this.wallet = wallet;\n        this.tracker.trackConnectionCompleted(wallet);\n    }\n    onWalletConnectError(error) {\n        this.statusChangeErrorSubscriptions.forEach((errorsHandler)=>errorsHandler(error));\n        logDebug(error);\n        if (error instanceof ManifestNotFoundError || error instanceof ManifestContentErrorError) {\n            logError(error);\n            throw error;\n        }\n    }\n    onWalletDisconnected(scope) {\n        this.tracker.trackDisconnection(this.wallet, scope);\n        this.wallet = null;\n    }\n    checkConnection() {\n        if (!this.connected) {\n            throw new WalletNotConnectedError();\n        }\n    }\n    createConnectRequest(request) {\n        const items = [\n            {\n                name: \"ton_addr\"\n            }\n        ];\n        if (request === null || request === void 0 ? void 0 : request.tonProof) {\n            items.push({\n                name: \"ton_proof\",\n                payload: request.tonProof\n            });\n        }\n        return {\n            manifestUrl: this.dappSettings.manifestUrl,\n            items\n        };\n    }\n}\nTonConnect.walletsList = new WalletsListManager();\n/**\n * Check if specified wallet is injected and available to use with the app.\n * @param walletJSKey target wallet's js bridge key.\n */ TonConnect.isWalletInjected = (walletJSKey)=>InjectedProvider.isWalletInjected(walletJSKey);\n/**\n * Check if the app is opened inside specified wallet's browser.\n * @param walletJSKey target wallet's js bridge key.\n */ TonConnect.isInsideWalletBrowser = (walletJSKey)=>InjectedProvider.isInsideWalletBrowser(walletJSKey);\nconst noBounceableTag = 0x51;\nconst testOnlyTag = 0x80;\n/**\n * Converts raw TON address to no-bounceable user-friendly format. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}\n * @param hexAddress raw TON address formatted as \"0:<hex string without 0x>\".\n * @param [testOnly=false] convert address to test-only form. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}\n */ function toUserFriendlyAddress(hexAddress, testOnly = false) {\n    const { wc, hex } = parseHexAddress(hexAddress);\n    let tag = noBounceableTag;\n    if (testOnly) {\n        tag |= testOnlyTag;\n    }\n    const addr = new Int8Array(34);\n    addr[0] = tag;\n    addr[1] = wc;\n    addr.set(hex, 2);\n    const addressWithChecksum = new Uint8Array(36);\n    addressWithChecksum.set(addr);\n    addressWithChecksum.set(crc16(addr), 34);\n    let addressBase64 = _tonconnect_protocol__WEBPACK_IMPORTED_MODULE_0__.Base64.encode(addressWithChecksum);\n    return addressBase64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction parseHexAddress(hexAddress) {\n    if (!hexAddress.includes(\":\")) {\n        throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include \":\".`);\n    }\n    const parts = hexAddress.split(\":\");\n    if (parts.length !== 2) {\n        throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include \":\" only once.`);\n    }\n    const wc = parseInt(parts[0]);\n    if (wc !== 0 && wc !== -1) {\n        throw new WrongAddressError(`Wrong address ${hexAddress}. WC must be eq 0 or -1, but ${wc} received.`);\n    }\n    const hex = parts[1];\n    if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) {\n        throw new WrongAddressError(`Wrong address ${hexAddress}. Hex part must be 64bytes length, but ${hex === null || hex === void 0 ? void 0 : hex.length} received.`);\n    }\n    return {\n        wc,\n        hex: hexToBytes(hex)\n    };\n}\nfunction crc16(data) {\n    const poly = 0x1021;\n    let reg = 0;\n    const message = new Uint8Array(data.length + 2);\n    message.set(data);\n    for (let byte of message){\n        let mask = 0x80;\n        while(mask > 0){\n            reg <<= 1;\n            if (byte & mask) {\n                reg += 1;\n            }\n            mask >>= 1;\n            if (reg > 0xffff) {\n                reg &= 0xffff;\n                reg ^= poly;\n            }\n        }\n    }\n    return new Uint8Array([\n        Math.floor(reg / 256),\n        reg % 256\n    ]);\n}\nconst toByteMap = {};\nfor(let ord = 0; ord <= 0xff; ord++){\n    let s = ord.toString(16);\n    if (s.length < 2) {\n        s = \"0\" + s;\n    }\n    toByteMap[s] = ord;\n}\nfunction hexToBytes(hex) {\n    hex = hex.toLowerCase();\n    const length2 = hex.length;\n    if (length2 % 2 !== 0) {\n        throw new ParseHexError(\"Hex string must have length a multiple of 2: \" + hex);\n    }\n    const length = length2 / 2;\n    const result = new Uint8Array(length);\n    for(let i = 0; i < length; i++){\n        const doubled = i * 2;\n        const hexSubstring = hex.substring(doubled, doubled + 2);\n        if (!toByteMap.hasOwnProperty(hexSubstring)) {\n            throw new ParseHexError(\"Invalid hex character: \" + hexSubstring);\n        }\n        result[i] = toByteMap[hexSubstring];\n    }\n    return result;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tonconnect/ui/node_modules/@tonconnect/sdk/lib/esm/index.mjs\n");

/***/ })

};
;