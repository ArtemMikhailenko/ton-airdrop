"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@orbs-network";
exports.ids = ["vendor-chunks/@orbs-network"];
exports.modules = {

/***/ "(ssr)/./node_modules/@orbs-network/ton-access/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@orbs-network/ton-access/lib/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHttpV4Endpoint = exports.getHttpV4Endpoints = exports.getHttpEndpoint = exports.getHttpEndpoints = exports.Access = void 0;\nconst nodes_1 = __webpack_require__(/*! ./nodes */ \"(ssr)/./node_modules/@orbs-network/ton-access/lib/nodes.js\");\nclass Access {\n    //////////////////////////////////\n    constructor(){\n        // default\n        this.host = \"ton.access.orbs.network\";\n        this.urlVersion = 1;\n        this.nodes = new nodes_1.Nodes();\n    }\n    //////////////////////////////////\n    init() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const pjson = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/@orbs-network/ton-access/package.json\");\n            yield this.nodes.init(`https://${this.host}/mngr/nodes?npm_version=${pjson.version}`); // pass host when backend endpoint is ready\n        });\n    }\n    //////////////////////////////////\n    makeProtonet(edgeProtocol, network) {\n        let res = \"\";\n        switch(edgeProtocol){\n            case \"toncenter-api-v2\":\n                res += \"v2-\";\n                break;\n            case \"ton-api-v4\":\n                res += \"v4-\";\n                break;\n        }\n        res += network;\n        return res;\n    }\n    //////////////////////////////////\n    weightedRandom(nodes) {\n        let sumWeights = 0;\n        for (const node of nodes){\n            sumWeights += node.Weight;\n        }\n        const rnd = Math.floor(Math.random() * sumWeights);\n        let cur = 0;\n        for (const node of nodes){\n            if (rnd >= cur && rnd < cur + node.Weight) return node;\n            cur += node.Weight;\n        }\n    }\n    //////////////////////////////////\n    buildUrls(network, edgeProtocol, suffix, single) {\n        // default params\n        if (!suffix) suffix = \"\";\n        if (!edgeProtocol) edgeProtocol = \"toncenter-api-v2\";\n        if (!network) network = \"mainnet\";\n        // remove leading slash\n        if (suffix.length) suffix = suffix.replace(/^\\/+/, \"\");\n        const res = [];\n        const protonet = this.makeProtonet(edgeProtocol, network);\n        let healthyNodes = this.nodes.getHealthyFor(protonet);\n        if (!(healthyNodes === null || healthyNodes === void 0 ? void 0 : healthyNodes.length)) throw new Error(`no healthy nodes for ${protonet}`);\n        // if count < healthNodes length - weighted random\n        if (single && healthyNodes.length) {\n            const chosen = this.weightedRandom(healthyNodes);\n            if (chosen) healthyNodes = [\n                chosen\n            ];\n            else throw new Error(\"weightedRandom return empty\");\n        }\n        for (const node of healthyNodes){\n            let url = `https://${this.host}/${node.NodeId}/${this.urlVersion}/${network}/${edgeProtocol}`;\n            // append /suffix only if needed\n            if (suffix.length) url += `/${suffix}`;\n            res.push(url);\n        }\n        return res;\n    }\n}\nexports.Access = Access;\n//////////////////////////////\n// private get multi endpoints\nfunction getEndpoints(network, edgeProtocol, suffix, single) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const access = new Access();\n        yield access.init();\n        const res = access.buildUrls(network, edgeProtocol, suffix, single);\n        return res;\n    });\n}\n/////////////////////////////////////\n// global exported explicit functions\n// toncenter multi\nfunction getHttpEndpoints(config, single) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // default params\n        const network = (config === null || config === void 0 ? void 0 : config.network) ? config.network : \"mainnet\";\n        let suffix = \"jsonRPC\";\n        if ((config === null || config === void 0 ? void 0 : config.protocol) === \"rest\") {\n            suffix = \"\";\n        }\n        return yield getEndpoints(network, \"toncenter-api-v2\", suffix, single);\n    });\n}\nexports.getHttpEndpoints = getHttpEndpoints;\n// toncenter single\nfunction getHttpEndpoint(config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // waited random a single endpoint\n        const endpoints = yield getHttpEndpoints(config, true);\n        return endpoints[0];\n    });\n}\nexports.getHttpEndpoint = getHttpEndpoint;\n// // API V4 - multi\nfunction getHttpV4Endpoints(config, single) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // default params\n        const network = (config === null || config === void 0 ? void 0 : config.network) ? config.network : \"mainnet\";\n        if ((config === null || config === void 0 ? void 0 : config.protocol) === \"json-rpc\") {\n            throw Error(\"config.protocol json-rpc is not supported for getTonApiV4Endpoints\");\n        }\n        // any other case suffix should be empty\n        const suffix = \"\"; // this is like rest - default\n        // other networks than mainnet are not supported\n        return yield getEndpoints(network, \"ton-api-v4\", suffix, single);\n    });\n}\nexports.getHttpV4Endpoints = getHttpV4Endpoints;\n// API V4 - single\nfunction getHttpV4Endpoint(config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const endpoints = yield getHttpV4Endpoints(config, true);\n        return endpoints[0];\n    });\n}\nexports.getHttpV4Endpoint = getHttpV4Endpoint; // // WS ADNL PROXY\n // export async function getAdnlProxyEndpoints(): Promise<string[]> {\n //   return [\n //     //\"ws://ton-http-2:30001\"\n //     \"ws://18.221.31.187:30001\",\n //     //\"ws://3.140.253.61:30001\",\n //   ];\n // }\n // export async function getAdnlProxyEndpoint(): Promise<string> {\n //   const endpoints = await getAdnlProxyEndpoints();\n //   const index = Math.floor(Math.random() * endpoints.length);\n //   return endpoints[index];\n // }\n // import { initLiteClient } from \"./debug\";\n // async function dbg() {\n //   // const eps = await getHttpEndpoint();\n //   // console.log(eps);\n //   const SUM = 100;\n //   const config: Config = {\n //     network: 'mainnet'\n //   }\n //   const counter: any = {};\n //   for (let i = 0; i < SUM; ++i) {\n //     const res = await getHttpEndpoint(config);\n //     if (!counter[res])\n //       counter[res] = 0;\n //     counter[res] += 1;\n //   }\n // }\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@orbs-network/ton-access/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@orbs-network/ton-access/lib/nodes.js":
/*!************************************************************!*\
  !*** ./node_modules/@orbs-network/ton-access/lib/nodes.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Nodes = void 0;\n__webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n///////////////////////////////////\nclass Nodes {\n    ///////////////////////////////////\n    constructor(){\n        this.nodeIndex = -1;\n        this.committee = new Set();\n        this.topology = [];\n        this.initTime = 0;\n    }\n    ///////////////////////////////////\n    init(nodesUrl) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // cleanup\n            this.nodeIndex = -1;\n            this.committee.clear();\n            this.topology = [];\n            this.initTime = Date.now();\n            let topology = [];\n            try {\n                const response = yield fetch(nodesUrl);\n                const data = yield response.json();\n                topology = data;\n            } catch (e) {\n                throw new Error(`exception in fetch(${nodesUrl}): ${e}`);\n            }\n            // remove unhealthy nodes\n            for (const node of topology){\n                if (node.Healthy === \"1\") {\n                    this.topology.push(node);\n                }\n            }\n            if (this.topology.length === 0) throw new Error(`no healthy nodes in ${nodesUrl}`);\n        });\n    }\n    getHealthyFor(protonet) {\n        var _a;\n        const res = [];\n        for (const node of this.topology){\n            // not stale (10 min)\n            if (node.Weight > 0 && ((_a = node.Mngr) === null || _a === void 0 ? void 0 : _a.health[protonet])) {\n                res.push(node);\n            }\n        }\n        return res;\n    }\n}\nexports.Nodes = Nodes; //# sourceMappingURL=nodes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9yYnMtbmV0d29yay90b24tYWNjZXNzL2xpYi9ub2Rlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksSUFBSyxJQUFJLElBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBTyw4Q0FBNkM7SUFBRWIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RGUsYUFBYSxHQUFHLEtBQUs7QUFDckJFLG1CQUFPQSxDQUFDLGlGQUFrQjtBQUMxQixtQ0FBbUM7QUFDbkMsTUFBTUQ7SUFDRixtQ0FBbUM7SUFDbkNFLGFBQWM7UUFDVixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDO1FBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlDO1FBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFDQSxtQ0FBbUM7SUFDbkNDLEtBQUtDLFFBQVEsRUFBRTtRQUNYLE9BQU8vQixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLFVBQVU7WUFDVixJQUFJLENBQUN5QixTQUFTLEdBQUcsQ0FBQztZQUNsQixJQUFJLENBQUNDLFNBQVMsQ0FBQ00sS0FBSztZQUNwQixJQUFJLENBQUNKLFFBQVEsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0MsUUFBUSxHQUFHSSxLQUFLQyxHQUFHO1lBQ3hCLElBQUlOLFdBQVcsRUFBRTtZQUNqQixJQUFJO2dCQUNBLE1BQU1PLFdBQVcsTUFBTUMsTUFBTUw7Z0JBQzdCLE1BQU1NLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtnQkFDaENWLFdBQVdTO1lBQ2YsRUFDQSxPQUFPeEIsR0FBRztnQkFDTixNQUFNLElBQUkwQixNQUFNLENBQUMsbUJBQW1CLEVBQUVSLFNBQVMsR0FBRyxFQUFFbEIsRUFBRSxDQUFDO1lBQzNEO1lBQ0EseUJBQXlCO1lBQ3pCLEtBQUssTUFBTTJCLFFBQVFaLFNBQVU7Z0JBQ3pCLElBQUlZLEtBQUtDLE9BQU8sS0FBSyxLQUFLO29CQUN0QixJQUFJLENBQUNiLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDRjtnQkFDdkI7WUFDSjtZQUNBLElBQUksSUFBSSxDQUFDWixRQUFRLENBQUNlLE1BQU0sS0FBSyxHQUN6QixNQUFNLElBQUlKLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRVIsU0FBUyxDQUFDO1FBQ3pEO0lBQ0o7SUFDQWEsY0FBY0MsUUFBUSxFQUFFO1FBQ3BCLElBQUlDO1FBQ0osTUFBTUMsTUFBTSxFQUFFO1FBQ2QsS0FBSyxNQUFNUCxRQUFRLElBQUksQ0FBQ1osUUFBUSxDQUFFO1lBQzlCLHFCQUFxQjtZQUNyQixJQUFJWSxLQUFLUSxNQUFNLEdBQUcsS0FBTSxFQUFDRixLQUFLTixLQUFLUyxJQUFJLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSSxNQUFNLENBQUNMLFNBQVMsR0FBRztnQkFDaEdFLElBQUlMLElBQUksQ0FBQ0Y7WUFDYjtRQUNKO1FBQ0EsT0FBT087SUFDWDtBQUNKO0FBQ0ExQixhQUFhLEdBQUdDLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG9yYnMtbmV0d29yay90b24tYWNjZXNzL2xpYi9ub2Rlcy5qcz85MzMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vZGVzID0gdm9pZCAwO1xucmVxdWlyZShcImlzb21vcnBoaWMtZmV0Y2hcIik7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuY2xhc3MgTm9kZXMge1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubm9kZUluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuY29tbWl0dGVlID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnRvcG9sb2d5ID0gW107XG4gICAgICAgIHRoaXMuaW5pdFRpbWUgPSAwO1xuICAgIH1cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGluaXQobm9kZXNVcmwpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIGNsZWFudXBcbiAgICAgICAgICAgIHRoaXMubm9kZUluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmNvbW1pdHRlZS5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy50b3BvbG9neSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5pbml0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBsZXQgdG9wb2xvZ3kgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChub2Rlc1VybCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICB0b3BvbG9neSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhjZXB0aW9uIGluIGZldGNoKCR7bm9kZXNVcmx9KTogJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVtb3ZlIHVuaGVhbHRoeSBub2Rlc1xuICAgICAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHRvcG9sb2d5KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuSGVhbHRoeSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BvbG9neS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRvcG9sb2d5Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIGhlYWx0aHkgbm9kZXMgaW4gJHtub2Rlc1VybH1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEhlYWx0aHlGb3IocHJvdG9uZXQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMudG9wb2xvZ3kpIHtcbiAgICAgICAgICAgIC8vIG5vdCBzdGFsZSAoMTAgbWluKVxuICAgICAgICAgICAgaWYgKG5vZGUuV2VpZ2h0ID4gMCAmJiAoKF9hID0gbm9kZS5NbmdyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGVhbHRoW3Byb3RvbmV0XSkpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9kZXMgPSBOb2Rlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJOb2RlcyIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsIm5vZGVJbmRleCIsImNvbW1pdHRlZSIsIlNldCIsInRvcG9sb2d5IiwiaW5pdFRpbWUiLCJpbml0Iiwibm9kZXNVcmwiLCJjbGVhciIsIkRhdGUiLCJub3ciLCJyZXNwb25zZSIsImZldGNoIiwiZGF0YSIsImpzb24iLCJFcnJvciIsIm5vZGUiLCJIZWFsdGh5IiwicHVzaCIsImxlbmd0aCIsImdldEhlYWx0aHlGb3IiLCJwcm90b25ldCIsIl9hIiwicmVzIiwiV2VpZ2h0IiwiTW5nciIsImhlYWx0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@orbs-network/ton-access/lib/nodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@orbs-network/ton-access/package.json":
/*!************************************************************!*\
  !*** ./node_modules/@orbs-network/ton-access/package.json ***!
  \************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@orbs-network/ton-access","version":"2.3.3","description":"Unthrottled anonymous RPC access to TON blockchain via a robust decentralized network","source":"lib/index.js","main":"lib/index.js","types":"lib/index.d.ts","files":["lib/**/*"],"scripts":{"test":"env mocha -r ts-node/register test/**/*.ts","test:v2":"env mocha -r ts-node/register test/ton-v2.ts","test:v4":"env mocha -r ts-node/register test/ton-v4.ts","cleanup":"rimraf ./lib","build:web:reg":"esbuild ./lib/web.js --bundle  --sourcemap --target=es2015 --outfile=./dist/index.js","build:web:min":"esbuild ./lib/web.js --bundle  --minify    --target=es2015 --outfile=./dist/index.min.js","build:web":"rimraf ./dist && npm run build:web:reg && npm run build:web:min","build":"npm run lint && rimraf ./lib && tsc && npm run build:web","format":"prettier --write \\"src/**/*.ts\\"","lint":"tslint -p tsconfig.json","prepare":"npm run build","prepublishOnly":"npm test && npm run lint","preversion":"npm run lint","version":"npm run format && git add -A src","postversion":"git push && git push --tags"},"repository":{"type":"git","url":"git+https://github.com/orbs-network/ton-access.git"},"author":"yuval@orbs.com","license":"MIT","bugs":{"url":"https://github.com/orbs-network/ton-access/issues"},"homepage":"https://github.com/orbs-network/ton-access#readme","dependencies":{"isomorphic-fetch":"^3.0.0"},"devDependencies":{"@types/bn.js":"^5.1.1","@types/chai":"^4.3.4","@types/isomorphic-fetch":"^0.0.36","@types/mocha":"^10.0.0","buffer":"^6.0.3","chai":"^4.3.7","esbuild":"^0.15.14","mocha":"^10.1.0","prettier":"^2.7.1","rimraf":"^3.0.2","ton":"^12.1.3","ton-lite-client":"npm:@truecarry/ton-lite-client@^1.6.1","tonweb":"^0.0.58","ts-node":"^10.9.1","tslib":"^2.4.0","tslint":"^6.1.3","tslint-config-prettier":"^1.18.0"}}');

/***/ })

};
;