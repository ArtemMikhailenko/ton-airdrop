"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ton";
exports.ids = ["vendor-chunks/@ton"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ton/core/dist/address/ADNLAddress.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/ADNLAddress.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ADNLAddress = void 0;\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\nconst base32_1 = __webpack_require__(/*! ../utils/base32 */ \"(ssr)/./node_modules/@ton/core/dist/utils/base32.js\");\nconst crc16_1 = __webpack_require__(/*! ../utils/crc16 */ \"(ssr)/./node_modules/@ton/core/dist/utils/crc16.js\");\nclass ADNLAddress {\n    static parseFriendly(src) {\n        if (src.length !== 55) {\n            throw Error(\"Invalid address\");\n        }\n        // Decoding\n        src = \"f\" + src;\n        let decoded = (0, base32_1.base32Decode)(src);\n        if (decoded[0] !== 0x2d) {\n            throw Error(\"Invalid address\");\n        }\n        let gotHash = decoded.slice(33);\n        let hash = (0, crc16_1.crc16)(decoded.slice(0, 33));\n        if (!hash.equals(gotHash)) {\n            throw Error(\"Invalid address\");\n        }\n        return new ADNLAddress(decoded.slice(1, 33));\n    }\n    static parseRaw(src) {\n        const data = Buffer.from(src, \"base64\");\n        return new ADNLAddress(data);\n    }\n    constructor(address){\n        this.toRaw = ()=>{\n            return this.address.toString(\"hex\").toUpperCase();\n        };\n        this.toString = ()=>{\n            let data = Buffer.concat([\n                Buffer.from([\n                    0x2D\n                ]),\n                this.address\n            ]);\n            let hash = (0, crc16_1.crc16)(data);\n            data = Buffer.concat([\n                data,\n                hash\n            ]);\n            return (0, base32_1.base32Encode)(data).slice(1);\n        };\n        this[_a] = ()=>this.toString();\n        if (address.length !== 32) {\n            throw Error(\"Invalid address\");\n        }\n        this.address = address;\n    }\n    equals(b) {\n        return this.address.equals(b.address);\n    }\n}\nexports.ADNLAddress = ADNLAddress;\n_a = symbol_inspect_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYWRkcmVzcy9BRE5MQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNELElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQSxJQUFJRTtBQUNKQyw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxtQkFBbUJULGdCQUFnQlUsbUJBQU9BLENBQUMsb0VBQWdCO0FBQ2pFLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLDRFQUFpQjtBQUMxQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQywwRUFBZ0I7QUFDeEMsTUFBTUY7SUFDRixPQUFPSyxjQUFjQyxHQUFHLEVBQUU7UUFDdEIsSUFBSUEsSUFBSUMsTUFBTSxLQUFLLElBQUk7WUFDbkIsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLFdBQVc7UUFDWEYsTUFBTSxNQUFNQTtRQUNaLElBQUlHLFVBQVUsQ0FBQyxHQUFHTixTQUFTTyxZQUFZLEVBQUVKO1FBQ3pDLElBQUlHLE9BQU8sQ0FBQyxFQUFFLEtBQUssTUFBTTtZQUNyQixNQUFNRCxNQUFNO1FBQ2hCO1FBQ0EsSUFBSUcsVUFBVUYsUUFBUUcsS0FBSyxDQUFDO1FBQzVCLElBQUlDLE9BQU8sQ0FBQyxHQUFHVCxRQUFRVSxLQUFLLEVBQUVMLFFBQVFHLEtBQUssQ0FBQyxHQUFHO1FBQy9DLElBQUksQ0FBQ0MsS0FBS0UsTUFBTSxDQUFDSixVQUFVO1lBQ3ZCLE1BQU1ILE1BQU07UUFDaEI7UUFDQSxPQUFPLElBQUlSLFlBQVlTLFFBQVFHLEtBQUssQ0FBQyxHQUFHO0lBQzVDO0lBQ0EsT0FBT0ksU0FBU1YsR0FBRyxFQUFFO1FBQ2pCLE1BQU1XLE9BQU9DLE9BQU9DLElBQUksQ0FBQ2IsS0FBSztRQUM5QixPQUFPLElBQUlOLFlBQVlpQjtJQUMzQjtJQUNBRyxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQyxLQUFLLEdBQUc7WUFDVCxPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDRSxRQUFRLENBQUMsT0FBT0MsV0FBVztRQUNuRDtRQUNBLElBQUksQ0FBQ0QsUUFBUSxHQUFHO1lBQ1osSUFBSU4sT0FBT0MsT0FBT08sTUFBTSxDQUFDO2dCQUFDUCxPQUFPQyxJQUFJLENBQUM7b0JBQUM7aUJBQUs7Z0JBQUcsSUFBSSxDQUFDRSxPQUFPO2FBQUM7WUFDNUQsSUFBSVIsT0FBTyxDQUFDLEdBQUdULFFBQVFVLEtBQUssRUFBRUc7WUFDOUJBLE9BQU9DLE9BQU9PLE1BQU0sQ0FBQztnQkFBQ1I7Z0JBQU1KO2FBQUs7WUFDakMsT0FBTyxDQUFDLEdBQUdWLFNBQVN1QixZQUFZLEVBQUVULE1BQU1MLEtBQUssQ0FBQztRQUNsRDtRQUNBLElBQUksQ0FBQ2pCLEdBQUcsR0FBRyxJQUFNLElBQUksQ0FBQzRCLFFBQVE7UUFDOUIsSUFBSUYsUUFBUWQsTUFBTSxLQUFLLElBQUk7WUFDdkIsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLElBQUksQ0FBQ2EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBTixPQUFPWSxDQUFDLEVBQUU7UUFDTixPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTixNQUFNLENBQUNZLEVBQUVOLE9BQU87SUFDeEM7QUFDSjtBQUNBdkIsbUJBQW1CLEdBQUdFO0FBQ3RCTCxLQUFLTSxpQkFBaUIyQixPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9hZGRyZXNzL0FETkxBZGRyZXNzLmpzPzEyNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG52YXIgX2E7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFETkxBZGRyZXNzID0gdm9pZCAwO1xuY29uc3Qgc3ltYm9sX2luc3BlY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3ltYm9sLmluc3BlY3RcIikpO1xuY29uc3QgYmFzZTMyXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvYmFzZTMyXCIpO1xuY29uc3QgY3JjMTZfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9jcmMxNlwiKTtcbmNsYXNzIEFETkxBZGRyZXNzIHtcbiAgICBzdGF0aWMgcGFyc2VGcmllbmRseShzcmMpIHtcbiAgICAgICAgaWYgKHNyYy5sZW5ndGggIT09IDU1KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVjb2RpbmdcbiAgICAgICAgc3JjID0gJ2YnICsgc3JjO1xuICAgICAgICBsZXQgZGVjb2RlZCA9ICgwLCBiYXNlMzJfMS5iYXNlMzJEZWNvZGUpKHNyYyk7XG4gICAgICAgIGlmIChkZWNvZGVkWzBdICE9PSAweDJkKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGdvdEhhc2ggPSBkZWNvZGVkLnNsaWNlKDMzKTtcbiAgICAgICAgbGV0IGhhc2ggPSAoMCwgY3JjMTZfMS5jcmMxNikoZGVjb2RlZC5zbGljZSgwLCAzMykpO1xuICAgICAgICBpZiAoIWhhc2guZXF1YWxzKGdvdEhhc2gpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBRE5MQWRkcmVzcyhkZWNvZGVkLnNsaWNlKDEsIDMzKSk7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZVJhdyhzcmMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5mcm9tKHNyYywgJ2Jhc2U2NCcpO1xuICAgICAgICByZXR1cm4gbmV3IEFETkxBZGRyZXNzKGRhdGEpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzKSB7XG4gICAgICAgIHRoaXMudG9SYXcgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRyZXNzLnRvU3RyaW5nKCdoZXgnKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRvU3RyaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbMHgyRF0pLCB0aGlzLmFkZHJlc3NdKTtcbiAgICAgICAgICAgIGxldCBoYXNoID0gKDAsIGNyYzE2XzEuY3JjMTYpKGRhdGEpO1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW2RhdGEsIGhhc2hdKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgYmFzZTMyXzEuYmFzZTMyRW5jb2RlKShkYXRhKS5zbGljZSgxKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpc1tfYV0gPSAoKSA9PiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChhZGRyZXNzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGFkZHJlc3MnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbiAgICBlcXVhbHMoYikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRyZXNzLmVxdWFscyhiLmFkZHJlc3MpO1xuICAgIH1cbn1cbmV4cG9ydHMuQUROTEFkZHJlc3MgPSBBRE5MQWRkcmVzcztcbl9hID0gc3ltYm9sX2luc3BlY3RfMS5kZWZhdWx0O1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJfYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQUROTEFkZHJlc3MiLCJzeW1ib2xfaW5zcGVjdF8xIiwicmVxdWlyZSIsImJhc2UzMl8xIiwiY3JjMTZfMSIsInBhcnNlRnJpZW5kbHkiLCJzcmMiLCJsZW5ndGgiLCJFcnJvciIsImRlY29kZWQiLCJiYXNlMzJEZWNvZGUiLCJnb3RIYXNoIiwic2xpY2UiLCJoYXNoIiwiY3JjMTYiLCJlcXVhbHMiLCJwYXJzZVJhdyIsImRhdGEiLCJCdWZmZXIiLCJmcm9tIiwiY29uc3RydWN0b3IiLCJhZGRyZXNzIiwidG9SYXciLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiY29uY2F0IiwiYmFzZTMyRW5jb2RlIiwiYiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/address/ADNLAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/address/Address.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/Address.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.address = exports.Address = void 0;\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\nconst crc16_1 = __webpack_require__(/*! ../utils/crc16 */ \"(ssr)/./node_modules/@ton/core/dist/utils/crc16.js\");\nconst bounceable_tag = 0x11;\nconst non_bounceable_tag = 0x51;\nconst test_flag = 0x80;\nfunction parseFriendlyAddress(src) {\n    if (typeof src === \"string\" && !Address.isFriendly(src)) {\n        throw new Error(\"Unknown address type\");\n    }\n    const data = Buffer.isBuffer(src) ? src : Buffer.from(src, \"base64\");\n    // 1byte tag + 1byte workchain + 32 bytes hash + 2 byte crc\n    if (data.length !== 36) {\n        throw new Error(\"Unknown address type: byte length is not equal to 36\");\n    }\n    // Prepare data\n    const addr = data.subarray(0, 34);\n    const crc = data.subarray(34, 36);\n    const calcedCrc = (0, crc16_1.crc16)(addr);\n    if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {\n        throw new Error(\"Invalid checksum: \" + src);\n    }\n    // Parse tag\n    let tag = addr[0];\n    let isTestOnly = false;\n    let isBounceable = false;\n    if (tag & test_flag) {\n        isTestOnly = true;\n        tag = tag ^ test_flag;\n    }\n    if (tag !== bounceable_tag && tag !== non_bounceable_tag) throw \"Unknown address tag\";\n    isBounceable = tag === bounceable_tag;\n    let workchain = null;\n    if (addr[1] === 0xff) {\n        workchain = -1;\n    } else {\n        workchain = addr[1];\n    }\n    const hashPart = addr.subarray(2, 34);\n    return {\n        isTestOnly,\n        isBounceable,\n        workchain,\n        hashPart\n    };\n}\nclass Address {\n    static isAddress(src) {\n        return src instanceof Address;\n    }\n    static isFriendly(source) {\n        // Check length\n        if (source.length !== 48) {\n            return false;\n        }\n        // Check if address is valid base64\n        if (!/[A-Za-z0-9+/_-]+/.test(source)) {\n            return false;\n        }\n        return true;\n    }\n    static isRaw(source) {\n        // Check if has delimiter\n        if (source.indexOf(\":\") === -1) {\n            return false;\n        }\n        let [wc, hash] = source.split(\":\");\n        // wc is not valid\n        if (!Number.isInteger(parseFloat(wc))) {\n            return false;\n        }\n        // hash is not valid\n        if (!/[a-f0-9]+/.test(hash.toLowerCase())) {\n            return false;\n        }\n        // has is not correct\n        if (hash.length !== 64) {\n            return false;\n        }\n        return true;\n    }\n    static normalize(source) {\n        if (typeof source === \"string\") {\n            return Address.parse(source).toString();\n        } else {\n            return source.toString();\n        }\n    }\n    static parse(source) {\n        if (Address.isFriendly(source)) {\n            return this.parseFriendly(source).address;\n        } else if (Address.isRaw(source)) {\n            return this.parseRaw(source);\n        } else {\n            throw new Error(\"Unknown address type: \" + source);\n        }\n    }\n    static parseRaw(source) {\n        let workChain = parseInt(source.split(\":\")[0]);\n        let hash = Buffer.from(source.split(\":\")[1], \"hex\");\n        return new Address(workChain, hash);\n    }\n    static parseFriendly(source) {\n        if (Buffer.isBuffer(source)) {\n            let r = parseFriendlyAddress(source);\n            return {\n                isBounceable: r.isBounceable,\n                isTestOnly: r.isTestOnly,\n                address: new Address(r.workchain, r.hashPart)\n            };\n        } else {\n            let addr = source.replace(/\\-/g, \"+\").replace(/_/g, \"/\"); // Convert from url-friendly to true base64\n            let r = parseFriendlyAddress(addr);\n            return {\n                isBounceable: r.isBounceable,\n                isTestOnly: r.isTestOnly,\n                address: new Address(r.workchain, r.hashPart)\n            };\n        }\n    }\n    constructor(workChain, hash){\n        this.toRawString = ()=>{\n            return this.workChain + \":\" + this.hash.toString(\"hex\");\n        };\n        this.toRaw = ()=>{\n            const addressWithChecksum = Buffer.alloc(36);\n            addressWithChecksum.set(this.hash);\n            addressWithChecksum.set([\n                this.workChain,\n                this.workChain,\n                this.workChain,\n                this.workChain\n            ], 32);\n            return addressWithChecksum;\n        };\n        this.toStringBuffer = (args)=>{\n            let testOnly = args && args.testOnly !== undefined ? args.testOnly : false;\n            let bounceable = args && args.bounceable !== undefined ? args.bounceable : true;\n            let tag = bounceable ? bounceable_tag : non_bounceable_tag;\n            if (testOnly) {\n                tag |= test_flag;\n            }\n            const addr = Buffer.alloc(34);\n            addr[0] = tag;\n            addr[1] = this.workChain;\n            addr.set(this.hash, 2);\n            const addressWithChecksum = Buffer.alloc(36);\n            addressWithChecksum.set(addr);\n            addressWithChecksum.set((0, crc16_1.crc16)(addr), 34);\n            return addressWithChecksum;\n        };\n        this.toString = (args)=>{\n            let urlSafe = args && args.urlSafe !== undefined ? args.urlSafe : true;\n            let buffer = this.toStringBuffer(args);\n            if (urlSafe) {\n                return buffer.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n            } else {\n                return buffer.toString(\"base64\");\n            }\n        };\n        this[_a] = ()=>this.toString();\n        if (hash.length !== 32) {\n            throw new Error(\"Invalid address hash length: \" + hash.length);\n        }\n        this.workChain = workChain;\n        this.hash = hash;\n        Object.freeze(this);\n    }\n    equals(src) {\n        if (src.workChain !== this.workChain) {\n            return false;\n        }\n        return src.hash.equals(this.hash);\n    }\n}\nexports.Address = Address;\n_a = symbol_inspect_1.default;\nfunction address(src) {\n    return Address.parse(src);\n}\nexports.address = address;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/address/Address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/address/ExternalAddress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/ExternalAddress.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExternalAddress = void 0;\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\nclass ExternalAddress {\n    static isAddress(src) {\n        return src instanceof ExternalAddress;\n    }\n    constructor(value, bits){\n        this[_a] = ()=>this.toString();\n        this.value = value;\n        this.bits = bits;\n    }\n    toString() {\n        return `External<${this.bits}:${this.value}>`;\n    }\n}\nexports.ExternalAddress = ExternalAddress;\n_a = symbol_inspect_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYWRkcmVzcy9FeHRlcm5hbEFkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0EsSUFBSUU7QUFDSkMsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsbUJBQW1CVCxnQkFBZ0JVLG1CQUFPQSxDQUFDLG9FQUFnQjtBQUNqRSxNQUFNRjtJQUNGLE9BQU9HLFVBQVVDLEdBQUcsRUFBRTtRQUNsQixPQUFPQSxlQUFlSjtJQUMxQjtJQUNBSyxZQUFZTixLQUFLLEVBQUVPLElBQUksQ0FBRTtRQUNyQixJQUFJLENBQUNYLEdBQUcsR0FBRyxJQUFNLElBQUksQ0FBQ1ksUUFBUTtRQUM5QixJQUFJLENBQUNSLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNPLElBQUksR0FBR0E7SUFDaEI7SUFDQUMsV0FBVztRQUNQLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqRDtBQUNKO0FBQ0FELHVCQUF1QixHQUFHRTtBQUMxQkwsS0FBS00saUJBQWlCTyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9hZGRyZXNzL0V4dGVybmFsQWRkcmVzcy5qcz9iYTNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHRlcm5hbEFkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCBzeW1ib2xfaW5zcGVjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzeW1ib2wuaW5zcGVjdFwiKSk7XG5jbGFzcyBFeHRlcm5hbEFkZHJlc3Mge1xuICAgIHN0YXRpYyBpc0FkZHJlc3Moc3JjKSB7XG4gICAgICAgIHJldHVybiBzcmMgaW5zdGFuY2VvZiBFeHRlcm5hbEFkZHJlc3M7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBiaXRzKSB7XG4gICAgICAgIHRoaXNbX2FdID0gKCkgPT4gdGhpcy50b1N0cmluZygpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuYml0cyA9IGJpdHM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYEV4dGVybmFsPCR7dGhpcy5iaXRzfToke3RoaXMudmFsdWV9PmA7XG4gICAgfVxufVxuZXhwb3J0cy5FeHRlcm5hbEFkZHJlc3MgPSBFeHRlcm5hbEFkZHJlc3M7XG5fYSA9IHN5bWJvbF9pbnNwZWN0XzEuZGVmYXVsdDtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiX2EiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV4dGVybmFsQWRkcmVzcyIsInN5bWJvbF9pbnNwZWN0XzEiLCJyZXF1aXJlIiwiaXNBZGRyZXNzIiwic3JjIiwiY29uc3RydWN0b3IiLCJiaXRzIiwidG9TdHJpbmciLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/address/ExternalAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/address/contractAddress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/contractAddress.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.contractAddress = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst StateInit_1 = __webpack_require__(/*! ../types/StateInit */ \"(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\");\nconst Address_1 = __webpack_require__(/*! ./Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nfunction contractAddress(workchain, init) {\n    let hash = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(init)).endCell().hash();\n    return new Address_1.Address(workchain, hash);\n}\nexports.contractAddress = contractAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYWRkcmVzcy9jb250cmFjdEFkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsMEVBQWdCO0FBQzFDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGtGQUFvQjtBQUNoRCxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxTQUFTRixnQkFBZ0JLLFNBQVMsRUFBRUMsSUFBSTtJQUNwQyxJQUFJQyxPQUFPLENBQUMsR0FBR04sVUFBVU8sU0FBUyxJQUM3QkMsS0FBSyxDQUFDLENBQUMsR0FBR04sWUFBWU8sY0FBYyxFQUFFSixPQUN0Q0ssT0FBTyxHQUNQSixJQUFJO0lBQ1QsT0FBTyxJQUFJSCxVQUFVUSxPQUFPLENBQUNQLFdBQVdFO0FBQzVDO0FBQ0FULHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYWRkcmVzcy9jb250cmFjdEFkZHJlc3MuanM/MGIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udHJhY3RBZGRyZXNzID0gdm9pZCAwO1xuY29uc3QgQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL2JvYy9CdWlsZGVyXCIpO1xuY29uc3QgU3RhdGVJbml0XzEgPSByZXF1aXJlKFwiLi4vdHlwZXMvU3RhdGVJbml0XCIpO1xuY29uc3QgQWRkcmVzc18xID0gcmVxdWlyZShcIi4vQWRkcmVzc1wiKTtcbmZ1bmN0aW9uIGNvbnRyYWN0QWRkcmVzcyh3b3JrY2hhaW4sIGluaXQpIHtcbiAgICBsZXQgaGFzaCA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgIC5zdG9yZSgoMCwgU3RhdGVJbml0XzEuc3RvcmVTdGF0ZUluaXQpKGluaXQpKVxuICAgICAgICAuZW5kQ2VsbCgpXG4gICAgICAgIC5oYXNoKCk7XG4gICAgcmV0dXJuIG5ldyBBZGRyZXNzXzEuQWRkcmVzcyh3b3JrY2hhaW4sIGhhc2gpO1xufVxuZXhwb3J0cy5jb250cmFjdEFkZHJlc3MgPSBjb250cmFjdEFkZHJlc3M7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb250cmFjdEFkZHJlc3MiLCJCdWlsZGVyXzEiLCJyZXF1aXJlIiwiU3RhdGVJbml0XzEiLCJBZGRyZXNzXzEiLCJ3b3JrY2hhaW4iLCJpbml0IiwiaGFzaCIsImJlZ2luQ2VsbCIsInN0b3JlIiwic3RvcmVTdGF0ZUluaXQiLCJlbmRDZWxsIiwiQWRkcmVzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/address/contractAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitBuilder.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitBuilder = void 0;\nconst Address_1 = __webpack_require__(/*! ../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst ExternalAddress_1 = __webpack_require__(/*! ../address/ExternalAddress */ \"(ssr)/./node_modules/@ton/core/dist/address/ExternalAddress.js\");\nconst BitString_1 = __webpack_require__(/*! ./BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\n/**\n * Class for building bit strings\n */ class BitBuilder {\n    constructor(size = 1023){\n        this._buffer = Buffer.alloc(Math.ceil(size / 8));\n        this._length = 0;\n    }\n    /**\n     * Current number of bits written\n     */ get length() {\n        return this._length;\n    }\n    /**\n     * Write a single bit\n     * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n     */ writeBit(value) {\n        // Check overflow\n        let n = this._length;\n        if (n > this._buffer.length * 8) {\n            throw new Error(\"BitBuilder overflow\");\n        }\n        // Set bit\n        if (typeof value === \"boolean\" && value === true || typeof value === \"number\" && value > 0) {\n            this._buffer[n / 8 | 0] |= 1 << 7 - n % 8;\n        }\n        // Advance\n        this._length++;\n    }\n    /**\n     * Copy bits from BitString\n     * @param src source bits\n     */ writeBits(src) {\n        for(let i = 0; i < src.length; i++){\n            this.writeBit(src.at(i));\n        }\n    }\n    /**\n     * Write bits from buffer\n     * @param src source buffer\n     */ writeBuffer(src) {\n        // Special case for aligned offsets\n        if (this._length % 8 === 0) {\n            if (this._length + src.length * 8 > this._buffer.length * 8) {\n                throw new Error(\"BitBuilder overflow\");\n            }\n            src.copy(this._buffer, this._length / 8);\n            this._length += src.length * 8;\n        } else {\n            for(let i = 0; i < src.length; i++){\n                this.writeUint(src[i], 8);\n            }\n        }\n    }\n    /**\n     * Write uint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     */ writeUint(value, bits) {\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        const v = BigInt(value);\n        if (bits === 0) {\n            if (v !== 0n) {\n                throw Error(`value is not zero for ${bits} bits. Got ${value}`);\n            } else {\n                return;\n            }\n        }\n        const vBits = 1n << BigInt(bits);\n        if (v < 0 || v >= vBits) {\n            throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);\n        }\n        if (this._length + bits > this._buffer.length * 8) {\n            throw new Error(\"BitBuilder overflow\");\n        }\n        const tillByte = 8 - this._length % 8;\n        if (tillByte > 0) {\n            const bidx = Math.floor(this._length / 8);\n            if (bits < tillByte) {\n                const wb = Number(v);\n                this._buffer[bidx] |= wb << tillByte - bits;\n                this._length += bits;\n            } else {\n                const wb = Number(v >> BigInt(bits - tillByte));\n                this._buffer[bidx] |= wb;\n                this._length += tillByte;\n            }\n        }\n        bits -= tillByte;\n        while(bits > 0){\n            if (bits >= 8) {\n                this._buffer[this._length / 8] = Number(v >> BigInt(bits - 8) & 0xffn);\n                this._length += 8;\n                bits -= 8;\n            } else {\n                this._buffer[this._length / 8] = Number(v << BigInt(8 - bits) & 0xffn);\n                this._length += bits;\n                bits = 0;\n            }\n        }\n    }\n    /**\n     * Write int value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     */ writeInt(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        // Corner case for zero bits\n        if (bits === 0) {\n            if (value !== 0n) {\n                throw Error(`value is not zero for ${bits} bits. Got ${value}`);\n            } else {\n                return;\n            }\n        }\n        // Corner case for one bit\n        if (bits === 1) {\n            if (value !== -1n && value !== 0n) {\n                throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);\n            } else {\n                this.writeBit(value === -1n);\n                return;\n            }\n        }\n        // Check input\n        let vBits = 1n << BigInt(bits) - 1n;\n        if (v < -vBits || v >= vBits) {\n            throw Error(`value is out of range for ${bits} bits. Got ${value}`);\n        }\n        // Write sign\n        if (v < 0) {\n            this.writeBit(true);\n            v = vBits + v;\n        } else {\n            this.writeBit(false);\n        }\n        // Write value\n        this.writeUint(v, bits - 1);\n    }\n    /**\n     * Wrtie var uint value, used for serializing coins\n     * @param value value to write as bigint or number\n     * @param bits header bits to write size\n     */ writeVarUint(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        if (v < 0) {\n            throw Error(`value is negative. Got ${value}`);\n        }\n        // Corner case for zero\n        if (v === 0n) {\n            // Write zero size\n            this.writeUint(0, bits);\n            return;\n        }\n        // Calculate size\n        const sizeBytes = Math.ceil(v.toString(2).length / 8); // Fastest way in most environments\n        const sizeBits = sizeBytes * 8;\n        // Write size\n        this.writeUint(sizeBytes, bits);\n        // Write number\n        this.writeUint(v, sizeBits);\n    }\n    /**\n     * Wrtie var int value, used for serializing coins\n     * @param value value to write as bigint or number\n     * @param bits header bits to write size\n     */ writeVarInt(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        // Corner case for zero\n        if (v === 0n) {\n            // Write zero size\n            this.writeUint(0, bits);\n            return;\n        }\n        // Calculate size\n        let v2 = v > 0 ? v : -v;\n        const sizeBytes = 1 + Math.ceil(v2.toString(2).length / 8); // Fastest way in most environments\n        const sizeBits = sizeBytes * 8;\n        // Write size\n        this.writeUint(sizeBytes, bits);\n        // Write number\n        this.writeInt(v, sizeBits);\n    }\n    /**\n     * Write coins in var uint format\n     * @param amount amount to write\n     */ writeCoins(amount) {\n        this.writeVarUint(amount, 4);\n    }\n    /**\n     * Write address\n     * @param address write address or address external\n     */ writeAddress(address) {\n        // Is empty address\n        if (address === null || address === undefined) {\n            this.writeUint(0, 2); // Empty address\n            return;\n        }\n        // Is Internal Address\n        if (Address_1.Address.isAddress(address)) {\n            this.writeUint(2, 2); // Internal address\n            this.writeUint(0, 1); // No anycast\n            this.writeInt(address.workChain, 8);\n            this.writeBuffer(address.hash);\n            return;\n        }\n        // Is External Address\n        if (ExternalAddress_1.ExternalAddress.isAddress(address)) {\n            this.writeUint(1, 2); // External address\n            this.writeUint(address.bits, 9);\n            this.writeUint(address.value, address.bits);\n            return;\n        }\n        // Invalid address\n        throw Error(`Invalid address. Got ${address}`);\n    }\n    /**\n     * Build BitString\n     * @returns result bit string\n     */ build() {\n        return new BitString_1.BitString(this._buffer, 0, this._length);\n    }\n    /**\n     * Build into Buffer\n     * @returns result buffer\n     */ buffer() {\n        if (this._length % 8 !== 0) {\n            throw new Error(\"BitBuilder buffer is not byte aligned\");\n        }\n        return this._buffer.subarray(0, this._length / 8);\n    }\n}\nexports.BitBuilder = BitBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitReader.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitReader = void 0;\nconst Address_1 = __webpack_require__(/*! ../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst ExternalAddress_1 = __webpack_require__(/*! ../address/ExternalAddress */ \"(ssr)/./node_modules/@ton/core/dist/address/ExternalAddress.js\");\n/**\n * Class for reading bit strings\n */ class BitReader {\n    constructor(bits, offset = 0){\n        this._checkpoints = [];\n        this._bits = bits;\n        this._offset = offset;\n    }\n    /**\n     * Offset in source bit string\n     */ get offset() {\n        return this._offset;\n    }\n    /**\n     * Number of bits remaining\n     */ get remaining() {\n        return this._bits.length - this._offset;\n    }\n    /**\n     * Skip bits\n     * @param bits number of bits to skip\n     */ skip(bits) {\n        if (bits < 0 || this._offset + bits > this._bits.length) {\n            throw new Error(`Index ${this._offset + bits} is out of bounds`);\n        }\n        this._offset += bits;\n    }\n    /**\n     * Reset to the beginning or latest checkpoint\n     */ reset() {\n        if (this._checkpoints.length > 0) {\n            this._offset = this._checkpoints.pop();\n        } else {\n            this._offset = 0;\n        }\n    }\n    /**\n     * Save checkpoint\n     */ save() {\n        this._checkpoints.push(this._offset);\n    }\n    /**\n     * Load a single bit\n     * @returns true if the bit is set, false otherwise\n     */ loadBit() {\n        let r = this._bits.at(this._offset);\n        this._offset++;\n        return r;\n    }\n    /**\n     * Preload bit\n     * @returns true if the bit is set, false otherwise\n     */ preloadBit() {\n        return this._bits.at(this._offset);\n    }\n    /**\n     * Load bit string\n     * @param bits number of bits to read\n     * @returns new bitstring\n     */ loadBits(bits) {\n        let r = this._bits.substring(this._offset, bits);\n        this._offset += bits;\n        return r;\n    }\n    /**\n     * Preload bit string\n     * @param bits number of bits to read\n     * @returns new bitstring\n     */ preloadBits(bits) {\n        return this._bits.substring(this._offset, bits);\n    }\n    /**\n     * Load buffer\n     * @param bytes number of bytes\n     * @returns new buffer\n     */ loadBuffer(bytes) {\n        let buf = this._preloadBuffer(bytes, this._offset);\n        this._offset += bytes * 8;\n        return buf;\n    }\n    /**\n     * Preload buffer\n     * @param bytes number of bytes\n     * @returns new buffer\n     */ preloadBuffer(bytes) {\n        return this._preloadBuffer(bytes, this._offset);\n    }\n    /**\n     * Load uint value\n     * @param bits uint bits\n     * @returns read value as number\n     */ loadUint(bits) {\n        return Number(this.loadUintBig(bits));\n    }\n    /**\n     * Load uint value as bigint\n     * @param bits uint bits\n     * @returns read value as bigint\n     */ loadUintBig(bits) {\n        let loaded = this.preloadUintBig(bits);\n        this._offset += bits;\n        return loaded;\n    }\n    /**\n     * Preload uint value\n     * @param bits uint bits\n     * @returns read value as number\n     */ preloadUint(bits) {\n        return Number(this._preloadUint(bits, this._offset));\n    }\n    /**\n     * Preload uint value as bigint\n     * @param bits uint bits\n     * @returns read value as bigint\n     */ preloadUintBig(bits) {\n        return this._preloadUint(bits, this._offset);\n    }\n    /**\n     * Load int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */ loadInt(bits) {\n        let res = this._preloadInt(bits, this._offset);\n        this._offset += bits;\n        return Number(res);\n    }\n    /**\n     * Load int value as bigint\n     * @param bits int bits\n     * @returns read value as bigint\n     */ loadIntBig(bits) {\n        let res = this._preloadInt(bits, this._offset);\n        this._offset += bits;\n        return res;\n    }\n    /**\n     * Preload int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */ preloadInt(bits) {\n        return Number(this._preloadInt(bits, this._offset));\n    }\n    /**\n     * Preload int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */ preloadIntBig(bits) {\n        return this._preloadInt(bits, this._offset);\n    }\n    /**\n     * Load varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ loadVarUint(bits) {\n        let size = Number(this.loadUint(bits));\n        return Number(this.loadUintBig(size * 8));\n    }\n    /**\n     * Load varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ loadVarUintBig(bits) {\n        let size = Number(this.loadUint(bits));\n        return this.loadUintBig(size * 8);\n    }\n    /**\n     * Preload varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ preloadVarUint(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return Number(this._preloadUint(size * 8, this._offset + bits));\n    }\n    /**\n     * Preload varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ preloadVarUintBig(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return this._preloadUint(size * 8, this._offset + bits);\n    }\n    /**\n     * Load varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ loadVarInt(bits) {\n        let size = Number(this.loadUint(bits));\n        return Number(this.loadIntBig(size * 8));\n    }\n    /**\n     * Load varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ loadVarIntBig(bits) {\n        let size = Number(this.loadUint(bits));\n        return this.loadIntBig(size * 8);\n    }\n    /**\n     * Preload varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ preloadVarInt(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return Number(this._preloadInt(size * 8, this._offset + bits));\n    }\n    /**\n     * Preload varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */ preloadVarIntBig(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return this._preloadInt(size * 8, this._offset + bits);\n    }\n    /**\n     * Load coins value\n     * @returns read value as bigint\n     */ loadCoins() {\n        return this.loadVarUintBig(4);\n    }\n    /**\n     * Preload coins value\n     * @returns read value as bigint\n     */ preloadCoins() {\n        return this.preloadVarUintBig(4);\n    }\n    /**\n     * Load Address\n     * @returns Address\n     */ loadAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 2) {\n            return this._loadInternalAddress();\n        } else {\n            throw new Error(\"Invalid address: \" + type);\n        }\n    }\n    /**\n     * Load internal address\n     * @returns Address or null\n     */ loadMaybeAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        } else if (type === 2) {\n            return this._loadInternalAddress();\n        } else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress\n     */ loadExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 1) {\n            return this._loadExternalAddress();\n        } else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress or null\n     */ loadMaybeExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        } else if (type === 1) {\n            return this._loadExternalAddress();\n        } else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Read address of any type\n     * @returns Address or ExternalAddress or null\n     */ loadAddressAny() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        } else if (type === 2) {\n            return this._loadInternalAddress();\n        } else if (type === 1) {\n            return this._loadExternalAddress();\n        } else if (type === 3) {\n            throw Error(\"Unsupported\");\n        } else {\n            throw Error(\"Unreachable\");\n        }\n    }\n    /**\n     * Load bit string that was padded to make it byte alligned. Used in BOC serialization\n     * @param bytes number of bytes to read\n     */ loadPaddedBits(bits) {\n        // Check that number of bits is byte alligned\n        if (bits % 8 !== 0) {\n            throw new Error(\"Invalid number of bits\");\n        }\n        // Skip padding\n        let length = bits;\n        while(true){\n            if (this._bits.at(this._offset + length - 1)) {\n                length--;\n                break;\n            } else {\n                length--;\n            }\n        }\n        // Read substring\n        let r = this._bits.substring(this._offset, length);\n        this._offset += bits;\n        return r;\n    }\n    /**\n     * Clone BitReader\n     */ clone() {\n        return new BitReader(this._bits, this._offset);\n    }\n    /**\n     * Preload int from specific offset\n     * @param bits bits to preload\n     * @param offset offset to start from\n     * @returns read value as bigint\n     */ _preloadInt(bits, offset) {\n        if (bits == 0) {\n            return 0n;\n        }\n        let sign = this._bits.at(offset);\n        let res = 0n;\n        for(let i = 0; i < bits - 1; i++){\n            if (this._bits.at(offset + 1 + i)) {\n                res += 1n << BigInt(bits - i - 1 - 1);\n            }\n        }\n        if (sign) {\n            res = res - (1n << BigInt(bits - 1));\n        }\n        return res;\n    }\n    /**\n     * Preload uint from specific offset\n     * @param bits bits to preload\n     * @param offset offset to start from\n     * @returns read value as bigint\n     */ _preloadUint(bits, offset) {\n        if (bits == 0) {\n            return 0n;\n        }\n        let res = 0n;\n        for(let i = 0; i < bits; i++){\n            if (this._bits.at(offset + i)) {\n                res += 1n << BigInt(bits - i - 1);\n            }\n        }\n        return res;\n    }\n    _preloadBuffer(bytes, offset) {\n        // Try to load fast\n        let fastBuffer = this._bits.subbuffer(offset, bytes * 8);\n        if (fastBuffer) {\n            return fastBuffer;\n        }\n        // Load slow\n        let buf = Buffer.alloc(bytes);\n        for(let i = 0; i < bytes; i++){\n            buf[i] = Number(this._preloadUint(8, offset + i * 8));\n        }\n        return buf;\n    }\n    _loadInternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type !== 2) {\n            throw Error(\"Invalid address\");\n        }\n        // No Anycast supported\n        if (this._preloadUint(1, this._offset + 2) !== 0n) {\n            throw Error(\"Invalid address\");\n        }\n        // Read address\n        let wc = Number(this._preloadInt(8, this._offset + 3));\n        let hash = this._preloadBuffer(32, this._offset + 11);\n        // Update offset\n        this._offset += 267;\n        return new Address_1.Address(wc, hash);\n    }\n    _loadExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type !== 1) {\n            throw Error(\"Invalid address\");\n        }\n        // Load length\n        let bits = Number(this._preloadUint(9, this._offset + 2));\n        // Load address\n        let value = this._preloadUint(bits, this._offset + 11);\n        // Update offset\n        this._offset += 11 + bits;\n        return new ExternalAddress_1.ExternalAddress(value, bits);\n    }\n}\nexports.BitReader = BitReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/BitString.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitString.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitString = void 0;\nconst paddedBits_1 = __webpack_require__(/*! ./utils/paddedBits */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js\");\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\n/**\n * BitString is a class that represents a bitstring in a buffer with a specified offset and length\n */ class BitString {\n    /**\n     * Checks if supplied object is BitString\n     * @param src is unknow object\n     * @returns true if object is BitString and false otherwise\n     **/ static isBitString(src) {\n        return src instanceof BitString;\n    }\n    /**\n     * Constructing BitString from a buffer\n     * @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified\n     * @param offset offset in bits from the start of the buffer\n     * @param length length of the bitstring in bits\n     */ constructor(data, offset, length){\n        this[_a] = ()=>this.toString();\n        // Check bounds\n        if (length < 0) {\n            throw new Error(`Length ${length} is out of bounds`);\n        }\n        this._length = length;\n        this._data = data;\n        this._offset = offset;\n    }\n    /**\n     * Returns the length of the bitstring\n     */ get length() {\n        return this._length;\n    }\n    /**\n     * Returns the bit at the specified index\n     * @param index index of the bit\n     * @throws Error if index is out of bounds\n     * @returns true if the bit is set, false otherwise\n     */ at(index) {\n        // Check bounds\n        if (index >= this._length) {\n            throw new Error(`Index ${index} > ${this._length} is out of bounds`);\n        }\n        if (index < 0) {\n            throw new Error(`Index ${index} < 0 is out of bounds`);\n        }\n        // Calculcate offsets\n        let byteIndex = this._offset + index >> 3;\n        let bitIndex = 7 - (this._offset + index) % 8; // NOTE: We are using big endian\n        // Return the bit\n        return (this._data[byteIndex] & 1 << bitIndex) !== 0;\n    }\n    /**\n     * Get a subscring of the bitstring\n     * @param offset\n     * @param length\n     * @returns\n     */ substring(offset, length) {\n        // Check offset\n        if (offset > this._length) {\n            throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);\n        }\n        if (offset < 0) {\n            throw new Error(`Offset(${offset}) < 0 is out of bounds`);\n        }\n        // Corner case of empty string\n        if (length === 0) {\n            return BitString.EMPTY;\n        }\n        if (offset + length > this._length) {\n            throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);\n        }\n        // Create substring\n        return new BitString(this._data, this._offset + offset, length);\n    }\n    /**\n     * Try to get a buffer from the bitstring without allocations\n     * @param offset offset in bits\n     * @param length length in bits\n     * @returns buffer if the bitstring is aligned to bytes, null otherwise\n     */ subbuffer(offset, length) {\n        // Check offset\n        if (offset > this._length) {\n            throw new Error(`Offset ${offset} is out of bounds`);\n        }\n        if (offset < 0) {\n            throw new Error(`Offset ${offset} is out of bounds`);\n        }\n        if (offset + length > this._length) {\n            throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);\n        }\n        // Check alignment\n        if (length % 8 !== 0) {\n            return null;\n        }\n        if ((this._offset + offset) % 8 !== 0) {\n            return null;\n        }\n        // Create substring\n        let start = this._offset + offset >> 3;\n        let end = start + (length >> 3);\n        return this._data.subarray(start, end);\n    }\n    /**\n     * Checks for equality\n     * @param b other bitstring\n     * @returns true if the bitstrings are equal, false otherwise\n     */ equals(b) {\n        if (this._length !== b._length) {\n            return false;\n        }\n        for(let i = 0; i < this._length; i++){\n            if (this.at(i) !== b.at(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Format to canonical string\n     * @returns formatted bits as a string\n     */ toString() {\n        const padded = (0, paddedBits_1.bitsToPaddedBuffer)(this);\n        if (this._length % 4 === 0) {\n            const s = padded.subarray(0, Math.ceil(this._length / 8)).toString(\"hex\").toUpperCase();\n            if (this._length % 8 === 0) {\n                return s;\n            } else {\n                return s.substring(0, s.length - 1);\n            }\n        } else {\n            const hex = padded.toString(\"hex\").toUpperCase();\n            if (this._length % 8 <= 4) {\n                return hex.substring(0, hex.length - 1) + \"_\";\n            } else {\n                return hex + \"_\";\n            }\n        }\n    }\n}\nexports.BitString = BitString;\n_a = symbol_inspect_1.default;\nBitString.EMPTY = new BitString(Buffer.alloc(0), 0, 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/Builder.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Builder.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Builder = exports.beginCell = void 0;\nconst BitBuilder_1 = __webpack_require__(/*! ./BitBuilder */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js\");\nconst Cell_1 = __webpack_require__(/*! ./Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nconst strings_1 = __webpack_require__(/*! ./utils/strings */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/strings.js\");\n/**\n * Start building a cell\n * @returns a new builder\n */ function beginCell() {\n    return new Builder();\n}\nexports.beginCell = beginCell;\n/**\n * Builder for Cells\n */ class Builder {\n    constructor(){\n        this._bits = new BitBuilder_1.BitBuilder();\n        this._refs = [];\n    }\n    /**\n     * Bits written so far\n     */ get bits() {\n        return this._bits.length;\n    }\n    /**\n     * References written so far\n     */ get refs() {\n        return this._refs.length;\n    }\n    /**\n     * Available bits\n     */ get availableBits() {\n        return 1023 - this.bits;\n    }\n    /**\n     * Available references\n     */ get availableRefs() {\n        return 4 - this.refs;\n    }\n    /**\n     * Write a single bit\n     * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n     * @returns this builder\n     */ storeBit(value) {\n        this._bits.writeBit(value);\n        return this;\n    }\n    /**\n     * Write bits from BitString\n     * @param src source bits\n     * @returns this builder\n     */ storeBits(src) {\n        this._bits.writeBits(src);\n        return this;\n    }\n    /**\n     * Store Buffer\n     * @param src source buffer\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */ storeBuffer(src, bytes) {\n        if (bytes !== undefined && bytes !== null) {\n            if (src.length !== bytes) {\n                throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);\n            }\n        }\n        this._bits.writeBuffer(src);\n        return this;\n    }\n    /**\n     * Store Maybe Buffer\n     * @param src source buffer or null\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */ storeMaybeBuffer(src, bytes) {\n        if (src !== null) {\n            this.storeBit(1);\n            this.storeBuffer(src, bytes);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store uint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */ storeUint(value, bits) {\n        this._bits.writeUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe uint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */ storeMaybeUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeUint(value, bits);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store int value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */ storeInt(value, bits) {\n        this._bits.writeInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe int value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */ storeMaybeInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeInt(value, bits);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varuint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */ storeVarUint(value, bits) {\n        this._bits.writeVarUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varuint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */ storeMaybeVarUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarUint(value, bits);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */ storeVarInt(value, bits) {\n        this._bits.writeVarInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */ storeMaybeVarInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarInt(value, bits);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store coins value\n     * @param amount amount of coins\n     * @returns this builder\n     */ storeCoins(amount) {\n        this._bits.writeCoins(amount);\n        return this;\n    }\n    /**\n     * Store maybe coins value\n     * @param amount amount of coins, null or undefined\n     * @returns this builder\n     */ storeMaybeCoins(amount) {\n        if (amount !== null && amount !== undefined) {\n            this.storeBit(1);\n            this.storeCoins(amount);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store address\n     * @param addres address to store\n     * @returns this builder\n     */ storeAddress(address) {\n        this._bits.writeAddress(address);\n        return this;\n    }\n    /**\n     * Store reference\n     * @param cell cell or builder to store\n     * @returns this builder\n     */ storeRef(cell) {\n        // Check refs\n        if (this._refs.length >= 4) {\n            throw new Error(\"Too many references\");\n        }\n        // Store reference\n        if (cell instanceof Cell_1.Cell) {\n            this._refs.push(cell);\n        } else if (cell instanceof Builder) {\n            this._refs.push(cell.endCell());\n        } else {\n            throw new Error(\"Invalid argument\");\n        }\n        return this;\n    }\n    /**\n     * Store reference if not null\n     * @param cell cell or builder to store\n     * @returns this builder\n     */ storeMaybeRef(cell) {\n        if (cell) {\n            this.storeBit(1);\n            this.storeRef(cell);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store slice it in this builder\n     * @param src source slice\n     */ storeSlice(src) {\n        let c = src.clone();\n        if (c.remainingBits > 0) {\n            this.storeBits(c.loadBits(c.remainingBits));\n        }\n        while(c.remainingRefs > 0){\n            this.storeRef(c.loadRef());\n        }\n        return this;\n    }\n    /**\n     * Store slice in this builder if not null\n     * @param src source slice\n     */ storeMaybeSlice(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeSlice(src);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store builder\n     * @param src builder to store\n     * @returns this builder\n     */ storeBuilder(src) {\n        return this.storeSlice(src.endCell().beginParse());\n    }\n    /**\n     * Store builder if not null\n     * @param src builder to store\n     * @returns this builder\n     */ storeMaybeBuilder(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeBuilder(src);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder\n     * @param writer writer or builder to store\n     * @returns this builder\n     */ storeWritable(writer) {\n        if (typeof writer === \"object\") {\n            writer.writeTo(this);\n        } else {\n            writer(this);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder if not null\n     * @param writer writer or builder to store\n     * @returns this builder\n     */ storeMaybeWritable(writer) {\n        if (writer) {\n            this.storeBit(1);\n            this.storeWritable(writer);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store object in this builder\n     * @param writer Writable or writer functuin\n     */ store(writer) {\n        this.storeWritable(writer);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */ storeStringTail(src) {\n        (0, strings_1.writeString)(src, this);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */ storeMaybeStringTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            (0, strings_1.writeString)(src, this);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store string tail in ref\n     * @param src source string\n     * @returns this builder\n     */ storeStringRefTail(src) {\n        this.storeRef(beginCell().storeStringTail(src));\n        return this;\n    }\n    /**\n     * Store maybe string tail in ref\n     * @param src source string\n     * @returns this builder\n     */ storeMaybeStringRefTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            this.storeStringRefTail(src);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder\n     * @param dict dictionary to store\n     * @returns this builder\n     */ storeDict(dict, key, value) {\n        if (dict) {\n            dict.store(this, key, value);\n        } else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder directly\n     * @param dict dictionary to store\n     * @returns this builder\n     */ storeDictDirect(dict, key, value) {\n        dict.storeDirect(this, key, value);\n        return this;\n    }\n    /**\n     * Complete cell\n     * @param opts options\n     * @returns cell\n     */ endCell(opts) {\n        return new Cell_1.Cell({\n            bits: this._bits.build(),\n            refs: this._refs,\n            exotic: opts?.exotic\n        });\n    }\n    /**\n     * Convert to cell\n     * @returns cell\n     */ asCell() {\n        return this.endCell();\n    }\n    /**\n     * Convert to slice\n     * @returns slice\n     */ asSlice() {\n        return this.endCell().beginParse();\n    }\n}\nexports.Builder = Builder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/Cell.js":
/*!*************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Cell.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Cell = void 0;\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\nconst BitString_1 = __webpack_require__(/*! ./BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nconst CellType_1 = __webpack_require__(/*! ./CellType */ \"(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\");\nconst Slice_1 = __webpack_require__(/*! ./Slice */ \"(ssr)/./node_modules/@ton/core/dist/boc/Slice.js\");\nconst resolveExotic_1 = __webpack_require__(/*! ./cell/resolveExotic */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/resolveExotic.js\");\nconst wonderCalculator_1 = __webpack_require__(/*! ./cell/wonderCalculator */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js\");\nconst serialization_1 = __webpack_require__(/*! ./cell/serialization */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/serialization.js\");\nconst BitReader_1 = __webpack_require__(/*! ./BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nconst Builder_1 = __webpack_require__(/*! ./Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\n/**\n * Cell as described in TVM spec\n */ class Cell {\n    /**\n     * Deserialize cells from BOC\n     * @param src source buffer\n     * @returns array of cells\n     */ static fromBoc(src) {\n        return (0, serialization_1.deserializeBoc)(src);\n    }\n    /**\n     * Helper class that deserializes a single cell from BOC in base64\n     * @param src source string\n     */ static fromBase64(src) {\n        let parsed = Cell.fromBoc(Buffer.from(src, \"base64\"));\n        if (parsed.length !== 1) {\n            throw new Error(\"Deserialized more than one cell\");\n        }\n        return parsed[0];\n    }\n    constructor(opts){\n        // Level and depth information\n        this._hashes = [];\n        this._depths = [];\n        /**\n         * Beging cell parsing\n         * @returns a new slice\n         */ this.beginParse = (allowExotic = false)=>{\n            if (this.isExotic && !allowExotic) {\n                throw new Error(\"Exotic cells cannot be parsed\");\n            }\n            return new Slice_1.Slice(new BitReader_1.BitReader(this.bits), this.refs);\n        };\n        /**\n         * Get cell hash\n         * @param level level\n         * @returns cell hash\n         */ this.hash = (level = 3)=>{\n            return this._hashes[Math.min(this._hashes.length - 1, level)];\n        };\n        /**\n         * Get cell depth\n         * @param level level\n         * @returns cell depth\n         */ this.depth = (level = 3)=>{\n            return this._depths[Math.min(this._depths.length - 1, level)];\n        };\n        /**\n         * Get cell level\n         * @returns cell level\n         */ this.level = ()=>{\n            return this.mask.level;\n        };\n        /**\n         * Checks cell to be euqal to another cell\n         * @param other other cell\n         * @returns true if cells are equal\n         */ this.equals = (other)=>{\n            return this.hash().equals(other.hash());\n        };\n        this[_a] = ()=>this.toString();\n        // Resolve bits\n        let bits = BitString_1.BitString.EMPTY;\n        if (opts && opts.bits) {\n            bits = opts.bits;\n        }\n        // Resolve refs\n        let refs = [];\n        if (opts && opts.refs) {\n            refs = [\n                ...opts.refs\n            ];\n        }\n        // Resolve type\n        let hashes;\n        let depths;\n        let mask;\n        let type = CellType_1.CellType.Ordinary;\n        if (opts && opts.exotic) {\n            // Resolve exotic cell\n            let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs);\n            // Perform wonders\n            let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs);\n            // Copy results\n            mask = wonders.mask;\n            depths = wonders.depths;\n            hashes = wonders.hashes;\n            type = resolved.type;\n        } else {\n            // Check correctness\n            if (refs.length > 4) {\n                throw new Error(\"Invalid number of references\");\n            }\n            if (bits.length > 1023) {\n                throw new Error(`Bits overflow: ${bits.length} > 1023`);\n            }\n            // Perform wonders\n            let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_1.CellType.Ordinary, bits, refs);\n            // Copy results\n            mask = wonders.mask;\n            depths = wonders.depths;\n            hashes = wonders.hashes;\n            type = CellType_1.CellType.Ordinary;\n        }\n        // Set fields\n        this.type = type;\n        this.bits = bits;\n        this.refs = refs;\n        this.mask = mask;\n        this._depths = depths;\n        this._hashes = hashes;\n        Object.freeze(this);\n        Object.freeze(this.refs);\n        Object.freeze(this.bits);\n        Object.freeze(this.mask);\n        Object.freeze(this._depths);\n        Object.freeze(this._hashes);\n    }\n    /**\n     * Check if cell is exotic\n     */ get isExotic() {\n        return this.type !== CellType_1.CellType.Ordinary;\n    }\n    /**\n     * Serializes cell to BOC\n     * @param opts options\n     */ toBoc(opts) {\n        let idx = opts && opts.idx !== null && opts.idx !== undefined ? opts.idx : false;\n        let crc32 = opts && opts.crc32 !== null && opts.crc32 !== undefined ? opts.crc32 : true;\n        return (0, serialization_1.serializeBoc)(this, {\n            idx,\n            crc32\n        });\n    }\n    /**\n     * Format cell to string\n     * @param indent indentation\n     * @returns string representation\n     */ toString(indent) {\n        let id = indent || \"\";\n        let t = \"x\";\n        if (this.isExotic) {\n            if (this.type === CellType_1.CellType.MerkleProof) {\n                t = \"p\";\n            } else if (this.type === CellType_1.CellType.MerkleUpdate) {\n                t = \"u\";\n            } else if (this.type === CellType_1.CellType.PrunedBranch) {\n                t = \"p\";\n            }\n        }\n        let s = id + (this.isExotic ? t : \"x\") + \"{\" + this.bits.toString() + \"}\";\n        for(let k in this.refs){\n            const i = this.refs[k];\n            s += \"\\n\" + i.toString(id + \" \");\n        }\n        return s;\n    }\n    /**\n     * Covnert cell to slice\n     * @returns slice\n     */ asSlice() {\n        return this.beginParse();\n    }\n    /**\n     * Convert cell to a builder that has this cell stored\n     * @returns builder\n     */ asBuilder() {\n        return (0, Builder_1.beginCell)().storeSlice(this.asSlice());\n    }\n}\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;\nCell.EMPTY = new Cell();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/CellType.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/CellType.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CellType = void 0;\nvar CellType;\n(function(CellType) {\n    CellType[CellType[\"Ordinary\"] = -1] = \"Ordinary\";\n    CellType[CellType[\"PrunedBranch\"] = 1] = \"PrunedBranch\";\n    CellType[CellType[\"Library\"] = 2] = \"Library\";\n    CellType[CellType[\"MerkleProof\"] = 3] = \"MerkleProof\";\n    CellType[CellType[\"MerkleUpdate\"] = 4] = \"MerkleUpdate\";\n})(CellType || (exports.CellType = CellType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL0NlbGxUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLElBQUlFO0FBQ0gsVUFBVUEsUUFBUTtJQUNmQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFFLEdBQUc7SUFDdENBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDekNBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDcENBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDeENBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7QUFDN0MsR0FBR0EsWUFBYUYsQ0FBQUEsZ0JBQWdCLEdBQUdFLFdBQVcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL0NlbGxUeXBlLmpzP2VkNmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNlbGxUeXBlID0gdm9pZCAwO1xudmFyIENlbGxUeXBlO1xuKGZ1bmN0aW9uIChDZWxsVHlwZSkge1xuICAgIENlbGxUeXBlW0NlbGxUeXBlW1wiT3JkaW5hcnlcIl0gPSAtMV0gPSBcIk9yZGluYXJ5XCI7XG4gICAgQ2VsbFR5cGVbQ2VsbFR5cGVbXCJQcnVuZWRCcmFuY2hcIl0gPSAxXSA9IFwiUHJ1bmVkQnJhbmNoXCI7XG4gICAgQ2VsbFR5cGVbQ2VsbFR5cGVbXCJMaWJyYXJ5XCJdID0gMl0gPSBcIkxpYnJhcnlcIjtcbiAgICBDZWxsVHlwZVtDZWxsVHlwZVtcIk1lcmtsZVByb29mXCJdID0gM10gPSBcIk1lcmtsZVByb29mXCI7XG4gICAgQ2VsbFR5cGVbQ2VsbFR5cGVbXCJNZXJrbGVVcGRhdGVcIl0gPSA0XSA9IFwiTWVya2xlVXBkYXRlXCI7XG59KShDZWxsVHlwZSB8fCAoZXhwb3J0cy5DZWxsVHlwZSA9IENlbGxUeXBlID0ge30pKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNlbGxUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/Slice.js":
/*!**************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Slice.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Slice = void 0;\nconst symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ \"(ssr)/./node_modules/symbol.inspect/index.js\"));\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nconst Builder_1 = __webpack_require__(/*! ./Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst strings_1 = __webpack_require__(/*! ./utils/strings */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/strings.js\");\n/**\n * Slice is a class that allows to read cell data\n */ class Slice {\n    constructor(reader, refs){\n        this[_a] = ()=>this.toString();\n        this._reader = reader.clone();\n        this._refs = [\n            ...refs\n        ];\n        this._refsOffset = 0;\n    }\n    /**\n     * Get remaining bits\n     */ get remainingBits() {\n        return this._reader.remaining;\n    }\n    /**\n     * Get offset bits\n     */ get offsetBits() {\n        return this._reader.offset;\n    }\n    /**\n     * Get remaining refs\n     */ get remainingRefs() {\n        return this._refs.length - this._refsOffset;\n    }\n    /**\n     * Get offset refs\n     */ get offsetRefs() {\n        return this._refsOffset;\n    }\n    /**\n     * Skip bits\n     * @param bits\n     */ skip(bits) {\n        this._reader.skip(bits);\n        return this;\n    }\n    /**\n     * Load a single bit\n     * @returns true or false depending on the bit value\n     */ loadBit() {\n        return this._reader.loadBit();\n    }\n    /**\n     * Preload a signle bit\n     * @returns true or false depending on the bit value\n     */ preloadBit() {\n        return this._reader.preloadBit();\n    }\n    /**\n     * Load a boolean\n     * @returns true or false depending on the bit value\n     */ loadBoolean() {\n        return this.loadBit();\n    }\n    /**\n     * Load maybe boolean\n     * @returns true or false depending on the bit value or null\n     */ loadMaybeBoolean() {\n        if (this.loadBit()) {\n            return this.loadBoolean();\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */ loadBits(bits) {\n        return this._reader.loadBits(bits);\n    }\n    /**\n     * Preload bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */ preloadBits(bits) {\n        return this._reader.preloadBits(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */ loadUint(bits) {\n        return this._reader.loadUint(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */ loadUintBig(bits) {\n        return this._reader.loadUintBig(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */ preloadUint(bits) {\n        return this._reader.preloadUint(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */ preloadUintBig(bits) {\n        return this._reader.preloadUintBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */ loadMaybeUint(bits) {\n        if (this.loadBit()) {\n            return this.loadUint(bits);\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */ loadMaybeUintBig(bits) {\n        if (this.loadBit()) {\n            return this.loadUintBig(bits);\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */ loadInt(bits) {\n        return this._reader.loadInt(bits);\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */ loadIntBig(bits) {\n        return this._reader.loadIntBig(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */ preloadInt(bits) {\n        return this._reader.preloadInt(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */ preloadIntBig(bits) {\n        return this._reader.preloadIntBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */ loadMaybeInt(bits) {\n        if (this.loadBit()) {\n            return this.loadInt(bits);\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */ loadMaybeIntBig(bits) {\n        if (this.loadBit()) {\n            return this.loadIntBig(bits);\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */ loadVarUint(bits) {\n        return this._reader.loadVarUint(bits);\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */ loadVarUintBig(bits) {\n        return this._reader.loadVarUintBig(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */ preloadVarUint(bits) {\n        return this._reader.preloadVarUint(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */ preloadVarUintBig(bits) {\n        return this._reader.preloadVarUintBig(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */ loadVarInt(bits) {\n        return this._reader.loadVarInt(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */ loadVarIntBig(bits) {\n        return this._reader.loadVarIntBig(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */ preloadVarInt(bits) {\n        return this._reader.preloadVarInt(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */ preloadVarIntBig(bits) {\n        return this._reader.preloadVarIntBig(bits);\n    }\n    /**\n     * Load coins\n     * @returns coins value\n     */ loadCoins() {\n        return this._reader.loadCoins();\n    }\n    /**\n     * Preload coins\n     * @returns coins value\n     */ preloadCoins() {\n        return this._reader.preloadCoins();\n    }\n    /**\n     * Load maybe coins\n     * @returns coins value or null\n     */ loadMaybeCoins() {\n        if (this._reader.loadBit()) {\n            return this._reader.loadCoins();\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load internal Address\n     * @returns Address\n     */ loadAddress() {\n        return this._reader.loadAddress();\n    }\n    /**\n     * Load optional internal Address\n     * @returns Address or null\n     */ loadMaybeAddress() {\n        return this._reader.loadMaybeAddress();\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress\n     */ loadExternalAddress() {\n        return this._reader.loadExternalAddress();\n    }\n    /**\n     * Load optional external address\n     * @returns ExternalAddress or null\n     */ loadMaybeExternalAddress() {\n        return this._reader.loadMaybeExternalAddress();\n    }\n    /**\n     * Load address\n     * @returns Address, ExternalAddress or null\n     */ loadAddressAny() {\n        return this._reader.loadAddressAny();\n    }\n    /**\n     * Load reference\n     * @returns Cell\n     */ loadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset++];\n    }\n    /**\n     * Preload reference\n     * @returns Cell\n     */ preloadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset];\n    }\n    /**\n     * Load optional reference\n     * @returns Cell or null\n     */ loadMaybeRef() {\n        if (this.loadBit()) {\n            return this.loadRef();\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Preload optional reference\n     * @returns Cell or null\n     */ preloadMaybeRef() {\n        if (this.preloadBit()) {\n            return this.preloadRef();\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */ loadBuffer(bytes) {\n        return this._reader.loadBuffer(bytes);\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */ preloadBuffer(bytes) {\n        return this._reader.preloadBuffer(bytes);\n    }\n    /**\n     * Load string tail\n     */ loadStringTail() {\n        return (0, strings_1.readString)(this);\n    }\n    /**\n     * Load maybe string tail\n     * @returns string or null\n     */ loadMaybeStringTail() {\n        if (this.loadBit()) {\n            return (0, strings_1.readString)(this);\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Load string tail from ref\n     * @returns string\n     */ loadStringRefTail() {\n        return (0, strings_1.readString)(this.loadRef().beginParse());\n    }\n    /**\n     * Load maybe string tail from ref\n     * @returns string or null\n     */ loadMaybeStringRefTail() {\n        const ref = this.loadMaybeRef();\n        if (ref) {\n            return (0, strings_1.readString)(ref.beginParse());\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Loads dictionary\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */ loadDict(key, value) {\n        return Dictionary_1.Dictionary.load(key, value, this);\n    }\n    /**\n     * Loads dictionary directly from current slice\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */ loadDictDirect(key, value) {\n        return Dictionary_1.Dictionary.loadDirect(key, value, this);\n    }\n    /**\n     * Checks if slice is empty\n     */ endParse() {\n        if (this.remainingBits > 0 || this.remainingRefs > 0) {\n            throw new Error(\"Slice is not empty\");\n        }\n    }\n    /**\n     * Convert slice to cell\n     */ asCell() {\n        return (0, Builder_1.beginCell)().storeSlice(this).endCell();\n    }\n    /**\n     *\n     * @returns\n     */ asBuilder() {\n        return (0, Builder_1.beginCell)().storeSlice(this);\n    }\n    /**\n     * Clone slice\n     * @returns cloned slice\n     */ clone(fromStart = false) {\n        if (fromStart) {\n            let reader = this._reader.clone();\n            reader.reset();\n            return new Slice(reader, this._refs);\n        } else {\n            let res = new Slice(this._reader, this._refs);\n            res._refsOffset = this._refsOffset;\n            return res;\n        }\n    }\n    /**\n     * Print slice as string by converting it to cell\n     * @returns string\n     */ toString() {\n        return this.asCell().toString();\n    }\n}\nexports.Slice = Slice;\n_a = symbol_inspect_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/Slice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/LevelMask.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/LevelMask.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LevelMask = void 0;\nclass LevelMask {\n    constructor(mask = 0){\n        this._mask = 0;\n        this._mask = mask;\n        this._hashIndex = countSetBits(this._mask);\n        this._hashCount = this._hashIndex + 1;\n    }\n    get value() {\n        return this._mask;\n    }\n    get level() {\n        return 32 - Math.clz32(this._mask);\n    }\n    get hashIndex() {\n        return this._hashIndex;\n    }\n    get hashCount() {\n        return this._hashCount;\n    }\n    apply(level) {\n        return new LevelMask(this._mask & (1 << level) - 1);\n    }\n    isSignificant(level) {\n        let res = level === 0 || (this._mask >> level - 1) % 2 !== 0;\n        return res;\n    // bool res = level == 0 | | ( (mask_ >> (level -1)) % 2 != 0);\n    }\n}\nexports.LevelMask = LevelMask;\nfunction countSetBits(n) {\n    n = n - (n >> 1 & 0x55555555);\n    n = (n & 0x33333333) + (n >> 2 & 0x33333333);\n    return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvTGV2ZWxNYXNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1FO0lBQ0ZDLFlBQVlDLE9BQU8sQ0FBQyxDQUFFO1FBQ2xCLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLEdBQUdEO1FBQ2IsSUFBSSxDQUFDRSxVQUFVLEdBQUdDLGFBQWEsSUFBSSxDQUFDRixLQUFLO1FBQ3pDLElBQUksQ0FBQ0csVUFBVSxHQUFHLElBQUksQ0FBQ0YsVUFBVSxHQUFHO0lBQ3hDO0lBQ0EsSUFBSUwsUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDSSxLQUFLO0lBQ3JCO0lBQ0EsSUFBSUksUUFBUTtRQUNSLE9BQU8sS0FBS0MsS0FBS0MsS0FBSyxDQUFDLElBQUksQ0FBQ04sS0FBSztJQUNyQztJQUNBLElBQUlPLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQ04sVUFBVTtJQUMxQjtJQUNBLElBQUlPLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQ0wsVUFBVTtJQUMxQjtJQUNBTSxNQUFNTCxLQUFLLEVBQUU7UUFDVCxPQUFPLElBQUlQLFVBQVUsSUFBSSxDQUFDRyxLQUFLLEdBQUksQ0FBQyxLQUFLSSxLQUFJLElBQUs7SUFDdEQ7SUFDQU0sY0FBY04sS0FBSyxFQUFFO1FBQ2pCLElBQUlPLE1BQU1QLFVBQVUsS0FBSyxDQUFDLElBQUksQ0FBQ0osS0FBSyxJQUFLSSxRQUFRLENBQUMsSUFBSyxNQUFNO1FBQzdELE9BQU9PO0lBQ1AsK0RBQStEO0lBQ25FO0FBQ0o7QUFDQWhCLGlCQUFpQixHQUFHRTtBQUNwQixTQUFTSyxhQUFhVSxDQUFDO0lBQ25CQSxJQUFJQSxJQUFLLE1BQU0sSUFBSyxVQUFTO0lBQzdCQSxJQUFJLENBQUNBLElBQUksVUFBUyxJQUFNLE1BQU0sSUFBSyxVQUFTO0lBQzVDLE9BQU8sQ0FBRUEsSUFBS0EsQ0FBQUEsS0FBSyxLQUFLLFNBQVEsSUFBSyxhQUFjO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9ib2MvY2VsbC9MZXZlbE1hc2suanM/OGVkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGV2ZWxNYXNrID0gdm9pZCAwO1xuY2xhc3MgTGV2ZWxNYXNrIHtcbiAgICBjb25zdHJ1Y3RvcihtYXNrID0gMCkge1xuICAgICAgICB0aGlzLl9tYXNrID0gMDtcbiAgICAgICAgdGhpcy5fbWFzayA9IG1hc2s7XG4gICAgICAgIHRoaXMuX2hhc2hJbmRleCA9IGNvdW50U2V0Qml0cyh0aGlzLl9tYXNrKTtcbiAgICAgICAgdGhpcy5faGFzaENvdW50ID0gdGhpcy5faGFzaEluZGV4ICsgMTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICB9XG4gICAgZ2V0IGxldmVsKCkge1xuICAgICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHRoaXMuX21hc2spO1xuICAgIH1cbiAgICBnZXQgaGFzaEluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzaEluZGV4O1xuICAgIH1cbiAgICBnZXQgaGFzaENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzaENvdW50O1xuICAgIH1cbiAgICBhcHBseShsZXZlbCkge1xuICAgICAgICByZXR1cm4gbmV3IExldmVsTWFzayh0aGlzLl9tYXNrICYgKCgxIDw8IGxldmVsKSAtIDEpKTtcbiAgICB9XG4gICAgaXNTaWduaWZpY2FudChsZXZlbCkge1xuICAgICAgICBsZXQgcmVzID0gbGV2ZWwgPT09IDAgfHwgKHRoaXMuX21hc2sgPj4gKGxldmVsIC0gMSkpICUgMiAhPT0gMDtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgLy8gYm9vbCByZXMgPSBsZXZlbCA9PSAwIHwgfCAoIChtYXNrXyA+PiAobGV2ZWwgLTEpKSAlIDIgIT0gMCk7XG4gICAgfVxufVxuZXhwb3J0cy5MZXZlbE1hc2sgPSBMZXZlbE1hc2s7XG5mdW5jdGlvbiBjb3VudFNldEJpdHMobikge1xuICAgIG4gPSBuIC0gKChuID4+IDEpICYgMHg1NTU1NTU1NSk7XG4gICAgbiA9IChuICYgMHgzMzMzMzMzMykgKyAoKG4gPj4gMikgJiAweDMzMzMzMzMzKTtcbiAgICByZXR1cm4gKChuICsgKG4gPj4gNCkgJiAweEYwRjBGMEYpICogMHgxMDEwMTAxKSA+PiAyNDtcbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxldmVsTWFzayIsImNvbnN0cnVjdG9yIiwibWFzayIsIl9tYXNrIiwiX2hhc2hJbmRleCIsImNvdW50U2V0Qml0cyIsIl9oYXNoQ291bnQiLCJsZXZlbCIsIk1hdGgiLCJjbHozMiIsImhhc2hJbmRleCIsImhhc2hDb3VudCIsImFwcGx5IiwiaXNTaWduaWZpY2FudCIsInJlcyIsIm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/LevelMask.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/descriptor.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/descriptor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getRepr = exports.getBitsDescriptor = exports.getRefsDescriptor = void 0;\nconst CellType_1 = __webpack_require__(/*! ../CellType */ \"(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\");\nconst paddedBits_1 = __webpack_require__(/*! ../utils/paddedBits */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js\");\nfunction getRefsDescriptor(refs, levelMask, type) {\n    return refs.length + (type !== CellType_1.CellType.Ordinary ? 1 : 0) * 8 + levelMask * 32;\n}\nexports.getRefsDescriptor = getRefsDescriptor;\nfunction getBitsDescriptor(bits) {\n    let len = bits.length;\n    return Math.ceil(len / 8) + Math.floor(len / 8);\n}\nexports.getBitsDescriptor = getBitsDescriptor;\nfunction getRepr(originalBits, bits, refs, level, levelMask, type) {\n    // Allocate\n    const bitsLen = Math.ceil(bits.length / 8);\n    const repr = Buffer.alloc(2 + bitsLen + (2 + 32) * refs.length);\n    // Write descriptors\n    let reprCursor = 0;\n    repr[reprCursor++] = getRefsDescriptor(refs, levelMask, type);\n    repr[reprCursor++] = getBitsDescriptor(originalBits);\n    // Write bits\n    (0, paddedBits_1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);\n    reprCursor += bitsLen;\n    // Write refs\n    for (const c of refs){\n        let childDepth;\n        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n            childDepth = c.depth(level + 1);\n        } else {\n            childDepth = c.depth(level);\n        }\n        repr[reprCursor++] = Math.floor(childDepth / 256);\n        repr[reprCursor++] = childDepth % 256;\n    }\n    for (const c of refs){\n        let childHash;\n        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n            childHash = c.hash(level + 1);\n        } else {\n            childHash = c.hash(level);\n        }\n        childHash.copy(repr, reprCursor);\n        reprCursor += 32;\n    }\n    // Result\n    return repr;\n}\nexports.getRepr = getRepr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSx5QkFBeUIsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUMvRSxNQUFNSyxhQUFhQyxtQkFBT0EsQ0FBQyx3RUFBYTtBQUN4QyxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyx3RkFBcUI7QUFDbEQsU0FBU0Ysa0JBQWtCSSxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSTtJQUM1QyxPQUFPRixLQUFLRyxNQUFNLEdBQUcsQ0FBQ0QsU0FBU0wsV0FBV08sUUFBUSxDQUFDQyxRQUFRLEdBQUcsSUFBSSxLQUFLLElBQUlKLFlBQVk7QUFDM0Y7QUFDQVQseUJBQXlCLEdBQUdJO0FBQzVCLFNBQVNELGtCQUFrQlcsSUFBSTtJQUMzQixJQUFJQyxNQUFNRCxLQUFLSCxNQUFNO0lBQ3JCLE9BQU9LLEtBQUtDLElBQUksQ0FBQ0YsTUFBTSxLQUFLQyxLQUFLRSxLQUFLLENBQUNILE1BQU07QUFDakQ7QUFDQWYseUJBQXlCLEdBQUdHO0FBQzVCLFNBQVNELFFBQVFpQixZQUFZLEVBQUVMLElBQUksRUFBRU4sSUFBSSxFQUFFWSxLQUFLLEVBQUVYLFNBQVMsRUFBRUMsSUFBSTtJQUM3RCxXQUFXO0lBQ1gsTUFBTVcsVUFBVUwsS0FBS0MsSUFBSSxDQUFDSCxLQUFLSCxNQUFNLEdBQUc7SUFDeEMsTUFBTVcsT0FBT0MsT0FBT0MsS0FBSyxDQUFDLElBQUlILFVBQVUsQ0FBQyxJQUFJLEVBQUMsSUFBS2IsS0FBS0csTUFBTTtJQUM5RCxvQkFBb0I7SUFDcEIsSUFBSWMsYUFBYTtJQUNqQkgsSUFBSSxDQUFDRyxhQUFhLEdBQUdyQixrQkFBa0JJLE1BQU1DLFdBQVdDO0lBQ3hEWSxJQUFJLENBQUNHLGFBQWEsR0FBR3RCLGtCQUFrQmdCO0lBQ3ZDLGFBQWE7SUFDWixJQUFHWixhQUFhbUIsa0JBQWtCLEVBQUVaLE1BQU1hLElBQUksQ0FBQ0wsTUFBTUc7SUFDdERBLGNBQWNKO0lBQ2QsYUFBYTtJQUNiLEtBQUssTUFBTU8sS0FBS3BCLEtBQU07UUFDbEIsSUFBSXFCO1FBQ0osSUFBSW5CLFFBQVFMLFdBQVdPLFFBQVEsQ0FBQ2tCLFdBQVcsSUFBSXBCLFFBQVFMLFdBQVdPLFFBQVEsQ0FBQ21CLFlBQVksRUFBRTtZQUNyRkYsYUFBYUQsRUFBRUksS0FBSyxDQUFDWixRQUFRO1FBQ2pDLE9BQ0s7WUFDRFMsYUFBYUQsRUFBRUksS0FBSyxDQUFDWjtRQUN6QjtRQUNBRSxJQUFJLENBQUNHLGFBQWEsR0FBR1QsS0FBS0UsS0FBSyxDQUFDVyxhQUFhO1FBQzdDUCxJQUFJLENBQUNHLGFBQWEsR0FBR0ksYUFBYTtJQUN0QztJQUNBLEtBQUssTUFBTUQsS0FBS3BCLEtBQU07UUFDbEIsSUFBSXlCO1FBQ0osSUFBSXZCLFFBQVFMLFdBQVdPLFFBQVEsQ0FBQ2tCLFdBQVcsSUFBSXBCLFFBQVFMLFdBQVdPLFFBQVEsQ0FBQ21CLFlBQVksRUFBRTtZQUNyRkUsWUFBWUwsRUFBRU0sSUFBSSxDQUFDZCxRQUFRO1FBQy9CLE9BQ0s7WUFDRGEsWUFBWUwsRUFBRU0sSUFBSSxDQUFDZDtRQUN2QjtRQUNBYSxVQUFVTixJQUFJLENBQUNMLE1BQU1HO1FBQ3JCQSxjQUFjO0lBQ2xCO0lBQ0EsU0FBUztJQUNULE9BQU9IO0FBQ1g7QUFDQXRCLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2JvYy9jZWxsL2Rlc2NyaXB0b3IuanM/NjlhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UmVwciA9IGV4cG9ydHMuZ2V0Qml0c0Rlc2NyaXB0b3IgPSBleHBvcnRzLmdldFJlZnNEZXNjcmlwdG9yID0gdm9pZCAwO1xuY29uc3QgQ2VsbFR5cGVfMSA9IHJlcXVpcmUoXCIuLi9DZWxsVHlwZVwiKTtcbmNvbnN0IHBhZGRlZEJpdHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9wYWRkZWRCaXRzXCIpO1xuZnVuY3Rpb24gZ2V0UmVmc0Rlc2NyaXB0b3IocmVmcywgbGV2ZWxNYXNrLCB0eXBlKSB7XG4gICAgcmV0dXJuIHJlZnMubGVuZ3RoICsgKHR5cGUgIT09IENlbGxUeXBlXzEuQ2VsbFR5cGUuT3JkaW5hcnkgPyAxIDogMCkgKiA4ICsgbGV2ZWxNYXNrICogMzI7XG59XG5leHBvcnRzLmdldFJlZnNEZXNjcmlwdG9yID0gZ2V0UmVmc0Rlc2NyaXB0b3I7XG5mdW5jdGlvbiBnZXRCaXRzRGVzY3JpcHRvcihiaXRzKSB7XG4gICAgbGV0IGxlbiA9IGJpdHMubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLmNlaWwobGVuIC8gOCkgKyBNYXRoLmZsb29yKGxlbiAvIDgpO1xufVxuZXhwb3J0cy5nZXRCaXRzRGVzY3JpcHRvciA9IGdldEJpdHNEZXNjcmlwdG9yO1xuZnVuY3Rpb24gZ2V0UmVwcihvcmlnaW5hbEJpdHMsIGJpdHMsIHJlZnMsIGxldmVsLCBsZXZlbE1hc2ssIHR5cGUpIHtcbiAgICAvLyBBbGxvY2F0ZVxuICAgIGNvbnN0IGJpdHNMZW4gPSBNYXRoLmNlaWwoYml0cy5sZW5ndGggLyA4KTtcbiAgICBjb25zdCByZXByID0gQnVmZmVyLmFsbG9jKDIgKyBiaXRzTGVuICsgKDIgKyAzMikgKiByZWZzLmxlbmd0aCk7XG4gICAgLy8gV3JpdGUgZGVzY3JpcHRvcnNcbiAgICBsZXQgcmVwckN1cnNvciA9IDA7XG4gICAgcmVwcltyZXByQ3Vyc29yKytdID0gZ2V0UmVmc0Rlc2NyaXB0b3IocmVmcywgbGV2ZWxNYXNrLCB0eXBlKTtcbiAgICByZXByW3JlcHJDdXJzb3IrK10gPSBnZXRCaXRzRGVzY3JpcHRvcihvcmlnaW5hbEJpdHMpO1xuICAgIC8vIFdyaXRlIGJpdHNcbiAgICAoMCwgcGFkZGVkQml0c18xLmJpdHNUb1BhZGRlZEJ1ZmZlcikoYml0cykuY29weShyZXByLCByZXByQ3Vyc29yKTtcbiAgICByZXByQ3Vyc29yICs9IGJpdHNMZW47XG4gICAgLy8gV3JpdGUgcmVmc1xuICAgIGZvciAoY29uc3QgYyBvZiByZWZzKSB7XG4gICAgICAgIGxldCBjaGlsZERlcHRoO1xuICAgICAgICBpZiAodHlwZSA9PSBDZWxsVHlwZV8xLkNlbGxUeXBlLk1lcmtsZVByb29mIHx8IHR5cGUgPT0gQ2VsbFR5cGVfMS5DZWxsVHlwZS5NZXJrbGVVcGRhdGUpIHtcbiAgICAgICAgICAgIGNoaWxkRGVwdGggPSBjLmRlcHRoKGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjaGlsZERlcHRoID0gYy5kZXB0aChsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwcltyZXByQ3Vyc29yKytdID0gTWF0aC5mbG9vcihjaGlsZERlcHRoIC8gMjU2KTtcbiAgICAgICAgcmVwcltyZXByQ3Vyc29yKytdID0gY2hpbGREZXB0aCAlIDI1NjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjIG9mIHJlZnMpIHtcbiAgICAgICAgbGV0IGNoaWxkSGFzaDtcbiAgICAgICAgaWYgKHR5cGUgPT0gQ2VsbFR5cGVfMS5DZWxsVHlwZS5NZXJrbGVQcm9vZiB8fCB0eXBlID09IENlbGxUeXBlXzEuQ2VsbFR5cGUuTWVya2xlVXBkYXRlKSB7XG4gICAgICAgICAgICBjaGlsZEhhc2ggPSBjLmhhc2gobGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkSGFzaCA9IGMuaGFzaChsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRIYXNoLmNvcHkocmVwciwgcmVwckN1cnNvcik7XG4gICAgICAgIHJlcHJDdXJzb3IgKz0gMzI7XG4gICAgfVxuICAgIC8vIFJlc3VsdFxuICAgIHJldHVybiByZXByO1xufVxuZXhwb3J0cy5nZXRSZXByID0gZ2V0UmVwcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFJlcHIiLCJnZXRCaXRzRGVzY3JpcHRvciIsImdldFJlZnNEZXNjcmlwdG9yIiwiQ2VsbFR5cGVfMSIsInJlcXVpcmUiLCJwYWRkZWRCaXRzXzEiLCJyZWZzIiwibGV2ZWxNYXNrIiwidHlwZSIsImxlbmd0aCIsIkNlbGxUeXBlIiwiT3JkaW5hcnkiLCJiaXRzIiwibGVuIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsIm9yaWdpbmFsQml0cyIsImxldmVsIiwiYml0c0xlbiIsInJlcHIiLCJCdWZmZXIiLCJhbGxvYyIsInJlcHJDdXJzb3IiLCJiaXRzVG9QYWRkZWRCdWZmZXIiLCJjb3B5IiwiYyIsImNoaWxkRGVwdGgiLCJNZXJrbGVQcm9vZiIsIk1lcmtsZVVwZGF0ZSIsImRlcHRoIiwiY2hpbGRIYXNoIiwiaGFzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/descriptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exoticLibrary = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nfunction exoticLibrary(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash\n    const size = 8 + 256;\n    if (bits.length !== size) {\n        throw new Error(`Library cell must have exactly (8 + 256) bits, got \"${bits.length}\"`);\n    }\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 2) {\n        throw new Error(`Library cell must have type 2, got \"${type}\"`);\n    }\n    return {};\n}\nexports.exoticLibrary = exoticLibrary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZXhvdGljTGlicmFyeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQywwRUFBYztBQUMxQyxTQUFTRixjQUFjRyxJQUFJLEVBQUVDLElBQUk7SUFDN0IsTUFBTUMsU0FBUyxJQUFJSixZQUFZSyxTQUFTLENBQUNIO0lBQ3pDLGNBQWM7SUFDZCxNQUFNSSxPQUFPLElBQUk7SUFDakIsSUFBSUosS0FBS0ssTUFBTSxLQUFLRCxNQUFNO1FBQ3RCLE1BQU0sSUFBSUUsTUFBTSxDQUFDLG9EQUFvRCxFQUFFTixLQUFLSyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pGO0lBQ0EsYUFBYTtJQUNiLElBQUlFLE9BQU9MLE9BQU9NLFFBQVEsQ0FBQztJQUMzQixJQUFJRCxTQUFTLEdBQUc7UUFDWixNQUFNLElBQUlELE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRUMsS0FBSyxDQUFDLENBQUM7SUFDbEU7SUFDQSxPQUFPLENBQUM7QUFDWjtBQUNBWixxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2JvYy9jZWxsL2V4b3RpY0xpYnJhcnkuanM/YzdiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhvdGljTGlicmFyeSA9IHZvaWQgMDtcbmNvbnN0IEJpdFJlYWRlcl8xID0gcmVxdWlyZShcIi4uL0JpdFJlYWRlclwiKTtcbmZ1bmN0aW9uIGV4b3RpY0xpYnJhcnkoYml0cywgcmVmcykge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBCaXRSZWFkZXJfMS5CaXRSZWFkZXIoYml0cyk7XG4gICAgLy8gdHlwZSArIGhhc2hcbiAgICBjb25zdCBzaXplID0gOCArIDI1NjtcbiAgICBpZiAoYml0cy5sZW5ndGggIT09IHNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaWJyYXJ5IGNlbGwgbXVzdCBoYXZlIGV4YWN0bHkgKDggKyAyNTYpIGJpdHMsIGdvdCBcIiR7Yml0cy5sZW5ndGh9XCJgKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgdHlwZVxuICAgIGxldCB0eXBlID0gcmVhZGVyLmxvYWRVaW50KDgpO1xuICAgIGlmICh0eXBlICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTGlicmFyeSBjZWxsIG11c3QgaGF2ZSB0eXBlIDIsIGdvdCBcIiR7dHlwZX1cImApO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5leHBvcnRzLmV4b3RpY0xpYnJhcnkgPSBleG90aWNMaWJyYXJ5O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhvdGljTGlicmFyeSIsIkJpdFJlYWRlcl8xIiwicmVxdWlyZSIsImJpdHMiLCJyZWZzIiwicmVhZGVyIiwiQml0UmVhZGVyIiwic2l6ZSIsImxlbmd0aCIsIkVycm9yIiwidHlwZSIsImxvYWRVaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exoticMerkleProof = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nfunction exoticMerkleProof(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + depth\n    const size = 8 + 256 + 16;\n    if (bits.length !== size) {\n        throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 1) {\n        throw new Error(`Merkle Proof cell must have exactly 1 ref, got \"${refs.length}\"`);\n    }\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 3) {\n        throw new Error(`Merkle Proof cell must have type 3, got \"${type}\"`);\n    }\n    // Check data\n    const proofHash = reader.loadBuffer(32);\n    const proofDepth = reader.loadUint(16);\n    const refHash = refs[0].hash(0);\n    const refDepth = refs[0].depth(0);\n    if (proofDepth !== refDepth) {\n        throw new Error(`Merkle Proof cell ref depth must be exactly \"${proofDepth}\", got \"${refDepth}\"`);\n    }\n    if (!proofHash.equals(refHash)) {\n        throw new Error(`Merkle Proof cell ref hash must be exactly \"${proofHash.toString(\"hex\")}\", got \"${refHash.toString(\"hex\")}\"`);\n    }\n    return {\n        proofDepth,\n        proofHash\n    };\n}\nexports.exoticMerkleProof = exoticMerkleProof;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZXhvdGljTWVya2xlUHJvb2YuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsMEVBQWM7QUFDMUMsU0FBU0Ysa0JBQWtCRyxJQUFJLEVBQUVDLElBQUk7SUFDakMsTUFBTUMsU0FBUyxJQUFJSixZQUFZSyxTQUFTLENBQUNIO0lBQ3pDLHNCQUFzQjtJQUN0QixNQUFNSSxPQUFPLElBQUksTUFBTTtJQUN2QixJQUFJSixLQUFLSyxNQUFNLEtBQUtELE1BQU07UUFDdEIsTUFBTSxJQUFJRSxNQUFNLENBQUMsOERBQThELEVBQUVOLEtBQUtLLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkc7SUFDQSxJQUFJSixLQUFLSSxNQUFNLEtBQUssR0FBRztRQUNuQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxnREFBZ0QsRUFBRUwsS0FBS0ksTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyRjtJQUNBLGFBQWE7SUFDYixJQUFJRSxPQUFPTCxPQUFPTSxRQUFRLENBQUM7SUFDM0IsSUFBSUQsU0FBUyxHQUFHO1FBQ1osTUFBTSxJQUFJRCxNQUFNLENBQUMseUNBQXlDLEVBQUVDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZFO0lBQ0EsYUFBYTtJQUNiLE1BQU1FLFlBQVlQLE9BQU9RLFVBQVUsQ0FBQztJQUNwQyxNQUFNQyxhQUFhVCxPQUFPTSxRQUFRLENBQUM7SUFDbkMsTUFBTUksVUFBVVgsSUFBSSxDQUFDLEVBQUUsQ0FBQ1ksSUFBSSxDQUFDO0lBQzdCLE1BQU1DLFdBQVdiLElBQUksQ0FBQyxFQUFFLENBQUNjLEtBQUssQ0FBQztJQUMvQixJQUFJSixlQUFlRyxVQUFVO1FBQ3pCLE1BQU0sSUFBSVIsTUFBTSxDQUFDLDZDQUE2QyxFQUFFSyxXQUFXLFFBQVEsRUFBRUcsU0FBUyxDQUFDLENBQUM7SUFDcEc7SUFDQSxJQUFJLENBQUNMLFVBQVVPLE1BQU0sQ0FBQ0osVUFBVTtRQUM1QixNQUFNLElBQUlOLE1BQU0sQ0FBQyw0Q0FBNEMsRUFBRUcsVUFBVVEsUUFBUSxDQUFDLE9BQU8sUUFBUSxFQUFFTCxRQUFRSyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakk7SUFDQSxPQUFPO1FBQ0hOO1FBQ0FGO0lBQ0o7QUFDSjtBQUNBZCx5QkFBeUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2JvYy9jZWxsL2V4b3RpY01lcmtsZVByb29mLmpzPzM4ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4b3RpY01lcmtsZVByb29mID0gdm9pZCAwO1xuY29uc3QgQml0UmVhZGVyXzEgPSByZXF1aXJlKFwiLi4vQml0UmVhZGVyXCIpO1xuZnVuY3Rpb24gZXhvdGljTWVya2xlUHJvb2YoYml0cywgcmVmcykge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBCaXRSZWFkZXJfMS5CaXRSZWFkZXIoYml0cyk7XG4gICAgLy8gdHlwZSArIGhhc2ggKyBkZXB0aFxuICAgIGNvbnN0IHNpemUgPSA4ICsgMjU2ICsgMTY7XG4gICAgaWYgKGJpdHMubGVuZ3RoICE9PSBzaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWVya2xlIFByb29mIGNlbGwgbXVzdCBoYXZlIGV4YWN0bHkgKDggKyAyNTYgKyAxNikgYml0cywgZ290IFwiJHtiaXRzLmxlbmd0aH1cImApO1xuICAgIH1cbiAgICBpZiAocmVmcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXJrbGUgUHJvb2YgY2VsbCBtdXN0IGhhdmUgZXhhY3RseSAxIHJlZiwgZ290IFwiJHtyZWZzLmxlbmd0aH1cImApO1xuICAgIH1cbiAgICAvLyBDaGVjayB0eXBlXG4gICAgbGV0IHR5cGUgPSByZWFkZXIubG9hZFVpbnQoOCk7XG4gICAgaWYgKHR5cGUgIT09IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXJrbGUgUHJvb2YgY2VsbCBtdXN0IGhhdmUgdHlwZSAzLCBnb3QgXCIke3R5cGV9XCJgKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgZGF0YVxuICAgIGNvbnN0IHByb29mSGFzaCA9IHJlYWRlci5sb2FkQnVmZmVyKDMyKTtcbiAgICBjb25zdCBwcm9vZkRlcHRoID0gcmVhZGVyLmxvYWRVaW50KDE2KTtcbiAgICBjb25zdCByZWZIYXNoID0gcmVmc1swXS5oYXNoKDApO1xuICAgIGNvbnN0IHJlZkRlcHRoID0gcmVmc1swXS5kZXB0aCgwKTtcbiAgICBpZiAocHJvb2ZEZXB0aCAhPT0gcmVmRGVwdGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXJrbGUgUHJvb2YgY2VsbCByZWYgZGVwdGggbXVzdCBiZSBleGFjdGx5IFwiJHtwcm9vZkRlcHRofVwiLCBnb3QgXCIke3JlZkRlcHRofVwiYCk7XG4gICAgfVxuICAgIGlmICghcHJvb2ZIYXNoLmVxdWFscyhyZWZIYXNoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1lcmtsZSBQcm9vZiBjZWxsIHJlZiBoYXNoIG11c3QgYmUgZXhhY3RseSBcIiR7cHJvb2ZIYXNoLnRvU3RyaW5nKCdoZXgnKX1cIiwgZ290IFwiJHtyZWZIYXNoLnRvU3RyaW5nKCdoZXgnKX1cImApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9vZkRlcHRoLFxuICAgICAgICBwcm9vZkhhc2hcbiAgICB9O1xufVxuZXhwb3J0cy5leG90aWNNZXJrbGVQcm9vZiA9IGV4b3RpY01lcmtsZVByb29mO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhvdGljTWVya2xlUHJvb2YiLCJCaXRSZWFkZXJfMSIsInJlcXVpcmUiLCJiaXRzIiwicmVmcyIsInJlYWRlciIsIkJpdFJlYWRlciIsInNpemUiLCJsZW5ndGgiLCJFcnJvciIsInR5cGUiLCJsb2FkVWludCIsInByb29mSGFzaCIsImxvYWRCdWZmZXIiLCJwcm9vZkRlcHRoIiwicmVmSGFzaCIsImhhc2giLCJyZWZEZXB0aCIsImRlcHRoIiwiZXF1YWxzIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exoticMerkleUpdate = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nfunction exoticMerkleUpdate(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + hash + depth + depth\n    const size = 8 + 2 * (256 + 16);\n    if (bits.length !== size) {\n        throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 2) {\n        throw new Error(`Merkle Update cell must have exactly 2 refs, got \"${refs.length}\"`);\n    }\n    let type = reader.loadUint(8);\n    if (type !== 4) {\n        throw new Error(`Merkle Update cell type must be exactly 4, got \"${type}\"`);\n    }\n    const proofHash1 = reader.loadBuffer(32);\n    const proofHash2 = reader.loadBuffer(32);\n    const proofDepth1 = reader.loadUint(16);\n    const proofDepth2 = reader.loadUint(16);\n    if (proofDepth1 !== refs[0].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth1}\", got \"${refs[0].depth(0)}\"`);\n    }\n    if (!proofHash1.equals(refs[0].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash1.toString(\"hex\")}\", got \"${refs[0].hash(0).toString(\"hex\")}\"`);\n    }\n    if (proofDepth2 !== refs[1].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth2}\", got \"${refs[1].depth(0)}\"`);\n    }\n    if (!proofHash2.equals(refs[1].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash2.toString(\"hex\")}\", got \"${refs[1].hash(0).toString(\"hex\")}\"`);\n    }\n    return {\n        proofDepth1,\n        proofDepth2,\n        proofHash1,\n        proofHash2\n    };\n}\nexports.exoticMerkleUpdate = exoticMerkleUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZXhvdGljTWVya2xlVXBkYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLDBFQUFjO0FBQzFDLFNBQVNGLG1CQUFtQkcsSUFBSSxFQUFFQyxJQUFJO0lBQ2xDLE1BQU1DLFNBQVMsSUFBSUosWUFBWUssU0FBUyxDQUFDSDtJQUN6QyxxQ0FBcUM7SUFDckMsTUFBTUksT0FBTyxJQUFLLElBQUssT0FBTSxFQUFDO0lBQzlCLElBQUlKLEtBQUtLLE1BQU0sS0FBS0QsTUFBTTtRQUN0QixNQUFNLElBQUlFLE1BQU0sQ0FBQyx1RUFBdUUsRUFBRU4sS0FBS0ssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RztJQUNBLElBQUlKLEtBQUtJLE1BQU0sS0FBSyxHQUFHO1FBQ25CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGtEQUFrRCxFQUFFTCxLQUFLSSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGO0lBQ0EsSUFBSUUsT0FBT0wsT0FBT00sUUFBUSxDQUFDO0lBQzNCLElBQUlELFNBQVMsR0FBRztRQUNaLE1BQU0sSUFBSUQsTUFBTSxDQUFDLGdEQUFnRCxFQUFFQyxLQUFLLENBQUMsQ0FBQztJQUM5RTtJQUNBLE1BQU1FLGFBQWFQLE9BQU9RLFVBQVUsQ0FBQztJQUNyQyxNQUFNQyxhQUFhVCxPQUFPUSxVQUFVLENBQUM7SUFDckMsTUFBTUUsY0FBY1YsT0FBT00sUUFBUSxDQUFDO0lBQ3BDLE1BQU1LLGNBQWNYLE9BQU9NLFFBQVEsQ0FBQztJQUNwQyxJQUFJSSxnQkFBZ0JYLElBQUksQ0FBQyxFQUFFLENBQUNhLEtBQUssQ0FBQyxJQUFJO1FBQ2xDLE1BQU0sSUFBSVIsTUFBTSxDQUFDLDhDQUE4QyxFQUFFTSxZQUFZLFFBQVEsRUFBRVgsSUFBSSxDQUFDLEVBQUUsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlHO0lBQ0EsSUFBSSxDQUFDTCxXQUFXTSxNQUFNLENBQUNkLElBQUksQ0FBQyxFQUFFLENBQUNlLElBQUksQ0FBQyxLQUFLO1FBQ3JDLE1BQU0sSUFBSVYsTUFBTSxDQUFDLDZDQUE2QyxFQUFFRyxXQUFXUSxRQUFRLENBQUMsT0FBTyxRQUFRLEVBQUVoQixJQUFJLENBQUMsRUFBRSxDQUFDZSxJQUFJLENBQUMsR0FBR0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNJO0lBQ0EsSUFBSUosZ0JBQWdCWixJQUFJLENBQUMsRUFBRSxDQUFDYSxLQUFLLENBQUMsSUFBSTtRQUNsQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyw4Q0FBOEMsRUFBRU8sWUFBWSxRQUFRLEVBQUVaLElBQUksQ0FBQyxFQUFFLENBQUNhLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RztJQUNBLElBQUksQ0FBQ0gsV0FBV0ksTUFBTSxDQUFDZCxJQUFJLENBQUMsRUFBRSxDQUFDZSxJQUFJLENBQUMsS0FBSztRQUNyQyxNQUFNLElBQUlWLE1BQU0sQ0FBQyw2Q0FBNkMsRUFBRUssV0FBV00sUUFBUSxDQUFDLE9BQU8sUUFBUSxFQUFFaEIsSUFBSSxDQUFDLEVBQUUsQ0FBQ2UsSUFBSSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzSTtJQUNBLE9BQU87UUFDSEw7UUFDQUM7UUFDQUo7UUFDQUU7SUFDSjtBQUNKO0FBQ0FoQiwwQkFBMEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2JvYy9jZWxsL2V4b3RpY01lcmtsZVVwZGF0ZS5qcz9iMjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leG90aWNNZXJrbGVVcGRhdGUgPSB2b2lkIDA7XG5jb25zdCBCaXRSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi9CaXRSZWFkZXJcIik7XG5mdW5jdGlvbiBleG90aWNNZXJrbGVVcGRhdGUoYml0cywgcmVmcykge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBCaXRSZWFkZXJfMS5CaXRSZWFkZXIoYml0cyk7XG4gICAgLy8gdHlwZSArIGhhc2ggKyBoYXNoICsgZGVwdGggKyBkZXB0aFxuICAgIGNvbnN0IHNpemUgPSA4ICsgKDIgKiAoMjU2ICsgMTYpKTtcbiAgICBpZiAoYml0cy5sZW5ndGggIT09IHNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXJrbGUgVXBkYXRlIGNlbGwgbXVzdCBoYXZlIGV4YWN0bHkgKDggKyAoMiAqICgyNTYgKyAxNikpKSBiaXRzLCBnb3QgXCIke2JpdHMubGVuZ3RofVwiYCk7XG4gICAgfVxuICAgIGlmIChyZWZzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1lcmtsZSBVcGRhdGUgY2VsbCBtdXN0IGhhdmUgZXhhY3RseSAyIHJlZnMsIGdvdCBcIiR7cmVmcy5sZW5ndGh9XCJgKTtcbiAgICB9XG4gICAgbGV0IHR5cGUgPSByZWFkZXIubG9hZFVpbnQoOCk7XG4gICAgaWYgKHR5cGUgIT09IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXJrbGUgVXBkYXRlIGNlbGwgdHlwZSBtdXN0IGJlIGV4YWN0bHkgNCwgZ290IFwiJHt0eXBlfVwiYCk7XG4gICAgfVxuICAgIGNvbnN0IHByb29mSGFzaDEgPSByZWFkZXIubG9hZEJ1ZmZlcigzMik7XG4gICAgY29uc3QgcHJvb2ZIYXNoMiA9IHJlYWRlci5sb2FkQnVmZmVyKDMyKTtcbiAgICBjb25zdCBwcm9vZkRlcHRoMSA9IHJlYWRlci5sb2FkVWludCgxNik7XG4gICAgY29uc3QgcHJvb2ZEZXB0aDIgPSByZWFkZXIubG9hZFVpbnQoMTYpO1xuICAgIGlmIChwcm9vZkRlcHRoMSAhPT0gcmVmc1swXS5kZXB0aCgwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1lcmtsZSBVcGRhdGUgY2VsbCByZWYgZGVwdGggbXVzdCBiZSBleGFjdGx5IFwiJHtwcm9vZkRlcHRoMX1cIiwgZ290IFwiJHtyZWZzWzBdLmRlcHRoKDApfVwiYCk7XG4gICAgfVxuICAgIGlmICghcHJvb2ZIYXNoMS5lcXVhbHMocmVmc1swXS5oYXNoKDApKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1lcmtsZSBVcGRhdGUgY2VsbCByZWYgaGFzaCBtdXN0IGJlIGV4YWN0bHkgXCIke3Byb29mSGFzaDEudG9TdHJpbmcoJ2hleCcpfVwiLCBnb3QgXCIke3JlZnNbMF0uaGFzaCgwKS50b1N0cmluZygnaGV4Jyl9XCJgKTtcbiAgICB9XG4gICAgaWYgKHByb29mRGVwdGgyICE9PSByZWZzWzFdLmRlcHRoKDApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWVya2xlIFVwZGF0ZSBjZWxsIHJlZiBkZXB0aCBtdXN0IGJlIGV4YWN0bHkgXCIke3Byb29mRGVwdGgyfVwiLCBnb3QgXCIke3JlZnNbMV0uZGVwdGgoMCl9XCJgKTtcbiAgICB9XG4gICAgaWYgKCFwcm9vZkhhc2gyLmVxdWFscyhyZWZzWzFdLmhhc2goMCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWVya2xlIFVwZGF0ZSBjZWxsIHJlZiBoYXNoIG11c3QgYmUgZXhhY3RseSBcIiR7cHJvb2ZIYXNoMi50b1N0cmluZygnaGV4Jyl9XCIsIGdvdCBcIiR7cmVmc1sxXS5oYXNoKDApLnRvU3RyaW5nKCdoZXgnKX1cImApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9vZkRlcHRoMSxcbiAgICAgICAgcHJvb2ZEZXB0aDIsXG4gICAgICAgIHByb29mSGFzaDEsXG4gICAgICAgIHByb29mSGFzaDJcbiAgICB9O1xufVxuZXhwb3J0cy5leG90aWNNZXJrbGVVcGRhdGUgPSBleG90aWNNZXJrbGVVcGRhdGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJleG90aWNNZXJrbGVVcGRhdGUiLCJCaXRSZWFkZXJfMSIsInJlcXVpcmUiLCJiaXRzIiwicmVmcyIsInJlYWRlciIsIkJpdFJlYWRlciIsInNpemUiLCJsZW5ndGgiLCJFcnJvciIsInR5cGUiLCJsb2FkVWludCIsInByb29mSGFzaDEiLCJsb2FkQnVmZmVyIiwicHJvb2ZIYXNoMiIsInByb29mRGVwdGgxIiwicHJvb2ZEZXB0aDIiLCJkZXB0aCIsImVxdWFscyIsImhhc2giLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticPruned.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticPruned.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exoticPruned = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nconst LevelMask_1 = __webpack_require__(/*! ./LevelMask */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/LevelMask.js\");\nfunction exoticPruned(bits, refs) {\n    let reader = new BitReader_1.BitReader(bits);\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 1) {\n        throw new Error(`Pruned branch cell must have type 1, got \"${type}\"`);\n    }\n    // Check refs\n    if (refs.length !== 0) {\n        throw new Error(`Pruned Branch cell can't has refs, got \"${refs.length}\"`);\n    }\n    // Resolve cell\n    let mask;\n    if (bits.length === 280) {\n        // Special case for config proof\n        // This test proof is generated in the moment of voting for a slashing\n        // it seems that tools generate it incorrectly and therefore doesn't have mask in it\n        // so we need to hardcode it equal to 1\n        mask = new LevelMask_1.LevelMask(1);\n    } else {\n        // Check level\n        mask = new LevelMask_1.LevelMask(reader.loadUint(8));\n        if (mask.level < 1 || mask.level > 3) {\n            throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got \"${mask.level}/${mask.value}\"`);\n        }\n        // Read pruned\n        const size = 8 + 8 + mask.apply(mask.level - 1).hashCount * (256 /* Hash */  + 16 /* Depth */ );\n        if (bits.length !== size) {\n            throw new Error(`Pruned branch cell must have exactly ${size} bits, got \"${bits.length}\"`);\n        }\n    }\n    // Read pruned\n    let pruned = [];\n    let hashes = [];\n    let depths = [];\n    for(let i = 0; i < mask.level; i++){\n        hashes.push(reader.loadBuffer(32));\n    }\n    for(let i = 0; i < mask.level; i++){\n        depths.push(reader.loadUint(16));\n    }\n    for(let i = 0; i < mask.level; i++){\n        pruned.push({\n            depth: depths[i],\n            hash: hashes[i]\n        });\n    }\n    return {\n        mask: mask.value,\n        pruned\n    };\n}\nexports.exoticPruned = exoticPruned;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZXhvdGljUHJ1bmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLDBFQUFjO0FBQzFDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3pDLFNBQVNGLGFBQWFJLElBQUksRUFBRUMsSUFBSTtJQUM1QixJQUFJQyxTQUFTLElBQUlMLFlBQVlNLFNBQVMsQ0FBQ0g7SUFDdkMsYUFBYTtJQUNiLElBQUlJLE9BQU9GLE9BQU9HLFFBQVEsQ0FBQztJQUMzQixJQUFJRCxTQUFTLEdBQUc7UUFDWixNQUFNLElBQUlFLE1BQU0sQ0FBQywwQ0FBMEMsRUFBRUYsS0FBSyxDQUFDLENBQUM7SUFDeEU7SUFDQSxhQUFhO0lBQ2IsSUFBSUgsS0FBS00sTUFBTSxLQUFLLEdBQUc7UUFDbkIsTUFBTSxJQUFJRCxNQUFNLENBQUMsd0NBQXdDLEVBQUVMLEtBQUtNLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0U7SUFDQSxlQUFlO0lBQ2YsSUFBSUM7SUFDSixJQUFJUixLQUFLTyxNQUFNLEtBQUssS0FBSztRQUNyQixnQ0FBZ0M7UUFDaEMsc0VBQXNFO1FBQ3RFLG9GQUFvRjtRQUNwRix1Q0FBdUM7UUFDdkNDLE9BQU8sSUFBSVQsWUFBWVUsU0FBUyxDQUFDO0lBQ3JDLE9BQ0s7UUFDRCxjQUFjO1FBQ2RELE9BQU8sSUFBSVQsWUFBWVUsU0FBUyxDQUFDUCxPQUFPRyxRQUFRLENBQUM7UUFDakQsSUFBSUcsS0FBS0UsS0FBSyxHQUFHLEtBQUtGLEtBQUtFLEtBQUssR0FBRyxHQUFHO1lBQ2xDLE1BQU0sSUFBSUosTUFBTSxDQUFDLHFEQUFxRCxFQUFFRSxLQUFLRSxLQUFLLENBQUMsQ0FBQyxFQUFFRixLQUFLYixLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHO1FBQ0EsY0FBYztRQUNkLE1BQU1nQixPQUFPLElBQUksSUFBS0gsS0FBS0ksS0FBSyxDQUFDSixLQUFLRSxLQUFLLEdBQUcsR0FBR0csU0FBUyxHQUFJLEtBQUksUUFBUSxNQUFLLEdBQUcsU0FBUyxHQUFYO1FBQ2hGLElBQUliLEtBQUtPLE1BQU0sS0FBS0ksTUFBTTtZQUN0QixNQUFNLElBQUlMLE1BQU0sQ0FBQyxxQ0FBcUMsRUFBRUssS0FBSyxZQUFZLEVBQUVYLEtBQUtPLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDN0Y7SUFDSjtJQUNBLGNBQWM7SUFDZCxJQUFJTyxTQUFTLEVBQUU7SUFDZixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVQsS0FBS0UsS0FBSyxFQUFFTyxJQUFLO1FBQ2pDRixPQUFPRyxJQUFJLENBQUNoQixPQUFPaUIsVUFBVSxDQUFDO0lBQ2xDO0lBQ0EsSUFBSyxJQUFJRixJQUFJLEdBQUdBLElBQUlULEtBQUtFLEtBQUssRUFBRU8sSUFBSztRQUNqQ0QsT0FBT0UsSUFBSSxDQUFDaEIsT0FBT0csUUFBUSxDQUFDO0lBQ2hDO0lBQ0EsSUFBSyxJQUFJWSxJQUFJLEdBQUdBLElBQUlULEtBQUtFLEtBQUssRUFBRU8sSUFBSztRQUNqQ0gsT0FBT0ksSUFBSSxDQUFDO1lBQ1JFLE9BQU9KLE1BQU0sQ0FBQ0MsRUFBRTtZQUNoQkksTUFBTU4sTUFBTSxDQUFDRSxFQUFFO1FBQ25CO0lBQ0o7SUFDQSxPQUFPO1FBQ0hULE1BQU1BLEtBQUtiLEtBQUs7UUFDaEJtQjtJQUNKO0FBQ0o7QUFDQXBCLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvZXhvdGljUHJ1bmVkLmpzPzY2YjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4b3RpY1BydW5lZCA9IHZvaWQgMDtcbmNvbnN0IEJpdFJlYWRlcl8xID0gcmVxdWlyZShcIi4uL0JpdFJlYWRlclwiKTtcbmNvbnN0IExldmVsTWFza18xID0gcmVxdWlyZShcIi4vTGV2ZWxNYXNrXCIpO1xuZnVuY3Rpb24gZXhvdGljUHJ1bmVkKGJpdHMsIHJlZnMpIHtcbiAgICBsZXQgcmVhZGVyID0gbmV3IEJpdFJlYWRlcl8xLkJpdFJlYWRlcihiaXRzKTtcbiAgICAvLyBDaGVjayB0eXBlXG4gICAgbGV0IHR5cGUgPSByZWFkZXIubG9hZFVpbnQoOCk7XG4gICAgaWYgKHR5cGUgIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcnVuZWQgYnJhbmNoIGNlbGwgbXVzdCBoYXZlIHR5cGUgMSwgZ290IFwiJHt0eXBlfVwiYCk7XG4gICAgfVxuICAgIC8vIENoZWNrIHJlZnNcbiAgICBpZiAocmVmcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcnVuZWQgQnJhbmNoIGNlbGwgY2FuJ3QgaGFzIHJlZnMsIGdvdCBcIiR7cmVmcy5sZW5ndGh9XCJgKTtcbiAgICB9XG4gICAgLy8gUmVzb2x2ZSBjZWxsXG4gICAgbGV0IG1hc2s7XG4gICAgaWYgKGJpdHMubGVuZ3RoID09PSAyODApIHtcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBjb25maWcgcHJvb2ZcbiAgICAgICAgLy8gVGhpcyB0ZXN0IHByb29mIGlzIGdlbmVyYXRlZCBpbiB0aGUgbW9tZW50IG9mIHZvdGluZyBmb3IgYSBzbGFzaGluZ1xuICAgICAgICAvLyBpdCBzZWVtcyB0aGF0IHRvb2xzIGdlbmVyYXRlIGl0IGluY29ycmVjdGx5IGFuZCB0aGVyZWZvcmUgZG9lc24ndCBoYXZlIG1hc2sgaW4gaXRcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBoYXJkY29kZSBpdCBlcXVhbCB0byAxXG4gICAgICAgIG1hc2sgPSBuZXcgTGV2ZWxNYXNrXzEuTGV2ZWxNYXNrKDEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gQ2hlY2sgbGV2ZWxcbiAgICAgICAgbWFzayA9IG5ldyBMZXZlbE1hc2tfMS5MZXZlbE1hc2socmVhZGVyLmxvYWRVaW50KDgpKTtcbiAgICAgICAgaWYgKG1hc2subGV2ZWwgPCAxIHx8IG1hc2subGV2ZWwgPiAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBydW5lZCBCcmFuY2ggY2VsbCBsZXZlbCBtdXN0IGJlID49IDEgYW5kIDw9IDMsIGdvdCBcIiR7bWFzay5sZXZlbH0vJHttYXNrLnZhbHVlfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVhZCBwcnVuZWRcbiAgICAgICAgY29uc3Qgc2l6ZSA9IDggKyA4ICsgKG1hc2suYXBwbHkobWFzay5sZXZlbCAtIDEpLmhhc2hDb3VudCAqICgyNTYgLyogSGFzaCAqLyArIDE2IC8qIERlcHRoICovKSk7XG4gICAgICAgIGlmIChiaXRzLmxlbmd0aCAhPT0gc2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcnVuZWQgYnJhbmNoIGNlbGwgbXVzdCBoYXZlIGV4YWN0bHkgJHtzaXplfSBiaXRzLCBnb3QgXCIke2JpdHMubGVuZ3RofVwiYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVhZCBwcnVuZWRcbiAgICBsZXQgcHJ1bmVkID0gW107XG4gICAgbGV0IGhhc2hlcyA9IFtdO1xuICAgIGxldCBkZXB0aHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc2subGV2ZWw7IGkrKykge1xuICAgICAgICBoYXNoZXMucHVzaChyZWFkZXIubG9hZEJ1ZmZlcigzMikpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc2subGV2ZWw7IGkrKykge1xuICAgICAgICBkZXB0aHMucHVzaChyZWFkZXIubG9hZFVpbnQoMTYpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXNrLmxldmVsOyBpKyspIHtcbiAgICAgICAgcHJ1bmVkLnB1c2goe1xuICAgICAgICAgICAgZGVwdGg6IGRlcHRoc1tpXSxcbiAgICAgICAgICAgIGhhc2g6IGhhc2hlc1tpXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFzazogbWFzay52YWx1ZSxcbiAgICAgICAgcHJ1bmVkXG4gICAgfTtcbn1cbmV4cG9ydHMuZXhvdGljUHJ1bmVkID0gZXhvdGljUHJ1bmVkO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhvdGljUHJ1bmVkIiwiQml0UmVhZGVyXzEiLCJyZXF1aXJlIiwiTGV2ZWxNYXNrXzEiLCJiaXRzIiwicmVmcyIsInJlYWRlciIsIkJpdFJlYWRlciIsInR5cGUiLCJsb2FkVWludCIsIkVycm9yIiwibGVuZ3RoIiwibWFzayIsIkxldmVsTWFzayIsImxldmVsIiwic2l6ZSIsImFwcGx5IiwiaGFzaENvdW50IiwicHJ1bmVkIiwiaGFzaGVzIiwiZGVwdGhzIiwiaSIsInB1c2giLCJsb2FkQnVmZmVyIiwiZGVwdGgiLCJoYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticPruned.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/resolveExotic.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/resolveExotic.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveExotic = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nconst CellType_1 = __webpack_require__(/*! ../CellType */ \"(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\");\nconst exoticLibrary_1 = __webpack_require__(/*! ./exoticLibrary */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js\");\nconst exoticMerkleProof_1 = __webpack_require__(/*! ./exoticMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js\");\nconst exoticMerkleUpdate_1 = __webpack_require__(/*! ./exoticMerkleUpdate */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js\");\nconst exoticPruned_1 = __webpack_require__(/*! ./exoticPruned */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticPruned.js\");\nconst LevelMask_1 = __webpack_require__(/*! ./LevelMask */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/LevelMask.js\");\nfunction resolvePruned(bits, refs) {\n    // Parse pruned cell\n    let pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask(pruned.mask);\n    for(let i = 0; i < pruned.pruned.length; i++){\n        depths.push(pruned.pruned[i].depth);\n        hashes.push(pruned.pruned[i].hash);\n    }\n    return {\n        type: CellType_1.CellType.PrunedBranch,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveLibrary(bits, refs) {\n    // Parse library cell\n    let pruned = (0, exoticLibrary_1.exoticLibrary)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask();\n    return {\n        type: CellType_1.CellType.Library,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveMerkleProof(bits, refs) {\n    // Parse merkle proof cell\n    let merkleProof = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask(refs[0].level() >> 1);\n    return {\n        type: CellType_1.CellType.MerkleProof,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveMerkleUpdate(bits, refs) {\n    // Parse merkle proof cell\n    let merkleUpdate = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask((refs[0].level() | refs[1].level()) >> 1);\n    return {\n        type: CellType_1.CellType.MerkleUpdate,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveExotic(bits, refs) {\n    let reader = new BitReader_1.BitReader(bits);\n    let type = reader.preloadUint(8);\n    if (type === 1) {\n        return resolvePruned(bits, refs);\n    }\n    if (type === 2) {\n        return resolveLibrary(bits, refs);\n    }\n    if (type === 3) {\n        return resolveMerkleProof(bits, refs);\n    }\n    if (type === 4) {\n        return resolveMerkleUpdate(bits, refs);\n    }\n    throw Error(\"Invalid exotic cell type: \" + type);\n}\nexports.resolveExotic = resolveExotic;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvcmVzb2x2ZUV4b3RpYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQywwRUFBYztBQUMxQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyx3RUFBYTtBQUN4QyxNQUFNRSxrQkFBa0JGLG1CQUFPQSxDQUFDLHNGQUFpQjtBQUNqRCxNQUFNRyxzQkFBc0JILG1CQUFPQSxDQUFDLDhGQUFxQjtBQUN6RCxNQUFNSSx1QkFBdUJKLG1CQUFPQSxDQUFDLGdHQUFzQjtBQUMzRCxNQUFNSyxpQkFBaUJMLG1CQUFPQSxDQUFDLG9GQUFnQjtBQUMvQyxNQUFNTSxjQUFjTixtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxTQUFTTyxjQUFjQyxJQUFJLEVBQUVDLElBQUk7SUFDN0Isb0JBQW9CO0lBQ3BCLElBQUlDLFNBQVMsQ0FBQyxHQUFHTCxlQUFlTSxZQUFZLEVBQUVILE1BQU1DO0lBQ3BELHVCQUF1QjtJQUN2QixJQUFJRyxTQUFTLEVBQUU7SUFDZixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxPQUFPLElBQUlSLFlBQVlTLFNBQVMsQ0FBQ0wsT0FBT0ksSUFBSTtJQUNoRCxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSU4sT0FBT0EsTUFBTSxDQUFDTyxNQUFNLEVBQUVELElBQUs7UUFDM0NKLE9BQU9NLElBQUksQ0FBQ1IsT0FBT0EsTUFBTSxDQUFDTSxFQUFFLENBQUNHLEtBQUs7UUFDbENOLE9BQU9LLElBQUksQ0FBQ1IsT0FBT0EsTUFBTSxDQUFDTSxFQUFFLENBQUNJLElBQUk7SUFDckM7SUFDQSxPQUFPO1FBQ0hDLE1BQU1wQixXQUFXcUIsUUFBUSxDQUFDQyxZQUFZO1FBQ3RDWDtRQUNBQztRQUNBQztJQUNKO0FBQ0o7QUFDQSxTQUFTVSxlQUFlaEIsSUFBSSxFQUFFQyxJQUFJO0lBQzlCLHFCQUFxQjtJQUNyQixJQUFJQyxTQUFTLENBQUMsR0FBR1IsZ0JBQWdCdUIsYUFBYSxFQUFFakIsTUFBTUM7SUFDdEQsdUJBQXVCO0lBQ3ZCLElBQUlHLFNBQVMsRUFBRTtJQUNmLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUlDLE9BQU8sSUFBSVIsWUFBWVMsU0FBUztJQUNwQyxPQUFPO1FBQ0hNLE1BQU1wQixXQUFXcUIsUUFBUSxDQUFDSSxPQUFPO1FBQ2pDZDtRQUNBQztRQUNBQztJQUNKO0FBQ0o7QUFDQSxTQUFTYSxtQkFBbUJuQixJQUFJLEVBQUVDLElBQUk7SUFDbEMsMEJBQTBCO0lBQzFCLElBQUltQixjQUFjLENBQUMsR0FBR3pCLG9CQUFvQjBCLGlCQUFpQixFQUFFckIsTUFBTUM7SUFDbkUsdUJBQXVCO0lBQ3ZCLElBQUlHLFNBQVMsRUFBRTtJQUNmLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUlDLE9BQU8sSUFBSVIsWUFBWVMsU0FBUyxDQUFDTixJQUFJLENBQUMsRUFBRSxDQUFDcUIsS0FBSyxNQUFNO0lBQ3hELE9BQU87UUFDSFQsTUFBTXBCLFdBQVdxQixRQUFRLENBQUNTLFdBQVc7UUFDckNuQjtRQUNBQztRQUNBQztJQUNKO0FBQ0o7QUFDQSxTQUFTa0Isb0JBQW9CeEIsSUFBSSxFQUFFQyxJQUFJO0lBQ25DLDBCQUEwQjtJQUMxQixJQUFJd0IsZUFBZSxDQUFDLEdBQUc3QixxQkFBcUI4QixrQkFBa0IsRUFBRTFCLE1BQU1DO0lBQ3RFLHVCQUF1QjtJQUN2QixJQUFJRyxTQUFTLEVBQUU7SUFDZixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxPQUFPLElBQUlSLFlBQVlTLFNBQVMsQ0FBQyxDQUFDTixJQUFJLENBQUMsRUFBRSxDQUFDcUIsS0FBSyxLQUFLckIsSUFBSSxDQUFDLEVBQUUsQ0FBQ3FCLEtBQUssRUFBQyxLQUFNO0lBQzVFLE9BQU87UUFDSFQsTUFBTXBCLFdBQVdxQixRQUFRLENBQUNhLFlBQVk7UUFDdEN2QjtRQUNBQztRQUNBQztJQUNKO0FBQ0o7QUFDQSxTQUFTaEIsY0FBY1UsSUFBSSxFQUFFQyxJQUFJO0lBQzdCLElBQUkyQixTQUFTLElBQUlyQyxZQUFZc0MsU0FBUyxDQUFDN0I7SUFDdkMsSUFBSWEsT0FBT2UsT0FBT0UsV0FBVyxDQUFDO0lBQzlCLElBQUlqQixTQUFTLEdBQUc7UUFDWixPQUFPZCxjQUFjQyxNQUFNQztJQUMvQjtJQUNBLElBQUlZLFNBQVMsR0FBRztRQUNaLE9BQU9HLGVBQWVoQixNQUFNQztJQUNoQztJQUNBLElBQUlZLFNBQVMsR0FBRztRQUNaLE9BQU9NLG1CQUFtQm5CLE1BQU1DO0lBQ3BDO0lBQ0EsSUFBSVksU0FBUyxHQUFHO1FBQ1osT0FBT1csb0JBQW9CeEIsTUFBTUM7SUFDckM7SUFDQSxNQUFNOEIsTUFBTSwrQkFBK0JsQjtBQUMvQztBQUNBekIscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9ib2MvY2VsbC9yZXNvbHZlRXhvdGljLmpzP2QwMDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVFeG90aWMgPSB2b2lkIDA7XG5jb25zdCBCaXRSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi9CaXRSZWFkZXJcIik7XG5jb25zdCBDZWxsVHlwZV8xID0gcmVxdWlyZShcIi4uL0NlbGxUeXBlXCIpO1xuY29uc3QgZXhvdGljTGlicmFyeV8xID0gcmVxdWlyZShcIi4vZXhvdGljTGlicmFyeVwiKTtcbmNvbnN0IGV4b3RpY01lcmtsZVByb29mXzEgPSByZXF1aXJlKFwiLi9leG90aWNNZXJrbGVQcm9vZlwiKTtcbmNvbnN0IGV4b3RpY01lcmtsZVVwZGF0ZV8xID0gcmVxdWlyZShcIi4vZXhvdGljTWVya2xlVXBkYXRlXCIpO1xuY29uc3QgZXhvdGljUHJ1bmVkXzEgPSByZXF1aXJlKFwiLi9leG90aWNQcnVuZWRcIik7XG5jb25zdCBMZXZlbE1hc2tfMSA9IHJlcXVpcmUoXCIuL0xldmVsTWFza1wiKTtcbmZ1bmN0aW9uIHJlc29sdmVQcnVuZWQoYml0cywgcmVmcykge1xuICAgIC8vIFBhcnNlIHBydW5lZCBjZWxsXG4gICAgbGV0IHBydW5lZCA9ICgwLCBleG90aWNQcnVuZWRfMS5leG90aWNQcnVuZWQpKGJpdHMsIHJlZnMpO1xuICAgIC8vIENhbGN1bGF0ZSBwYXJhbWV0ZXJzXG4gICAgbGV0IGRlcHRocyA9IFtdO1xuICAgIGxldCBoYXNoZXMgPSBbXTtcbiAgICBsZXQgbWFzayA9IG5ldyBMZXZlbE1hc2tfMS5MZXZlbE1hc2socHJ1bmVkLm1hc2spO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJ1bmVkLnBydW5lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZXB0aHMucHVzaChwcnVuZWQucHJ1bmVkW2ldLmRlcHRoKTtcbiAgICAgICAgaGFzaGVzLnB1c2gocHJ1bmVkLnBydW5lZFtpXS5oYXNoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQ2VsbFR5cGVfMS5DZWxsVHlwZS5QcnVuZWRCcmFuY2gsXG4gICAgICAgIGRlcHRocyxcbiAgICAgICAgaGFzaGVzLFxuICAgICAgICBtYXNrXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVMaWJyYXJ5KGJpdHMsIHJlZnMpIHtcbiAgICAvLyBQYXJzZSBsaWJyYXJ5IGNlbGxcbiAgICBsZXQgcHJ1bmVkID0gKDAsIGV4b3RpY0xpYnJhcnlfMS5leG90aWNMaWJyYXJ5KShiaXRzLCByZWZzKTtcbiAgICAvLyBDYWxjdWxhdGUgcGFyYW1ldGVyc1xuICAgIGxldCBkZXB0aHMgPSBbXTtcbiAgICBsZXQgaGFzaGVzID0gW107XG4gICAgbGV0IG1hc2sgPSBuZXcgTGV2ZWxNYXNrXzEuTGV2ZWxNYXNrKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQ2VsbFR5cGVfMS5DZWxsVHlwZS5MaWJyYXJ5LFxuICAgICAgICBkZXB0aHMsXG4gICAgICAgIGhhc2hlcyxcbiAgICAgICAgbWFza1xuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlTWVya2xlUHJvb2YoYml0cywgcmVmcykge1xuICAgIC8vIFBhcnNlIG1lcmtsZSBwcm9vZiBjZWxsXG4gICAgbGV0IG1lcmtsZVByb29mID0gKDAsIGV4b3RpY01lcmtsZVByb29mXzEuZXhvdGljTWVya2xlUHJvb2YpKGJpdHMsIHJlZnMpO1xuICAgIC8vIENhbGN1bGF0ZSBwYXJhbWV0ZXJzXG4gICAgbGV0IGRlcHRocyA9IFtdO1xuICAgIGxldCBoYXNoZXMgPSBbXTtcbiAgICBsZXQgbWFzayA9IG5ldyBMZXZlbE1hc2tfMS5MZXZlbE1hc2socmVmc1swXS5sZXZlbCgpID4+IDEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IENlbGxUeXBlXzEuQ2VsbFR5cGUuTWVya2xlUHJvb2YsXG4gICAgICAgIGRlcHRocyxcbiAgICAgICAgaGFzaGVzLFxuICAgICAgICBtYXNrXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVNZXJrbGVVcGRhdGUoYml0cywgcmVmcykge1xuICAgIC8vIFBhcnNlIG1lcmtsZSBwcm9vZiBjZWxsXG4gICAgbGV0IG1lcmtsZVVwZGF0ZSA9ICgwLCBleG90aWNNZXJrbGVVcGRhdGVfMS5leG90aWNNZXJrbGVVcGRhdGUpKGJpdHMsIHJlZnMpO1xuICAgIC8vIENhbGN1bGF0ZSBwYXJhbWV0ZXJzXG4gICAgbGV0IGRlcHRocyA9IFtdO1xuICAgIGxldCBoYXNoZXMgPSBbXTtcbiAgICBsZXQgbWFzayA9IG5ldyBMZXZlbE1hc2tfMS5MZXZlbE1hc2soKHJlZnNbMF0ubGV2ZWwoKSB8IHJlZnNbMV0ubGV2ZWwoKSkgPj4gMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQ2VsbFR5cGVfMS5DZWxsVHlwZS5NZXJrbGVVcGRhdGUsXG4gICAgICAgIGRlcHRocyxcbiAgICAgICAgaGFzaGVzLFxuICAgICAgICBtYXNrXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVFeG90aWMoYml0cywgcmVmcykge1xuICAgIGxldCByZWFkZXIgPSBuZXcgQml0UmVhZGVyXzEuQml0UmVhZGVyKGJpdHMpO1xuICAgIGxldCB0eXBlID0gcmVhZGVyLnByZWxvYWRVaW50KDgpO1xuICAgIGlmICh0eXBlID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlUHJ1bmVkKGJpdHMsIHJlZnMpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gMikge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUxpYnJhcnkoYml0cywgcmVmcyk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlTWVya2xlUHJvb2YoYml0cywgcmVmcyk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlTWVya2xlVXBkYXRlKGJpdHMsIHJlZnMpO1xuICAgIH1cbiAgICB0aHJvdyBFcnJvcignSW52YWxpZCBleG90aWMgY2VsbCB0eXBlOiAnICsgdHlwZSk7XG59XG5leHBvcnRzLnJlc29sdmVFeG90aWMgPSByZXNvbHZlRXhvdGljO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZUV4b3RpYyIsIkJpdFJlYWRlcl8xIiwicmVxdWlyZSIsIkNlbGxUeXBlXzEiLCJleG90aWNMaWJyYXJ5XzEiLCJleG90aWNNZXJrbGVQcm9vZl8xIiwiZXhvdGljTWVya2xlVXBkYXRlXzEiLCJleG90aWNQcnVuZWRfMSIsIkxldmVsTWFza18xIiwicmVzb2x2ZVBydW5lZCIsImJpdHMiLCJyZWZzIiwicHJ1bmVkIiwiZXhvdGljUHJ1bmVkIiwiZGVwdGhzIiwiaGFzaGVzIiwibWFzayIsIkxldmVsTWFzayIsImkiLCJsZW5ndGgiLCJwdXNoIiwiZGVwdGgiLCJoYXNoIiwidHlwZSIsIkNlbGxUeXBlIiwiUHJ1bmVkQnJhbmNoIiwicmVzb2x2ZUxpYnJhcnkiLCJleG90aWNMaWJyYXJ5IiwiTGlicmFyeSIsInJlc29sdmVNZXJrbGVQcm9vZiIsIm1lcmtsZVByb29mIiwiZXhvdGljTWVya2xlUHJvb2YiLCJsZXZlbCIsIk1lcmtsZVByb29mIiwicmVzb2x2ZU1lcmtsZVVwZGF0ZSIsIm1lcmtsZVVwZGF0ZSIsImV4b3RpY01lcmtsZVVwZGF0ZSIsIk1lcmtsZVVwZGF0ZSIsInJlYWRlciIsIkJpdFJlYWRlciIsInByZWxvYWRVaW50IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/resolveExotic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/serialization.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/serialization.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializeBoc = exports.deserializeBoc = exports.parseBoc = void 0;\nconst BitReader_1 = __webpack_require__(/*! ../BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nconst BitString_1 = __webpack_require__(/*! ../BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nconst Cell_1 = __webpack_require__(/*! ../Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nconst topologicalSort_1 = __webpack_require__(/*! ./utils/topologicalSort */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js\");\nconst bitsForNumber_1 = __webpack_require__(/*! ../../utils/bitsForNumber */ \"(ssr)/./node_modules/@ton/core/dist/utils/bitsForNumber.js\");\nconst BitBuilder_1 = __webpack_require__(/*! ../BitBuilder */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js\");\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/descriptor.js\");\nconst paddedBits_1 = __webpack_require__(/*! ../utils/paddedBits */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js\");\nconst crc32c_1 = __webpack_require__(/*! ../../utils/crc32c */ \"(ssr)/./node_modules/@ton/core/dist/utils/crc32c.js\");\nfunction getHashesCount(levelMask) {\n    return getHashesCountFromMask(levelMask & 7);\n}\nfunction getHashesCountFromMask(mask) {\n    let n = 0;\n    for(let i = 0; i < 3; i++){\n        n += mask & 1;\n        mask = mask >> 1;\n    }\n    return n + 1; // 1 repr + up to 3 higher hashes\n}\nfunction readCell(reader, sizeBytes) {\n    // D1\n    const d1 = reader.loadUint(8);\n    const refsCount = d1 % 8;\n    const exotic = !!(d1 & 8);\n    // D2\n    const d2 = reader.loadUint(8);\n    const dataBytesize = Math.ceil(d2 / 2);\n    const paddingAdded = !!(d2 % 2);\n    const levelMask = d1 >> 5;\n    const hasHashes = (d1 & 16) != 0;\n    const hash_bytes = 32;\n    const hashesSize = hasHashes ? getHashesCount(levelMask) * hash_bytes : 0;\n    const depthSize = hasHashes ? getHashesCount(levelMask) * 2 : 0;\n    reader.skip(hashesSize * 8);\n    reader.skip(depthSize * 8);\n    // Bits\n    let bits = BitString_1.BitString.EMPTY;\n    if (dataBytesize > 0) {\n        if (paddingAdded) {\n            bits = reader.loadPaddedBits(dataBytesize * 8);\n        } else {\n            bits = reader.loadBits(dataBytesize * 8);\n        }\n    }\n    // Refs\n    let refs = [];\n    for(let i = 0; i < refsCount; i++){\n        refs.push(reader.loadUint(sizeBytes * 8));\n    }\n    // Result\n    return {\n        bits,\n        refs,\n        exotic\n    };\n}\nfunction calcCellSize(cell, sizeBytes) {\n    return 2 /* D1+D2 */  + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;\n}\nfunction parseBoc(src) {\n    let reader = new BitReader_1.BitReader(new BitString_1.BitString(src, 0, src.length * 8));\n    let magic = reader.loadUint(32);\n    if (magic === 0x68ff65f3) {\n        let size = reader.loadUint(8);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8); // Must be 1\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let index = reader.loadBuffer(cells * offBytes);\n        let cellData = reader.loadBuffer(totalCellSize);\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root: [\n                0\n            ]\n        };\n    } else if (magic === 0xacc3a728) {\n        let size = reader.loadUint(8);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8); // Must be 1\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let index = reader.loadBuffer(cells * offBytes);\n        let cellData = reader.loadBuffer(totalCellSize);\n        let crc32 = reader.loadBuffer(4);\n        if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {\n            throw Error(\"Invalid CRC32C\");\n        }\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root: [\n                0\n            ]\n        };\n    } else if (magic === 0xb5ee9c72) {\n        let hasIdx = reader.loadUint(1);\n        let hasCrc32c = reader.loadUint(1);\n        let hasCacheBits = reader.loadUint(1);\n        let flags = reader.loadUint(2); // Must be 0\n        let size = reader.loadUint(3);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8);\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let root = [];\n        for(let i = 0; i < roots; i++){\n            root.push(reader.loadUint(size * 8));\n        }\n        let index = null;\n        if (hasIdx) {\n            index = reader.loadBuffer(cells * offBytes);\n        }\n        let cellData = reader.loadBuffer(totalCellSize);\n        if (hasCrc32c) {\n            let crc32 = reader.loadBuffer(4);\n            if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {\n                throw Error(\"Invalid CRC32C\");\n            }\n        }\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root\n        };\n    } else {\n        throw Error(\"Invalid magic\");\n    }\n}\nexports.parseBoc = parseBoc;\nfunction deserializeBoc(src) {\n    //\n    // Parse BOC\n    //\n    let boc = parseBoc(src);\n    let reader = new BitReader_1.BitReader(new BitString_1.BitString(boc.cellData, 0, boc.cellData.length * 8));\n    //\n    // Load cells\n    //\n    let cells = [];\n    for(let i = 0; i < boc.cells; i++){\n        let cll = readCell(reader, boc.size);\n        cells.push({\n            ...cll,\n            result: null\n        });\n    }\n    //\n    // Build cells\n    //\n    for(let i = cells.length - 1; i >= 0; i--){\n        if (cells[i].result) {\n            throw Error(\"Impossible\");\n        }\n        let refs = [];\n        for (let r of cells[i].refs){\n            if (!cells[r].result) {\n                throw Error(\"Invalid BOC file\");\n            }\n            refs.push(cells[r].result);\n        }\n        cells[i].result = new Cell_1.Cell({\n            bits: cells[i].bits,\n            refs,\n            exotic: cells[i].exotic\n        });\n    }\n    //\n    // Load roots\n    //\n    let roots = [];\n    for(let i = 0; i < boc.root.length; i++){\n        roots.push(cells[boc.root[i]].result);\n    }\n    //\n    // Return\n    //\n    return roots;\n}\nexports.deserializeBoc = deserializeBoc;\nfunction writeCellToBuilder(cell, refs, sizeBytes, to) {\n    let d1 = (0, descriptor_1.getRefsDescriptor)(cell.refs, cell.mask.value, cell.type);\n    let d2 = (0, descriptor_1.getBitsDescriptor)(cell.bits);\n    to.writeUint(d1, 8);\n    to.writeUint(d2, 8);\n    to.writeBuffer((0, paddedBits_1.bitsToPaddedBuffer)(cell.bits));\n    for (let r of refs){\n        to.writeUint(r, sizeBytes * 8);\n    }\n}\nfunction serializeBoc(root, opts) {\n    // Sort cells\n    let allCells = (0, topologicalSort_1.topologicalSort)(root);\n    // Calculcate parameters\n    let cellsNum = allCells.length;\n    let has_idx = opts.idx;\n    let has_crc32c = opts.crc32;\n    let has_cache_bits = false;\n    let flags = 0;\n    let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, \"uint\") / 8), 1);\n    let totalCellSize = 0;\n    let index = [];\n    for (let c of allCells){\n        let sz = calcCellSize(c.cell, sizeBytes);\n        totalCellSize += sz;\n        index.push(totalCellSize);\n    }\n    let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, \"uint\") / 8), 1);\n    let totalSize = (4 + // magic\n    1 + // flags and s_bytes\n    1 + // offset_bytes\n    3 * sizeBytes + // cells_num, roots, complete\n    offsetBytes + // full_size\n    1 * sizeBytes + // root_idx\n    (has_idx ? cellsNum * offsetBytes : 0) + totalCellSize + (has_crc32c ? 4 : 0)) * 8;\n    // Serialize\n    let builder = new BitBuilder_1.BitBuilder(totalSize);\n    builder.writeUint(0xb5ee9c72, 32); // Magic\n    builder.writeBit(has_idx); // Has index\n    builder.writeBit(has_crc32c); // Has crc32c\n    builder.writeBit(has_cache_bits); // Has cache bits\n    builder.writeUint(flags, 2); // Flags\n    builder.writeUint(sizeBytes, 3); // Size bytes\n    builder.writeUint(offsetBytes, 8); // Offset bytes\n    builder.writeUint(cellsNum, sizeBytes * 8); // Cells num\n    builder.writeUint(1, sizeBytes * 8); // Roots num\n    builder.writeUint(0, sizeBytes * 8); // Absent num\n    builder.writeUint(totalCellSize, offsetBytes * 8); // Total cell size\n    builder.writeUint(0, sizeBytes * 8); // Root id == 0\n    if (has_idx) {\n        for(let i = 0; i < cellsNum; i++){\n            builder.writeUint(index[i], offsetBytes * 8);\n        }\n    }\n    for(let i = 0; i < cellsNum; i++){\n        writeCellToBuilder(allCells[i].cell, allCells[i].refs, sizeBytes, builder);\n    }\n    if (has_crc32c) {\n        let crc32 = (0, crc32c_1.crc32c)(builder.buffer()); // builder.buffer() is fast since it doesn't allocate new memory\n        builder.writeBuffer(crc32);\n    }\n    // Sanity Check\n    let res = builder.buffer();\n    if (res.length !== totalSize / 8) {\n        throw Error(\"Internal error\");\n    }\n    return res;\n}\nexports.serializeBoc = serializeBoc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/serialization.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.topologicalSort = void 0;\nfunction topologicalSort(src) {\n    let pending = [\n        src\n    ];\n    let allCells = new Map();\n    let notPermCells = new Set();\n    let sorted = [];\n    while(pending.length > 0){\n        const cells = [\n            ...pending\n        ];\n        pending = [];\n        for (let cell of cells){\n            const hash = cell.hash().toString(\"hex\");\n            if (allCells.has(hash)) {\n                continue;\n            }\n            notPermCells.add(hash);\n            allCells.set(hash, {\n                cell: cell,\n                refs: cell.refs.map((v)=>v.hash().toString(\"hex\"))\n            });\n            for (let r of cell.refs){\n                pending.push(r);\n            }\n        }\n    }\n    let tempMark = new Set();\n    function visit(hash) {\n        if (!notPermCells.has(hash)) {\n            return;\n        }\n        if (tempMark.has(hash)) {\n            throw Error(\"Not a DAG\");\n        }\n        tempMark.add(hash);\n        let refs = allCells.get(hash).refs;\n        for(let ci = refs.length - 1; ci >= 0; ci--){\n            visit(refs[ci]);\n        }\n        sorted.push(hash);\n        tempMark.delete(hash);\n        notPermCells.delete(hash);\n    }\n    while(notPermCells.size > 0){\n        const id = Array.from(notPermCells)[0];\n        visit(id);\n    }\n    let indexes = new Map();\n    for(let i = 0; i < sorted.length; i++){\n        indexes.set(sorted[sorted.length - i - 1], i);\n    }\n    let result = [];\n    for(let i = sorted.length - 1; i >= 0; i--){\n        let ent = sorted[i];\n        const rrr = allCells.get(ent);\n        result.push({\n            cell: rrr.cell,\n            refs: rrr.refs.map((v)=>indexes.get(v))\n        });\n    }\n    return result;\n}\nexports.topologicalSort = topologicalSort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL2NlbGwvdXRpbHMvdG9wb2xvZ2ljYWxTb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBRyxLQUFLO0FBQy9CLFNBQVNFLGdCQUFnQkMsR0FBRztJQUN4QixJQUFJQyxVQUFVO1FBQUNEO0tBQUk7SUFDbkIsSUFBSUUsV0FBVyxJQUFJQztJQUNuQixJQUFJQyxlQUFlLElBQUlDO0lBQ3ZCLElBQUlDLFNBQVMsRUFBRTtJQUNmLE1BQU9MLFFBQVFNLE1BQU0sR0FBRyxFQUFHO1FBQ3ZCLE1BQU1DLFFBQVE7ZUFBSVA7U0FBUTtRQUMxQkEsVUFBVSxFQUFFO1FBQ1osS0FBSyxJQUFJUSxRQUFRRCxNQUFPO1lBQ3BCLE1BQU1FLE9BQU9ELEtBQUtDLElBQUksR0FBR0MsUUFBUSxDQUFDO1lBQ2xDLElBQUlULFNBQVNVLEdBQUcsQ0FBQ0YsT0FBTztnQkFDcEI7WUFDSjtZQUNBTixhQUFhUyxHQUFHLENBQUNIO1lBQ2pCUixTQUFTWSxHQUFHLENBQUNKLE1BQU07Z0JBQUVELE1BQU1BO2dCQUFNTSxNQUFNTixLQUFLTSxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFUCxJQUFJLEdBQUdDLFFBQVEsQ0FBQztZQUFRO1lBQ3RGLEtBQUssSUFBSU8sS0FBS1QsS0FBS00sSUFBSSxDQUFFO2dCQUNyQmQsUUFBUWtCLElBQUksQ0FBQ0Q7WUFDakI7UUFDSjtJQUNKO0lBQ0EsSUFBSUUsV0FBVyxJQUFJZjtJQUNuQixTQUFTZ0IsTUFBTVgsSUFBSTtRQUNmLElBQUksQ0FBQ04sYUFBYVEsR0FBRyxDQUFDRixPQUFPO1lBQ3pCO1FBQ0o7UUFDQSxJQUFJVSxTQUFTUixHQUFHLENBQUNGLE9BQU87WUFDcEIsTUFBTVksTUFBTTtRQUNoQjtRQUNBRixTQUFTUCxHQUFHLENBQUNIO1FBQ2IsSUFBSUssT0FBT2IsU0FBU3FCLEdBQUcsQ0FBQ2IsTUFBTUssSUFBSTtRQUNsQyxJQUFLLElBQUlTLEtBQUtULEtBQUtSLE1BQU0sR0FBRyxHQUFHaUIsTUFBTSxHQUFHQSxLQUFNO1lBQzFDSCxNQUFNTixJQUFJLENBQUNTLEdBQUc7UUFDbEI7UUFDQWxCLE9BQU9hLElBQUksQ0FBQ1Q7UUFDWlUsU0FBU0ssTUFBTSxDQUFDZjtRQUNoQk4sYUFBYXFCLE1BQU0sQ0FBQ2Y7SUFDeEI7SUFDQSxNQUFPTixhQUFhc0IsSUFBSSxHQUFHLEVBQUc7UUFDMUIsTUFBTUMsS0FBS0MsTUFBTUMsSUFBSSxDQUFDekIsYUFBYSxDQUFDLEVBQUU7UUFDdENpQixNQUFNTTtJQUNWO0lBQ0EsSUFBSUcsVUFBVSxJQUFJM0I7SUFDbEIsSUFBSyxJQUFJNEIsSUFBSSxHQUFHQSxJQUFJekIsT0FBT0MsTUFBTSxFQUFFd0IsSUFBSztRQUNwQ0QsUUFBUWhCLEdBQUcsQ0FBQ1IsTUFBTSxDQUFDQSxPQUFPQyxNQUFNLEdBQUd3QixJQUFJLEVBQUUsRUFBRUE7SUFDL0M7SUFDQSxJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFLLElBQUlELElBQUl6QixPQUFPQyxNQUFNLEdBQUcsR0FBR3dCLEtBQUssR0FBR0EsSUFBSztRQUN6QyxJQUFJRSxNQUFNM0IsTUFBTSxDQUFDeUIsRUFBRTtRQUNuQixNQUFNRyxNQUFNaEMsU0FBU3FCLEdBQUcsQ0FBQ1U7UUFDekJELE9BQU9iLElBQUksQ0FBQztZQUFFVixNQUFNeUIsSUFBSXpCLElBQUk7WUFBRU0sTUFBTW1CLElBQUluQixJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNYSxRQUFRUCxHQUFHLENBQUNOO1FBQUk7SUFDNUU7SUFDQSxPQUFPZTtBQUNYO0FBQ0FuQyx1QkFBdUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2JvYy9jZWxsL3V0aWxzL3RvcG9sb2dpY2FsU29ydC5qcz8xMTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b3BvbG9naWNhbFNvcnQgPSB2b2lkIDA7XG5mdW5jdGlvbiB0b3BvbG9naWNhbFNvcnQoc3JjKSB7XG4gICAgbGV0IHBlbmRpbmcgPSBbc3JjXTtcbiAgICBsZXQgYWxsQ2VsbHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IG5vdFBlcm1DZWxscyA9IG5ldyBTZXQoKTtcbiAgICBsZXQgc29ydGVkID0gW107XG4gICAgd2hpbGUgKHBlbmRpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBjZWxscyA9IFsuLi5wZW5kaW5nXTtcbiAgICAgICAgcGVuZGluZyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjZWxsIG9mIGNlbGxzKSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gY2VsbC5oYXNoKCkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICAgICAgaWYgKGFsbENlbGxzLmhhcyhoYXNoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm90UGVybUNlbGxzLmFkZChoYXNoKTtcbiAgICAgICAgICAgIGFsbENlbGxzLnNldChoYXNoLCB7IGNlbGw6IGNlbGwsIHJlZnM6IGNlbGwucmVmcy5tYXAoKHYpID0+IHYuaGFzaCgpLnRvU3RyaW5nKCdoZXgnKSkgfSk7XG4gICAgICAgICAgICBmb3IgKGxldCByIG9mIGNlbGwucmVmcykge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgdGVtcE1hcmsgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gdmlzaXQoaGFzaCkge1xuICAgICAgICBpZiAoIW5vdFBlcm1DZWxscy5oYXMoaGFzaCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVtcE1hcmsuaGFzKGhhc2gpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTm90IGEgREFHJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcE1hcmsuYWRkKGhhc2gpO1xuICAgICAgICBsZXQgcmVmcyA9IGFsbENlbGxzLmdldChoYXNoKS5yZWZzO1xuICAgICAgICBmb3IgKGxldCBjaSA9IHJlZnMubGVuZ3RoIC0gMTsgY2kgPj0gMDsgY2ktLSkge1xuICAgICAgICAgICAgdmlzaXQocmVmc1tjaV0pO1xuICAgICAgICB9XG4gICAgICAgIHNvcnRlZC5wdXNoKGhhc2gpO1xuICAgICAgICB0ZW1wTWFyay5kZWxldGUoaGFzaCk7XG4gICAgICAgIG5vdFBlcm1DZWxscy5kZWxldGUoaGFzaCk7XG4gICAgfVxuICAgIHdoaWxlIChub3RQZXJtQ2VsbHMuc2l6ZSA+IDApIHtcbiAgICAgICAgY29uc3QgaWQgPSBBcnJheS5mcm9tKG5vdFBlcm1DZWxscylbMF07XG4gICAgICAgIHZpc2l0KGlkKTtcbiAgICB9XG4gICAgbGV0IGluZGV4ZXMgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5kZXhlcy5zZXQoc29ydGVkW3NvcnRlZC5sZW5ndGggLSBpIC0gMV0sIGkpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IHNvcnRlZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBsZXQgZW50ID0gc29ydGVkW2ldO1xuICAgICAgICBjb25zdCBycnIgPSBhbGxDZWxscy5nZXQoZW50KTtcbiAgICAgICAgcmVzdWx0LnB1c2goeyBjZWxsOiBycnIuY2VsbCwgcmVmczogcnJyLnJlZnMubWFwKCh2KSA9PiBpbmRleGVzLmdldCh2KSkgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnRvcG9sb2dpY2FsU29ydCA9IHRvcG9sb2dpY2FsU29ydDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvcG9sb2dpY2FsU29ydCIsInNyYyIsInBlbmRpbmciLCJhbGxDZWxscyIsIk1hcCIsIm5vdFBlcm1DZWxscyIsIlNldCIsInNvcnRlZCIsImxlbmd0aCIsImNlbGxzIiwiY2VsbCIsImhhc2giLCJ0b1N0cmluZyIsImhhcyIsImFkZCIsInNldCIsInJlZnMiLCJtYXAiLCJ2IiwiciIsInB1c2giLCJ0ZW1wTWFyayIsInZpc2l0IiwiRXJyb3IiLCJnZXQiLCJjaSIsImRlbGV0ZSIsInNpemUiLCJpZCIsIkFycmF5IiwiZnJvbSIsImluZGV4ZXMiLCJpIiwicmVzdWx0IiwiZW50IiwicnJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wonderCalculator = void 0;\nconst BitString_1 = __webpack_require__(/*! ../BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nconst CellType_1 = __webpack_require__(/*! ../CellType */ \"(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\");\nconst LevelMask_1 = __webpack_require__(/*! ./LevelMask */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/LevelMask.js\");\nconst exoticPruned_1 = __webpack_require__(/*! ./exoticPruned */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticPruned.js\");\nconst exoticMerkleProof_1 = __webpack_require__(/*! ./exoticMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js\");\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/descriptor.js\");\nconst crypto_1 = __webpack_require__(/*! @ton/crypto */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nconst exoticMerkleUpdate_1 = __webpack_require__(/*! ./exoticMerkleUpdate */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js\");\nconst exoticLibrary_1 = __webpack_require__(/*! ./exoticLibrary */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js\");\n//\n// This function replicates unknown logic of resolving cell data\n// https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214\n//\nfunction wonderCalculator(type, bits, refs) {\n    //\n    // Resolving level mask\n    //\n    let levelMask;\n    let pruned = null;\n    if (type === CellType_1.CellType.Ordinary) {\n        let mask = 0;\n        for (let r of refs){\n            mask = mask | r.mask.value;\n        }\n        levelMask = new LevelMask_1.LevelMask(mask);\n    } else if (type === CellType_1.CellType.PrunedBranch) {\n        // Parse pruned\n        pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask(pruned.mask);\n    } else if (type === CellType_1.CellType.MerkleProof) {\n        // Parse proof\n        let loaded = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);\n    } else if (type === CellType_1.CellType.MerkleUpdate) {\n        // Parse update\n        let loaded = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);\n    } else if (type === CellType_1.CellType.Library) {\n        // Parse library\n        let loaded = (0, exoticLibrary_1.exoticLibrary)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask();\n    } else {\n        throw new Error(\"Unsupported exotic type\");\n    }\n    //\n    // Calculate hashes and depths\n    // NOTE: https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214\n    //\n    let depths = [];\n    let hashes = [];\n    let hashCount = type === CellType_1.CellType.PrunedBranch ? 1 : levelMask.hashCount;\n    let totalHashCount = levelMask.hashCount;\n    let hashIOffset = totalHashCount - hashCount;\n    for(let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++){\n        if (!levelMask.isSignificant(levelI)) {\n            continue;\n        }\n        if (hashI < hashIOffset) {\n            hashI++;\n            continue;\n        }\n        //\n        // Bits\n        //\n        let currentBits;\n        if (hashI === hashIOffset) {\n            if (!(levelI === 0 || type === CellType_1.CellType.PrunedBranch)) {\n                throw Error(\"Invalid\");\n            }\n            currentBits = bits;\n        } else {\n            if (!(levelI !== 0 && type !== CellType_1.CellType.PrunedBranch)) {\n                throw Error(\"Invalid: \" + levelI + \", \" + type);\n            }\n            currentBits = new BitString_1.BitString(hashes[hashI - hashIOffset - 1], 0, 256);\n        }\n        //\n        // Depth\n        //\n        let currentDepth = 0;\n        for (let c of refs){\n            let childDepth;\n            if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n                childDepth = c.depth(levelI + 1);\n            } else {\n                childDepth = c.depth(levelI);\n            }\n            currentDepth = Math.max(currentDepth, childDepth);\n        }\n        if (refs.length > 0) {\n            currentDepth++;\n        }\n        //\n        // Hash\n        //\n        let repr = (0, descriptor_1.getRepr)(bits, currentBits, refs, levelI, levelMask.apply(levelI).value, type);\n        let hash = (0, crypto_1.sha256_sync)(repr);\n        //\n        // Persist next\n        //\n        let destI = hashI - hashIOffset;\n        depths[destI] = currentDepth;\n        hashes[destI] = hash;\n        //\n        // Next\n        //\n        hashI++;\n    }\n    //\n    // Calculate hash and depth for all levels\n    //\n    let resolvedHashes = [];\n    let resolvedDepths = [];\n    if (pruned) {\n        for(let i = 0; i < 4; i++){\n            const { hashIndex } = levelMask.apply(i);\n            const { hashIndex: thisHashIndex } = levelMask;\n            if (hashIndex !== thisHashIndex) {\n                resolvedHashes.push(pruned.pruned[hashIndex].hash);\n                resolvedDepths.push(pruned.pruned[hashIndex].depth);\n            } else {\n                resolvedHashes.push(hashes[0]);\n                resolvedDepths.push(depths[0]);\n            }\n        }\n    } else {\n        for(let i = 0; i < 4; i++){\n            resolvedHashes.push(hashes[levelMask.apply(i).hashIndex]);\n            resolvedDepths.push(depths[levelMask.apply(i).hashIndex]);\n        }\n    }\n    //\n    // Result\n    //\n    return {\n        mask: levelMask,\n        hashes: resolvedHashes,\n        depths: resolvedDepths\n    };\n}\nexports.wonderCalculator = wonderCalculator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/utils/paddedBits.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.paddedBufferToBits = exports.bitsToPaddedBuffer = void 0;\nconst BitBuilder_1 = __webpack_require__(/*! ../BitBuilder */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js\");\nconst BitString_1 = __webpack_require__(/*! ../BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nfunction bitsToPaddedBuffer(bits) {\n    // Create builder\n    let builder = new BitBuilder_1.BitBuilder(Math.ceil(bits.length / 8) * 8);\n    builder.writeBits(bits);\n    // Apply padding\n    let padding = Math.ceil(bits.length / 8) * 8 - bits.length;\n    for(let i = 0; i < padding; i++){\n        if (i === 0) {\n            builder.writeBit(1);\n        } else {\n            builder.writeBit(0);\n        }\n    }\n    return builder.buffer();\n}\nexports.bitsToPaddedBuffer = bitsToPaddedBuffer;\nfunction paddedBufferToBits(buff) {\n    let bitLen = 0;\n    // Finding rightmost non-zero byte in the buffer\n    for(let i = buff.length - 1; i >= 0; i--){\n        if (buff[i] !== 0) {\n            const testByte = buff[i];\n            // Looking for a rightmost set padding bit\n            let bitPos = testByte & -testByte;\n            if ((bitPos & 1) == 0) {\n                // It's power of 2 (only one bit set)\n                bitPos = Math.log2(bitPos) + 1;\n            }\n            if (i > 0) {\n                // If we are dealing with more than 1 byte buffer\n                bitLen = i << 3; //Number of full bytes * 8\n            }\n            bitLen += 8 - bitPos;\n            break;\n        }\n    }\n    return new BitString_1.BitString(buff, 0, bitLen);\n}\nexports.paddedBufferToBits = paddedBufferToBits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL3V0aWxzL3BhZGRlZEJpdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQy9ELE1BQU1JLGVBQWVDLG1CQUFPQSxDQUFDLDRFQUFlO0FBQzVDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDBFQUFjO0FBQzFDLFNBQVNGLG1CQUFtQkksSUFBSTtJQUM1QixpQkFBaUI7SUFDakIsSUFBSUMsVUFBVSxJQUFJSixhQUFhSyxVQUFVLENBQUNDLEtBQUtDLElBQUksQ0FBQ0osS0FBS0ssTUFBTSxHQUFHLEtBQUs7SUFDdkVKLFFBQVFLLFNBQVMsQ0FBQ047SUFDbEIsZ0JBQWdCO0lBQ2hCLElBQUlPLFVBQVVKLEtBQUtDLElBQUksQ0FBQ0osS0FBS0ssTUFBTSxHQUFHLEtBQUssSUFBSUwsS0FBS0ssTUFBTTtJQUMxRCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUQsU0FBU0MsSUFBSztRQUM5QixJQUFJQSxNQUFNLEdBQUc7WUFDVFAsUUFBUVEsUUFBUSxDQUFDO1FBQ3JCLE9BQ0s7WUFDRFIsUUFBUVEsUUFBUSxDQUFDO1FBQ3JCO0lBQ0o7SUFDQSxPQUFPUixRQUFRUyxNQUFNO0FBQ3pCO0FBQ0FqQiwwQkFBMEIsR0FBR0c7QUFDN0IsU0FBU0QsbUJBQW1CZ0IsSUFBSTtJQUM1QixJQUFJQyxTQUFTO0lBQ2IsZ0RBQWdEO0lBQ2hELElBQUssSUFBSUosSUFBSUcsS0FBS04sTUFBTSxHQUFHLEdBQUdHLEtBQUssR0FBR0EsSUFBSztRQUN2QyxJQUFJRyxJQUFJLENBQUNILEVBQUUsS0FBSyxHQUFHO1lBQ2YsTUFBTUssV0FBV0YsSUFBSSxDQUFDSCxFQUFFO1lBQ3hCLDBDQUEwQztZQUMxQyxJQUFJTSxTQUFTRCxXQUFXLENBQUNBO1lBQ3pCLElBQUksQ0FBQ0MsU0FBUyxNQUFNLEdBQUc7Z0JBQ25CLHFDQUFxQztnQkFDckNBLFNBQVNYLEtBQUtZLElBQUksQ0FBQ0QsVUFBVTtZQUNqQztZQUNBLElBQUlOLElBQUksR0FBRztnQkFDUCxpREFBaUQ7Z0JBQ2pESSxTQUFTSixLQUFLLEdBQUcsMEJBQTBCO1lBQy9DO1lBQ0FJLFVBQVUsSUFBSUU7WUFDZDtRQUNKO0lBQ0o7SUFDQSxPQUFPLElBQUlmLFlBQVlpQixTQUFTLENBQUNMLE1BQU0sR0FBR0M7QUFDOUM7QUFDQW5CLDBCQUEwQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL3V0aWxzL3BhZGRlZEJpdHMuanM/ZjAwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFkZGVkQnVmZmVyVG9CaXRzID0gZXhwb3J0cy5iaXRzVG9QYWRkZWRCdWZmZXIgPSB2b2lkIDA7XG5jb25zdCBCaXRCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi4vQml0QnVpbGRlclwiKTtcbmNvbnN0IEJpdFN0cmluZ18xID0gcmVxdWlyZShcIi4uL0JpdFN0cmluZ1wiKTtcbmZ1bmN0aW9uIGJpdHNUb1BhZGRlZEJ1ZmZlcihiaXRzKSB7XG4gICAgLy8gQ3JlYXRlIGJ1aWxkZXJcbiAgICBsZXQgYnVpbGRlciA9IG5ldyBCaXRCdWlsZGVyXzEuQml0QnVpbGRlcihNYXRoLmNlaWwoYml0cy5sZW5ndGggLyA4KSAqIDgpO1xuICAgIGJ1aWxkZXIud3JpdGVCaXRzKGJpdHMpO1xuICAgIC8vIEFwcGx5IHBhZGRpbmdcbiAgICBsZXQgcGFkZGluZyA9IE1hdGguY2VpbChiaXRzLmxlbmd0aCAvIDgpICogOCAtIGJpdHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkZGluZzsgaSsrKSB7XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBidWlsZGVyLndyaXRlQml0KDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlci53cml0ZUJpdCgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVpbGRlci5idWZmZXIoKTtcbn1cbmV4cG9ydHMuYml0c1RvUGFkZGVkQnVmZmVyID0gYml0c1RvUGFkZGVkQnVmZmVyO1xuZnVuY3Rpb24gcGFkZGVkQnVmZmVyVG9CaXRzKGJ1ZmYpIHtcbiAgICBsZXQgYml0TGVuID0gMDtcbiAgICAvLyBGaW5kaW5nIHJpZ2h0bW9zdCBub24temVybyBieXRlIGluIHRoZSBidWZmZXJcbiAgICBmb3IgKGxldCBpID0gYnVmZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoYnVmZltpXSAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgdGVzdEJ5dGUgPSBidWZmW2ldO1xuICAgICAgICAgICAgLy8gTG9va2luZyBmb3IgYSByaWdodG1vc3Qgc2V0IHBhZGRpbmcgYml0XG4gICAgICAgICAgICBsZXQgYml0UG9zID0gdGVzdEJ5dGUgJiAtdGVzdEJ5dGU7XG4gICAgICAgICAgICBpZiAoKGJpdFBvcyAmIDEpID09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIHBvd2VyIG9mIDIgKG9ubHkgb25lIGJpdCBzZXQpXG4gICAgICAgICAgICAgICAgYml0UG9zID0gTWF0aC5sb2cyKGJpdFBvcykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGRlYWxpbmcgd2l0aCBtb3JlIHRoYW4gMSBieXRlIGJ1ZmZlclxuICAgICAgICAgICAgICAgIGJpdExlbiA9IGkgPDwgMzsgLy9OdW1iZXIgb2YgZnVsbCBieXRlcyAqIDhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpdExlbiArPSA4IC0gYml0UG9zO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCaXRTdHJpbmdfMS5CaXRTdHJpbmcoYnVmZiwgMCwgYml0TGVuKTtcbn1cbmV4cG9ydHMucGFkZGVkQnVmZmVyVG9CaXRzID0gcGFkZGVkQnVmZmVyVG9CaXRzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFkZGVkQnVmZmVyVG9CaXRzIiwiYml0c1RvUGFkZGVkQnVmZmVyIiwiQml0QnVpbGRlcl8xIiwicmVxdWlyZSIsIkJpdFN0cmluZ18xIiwiYml0cyIsImJ1aWxkZXIiLCJCaXRCdWlsZGVyIiwiTWF0aCIsImNlaWwiLCJsZW5ndGgiLCJ3cml0ZUJpdHMiLCJwYWRkaW5nIiwiaSIsIndyaXRlQml0IiwiYnVmZmVyIiwiYnVmZiIsImJpdExlbiIsInRlc3RCeXRlIiwiYml0UG9zIiwibG9nMiIsIkJpdFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/boc/utils/strings.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/utils/strings.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.writeString = exports.stringToCell = exports.readString = void 0;\nconst Builder_1 = __webpack_require__(/*! ../Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nfunction readBuffer(slice) {\n    // Check consistency\n    if (slice.remainingBits % 8 !== 0) {\n        throw new Error(`Invalid string length: ${slice.remainingBits}`);\n    }\n    if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) {\n        throw new Error(`invalid number of refs: ${slice.remainingRefs}`);\n    }\n    // Read string\n    let res;\n    if (slice.remainingBits === 0) {\n        res = Buffer.alloc(0);\n    } else {\n        res = slice.loadBuffer(slice.remainingBits / 8);\n    }\n    // Read tail\n    if (slice.remainingRefs === 1) {\n        res = Buffer.concat([\n            res,\n            readBuffer(slice.loadRef().beginParse())\n        ]);\n    }\n    return res;\n}\nfunction readString(slice) {\n    return readBuffer(slice).toString();\n}\nexports.readString = readString;\nfunction writeBuffer(src, builder) {\n    if (src.length > 0) {\n        let bytes = Math.floor(builder.availableBits / 8);\n        if (src.length > bytes) {\n            let a = src.subarray(0, bytes);\n            let t = src.subarray(bytes);\n            builder = builder.storeBuffer(a);\n            let bb = (0, Builder_1.beginCell)();\n            writeBuffer(t, bb);\n            builder = builder.storeRef(bb.endCell());\n        } else {\n            builder = builder.storeBuffer(src);\n        }\n    }\n}\nfunction stringToCell(src) {\n    let builder = (0, Builder_1.beginCell)();\n    writeBuffer(Buffer.from(src), builder);\n    return builder.endCell();\n}\nexports.stringToCell = stringToCell;\nfunction writeString(src, builder) {\n    writeBuffer(Buffer.from(src), builder);\n}\nexports.writeString = writeString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL3V0aWxzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSxvQkFBb0IsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUN2RSxNQUFNSyxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBWTtBQUN0QyxTQUFTQyxXQUFXQyxLQUFLO0lBQ3JCLG9CQUFvQjtJQUNwQixJQUFJQSxNQUFNQyxhQUFhLEdBQUcsTUFBTSxHQUFHO1FBQy9CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFRixNQUFNQyxhQUFhLENBQUMsQ0FBQztJQUNuRTtJQUNBLElBQUlELE1BQU1HLGFBQWEsS0FBSyxLQUFLSCxNQUFNRyxhQUFhLEtBQUssR0FBRztRQUN4RCxNQUFNLElBQUlELE1BQU0sQ0FBQyx3QkFBd0IsRUFBRUYsTUFBTUcsYUFBYSxDQUFDLENBQUM7SUFDcEU7SUFDQSxjQUFjO0lBQ2QsSUFBSUM7SUFDSixJQUFJSixNQUFNQyxhQUFhLEtBQUssR0FBRztRQUMzQkcsTUFBTUMsT0FBT0MsS0FBSyxDQUFDO0lBQ3ZCLE9BQ0s7UUFDREYsTUFBTUosTUFBTU8sVUFBVSxDQUFDUCxNQUFNQyxhQUFhLEdBQUc7SUFDakQ7SUFDQSxZQUFZO0lBQ1osSUFBSUQsTUFBTUcsYUFBYSxLQUFLLEdBQUc7UUFDM0JDLE1BQU1DLE9BQU9HLE1BQU0sQ0FBQztZQUFDSjtZQUFLTCxXQUFXQyxNQUFNUyxPQUFPLEdBQUdDLFVBQVU7U0FBSTtJQUN2RTtJQUNBLE9BQU9OO0FBQ1g7QUFDQSxTQUFTUixXQUFXSSxLQUFLO0lBQ3JCLE9BQU9ELFdBQVdDLE9BQU9XLFFBQVE7QUFDckM7QUFDQW5CLGtCQUFrQixHQUFHSTtBQUNyQixTQUFTZ0IsWUFBWUMsR0FBRyxFQUFFQyxPQUFPO0lBQzdCLElBQUlELElBQUlFLE1BQU0sR0FBRyxHQUFHO1FBQ2hCLElBQUlDLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ0osUUFBUUssYUFBYSxHQUFHO1FBQy9DLElBQUlOLElBQUlFLE1BQU0sR0FBR0MsT0FBTztZQUNwQixJQUFJSSxJQUFJUCxJQUFJUSxRQUFRLENBQUMsR0FBR0w7WUFDeEIsSUFBSU0sSUFBSVQsSUFBSVEsUUFBUSxDQUFDTDtZQUNyQkYsVUFBVUEsUUFBUVMsV0FBVyxDQUFDSDtZQUM5QixJQUFJSSxLQUFLLENBQUMsR0FBRzNCLFVBQVU0QixTQUFTO1lBQ2hDYixZQUFZVSxHQUFHRTtZQUNmVixVQUFVQSxRQUFRWSxRQUFRLENBQUNGLEdBQUdHLE9BQU87UUFDekMsT0FDSztZQUNEYixVQUFVQSxRQUFRUyxXQUFXLENBQUNWO1FBQ2xDO0lBQ0o7QUFDSjtBQUNBLFNBQVNsQixhQUFha0IsR0FBRztJQUNyQixJQUFJQyxVQUFVLENBQUMsR0FBR2pCLFVBQVU0QixTQUFTO0lBQ3JDYixZQUFZUCxPQUFPdUIsSUFBSSxDQUFDZixNQUFNQztJQUM5QixPQUFPQSxRQUFRYSxPQUFPO0FBQzFCO0FBQ0FuQyxvQkFBb0IsR0FBR0c7QUFDdkIsU0FBU0QsWUFBWW1CLEdBQUcsRUFBRUMsT0FBTztJQUM3QkYsWUFBWVAsT0FBT3VCLElBQUksQ0FBQ2YsTUFBTUM7QUFDbEM7QUFDQXRCLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvYm9jL3V0aWxzL3N0cmluZ3MuanM/ZDk5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud3JpdGVTdHJpbmcgPSBleHBvcnRzLnN0cmluZ1RvQ2VsbCA9IGV4cG9ydHMucmVhZFN0cmluZyA9IHZvaWQgMDtcbmNvbnN0IEJ1aWxkZXJfMSA9IHJlcXVpcmUoXCIuLi9CdWlsZGVyXCIpO1xuZnVuY3Rpb24gcmVhZEJ1ZmZlcihzbGljZSkge1xuICAgIC8vIENoZWNrIGNvbnNpc3RlbmN5XG4gICAgaWYgKHNsaWNlLnJlbWFpbmluZ0JpdHMgJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzdHJpbmcgbGVuZ3RoOiAke3NsaWNlLnJlbWFpbmluZ0JpdHN9YCk7XG4gICAgfVxuICAgIGlmIChzbGljZS5yZW1haW5pbmdSZWZzICE9PSAwICYmIHNsaWNlLnJlbWFpbmluZ1JlZnMgIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG51bWJlciBvZiByZWZzOiAke3NsaWNlLnJlbWFpbmluZ1JlZnN9YCk7XG4gICAgfVxuICAgIC8vIFJlYWQgc3RyaW5nXG4gICAgbGV0IHJlcztcbiAgICBpZiAoc2xpY2UucmVtYWluaW5nQml0cyA9PT0gMCkge1xuICAgICAgICByZXMgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXMgPSBzbGljZS5sb2FkQnVmZmVyKHNsaWNlLnJlbWFpbmluZ0JpdHMgLyA4KTtcbiAgICB9XG4gICAgLy8gUmVhZCB0YWlsXG4gICAgaWYgKHNsaWNlLnJlbWFpbmluZ1JlZnMgPT09IDEpIHtcbiAgICAgICAgcmVzID0gQnVmZmVyLmNvbmNhdChbcmVzLCByZWFkQnVmZmVyKHNsaWNlLmxvYWRSZWYoKS5iZWdpblBhcnNlKCkpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiByZWFkU3RyaW5nKHNsaWNlKSB7XG4gICAgcmV0dXJuIHJlYWRCdWZmZXIoc2xpY2UpLnRvU3RyaW5nKCk7XG59XG5leHBvcnRzLnJlYWRTdHJpbmcgPSByZWFkU3RyaW5nO1xuZnVuY3Rpb24gd3JpdGVCdWZmZXIoc3JjLCBidWlsZGVyKSB7XG4gICAgaWYgKHNyYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBieXRlcyA9IE1hdGguZmxvb3IoYnVpbGRlci5hdmFpbGFibGVCaXRzIC8gOCk7XG4gICAgICAgIGlmIChzcmMubGVuZ3RoID4gYnl0ZXMpIHtcbiAgICAgICAgICAgIGxldCBhID0gc3JjLnN1YmFycmF5KDAsIGJ5dGVzKTtcbiAgICAgICAgICAgIGxldCB0ID0gc3JjLnN1YmFycmF5KGJ5dGVzKTtcbiAgICAgICAgICAgIGJ1aWxkZXIgPSBidWlsZGVyLnN0b3JlQnVmZmVyKGEpO1xuICAgICAgICAgICAgbGV0IGJiID0gKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKCk7XG4gICAgICAgICAgICB3cml0ZUJ1ZmZlcih0LCBiYik7XG4gICAgICAgICAgICBidWlsZGVyID0gYnVpbGRlci5zdG9yZVJlZihiYi5lbmRDZWxsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlciA9IGJ1aWxkZXIuc3RvcmVCdWZmZXIoc3JjKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ1RvQ2VsbChzcmMpIHtcbiAgICBsZXQgYnVpbGRlciA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpO1xuICAgIHdyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKHNyYyksIGJ1aWxkZXIpO1xuICAgIHJldHVybiBidWlsZGVyLmVuZENlbGwoKTtcbn1cbmV4cG9ydHMuc3RyaW5nVG9DZWxsID0gc3RyaW5nVG9DZWxsO1xuZnVuY3Rpb24gd3JpdGVTdHJpbmcoc3JjLCBidWlsZGVyKSB7XG4gICAgd3JpdGVCdWZmZXIoQnVmZmVyLmZyb20oc3JjKSwgYnVpbGRlcik7XG59XG5leHBvcnRzLndyaXRlU3RyaW5nID0gd3JpdGVTdHJpbmc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3cml0ZVN0cmluZyIsInN0cmluZ1RvQ2VsbCIsInJlYWRTdHJpbmciLCJCdWlsZGVyXzEiLCJyZXF1aXJlIiwicmVhZEJ1ZmZlciIsInNsaWNlIiwicmVtYWluaW5nQml0cyIsIkVycm9yIiwicmVtYWluaW5nUmVmcyIsInJlcyIsIkJ1ZmZlciIsImFsbG9jIiwibG9hZEJ1ZmZlciIsImNvbmNhdCIsImxvYWRSZWYiLCJiZWdpblBhcnNlIiwidG9TdHJpbmciLCJ3cml0ZUJ1ZmZlciIsInNyYyIsImJ1aWxkZXIiLCJsZW5ndGgiLCJieXRlcyIsIk1hdGgiLCJmbG9vciIsImF2YWlsYWJsZUJpdHMiLCJhIiwic3ViYXJyYXkiLCJ0Iiwic3RvcmVCdWZmZXIiLCJiYiIsImJlZ2luQ2VsbCIsInN0b3JlUmVmIiwiZW5kQ2VsbCIsImZyb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/boc/utils/strings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/contract/ComputeError.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/contract/ComputeError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ComputeError = void 0;\nclass ComputeError extends Error {\n    constructor(message, exitCode, opts){\n        super(message);\n        this.exitCode = exitCode;\n        this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;\n        this.logs = opts && opts.logs ? opts.logs : null;\n        Object.setPrototypeOf(this, ComputeError.prototype);\n    }\n}\nexports.ComputeError = ComputeError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvY29udHJhY3QvQ29tcHV0ZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1FLHFCQUFxQkM7SUFDdkJDLFlBQVlDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLENBQUU7UUFDakMsS0FBSyxDQUFDRjtRQUNOLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLFNBQVMsR0FBR0QsUUFBUUEsS0FBS0MsU0FBUyxHQUFHRCxLQUFLQyxTQUFTLEdBQUc7UUFDM0QsSUFBSSxDQUFDQyxJQUFJLEdBQUdGLFFBQVFBLEtBQUtFLElBQUksR0FBR0YsS0FBS0UsSUFBSSxHQUFHO1FBQzVDWCxPQUFPWSxjQUFjLENBQUMsSUFBSSxFQUFFUixhQUFhUyxTQUFTO0lBQ3REO0FBQ0o7QUFDQVgsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9jb250cmFjdC9Db21wdXRlRXJyb3IuanM/NmZlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tcHV0ZUVycm9yID0gdm9pZCAwO1xuY2xhc3MgQ29tcHV0ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGV4aXRDb2RlLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmV4aXRDb2RlID0gZXhpdENvZGU7XG4gICAgICAgIHRoaXMuZGVidWdMb2dzID0gb3B0cyAmJiBvcHRzLmRlYnVnTG9ncyA/IG9wdHMuZGVidWdMb2dzIDogbnVsbDtcbiAgICAgICAgdGhpcy5sb2dzID0gb3B0cyAmJiBvcHRzLmxvZ3MgPyBvcHRzLmxvZ3MgOiBudWxsO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29tcHV0ZUVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wdXRlRXJyb3IgPSBDb21wdXRlRXJyb3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb21wdXRlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImV4aXRDb2RlIiwib3B0cyIsImRlYnVnTG9ncyIsImxvZ3MiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/contract/ComputeError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/contract/openContract.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/contract/openContract.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.openContract = void 0;\nconst Address_1 = __webpack_require__(/*! ../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst Cell_1 = __webpack_require__(/*! ../boc/Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nfunction openContract(src, factory) {\n    // Resolve parameters\n    let address;\n    let init = null;\n    if (!Address_1.Address.isAddress(src.address)) {\n        throw Error(\"Invalid address\");\n    }\n    address = src.address;\n    if (src.init) {\n        if (!(src.init.code instanceof Cell_1.Cell)) {\n            throw Error(\"Invalid init.code\");\n        }\n        if (!(src.init.data instanceof Cell_1.Cell)) {\n            throw Error(\"Invalid init.data\");\n        }\n        init = src.init;\n    }\n    // Create executor\n    let executor = factory({\n        address,\n        init\n    });\n    // Create proxy\n    return new Proxy(src, {\n        get (target, prop) {\n            const value = target[prop];\n            if (typeof prop === \"string\" && (prop.startsWith(\"get\") || prop.startsWith(\"send\"))) {\n                if (typeof value === \"function\") {\n                    return (...args)=>value.apply(target, [\n                            executor,\n                            ...args\n                        ]);\n                }\n            }\n            return value;\n        }\n    });\n}\nexports.openContract = openContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvY29udHJhY3Qvb3BlbkNvbnRyYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1HLFlBQVlDLG1CQUFPQSxDQUFDLGtGQUFvQjtBQUM5QyxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxvRUFBYTtBQUNwQyxTQUFTRixhQUFhSSxHQUFHLEVBQUVDLE9BQU87SUFDOUIscUJBQXFCO0lBQ3JCLElBQUlDO0lBQ0osSUFBSUMsT0FBTztJQUNYLElBQUksQ0FBQ04sVUFBVU8sT0FBTyxDQUFDQyxTQUFTLENBQUNMLElBQUlFLE9BQU8sR0FBRztRQUMzQyxNQUFNSSxNQUFNO0lBQ2hCO0lBQ0FKLFVBQVVGLElBQUlFLE9BQU87SUFDckIsSUFBSUYsSUFBSUcsSUFBSSxFQUFFO1FBQ1YsSUFBSSxDQUFFSCxDQUFBQSxJQUFJRyxJQUFJLENBQUNJLElBQUksWUFBWVIsT0FBT1MsSUFBSSxHQUFHO1lBQ3pDLE1BQU1GLE1BQU07UUFDaEI7UUFDQSxJQUFJLENBQUVOLENBQUFBLElBQUlHLElBQUksQ0FBQ00sSUFBSSxZQUFZVixPQUFPUyxJQUFJLEdBQUc7WUFDekMsTUFBTUYsTUFBTTtRQUNoQjtRQUNBSCxPQUFPSCxJQUFJRyxJQUFJO0lBQ25CO0lBQ0Esa0JBQWtCO0lBQ2xCLElBQUlPLFdBQVdULFFBQVE7UUFBRUM7UUFBU0M7SUFBSztJQUN2QyxlQUFlO0lBQ2YsT0FBTyxJQUFJUSxNQUFNWCxLQUFLO1FBQ2xCWSxLQUFJQyxNQUFNLEVBQUVDLElBQUk7WUFDWixNQUFNbkIsUUFBUWtCLE1BQU0sQ0FBQ0MsS0FBSztZQUMxQixJQUFJLE9BQU9BLFNBQVMsWUFBYUEsQ0FBQUEsS0FBS0MsVUFBVSxDQUFDLFVBQVVELEtBQUtDLFVBQVUsQ0FBQyxPQUFNLEdBQUk7Z0JBQ2pGLElBQUksT0FBT3BCLFVBQVUsWUFBWTtvQkFDN0IsT0FBTyxDQUFDLEdBQUdxQixPQUFTckIsTUFBTXNCLEtBQUssQ0FBQ0osUUFBUTs0QkFBQ0g7K0JBQWFNO3lCQUFLO2dCQUMvRDtZQUNKO1lBQ0EsT0FBT3JCO1FBQ1g7SUFDSjtBQUNKO0FBQ0FELG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvY29udHJhY3Qvb3BlbkNvbnRyYWN0LmpzP2U1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9wZW5Db250cmFjdCA9IHZvaWQgMDtcbmNvbnN0IEFkZHJlc3NfMSA9IHJlcXVpcmUoXCIuLi9hZGRyZXNzL0FkZHJlc3NcIik7XG5jb25zdCBDZWxsXzEgPSByZXF1aXJlKFwiLi4vYm9jL0NlbGxcIik7XG5mdW5jdGlvbiBvcGVuQ29udHJhY3Qoc3JjLCBmYWN0b3J5KSB7XG4gICAgLy8gUmVzb2x2ZSBwYXJhbWV0ZXJzXG4gICAgbGV0IGFkZHJlc3M7XG4gICAgbGV0IGluaXQgPSBudWxsO1xuICAgIGlmICghQWRkcmVzc18xLkFkZHJlc3MuaXNBZGRyZXNzKHNyYy5hZGRyZXNzKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhZGRyZXNzJyk7XG4gICAgfVxuICAgIGFkZHJlc3MgPSBzcmMuYWRkcmVzcztcbiAgICBpZiAoc3JjLmluaXQpIHtcbiAgICAgICAgaWYgKCEoc3JjLmluaXQuY29kZSBpbnN0YW5jZW9mIENlbGxfMS5DZWxsKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgaW5pdC5jb2RlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoc3JjLmluaXQuZGF0YSBpbnN0YW5jZW9mIENlbGxfMS5DZWxsKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgaW5pdC5kYXRhJyk7XG4gICAgICAgIH1cbiAgICAgICAgaW5pdCA9IHNyYy5pbml0O1xuICAgIH1cbiAgICAvLyBDcmVhdGUgZXhlY3V0b3JcbiAgICBsZXQgZXhlY3V0b3IgPSBmYWN0b3J5KHsgYWRkcmVzcywgaW5pdCB9KTtcbiAgICAvLyBDcmVhdGUgcHJveHlcbiAgICByZXR1cm4gbmV3IFByb3h5KHNyYywge1xuICAgICAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgKHByb3Auc3RhcnRzV2l0aCgnZ2V0JykgfHwgcHJvcC5zdGFydHNXaXRoKCdzZW5kJykpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHZhbHVlLmFwcGx5KHRhcmdldCwgW2V4ZWN1dG9yLCAuLi5hcmdzXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLm9wZW5Db250cmFjdCA9IG9wZW5Db250cmFjdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm9wZW5Db250cmFjdCIsIkFkZHJlc3NfMSIsInJlcXVpcmUiLCJDZWxsXzEiLCJzcmMiLCJmYWN0b3J5IiwiYWRkcmVzcyIsImluaXQiLCJBZGRyZXNzIiwiaXNBZGRyZXNzIiwiRXJyb3IiLCJjb2RlIiwiQ2VsbCIsImRhdGEiLCJleGVjdXRvciIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicHJvcCIsInN0YXJ0c1dpdGgiLCJhcmdzIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/contract/openContract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/crypto/safeSign.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/crypto/safeSign.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.safeSignVerify = exports.safeSign = void 0;\nconst crypto_1 = __webpack_require__(/*! @ton/crypto */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nconst MIN_SEED_LENGTH = 8;\nconst MAX_SEED_LENGTH = 64;\nfunction createSafeSignHash(cell, seed) {\n    let seedData = Buffer.from(seed);\n    if (seedData.length > MAX_SEED_LENGTH) {\n        throw Error(\"Seed can\t be longer than 64 bytes\");\n    }\n    if (seedData.length < MIN_SEED_LENGTH) {\n        throw Error(\"Seed must be at least 8 bytes\");\n    }\n    return (0, crypto_1.sha256_sync)(Buffer.concat([\n        Buffer.from([\n            0xff,\n            0xff\n        ]),\n        seedData,\n        cell.hash()\n    ]));\n}\nfunction safeSign(cell, secretKey, seed = \"ton-safe-sign-magic\") {\n    return (0, crypto_1.sign)(createSafeSignHash(cell, seed), secretKey);\n}\nexports.safeSign = safeSign;\nfunction safeSignVerify(cell, signature, publicKey, seed = \"ton-safe-sign-magic\") {\n    return (0, crypto_1.signVerify)(createSafeSignHash(cell, seed), signature, publicKey);\n}\nexports.safeSignVerify = safeSignVerify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvY3J5cHRvL3NhZmVTaWduLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUNqRCxNQUFNSSxXQUFXQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUN0QyxNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsa0JBQWtCO0FBQ3hCLFNBQVNDLG1CQUFtQkMsSUFBSSxFQUFFQyxJQUFJO0lBQ2xDLElBQUlDLFdBQVdDLE9BQU9DLElBQUksQ0FBQ0g7SUFDM0IsSUFBSUMsU0FBU0csTUFBTSxHQUFHUCxpQkFBaUI7UUFDbkMsTUFBTVEsTUFBTTtJQUNoQjtJQUNBLElBQUlKLFNBQVNHLE1BQU0sR0FBR1IsaUJBQWlCO1FBQ25DLE1BQU1TLE1BQU07SUFDaEI7SUFDQSxPQUFPLENBQUMsR0FBR1gsU0FBU1ksV0FBVyxFQUFFSixPQUFPSyxNQUFNLENBQUM7UUFBQ0wsT0FBT0MsSUFBSSxDQUFDO1lBQUM7WUFBTTtTQUFLO1FBQUdGO1FBQVVGLEtBQUtTLElBQUk7S0FBRztBQUNyRztBQUNBLFNBQVNmLFNBQVNNLElBQUksRUFBRVUsU0FBUyxFQUFFVCxPQUFPLHFCQUFxQjtJQUMzRCxPQUFPLENBQUMsR0FBR04sU0FBU2dCLElBQUksRUFBRVosbUJBQW1CQyxNQUFNQyxPQUFPUztBQUM5RDtBQUNBbkIsZ0JBQWdCLEdBQUdHO0FBQ25CLFNBQVNELGVBQWVPLElBQUksRUFBRVksU0FBUyxFQUFFQyxTQUFTLEVBQUVaLE9BQU8scUJBQXFCO0lBQzVFLE9BQU8sQ0FBQyxHQUFHTixTQUFTbUIsVUFBVSxFQUFFZixtQkFBbUJDLE1BQU1DLE9BQU9XLFdBQVdDO0FBQy9FO0FBQ0F0QixzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2NyeXB0by9zYWZlU2lnbi5qcz84ZjQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zYWZlU2lnblZlcmlmeSA9IGV4cG9ydHMuc2FmZVNpZ24gPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJAdG9uL2NyeXB0b1wiKTtcbmNvbnN0IE1JTl9TRUVEX0xFTkdUSCA9IDg7XG5jb25zdCBNQVhfU0VFRF9MRU5HVEggPSA2NDtcbmZ1bmN0aW9uIGNyZWF0ZVNhZmVTaWduSGFzaChjZWxsLCBzZWVkKSB7XG4gICAgbGV0IHNlZWREYXRhID0gQnVmZmVyLmZyb20oc2VlZCk7XG4gICAgaWYgKHNlZWREYXRhLmxlbmd0aCA+IE1BWF9TRUVEX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBFcnJvcignU2VlZCBjYW5cXHQgYmUgbG9uZ2VyIHRoYW4gNjQgYnl0ZXMnKTtcbiAgICB9XG4gICAgaWYgKHNlZWREYXRhLmxlbmd0aCA8IE1JTl9TRUVEX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBFcnJvcignU2VlZCBtdXN0IGJlIGF0IGxlYXN0IDggYnl0ZXMnKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fMS5zaGEyNTZfc3luYykoQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzB4ZmYsIDB4ZmZdKSwgc2VlZERhdGEsIGNlbGwuaGFzaCgpXSkpO1xufVxuZnVuY3Rpb24gc2FmZVNpZ24oY2VsbCwgc2VjcmV0S2V5LCBzZWVkID0gJ3Rvbi1zYWZlLXNpZ24tbWFnaWMnKSB7XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fMS5zaWduKShjcmVhdGVTYWZlU2lnbkhhc2goY2VsbCwgc2VlZCksIHNlY3JldEtleSk7XG59XG5leHBvcnRzLnNhZmVTaWduID0gc2FmZVNpZ247XG5mdW5jdGlvbiBzYWZlU2lnblZlcmlmeShjZWxsLCBzaWduYXR1cmUsIHB1YmxpY0tleSwgc2VlZCA9ICd0b24tc2FmZS1zaWduLW1hZ2ljJykge1xuICAgIHJldHVybiAoMCwgY3J5cHRvXzEuc2lnblZlcmlmeSkoY3JlYXRlU2FmZVNpZ25IYXNoKGNlbGwsIHNlZWQpLCBzaWduYXR1cmUsIHB1YmxpY0tleSk7XG59XG5leHBvcnRzLnNhZmVTaWduVmVyaWZ5ID0gc2FmZVNpZ25WZXJpZnk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzYWZlU2lnblZlcmlmeSIsInNhZmVTaWduIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiTUlOX1NFRURfTEVOR1RIIiwiTUFYX1NFRURfTEVOR1RIIiwiY3JlYXRlU2FmZVNpZ25IYXNoIiwiY2VsbCIsInNlZWQiLCJzZWVkRGF0YSIsIkJ1ZmZlciIsImZyb20iLCJsZW5ndGgiLCJFcnJvciIsInNoYTI1Nl9zeW5jIiwiY29uY2F0IiwiaGFzaCIsInNlY3JldEtleSIsInNpZ24iLCJzaWduYXR1cmUiLCJwdWJsaWNLZXkiLCJzaWduVmVyaWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/crypto/safeSign.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/Dictionary.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Dictionary = void 0;\nconst Address_1 = __webpack_require__(/*! ../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst Cell_1 = __webpack_require__(/*! ../boc/Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nconst BitString_1 = __webpack_require__(/*! ../boc/BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nconst generateMerkleProof_1 = __webpack_require__(/*! ./generateMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleProof.js\");\nconst generateMerkleUpdate_1 = __webpack_require__(/*! ./generateMerkleUpdate */ \"(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js\");\nconst parseDict_1 = __webpack_require__(/*! ./parseDict */ \"(ssr)/./node_modules/@ton/core/dist/dict/parseDict.js\");\nconst serializeDict_1 = __webpack_require__(/*! ./serializeDict */ \"(ssr)/./node_modules/@ton/core/dist/dict/serializeDict.js\");\nconst internalKeySerializer_1 = __webpack_require__(/*! ./utils/internalKeySerializer */ \"(ssr)/./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js\");\nclass Dictionary {\n    /**\n     * Create an empty map\n     * @param key key type\n     * @param value value type\n     * @returns Dictionary<K, V>\n     */ static empty(key, value) {\n        if (key && value) {\n            return new Dictionary(new Map(), key, value);\n        } else {\n            return new Dictionary(new Map(), null, null);\n        }\n    }\n    /**\n     * Load dictionary from slice\n     * @param key key description\n     * @param value value description\n     * @param src slice\n     * @returns Dictionary<K, V>\n     */ static load(key, value, sc) {\n        let slice;\n        if (sc instanceof Cell_1.Cell) {\n            if (sc.isExotic) {\n                return Dictionary.empty(key, value);\n            }\n            slice = sc.beginParse();\n        } else {\n            slice = sc;\n        }\n        let cell = slice.loadMaybeRef();\n        if (cell && !cell.isExotic) {\n            return Dictionary.loadDirect(key, value, cell.beginParse());\n        } else {\n            return Dictionary.empty(key, value);\n        }\n    }\n    /**\n     * Low level method for rare dictionaries from system contracts.\n     * Loads dictionary from slice directly without going to the ref.\n     *\n     * @param key key description\n     * @param value value description\n     * @param sc slice\n     * @returns Dictionary<K, V>\n     */ static loadDirect(key, value, sc) {\n        if (!sc) {\n            return Dictionary.empty(key, value);\n        }\n        let slice;\n        if (sc instanceof Cell_1.Cell) {\n            slice = sc.beginParse();\n        } else {\n            slice = sc;\n        }\n        let values = (0, parseDict_1.parseDict)(slice, key.bits, value.parse);\n        let prepare = new Map();\n        for (let [k, v] of values){\n            prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key.parse(k)), v);\n        }\n        return new Dictionary(prepare, key, value);\n    }\n    constructor(values, key, value){\n        this._key = key;\n        this._value = value;\n        this._map = values;\n    }\n    get size() {\n        return this._map.size;\n    }\n    get(key) {\n        return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key));\n    }\n    has(key) {\n        return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key));\n    }\n    set(key, value) {\n        this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key), value);\n        return this;\n    }\n    delete(key) {\n        const k = (0, internalKeySerializer_1.serializeInternalKey)(key);\n        return this._map.delete(k);\n    }\n    clear() {\n        this._map.clear();\n    }\n    *[Symbol.iterator]() {\n        for (const [k, v] of this._map){\n            const key = (0, internalKeySerializer_1.deserializeInternalKey)(k);\n            yield [\n                key,\n                v\n            ];\n        }\n    }\n    keys() {\n        return Array.from(this._map.keys()).map((v)=>(0, internalKeySerializer_1.deserializeInternalKey)(v));\n    }\n    values() {\n        return Array.from(this._map.values());\n    }\n    store(builder, key, value) {\n        if (this._map.size === 0) {\n            builder.storeBit(0);\n        } else {\n            // Resolve serializer\n            let resolvedKey = this._key;\n            if (key !== null && key !== undefined) {\n                resolvedKey = key;\n            }\n            let resolvedValue = this._value;\n            if (value !== null && value !== undefined) {\n                resolvedValue = value;\n            }\n            if (!resolvedKey) {\n                throw Error(\"Key serializer is not defined\");\n            }\n            if (!resolvedValue) {\n                throw Error(\"Value serializer is not defined\");\n            }\n            // Prepare map\n            let prepared = new Map();\n            for (const [k, v] of this._map){\n                prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);\n            }\n            // Store\n            builder.storeBit(1);\n            let dd = (0, Builder_1.beginCell)();\n            (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd);\n            builder.storeRef(dd.endCell());\n        }\n    }\n    storeDirect(builder, key, value) {\n        if (this._map.size === 0) {\n            throw Error(\"Cannot store empty dictionary directly\");\n        }\n        // Resolve serializer\n        let resolvedKey = this._key;\n        if (key !== null && key !== undefined) {\n            resolvedKey = key;\n        }\n        let resolvedValue = this._value;\n        if (value !== null && value !== undefined) {\n            resolvedValue = value;\n        }\n        if (!resolvedKey) {\n            throw Error(\"Key serializer is not defined\");\n        }\n        if (!resolvedValue) {\n            throw Error(\"Value serializer is not defined\");\n        }\n        // Prepare map\n        let prepared = new Map();\n        for (const [k, v] of this._map){\n            prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);\n        }\n        // Store\n        (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder);\n    }\n    generateMerkleProof(key) {\n        return (0, generateMerkleProof_1.generateMerkleProof)(this, key, this._key);\n    }\n    generateMerkleUpdate(key, newValue) {\n        return (0, generateMerkleUpdate_1.generateMerkleUpdate)(this, key, this._key, newValue);\n    }\n}\nexports.Dictionary = Dictionary;\nDictionary.Keys = {\n    /**\n     * Standard address key\n     * @returns DictionaryKey<Address>\n     */ Address: ()=>{\n        return createAddressKey();\n    },\n    /**\n     * Create standard big integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<bigint>\n     */ BigInt: (bits)=>{\n        return createBigIntKey(bits);\n    },\n    /**\n     * Create integer key\n     * @param bits bits of integer\n     * @returns DictionaryKey<number>\n     */ Int: (bits)=>{\n        return createIntKey(bits);\n    },\n    /**\n     * Create standard unsigned big integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<bigint>\n     */ BigUint: (bits)=>{\n        return createBigUintKey(bits);\n    },\n    /**\n     * Create standard unsigned integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<number>\n     */ Uint: (bits)=>{\n        return createUintKey(bits);\n    },\n    /**\n     * Create standard buffer key\n     * @param bytes number of bytes of a buffer\n     * @returns DictionaryKey<Buffer>\n     */ Buffer: (bytes)=>{\n        return createBufferKey(bytes);\n    },\n    /**\n     * Create BitString key\n     * @param bits key length\n     * @returns DictionaryKey<BitString>\n     * Point is that Buffer has to be 8 bit aligned,\n     * while key is TVM dictionary doesn't have to be\n     * aligned at all.\n     */ BitString: (bits)=>{\n        return createBitStringKey(bits);\n    }\n};\nDictionary.Values = {\n    /**\n     * Create standard integer value\n     * @returns DictionaryValue<bigint>\n     */ BigInt: (bits)=>{\n        return createBigIntValue(bits);\n    },\n    /**\n     * Create standard integer value\n     * @returns DictionaryValue<number>\n     */ Int: (bits)=>{\n        return createIntValue(bits);\n    },\n    /**\n     * Create big var int\n     * @param bits nubmer of header bits\n     * @returns DictionaryValue<bigint>\n     */ BigVarInt: (bits)=>{\n        return createBigVarIntValue(bits);\n    },\n    /**\n     * Create standard unsigned integer value\n     * @param bits number of bits\n     * @returns DictionaryValue<bigint>\n     */ BigUint: (bits)=>{\n        return createBigUintValue(bits);\n    },\n    /**\n     * Create standard unsigned integer value\n     * @param bits number of bits\n     * @returns DictionaryValue<bigint>\n     */ Uint: (bits)=>{\n        return createUintValue(bits);\n    },\n    /**\n     * Create big var int\n     * @param bits nubmer of header bits\n     * @returns DictionaryValue<bigint>\n     */ BigVarUint: (bits)=>{\n        return createBigVarUintValue(bits);\n    },\n    /**\n     * Create standard boolean value\n     * @returns DictionaryValue<boolean>\n     */ Bool: ()=>{\n        return createBooleanValue();\n    },\n    /**\n     * Create standard address value\n     * @returns DictionaryValue<Address>\n     */ Address: ()=>{\n        return createAddressValue();\n    },\n    /**\n     * Create standard cell value\n     * @returns DictionaryValue<Cell>\n     */ Cell: ()=>{\n        return createCellValue();\n    },\n    /**\n     * Create Builder value\n     * @param bytes number of bytes of a buffer\n     * @returns DictionaryValue<Builder>\n     */ Buffer: (bytes)=>{\n        return createBufferValue(bytes);\n    },\n    /**\n     * Create BitString value\n     * @param requested bit length\n     * @returns DictionaryValue<BitString>\n     * Point is that Buffer is not applicable\n     * when length is not 8 bit alligned.\n     */ BitString: (bits)=>{\n        return createBitStringValue(bits);\n    },\n    /**\n     * Create dictionary value\n     * @param key\n     * @param value\n     */ Dictionary: (key, value)=>{\n        return createDictionaryValue(key, value);\n    }\n};\n//\n// Keys and Values\n//\nfunction createAddressKey() {\n    return {\n        bits: 267,\n        serialize: (src)=>{\n            if (!Address_1.Address.isAddress(src)) {\n                throw Error(\"Key is not an address\");\n            }\n            return (0, Builder_1.beginCell)().storeAddress(src).endCell().beginParse().preloadUintBig(267);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, 267).endCell().beginParse().loadAddress();\n        }\n    };\n}\nfunction createBigIntKey(bits) {\n    return {\n        bits,\n        serialize: (src)=>{\n            if (typeof src !== \"bigint\") {\n                throw Error(\"Key is not a bigint\");\n            }\n            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadIntBig(bits);\n        }\n    };\n}\nfunction createIntKey(bits) {\n    return {\n        bits: bits,\n        serialize: (src)=>{\n            if (typeof src !== \"number\") {\n                throw Error(\"Key is not a number\");\n            }\n            if (!Number.isSafeInteger(src)) {\n                throw Error(\"Key is not a safe integer: \" + src);\n            }\n            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadInt(bits);\n        }\n    };\n}\nfunction createBigUintKey(bits) {\n    return {\n        bits,\n        serialize: (src)=>{\n            if (typeof src !== \"bigint\") {\n                throw Error(\"Key is not a bigint\");\n            }\n            if (src < 0) {\n                throw Error(\"Key is negative: \" + src);\n            }\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        }\n    };\n}\nfunction createUintKey(bits) {\n    return {\n        bits,\n        serialize: (src)=>{\n            if (typeof src !== \"number\") {\n                throw Error(\"Key is not a number\");\n            }\n            if (!Number.isSafeInteger(src)) {\n                throw Error(\"Key is not a safe integer: \" + src);\n            }\n            if (src < 0) {\n                throw Error(\"Key is negative: \" + src);\n            }\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src)=>{\n            return Number((0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUint(bits));\n        }\n    };\n}\nfunction createBufferKey(bytes) {\n    return {\n        bits: bytes * 8,\n        serialize: (src)=>{\n            if (!Buffer.isBuffer(src)) {\n                throw Error(\"Key is not a buffer\");\n            }\n            return (0, Builder_1.beginCell)().storeBuffer(src).endCell().beginParse().loadUintBig(bytes * 8);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, bytes * 8).endCell().beginParse().loadBuffer(bytes);\n        }\n    };\n}\nfunction createBitStringKey(bits) {\n    return {\n        bits,\n        serialize: (src)=>{\n            if (!BitString_1.BitString.isBitString(src)) throw Error(\"Key is not a BitString\");\n            return (0, Builder_1.beginCell)().storeBits(src).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src)=>{\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadBits(bits);\n        }\n    };\n}\nfunction createIntValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeInt(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadInt(bits);\n        }\n    };\n}\nfunction createBigIntValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeInt(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadIntBig(bits);\n        }\n    };\n}\nfunction createBigVarIntValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeVarInt(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadVarIntBig(bits);\n        }\n    };\n}\nfunction createBigVarUintValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeVarUint(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadVarUintBig(bits);\n        }\n    };\n}\nfunction createUintValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeUint(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadUint(bits);\n        }\n    };\n}\nfunction createBigUintValue(bits) {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeUint(src, bits);\n        },\n        parse: (src)=>{\n            return src.loadUintBig(bits);\n        }\n    };\n}\nfunction createBooleanValue() {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeBit(src);\n        },\n        parse: (src)=>{\n            return src.loadBit();\n        }\n    };\n}\nfunction createAddressValue() {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeAddress(src);\n        },\n        parse: (src)=>{\n            return src.loadAddress();\n        }\n    };\n}\nfunction createCellValue() {\n    return {\n        serialize: (src, buidler)=>{\n            buidler.storeRef(src);\n        },\n        parse: (src)=>{\n            return src.loadRef();\n        }\n    };\n}\nfunction createDictionaryValue(key, value) {\n    return {\n        serialize: (src, buidler)=>{\n            src.store(buidler);\n        },\n        parse: (src)=>{\n            return Dictionary.load(key, value, src);\n        }\n    };\n}\nfunction createBufferValue(size) {\n    return {\n        serialize: (src, buidler)=>{\n            if (src.length !== size) {\n                throw Error(\"Invalid buffer size\");\n            }\n            buidler.storeBuffer(src);\n        },\n        parse: (src)=>{\n            return src.loadBuffer(size);\n        }\n    };\n}\nfunction createBitStringValue(bits) {\n    return {\n        serialize: (src, builder)=>{\n            if (src.length !== bits) {\n                throw Error(\"Invalid BitString size\");\n            }\n            builder.storeBits(src);\n        },\n        parse: (src)=>{\n            return src.loadBits(bits);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleProof.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/generateMerkleProof.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateMerkleProof = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst readUnaryLength_1 = __webpack_require__(/*! ./utils/readUnaryLength */ \"(ssr)/./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js\");\nfunction convertToPrunedBranch(c) {\n    return (0, Builder_1.beginCell)().storeUint(1, 8).storeUint(1, 8).storeBuffer(c.hash(0)).storeUint(c.depth(0), 16).endCell({\n        exotic: true\n    });\n}\nfunction convertToMerkleProof(c) {\n    return (0, Builder_1.beginCell)().storeUint(3, 8).storeBuffer(c.hash(0)).storeUint(c.depth(0), 16).storeRef(c).endCell({\n        exotic: true\n    });\n}\nfunction doGenerateMerkleProof(prefix, slice, n, key) {\n    // Reading label\n    const originalCell = slice.asCell();\n    let lb0 = slice.loadBit() ? 1 : 0;\n    let prefixLength = 0;\n    let pp = prefix;\n    if (lb0 === 0) {\n        // Short label detected\n        // Read\n        prefixLength = (0, readUnaryLength_1.readUnaryLength)(slice);\n        // Read prefix\n        for(let i = 0; i < prefixLength; i++){\n            pp += slice.loadBit() ? \"1\" : \"0\";\n        }\n    } else {\n        let lb1 = slice.loadBit() ? 1 : 0;\n        if (lb1 === 0) {\n            // Long label detected\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for(let i = 0; i < prefixLength; i++){\n                pp += slice.loadBit() ? \"1\" : \"0\";\n            }\n        } else {\n            // Same label detected\n            let bit = slice.loadBit() ? \"1\" : \"0\";\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for(let i = 0; i < prefixLength; i++){\n                pp += bit;\n            }\n        }\n    }\n    if (n - prefixLength === 0) {\n        return originalCell;\n    } else {\n        let sl = originalCell.beginParse();\n        let left = sl.loadRef();\n        let right = sl.loadRef();\n        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'\n        if (!left.isExotic) {\n            if (pp + \"0\" === key.slice(0, pp.length + 1)) {\n                left = doGenerateMerkleProof(pp + \"0\", left.beginParse(), n - prefixLength - 1, key);\n            } else {\n                left = convertToPrunedBranch(left);\n            }\n        }\n        if (!right.isExotic) {\n            if (pp + \"1\" === key.slice(0, pp.length + 1)) {\n                right = doGenerateMerkleProof(pp + \"1\", right.beginParse(), n - prefixLength - 1, key);\n            } else {\n                right = convertToPrunedBranch(right);\n            }\n        }\n        return (0, Builder_1.beginCell)().storeSlice(sl).storeRef(left).storeRef(right).endCell();\n    }\n}\nfunction generateMerkleProof(dict, key, keyObject) {\n    const s = (0, Builder_1.beginCell)().storeDictDirect(dict).endCell().beginParse();\n    return convertToMerkleProof(doGenerateMerkleProof(\"\", s, keyObject.bits, keyObject.serialize(key).toString(2).padStart(keyObject.bits, \"0\")));\n}\nexports.generateMerkleProof = generateMerkleProof;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateMerkleUpdate = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst generateMerkleProof_1 = __webpack_require__(/*! ./generateMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleProof.js\");\nfunction convertToMerkleUpdate(c1, c2) {\n    return (0, Builder_1.beginCell)().storeUint(4, 8).storeBuffer(c1.hash(0)).storeBuffer(c2.hash(0)).storeUint(c1.depth(0), 16).storeUint(c2.depth(0), 16).storeRef(c1).storeRef(c2).endCell({\n        exotic: true\n    });\n}\nfunction generateMerkleUpdate(dict, key, keyObject, newValue) {\n    const oldProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];\n    dict.set(key, newValue);\n    const newProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];\n    return convertToMerkleUpdate(oldProof, newProof);\n}\nexports.generateMerkleUpdate = generateMerkleUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC9nZW5lcmF0ZU1lcmtsZVVwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUcsS0FBSztBQUNwQyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQywwRUFBZ0I7QUFDMUMsTUFBTUMsd0JBQXdCRCxtQkFBT0EsQ0FBQyw4RkFBdUI7QUFDN0QsU0FBU0Usc0JBQXNCQyxFQUFFLEVBQUVDLEVBQUU7SUFDakMsT0FBTyxDQUFDLEdBQUdMLFVBQVVNLFNBQVMsSUFDekJDLFNBQVMsQ0FBQyxHQUFHLEdBQ2JDLFdBQVcsQ0FBQ0osR0FBR0ssSUFBSSxDQUFDLElBQ3BCRCxXQUFXLENBQUNILEdBQUdJLElBQUksQ0FBQyxJQUNwQkYsU0FBUyxDQUFDSCxHQUFHTSxLQUFLLENBQUMsSUFBSSxJQUN2QkgsU0FBUyxDQUFDRixHQUFHSyxLQUFLLENBQUMsSUFBSSxJQUN2QkMsUUFBUSxDQUFDUCxJQUNUTyxRQUFRLENBQUNOLElBQ1RPLE9BQU8sQ0FBQztRQUFFQyxRQUFRO0lBQUs7QUFDaEM7QUFDQSxTQUFTZCxxQkFBcUJlLElBQUksRUFBRUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFFBQVE7SUFDeEQsTUFBTUMsV0FBVyxDQUFDLEdBQUdoQixzQkFBc0JpQixtQkFBbUIsRUFBRUwsTUFBTUMsS0FBS0MsV0FBV0ksSUFBSSxDQUFDLEVBQUU7SUFDN0ZOLEtBQUtPLEdBQUcsQ0FBQ04sS0FBS0U7SUFDZCxNQUFNSyxXQUFXLENBQUMsR0FBR3BCLHNCQUFzQmlCLG1CQUFtQixFQUFFTCxNQUFNQyxLQUFLQyxXQUFXSSxJQUFJLENBQUMsRUFBRTtJQUM3RixPQUFPakIsc0JBQXNCZSxVQUFVSTtBQUMzQztBQUNBekIsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9kaWN0L2dlbmVyYXRlTWVya2xlVXBkYXRlLmpzPzlkZTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlTWVya2xlVXBkYXRlID0gdm9pZCAwO1xuY29uc3QgQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL2JvYy9CdWlsZGVyXCIpO1xuY29uc3QgZ2VuZXJhdGVNZXJrbGVQcm9vZl8xID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVNZXJrbGVQcm9vZlwiKTtcbmZ1bmN0aW9uIGNvbnZlcnRUb01lcmtsZVVwZGF0ZShjMSwgYzIpIHtcbiAgICByZXR1cm4gKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgLnN0b3JlVWludCg0LCA4KVxuICAgICAgICAuc3RvcmVCdWZmZXIoYzEuaGFzaCgwKSlcbiAgICAgICAgLnN0b3JlQnVmZmVyKGMyLmhhc2goMCkpXG4gICAgICAgIC5zdG9yZVVpbnQoYzEuZGVwdGgoMCksIDE2KVxuICAgICAgICAuc3RvcmVVaW50KGMyLmRlcHRoKDApLCAxNilcbiAgICAgICAgLnN0b3JlUmVmKGMxKVxuICAgICAgICAuc3RvcmVSZWYoYzIpXG4gICAgICAgIC5lbmRDZWxsKHsgZXhvdGljOiB0cnVlIH0pO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVNZXJrbGVVcGRhdGUoZGljdCwga2V5LCBrZXlPYmplY3QsIG5ld1ZhbHVlKSB7XG4gICAgY29uc3Qgb2xkUHJvb2YgPSAoMCwgZ2VuZXJhdGVNZXJrbGVQcm9vZl8xLmdlbmVyYXRlTWVya2xlUHJvb2YpKGRpY3QsIGtleSwga2V5T2JqZWN0KS5yZWZzWzBdO1xuICAgIGRpY3Quc2V0KGtleSwgbmV3VmFsdWUpO1xuICAgIGNvbnN0IG5ld1Byb29mID0gKDAsIGdlbmVyYXRlTWVya2xlUHJvb2ZfMS5nZW5lcmF0ZU1lcmtsZVByb29mKShkaWN0LCBrZXksIGtleU9iamVjdCkucmVmc1swXTtcbiAgICByZXR1cm4gY29udmVydFRvTWVya2xlVXBkYXRlKG9sZFByb29mLCBuZXdQcm9vZik7XG59XG5leHBvcnRzLmdlbmVyYXRlTWVya2xlVXBkYXRlID0gZ2VuZXJhdGVNZXJrbGVVcGRhdGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZU1lcmtsZVVwZGF0ZSIsIkJ1aWxkZXJfMSIsInJlcXVpcmUiLCJnZW5lcmF0ZU1lcmtsZVByb29mXzEiLCJjb252ZXJ0VG9NZXJrbGVVcGRhdGUiLCJjMSIsImMyIiwiYmVnaW5DZWxsIiwic3RvcmVVaW50Iiwic3RvcmVCdWZmZXIiLCJoYXNoIiwiZGVwdGgiLCJzdG9yZVJlZiIsImVuZENlbGwiLCJleG90aWMiLCJkaWN0Iiwia2V5Iiwia2V5T2JqZWN0IiwibmV3VmFsdWUiLCJvbGRQcm9vZiIsImdlbmVyYXRlTWVya2xlUHJvb2YiLCJyZWZzIiwic2V0IiwibmV3UHJvb2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/parseDict.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/parseDict.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseDict = void 0;\nfunction readUnaryLength(slice) {\n    let res = 0;\n    while(slice.loadBit()){\n        res++;\n    }\n    return res;\n}\nfunction doParse(prefix, slice, n, res, extractor) {\n    // Reading label\n    let lb0 = slice.loadBit() ? 1 : 0;\n    let prefixLength = 0;\n    let pp = prefix;\n    if (lb0 === 0) {\n        // Short label detected\n        // Read \n        prefixLength = readUnaryLength(slice);\n        // Read prefix\n        for(let i = 0; i < prefixLength; i++){\n            pp += slice.loadBit() ? \"1\" : \"0\";\n        }\n    } else {\n        let lb1 = slice.loadBit() ? 1 : 0;\n        if (lb1 === 0) {\n            // Long label detected\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for(let i = 0; i < prefixLength; i++){\n                pp += slice.loadBit() ? \"1\" : \"0\";\n            }\n        } else {\n            // Same label detected\n            let bit = slice.loadBit() ? \"1\" : \"0\";\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for(let i = 0; i < prefixLength; i++){\n                pp += bit;\n            }\n        }\n    }\n    if (n - prefixLength === 0) {\n        res.set(BigInt(\"0b\" + pp), extractor(slice));\n    } else {\n        let left = slice.loadRef();\n        let right = slice.loadRef();\n        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'\n        if (!left.isExotic) {\n            doParse(pp + \"0\", left.beginParse(), n - prefixLength - 1, res, extractor);\n        }\n        if (!right.isExotic) {\n            doParse(pp + \"1\", right.beginParse(), n - prefixLength - 1, res, extractor);\n        }\n    }\n}\nfunction parseDict(sc, keySize, extractor) {\n    let res = new Map();\n    if (sc) {\n        doParse(\"\", sc, keySize, res, extractor);\n    }\n    return res;\n}\nexports.parseDict = parseDict;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC9wYXJzZURpY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsU0FBU0csZ0JBQWdCQyxLQUFLO0lBQzFCLElBQUlDLE1BQU07SUFDVixNQUFPRCxNQUFNRSxPQUFPLEdBQUk7UUFDcEJEO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU0UsUUFBUUMsTUFBTSxFQUFFSixLQUFLLEVBQUVLLENBQUMsRUFBRUosR0FBRyxFQUFFSyxTQUFTO0lBQzdDLGdCQUFnQjtJQUNoQixJQUFJQyxNQUFNUCxNQUFNRSxPQUFPLEtBQUssSUFBSTtJQUNoQyxJQUFJTSxlQUFlO0lBQ25CLElBQUlDLEtBQUtMO0lBQ1QsSUFBSUcsUUFBUSxHQUFHO1FBQ1gsdUJBQXVCO1FBQ3ZCLFFBQVE7UUFDUkMsZUFBZVQsZ0JBQWdCQztRQUMvQixjQUFjO1FBQ2QsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlGLGNBQWNFLElBQUs7WUFDbkNELE1BQU1ULE1BQU1FLE9BQU8sS0FBSyxNQUFNO1FBQ2xDO0lBQ0osT0FDSztRQUNELElBQUlTLE1BQU1YLE1BQU1FLE9BQU8sS0FBSyxJQUFJO1FBQ2hDLElBQUlTLFFBQVEsR0FBRztZQUNYLHNCQUFzQjtZQUN0QkgsZUFBZVIsTUFBTVksUUFBUSxDQUFDQyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLElBQUksQ0FBQ1YsSUFBSTtZQUN0RCxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUYsY0FBY0UsSUFBSztnQkFDbkNELE1BQU1ULE1BQU1FLE9BQU8sS0FBSyxNQUFNO1lBQ2xDO1FBQ0osT0FDSztZQUNELHNCQUFzQjtZQUN0QixJQUFJYyxNQUFNaEIsTUFBTUUsT0FBTyxLQUFLLE1BQU07WUFDbENNLGVBQWVSLE1BQU1ZLFFBQVEsQ0FBQ0MsS0FBS0MsSUFBSSxDQUFDRCxLQUFLRSxJQUFJLENBQUNWLElBQUk7WUFDdEQsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlGLGNBQWNFLElBQUs7Z0JBQ25DRCxNQUFNTztZQUNWO1FBQ0o7SUFDSjtJQUNBLElBQUlYLElBQUlHLGlCQUFpQixHQUFHO1FBQ3hCUCxJQUFJZ0IsR0FBRyxDQUFDQyxPQUFPLE9BQU9ULEtBQUtILFVBQVVOO0lBQ3pDLE9BQ0s7UUFDRCxJQUFJbUIsT0FBT25CLE1BQU1vQixPQUFPO1FBQ3hCLElBQUlDLFFBQVFyQixNQUFNb0IsT0FBTztRQUN6Qiw0RUFBNEU7UUFDNUUsSUFBSSxDQUFDRCxLQUFLRyxRQUFRLEVBQUU7WUFDaEJuQixRQUFRTSxLQUFLLEtBQUtVLEtBQUtJLFVBQVUsSUFBSWxCLElBQUlHLGVBQWUsR0FBR1AsS0FBS0s7UUFDcEU7UUFDQSxJQUFJLENBQUNlLE1BQU1DLFFBQVEsRUFBRTtZQUNqQm5CLFFBQVFNLEtBQUssS0FBS1ksTUFBTUUsVUFBVSxJQUFJbEIsSUFBSUcsZUFBZSxHQUFHUCxLQUFLSztRQUNyRTtJQUNKO0FBQ0o7QUFDQSxTQUFTUixVQUFVMEIsRUFBRSxFQUFFQyxPQUFPLEVBQUVuQixTQUFTO0lBQ3JDLElBQUlMLE1BQU0sSUFBSXlCO0lBQ2QsSUFBSUYsSUFBSTtRQUNKckIsUUFBUSxJQUFJcUIsSUFBSUMsU0FBU3hCLEtBQUtLO0lBQ2xDO0lBQ0EsT0FBT0w7QUFDWDtBQUNBTCxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L2RpY3QvcGFyc2VEaWN0LmpzP2Q4ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRGljdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHJlYWRVbmFyeUxlbmd0aChzbGljZSkge1xuICAgIGxldCByZXMgPSAwO1xuICAgIHdoaWxlIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgcmVzKys7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBkb1BhcnNlKHByZWZpeCwgc2xpY2UsIG4sIHJlcywgZXh0cmFjdG9yKSB7XG4gICAgLy8gUmVhZGluZyBsYWJlbFxuICAgIGxldCBsYjAgPSBzbGljZS5sb2FkQml0KCkgPyAxIDogMDtcbiAgICBsZXQgcHJlZml4TGVuZ3RoID0gMDtcbiAgICBsZXQgcHAgPSBwcmVmaXg7XG4gICAgaWYgKGxiMCA9PT0gMCkge1xuICAgICAgICAvLyBTaG9ydCBsYWJlbCBkZXRlY3RlZFxuICAgICAgICAvLyBSZWFkIFxuICAgICAgICBwcmVmaXhMZW5ndGggPSByZWFkVW5hcnlMZW5ndGgoc2xpY2UpO1xuICAgICAgICAvLyBSZWFkIHByZWZpeFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwcCArPSBzbGljZS5sb2FkQml0KCkgPyAnMScgOiAnMCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBsYjEgPSBzbGljZS5sb2FkQml0KCkgPyAxIDogMDtcbiAgICAgICAgaWYgKGxiMSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gTG9uZyBsYWJlbCBkZXRlY3RlZFxuICAgICAgICAgICAgcHJlZml4TGVuZ3RoID0gc2xpY2UubG9hZFVpbnQoTWF0aC5jZWlsKE1hdGgubG9nMihuICsgMSkpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcCArPSBzbGljZS5sb2FkQml0KCkgPyAnMScgOiAnMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTYW1lIGxhYmVsIGRldGVjdGVkXG4gICAgICAgICAgICBsZXQgYml0ID0gc2xpY2UubG9hZEJpdCgpID8gJzEnIDogJzAnO1xuICAgICAgICAgICAgcHJlZml4TGVuZ3RoID0gc2xpY2UubG9hZFVpbnQoTWF0aC5jZWlsKE1hdGgubG9nMihuICsgMSkpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcCArPSBiaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG4gLSBwcmVmaXhMZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzLnNldChCaWdJbnQoJzBiJyArIHBwKSwgZXh0cmFjdG9yKHNsaWNlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgbGVmdCA9IHNsaWNlLmxvYWRSZWYoKTtcbiAgICAgICAgbGV0IHJpZ2h0ID0gc2xpY2UubG9hZFJlZigpO1xuICAgICAgICAvLyBOT1RFOiBMZWZ0IGFuZCByaWdodCBicmFuY2hlcyBhcmUgaW1wbGljaXRseSBjb250YWluIHByZWZpeGVzICcwJyBhbmQgJzEnXG4gICAgICAgIGlmICghbGVmdC5pc0V4b3RpYykge1xuICAgICAgICAgICAgZG9QYXJzZShwcCArICcwJywgbGVmdC5iZWdpblBhcnNlKCksIG4gLSBwcmVmaXhMZW5ndGggLSAxLCByZXMsIGV4dHJhY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyaWdodC5pc0V4b3RpYykge1xuICAgICAgICAgICAgZG9QYXJzZShwcCArICcxJywgcmlnaHQuYmVnaW5QYXJzZSgpLCBuIC0gcHJlZml4TGVuZ3RoIC0gMSwgcmVzLCBleHRyYWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VEaWN0KHNjLCBrZXlTaXplLCBleHRyYWN0b3IpIHtcbiAgICBsZXQgcmVzID0gbmV3IE1hcCgpO1xuICAgIGlmIChzYykge1xuICAgICAgICBkb1BhcnNlKCcnLCBzYywga2V5U2l6ZSwgcmVzLCBleHRyYWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5wYXJzZURpY3QgPSBwYXJzZURpY3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZURpY3QiLCJyZWFkVW5hcnlMZW5ndGgiLCJzbGljZSIsInJlcyIsImxvYWRCaXQiLCJkb1BhcnNlIiwicHJlZml4IiwibiIsImV4dHJhY3RvciIsImxiMCIsInByZWZpeExlbmd0aCIsInBwIiwiaSIsImxiMSIsImxvYWRVaW50IiwiTWF0aCIsImNlaWwiLCJsb2cyIiwiYml0Iiwic2V0IiwiQmlnSW50IiwibGVmdCIsImxvYWRSZWYiLCJyaWdodCIsImlzRXhvdGljIiwiYmVnaW5QYXJzZSIsInNjIiwia2V5U2l6ZSIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/parseDict.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/serializeDict.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/serializeDict.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializeDict = exports.detectLabelType = exports.writeLabelSame = exports.writeLabelLong = exports.writeLabelShort = exports.buildTree = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst findCommonPrefix_1 = __webpack_require__(/*! ./utils/findCommonPrefix */ \"(ssr)/./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js\");\n//\n// Tree Build\n//\nfunction pad(src, size) {\n    while(src.length < size){\n        src = \"0\" + src;\n    }\n    return src;\n}\nfunction removePrefixMap(src, length) {\n    if (length === 0) {\n        return src;\n    } else {\n        let res = new Map();\n        for (let k of src.keys()){\n            let d = src.get(k);\n            res.set(k.slice(length), d);\n        }\n        return res;\n    }\n}\nfunction forkMap(src, prefixLen) {\n    if (src.size === 0) {\n        throw Error(\"Internal inconsistency\");\n    }\n    let left = new Map();\n    let right = new Map();\n    for (let [k, d] of src.entries()){\n        if (k[prefixLen] === \"0\") {\n            left.set(k, d);\n        } else {\n            right.set(k, d);\n        }\n    }\n    if (left.size === 0) {\n        throw Error(\"Internal inconsistency. Left emtpy.\");\n    }\n    if (right.size === 0) {\n        throw Error(\"Internal inconsistency. Right emtpy.\");\n    }\n    return {\n        left,\n        right\n    };\n}\nfunction buildNode(src, prefixLen) {\n    if (src.size === 0) {\n        throw Error(\"Internal inconsistency\");\n    }\n    if (src.size === 1) {\n        return {\n            type: \"leaf\",\n            value: Array.from(src.values())[0]\n        };\n    }\n    let { left, right } = forkMap(src, prefixLen);\n    return {\n        type: \"fork\",\n        left: buildEdge(left, prefixLen + 1),\n        right: buildEdge(right, prefixLen + 1)\n    };\n}\nfunction buildEdge(src, prefixLen = 0) {\n    if (src.size === 0) {\n        throw Error(\"Internal inconsistency\");\n    }\n    const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src.keys()), prefixLen);\n    return {\n        label,\n        node: buildNode(src, label.length + prefixLen)\n    };\n}\nfunction buildTree(src, keyLength) {\n    // Convert map keys\n    let converted = new Map();\n    for (let k of Array.from(src.keys())){\n        const padded = pad(k.toString(2), keyLength);\n        converted.set(padded, src.get(k));\n    }\n    // Calculate root label\n    return buildEdge(converted);\n}\nexports.buildTree = buildTree;\n//\n// Serialization\n//\nfunction writeLabelShort(src, to) {\n    // Header\n    to.storeBit(0);\n    // Unary length\n    for(let i = 0; i < src.length; i++){\n        to.storeBit(1);\n    }\n    to.storeBit(0);\n    // Value\n    if (src.length > 0) {\n        to.storeUint(BigInt(\"0b\" + src), src.length);\n    }\n    return to;\n}\nexports.writeLabelShort = writeLabelShort;\nfunction labelShortLength(src) {\n    return 1 + src.length + 1 + src.length;\n}\nfunction writeLabelLong(src, keyLength, to) {\n    // Header\n    to.storeBit(1);\n    to.storeBit(0);\n    // Length\n    let length = Math.ceil(Math.log2(keyLength + 1));\n    to.storeUint(src.length, length);\n    // Value\n    if (src.length > 0) {\n        to.storeUint(BigInt(\"0b\" + src), src.length);\n    }\n    return to;\n}\nexports.writeLabelLong = writeLabelLong;\nfunction labelLongLength(src, keyLength) {\n    return 1 + 1 + Math.ceil(Math.log2(keyLength + 1)) + src.length;\n}\nfunction writeLabelSame(value, length, keyLength, to) {\n    // Header\n    to.storeBit(1);\n    to.storeBit(1);\n    // Value\n    to.storeBit(value);\n    // Length\n    let lenLen = Math.ceil(Math.log2(keyLength + 1));\n    to.storeUint(length, lenLen);\n}\nexports.writeLabelSame = writeLabelSame;\nfunction labelSameLength(keyLength) {\n    return 1 + 1 + 1 + Math.ceil(Math.log2(keyLength + 1));\n}\nfunction isSame(src) {\n    if (src.length === 0 || src.length === 1) {\n        return true;\n    }\n    for(let i = 1; i < src.length; i++){\n        if (src[i] !== src[0]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction detectLabelType(src, keyLength) {\n    let kind = \"short\";\n    let kindLength = labelShortLength(src);\n    let longLength = labelLongLength(src, keyLength);\n    if (longLength < kindLength) {\n        kindLength = longLength;\n        kind = \"long\";\n    }\n    if (isSame(src)) {\n        let sameLength = labelSameLength(keyLength);\n        if (sameLength < kindLength) {\n            kindLength = sameLength;\n            kind = \"same\";\n        }\n    }\n    return kind;\n}\nexports.detectLabelType = detectLabelType;\nfunction writeLabel(src, keyLength, to) {\n    let type = detectLabelType(src, keyLength);\n    if (type === \"short\") {\n        writeLabelShort(src, to);\n    } else if (type === \"long\") {\n        writeLabelLong(src, keyLength, to);\n    } else if (type === \"same\") {\n        writeLabelSame(src[0] === \"1\", src.length, keyLength, to);\n    }\n}\nfunction writeNode(src, keyLength, serializer, to) {\n    if (src.type === \"leaf\") {\n        serializer(src.value, to);\n    }\n    if (src.type === \"fork\") {\n        const leftCell = (0, Builder_1.beginCell)();\n        const rightCell = (0, Builder_1.beginCell)();\n        writeEdge(src.left, keyLength - 1, serializer, leftCell);\n        writeEdge(src.right, keyLength - 1, serializer, rightCell);\n        to.storeRef(leftCell);\n        to.storeRef(rightCell);\n    }\n}\nfunction writeEdge(src, keyLength, serializer, to) {\n    writeLabel(src.label, keyLength, to);\n    writeNode(src.node, keyLength - src.label.length, serializer, to);\n}\nfunction serializeDict(src, keyLength, serializer, to) {\n    const tree = buildTree(src, keyLength);\n    writeEdge(tree, keyLength, serializer, to);\n}\nexports.serializeDict = serializeDict;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/serializeDict.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.findCommonPrefix = void 0;\nfunction findCommonPrefix(src, startPos = 0) {\n    // Corner cases\n    if (src.length === 0) {\n        return \"\";\n    }\n    let r = src[0].slice(startPos);\n    for(let i = 1; i < src.length; i++){\n        const s = src[i];\n        while(s.indexOf(r, startPos) !== startPos){\n            r = r.substring(0, r.length - 1);\n            if (r === \"\") {\n                return r;\n            }\n        }\n    }\n    return r;\n}\nexports.findCommonPrefix = findCommonPrefix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC91dGlscy9maW5kQ29tbW9uUHJlZml4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLFNBQVNFLGlCQUFpQkMsR0FBRyxFQUFFQyxXQUFXLENBQUM7SUFDdkMsZUFBZTtJQUNmLElBQUlELElBQUlFLE1BQU0sS0FBSyxHQUFHO1FBQ2xCLE9BQU87SUFDWDtJQUNBLElBQUlDLElBQUlILEdBQUcsQ0FBQyxFQUFFLENBQUNJLEtBQUssQ0FBQ0g7SUFDckIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlMLElBQUlFLE1BQU0sRUFBRUcsSUFBSztRQUNqQyxNQUFNQyxJQUFJTixHQUFHLENBQUNLLEVBQUU7UUFDaEIsTUFBT0MsRUFBRUMsT0FBTyxDQUFDSixHQUFHRixjQUFjQSxTQUFVO1lBQ3hDRSxJQUFJQSxFQUFFSyxTQUFTLENBQUMsR0FBR0wsRUFBRUQsTUFBTSxHQUFHO1lBQzlCLElBQUlDLE1BQU0sSUFBSTtnQkFDVixPQUFPQTtZQUNYO1FBQ0o7SUFDSjtJQUNBLE9BQU9BO0FBQ1g7QUFDQU4sd0JBQXdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC9kaWN0L3V0aWxzL2ZpbmRDb21tb25QcmVmaXguanM/NzE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmluZENvbW1vblByZWZpeCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGZpbmRDb21tb25QcmVmaXgoc3JjLCBzdGFydFBvcyA9IDApIHtcbiAgICAvLyBDb3JuZXIgY2FzZXNcbiAgICBpZiAoc3JjLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGxldCByID0gc3JjWzBdLnNsaWNlKHN0YXJ0UG9zKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNyYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzID0gc3JjW2ldO1xuICAgICAgICB3aGlsZSAocy5pbmRleE9mKHIsIHN0YXJ0UG9zKSAhPT0gc3RhcnRQb3MpIHtcbiAgICAgICAgICAgIHIgPSByLnN1YnN0cmluZygwLCByLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaWYgKHIgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG5leHBvcnRzLmZpbmRDb21tb25QcmVmaXggPSBmaW5kQ29tbW9uUHJlZml4O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmluZENvbW1vblByZWZpeCIsInNyYyIsInN0YXJ0UG9zIiwibGVuZ3RoIiwiciIsInNsaWNlIiwiaSIsInMiLCJpbmRleE9mIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.deserializeInternalKey = exports.serializeInternalKey = void 0;\nconst Address_1 = __webpack_require__(/*! ../../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst BitString_1 = __webpack_require__(/*! ../../boc/BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nconst paddedBits_1 = __webpack_require__(/*! ../../boc/utils/paddedBits */ \"(ssr)/./node_modules/@ton/core/dist/boc/utils/paddedBits.js\");\nfunction serializeInternalKey(value) {\n    if (typeof value === \"number\") {\n        if (!Number.isSafeInteger(value)) {\n            throw Error(\"Invalid key type: not a safe integer: \" + value);\n        }\n        return \"n:\" + value.toString(10);\n    } else if (typeof value === \"bigint\") {\n        return \"b:\" + value.toString(10);\n    } else if (Address_1.Address.isAddress(value)) {\n        return \"a:\" + value.toString();\n    } else if (Buffer.isBuffer(value)) {\n        return \"f:\" + value.toString(\"hex\");\n    } else if (BitString_1.BitString.isBitString(value)) {\n        return \"B:\" + value.toString();\n    } else {\n        throw Error(\"Invalid key type\");\n    }\n}\nexports.serializeInternalKey = serializeInternalKey;\nfunction deserializeInternalKey(value) {\n    let k = value.slice(0, 2);\n    let v = value.slice(2);\n    if (k === \"n:\") {\n        return parseInt(v, 10);\n    } else if (k === \"b:\") {\n        return BigInt(v);\n    } else if (k === \"a:\") {\n        return Address_1.Address.parse(v);\n    } else if (k === \"f:\") {\n        return Buffer.from(v, \"hex\");\n    } else if (k === \"B:\") {\n        const lastDash = v.slice(-1) == \"_\";\n        const isPadded = lastDash || v.length % 2 != 0;\n        if (isPadded) {\n            let charLen = lastDash ? v.length - 1 : v.length;\n            const padded = v.substr(0, charLen) + \"0\"; //Padding\n            if (!lastDash && (charLen & 1) !== 0) {\n                // Four bit nibmle without padding\n                return new BitString_1.BitString(Buffer.from(padded, \"hex\"), 0, charLen << 2);\n            } else {\n                return (0, paddedBits_1.paddedBufferToBits)(Buffer.from(padded, \"hex\"));\n            }\n        } else {\n            return new BitString_1.BitString(Buffer.from(v, \"hex\"), 0, v.length << 2);\n        }\n    }\n    throw Error(\"Invalid key type: \" + k);\n}\nexports.deserializeInternalKey = deserializeInternalKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC91dGlscy9pbnRlcm5hbEtleVNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ3JFLE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLHFGQUF1QjtBQUNqRCxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyxpRkFBcUI7QUFDakQsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsK0ZBQTRCO0FBQ3pELFNBQVNGLHFCQUFxQkYsS0FBSztJQUMvQixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUMzQixJQUFJLENBQUNPLE9BQU9DLGFBQWEsQ0FBQ1IsUUFBUTtZQUM5QixNQUFNUyxNQUFNLDJDQUEyQ1Q7UUFDM0Q7UUFDQSxPQUFPLE9BQU9BLE1BQU1VLFFBQVEsQ0FBQztJQUNqQyxPQUNLLElBQUksT0FBT1YsVUFBVSxVQUFVO1FBQ2hDLE9BQU8sT0FBT0EsTUFBTVUsUUFBUSxDQUFDO0lBQ2pDLE9BQ0ssSUFBSVAsVUFBVVEsT0FBTyxDQUFDQyxTQUFTLENBQUNaLFFBQVE7UUFDekMsT0FBTyxPQUFPQSxNQUFNVSxRQUFRO0lBQ2hDLE9BQ0ssSUFBSUcsT0FBT0MsUUFBUSxDQUFDZCxRQUFRO1FBQzdCLE9BQU8sT0FBT0EsTUFBTVUsUUFBUSxDQUFDO0lBQ2pDLE9BQ0ssSUFBSUwsWUFBWVUsU0FBUyxDQUFDQyxXQUFXLENBQUNoQixRQUFRO1FBQy9DLE9BQU8sT0FBT0EsTUFBTVUsUUFBUTtJQUNoQyxPQUNLO1FBQ0QsTUFBTUQsTUFBTTtJQUNoQjtBQUNKO0FBQ0FWLDRCQUE0QixHQUFHRztBQUMvQixTQUFTRCx1QkFBdUJELEtBQUs7SUFDakMsSUFBSWlCLElBQUlqQixNQUFNa0IsS0FBSyxDQUFDLEdBQUc7SUFDdkIsSUFBSUMsSUFBSW5CLE1BQU1rQixLQUFLLENBQUM7SUFDcEIsSUFBSUQsTUFBTSxNQUFNO1FBQ1osT0FBT0csU0FBU0QsR0FBRztJQUN2QixPQUNLLElBQUlGLE1BQU0sTUFBTTtRQUNqQixPQUFPSSxPQUFPRjtJQUNsQixPQUNLLElBQUlGLE1BQU0sTUFBTTtRQUNqQixPQUFPZCxVQUFVUSxPQUFPLENBQUNXLEtBQUssQ0FBQ0g7SUFDbkMsT0FDSyxJQUFJRixNQUFNLE1BQU07UUFDakIsT0FBT0osT0FBT1UsSUFBSSxDQUFDSixHQUFHO0lBQzFCLE9BQ0ssSUFBSUYsTUFBTSxNQUFNO1FBQ2pCLE1BQU1PLFdBQVdMLEVBQUVELEtBQUssQ0FBQyxDQUFDLE1BQU07UUFDaEMsTUFBTU8sV0FBV0QsWUFBWUwsRUFBRU8sTUFBTSxHQUFHLEtBQUs7UUFDN0MsSUFBSUQsVUFBVTtZQUNWLElBQUlFLFVBQVVILFdBQVdMLEVBQUVPLE1BQU0sR0FBRyxJQUFJUCxFQUFFTyxNQUFNO1lBQ2hELE1BQU1FLFNBQVNULEVBQUVVLE1BQU0sQ0FBQyxHQUFHRixXQUFXLEtBQUssU0FBUztZQUNwRCxJQUFJLENBQUVILFlBQWMsQ0FBQ0csVUFBVSxPQUFPLEdBQUk7Z0JBQ3RDLGtDQUFrQztnQkFDbEMsT0FBTyxJQUFJdEIsWUFBWVUsU0FBUyxDQUFDRixPQUFPVSxJQUFJLENBQUNLLFFBQVEsUUFBUSxHQUFHRCxXQUFXO1lBQy9FLE9BQ0s7Z0JBQ0QsT0FBTyxDQUFDLEdBQUdyQixhQUFhd0Isa0JBQWtCLEVBQUVqQixPQUFPVSxJQUFJLENBQUNLLFFBQVE7WUFDcEU7UUFDSixPQUNLO1lBQ0QsT0FBTyxJQUFJdkIsWUFBWVUsU0FBUyxDQUFDRixPQUFPVSxJQUFJLENBQUNKLEdBQUcsUUFBUSxHQUFHQSxFQUFFTyxNQUFNLElBQUk7UUFDM0U7SUFDSjtJQUNBLE1BQU1qQixNQUFNLHVCQUF1QlE7QUFDdkM7QUFDQWxCLDhCQUE4QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC91dGlscy9pbnRlcm5hbEtleVNlcmlhbGl6ZXIuanM/OWRjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVzZXJpYWxpemVJbnRlcm5hbEtleSA9IGV4cG9ydHMuc2VyaWFsaXplSW50ZXJuYWxLZXkgPSB2b2lkIDA7XG5jb25zdCBBZGRyZXNzXzEgPSByZXF1aXJlKFwiLi4vLi4vYWRkcmVzcy9BZGRyZXNzXCIpO1xuY29uc3QgQml0U3RyaW5nXzEgPSByZXF1aXJlKFwiLi4vLi4vYm9jL0JpdFN0cmluZ1wiKTtcbmNvbnN0IHBhZGRlZEJpdHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ib2MvdXRpbHMvcGFkZGVkQml0c1wiKTtcbmZ1bmN0aW9uIHNlcmlhbGl6ZUludGVybmFsS2V5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGtleSB0eXBlOiBub3QgYSBzYWZlIGludGVnZXI6ICcgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICduOicgKyB2YWx1ZS50b1N0cmluZygxMCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgcmV0dXJuICdiOicgKyB2YWx1ZS50b1N0cmluZygxMCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFkZHJlc3NfMS5BZGRyZXNzLmlzQWRkcmVzcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdhOicgKyB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnZjonICsgdmFsdWUudG9TdHJpbmcoJ2hleCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChCaXRTdHJpbmdfMS5CaXRTdHJpbmcuaXNCaXRTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnQjonICsgdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGtleSB0eXBlJyk7XG4gICAgfVxufVxuZXhwb3J0cy5zZXJpYWxpemVJbnRlcm5hbEtleSA9IHNlcmlhbGl6ZUludGVybmFsS2V5O1xuZnVuY3Rpb24gZGVzZXJpYWxpemVJbnRlcm5hbEtleSh2YWx1ZSkge1xuICAgIGxldCBrID0gdmFsdWUuc2xpY2UoMCwgMik7XG4gICAgbGV0IHYgPSB2YWx1ZS5zbGljZSgyKTtcbiAgICBpZiAoayA9PT0gJ246Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodiwgMTApO1xuICAgIH1cbiAgICBlbHNlIGlmIChrID09PSAnYjonKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQodik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGsgPT09ICdhOicpIHtcbiAgICAgICAgcmV0dXJuIEFkZHJlc3NfMS5BZGRyZXNzLnBhcnNlKHYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChrID09PSAnZjonKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh2LCAnaGV4Jyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGsgPT09ICdCOicpIHtcbiAgICAgICAgY29uc3QgbGFzdERhc2ggPSB2LnNsaWNlKC0xKSA9PSBcIl9cIjtcbiAgICAgICAgY29uc3QgaXNQYWRkZWQgPSBsYXN0RGFzaCB8fCB2Lmxlbmd0aCAlIDIgIT0gMDtcbiAgICAgICAgaWYgKGlzUGFkZGVkKSB7XG4gICAgICAgICAgICBsZXQgY2hhckxlbiA9IGxhc3REYXNoID8gdi5sZW5ndGggLSAxIDogdi5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBwYWRkZWQgPSB2LnN1YnN0cigwLCBjaGFyTGVuKSArIFwiMFwiOyAvL1BhZGRpbmdcbiAgICAgICAgICAgIGlmICgoIWxhc3REYXNoKSAmJiAoKGNoYXJMZW4gJiAxKSAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3VyIGJpdCBuaWJtbGUgd2l0aG91dCBwYWRkaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaXRTdHJpbmdfMS5CaXRTdHJpbmcoQnVmZmVyLmZyb20ocGFkZGVkLCAnaGV4JyksIDAsIGNoYXJMZW4gPDwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIHBhZGRlZEJpdHNfMS5wYWRkZWRCdWZmZXJUb0JpdHMpKEJ1ZmZlci5mcm9tKHBhZGRlZCwgJ2hleCcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQml0U3RyaW5nXzEuQml0U3RyaW5nKEJ1ZmZlci5mcm9tKHYsICdoZXgnKSwgMCwgdi5sZW5ndGggPDwgMik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQga2V5IHR5cGU6ICcgKyBrKTtcbn1cbmV4cG9ydHMuZGVzZXJpYWxpemVJbnRlcm5hbEtleSA9IGRlc2VyaWFsaXplSW50ZXJuYWxLZXk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZXNlcmlhbGl6ZUludGVybmFsS2V5Iiwic2VyaWFsaXplSW50ZXJuYWxLZXkiLCJBZGRyZXNzXzEiLCJyZXF1aXJlIiwiQml0U3RyaW5nXzEiLCJwYWRkZWRCaXRzXzEiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRXJyb3IiLCJ0b1N0cmluZyIsIkFkZHJlc3MiLCJpc0FkZHJlc3MiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIkJpdFN0cmluZyIsImlzQml0U3RyaW5nIiwiayIsInNsaWNlIiwidiIsInBhcnNlSW50IiwiQmlnSW50IiwicGFyc2UiLCJmcm9tIiwibGFzdERhc2giLCJpc1BhZGRlZCIsImxlbmd0aCIsImNoYXJMZW4iLCJwYWRkZWQiLCJzdWJzdHIiLCJwYWRkZWRCdWZmZXJUb0JpdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.readUnaryLength = void 0;\nfunction readUnaryLength(slice) {\n    let res = 0;\n    while(slice.loadBit()){\n        res++;\n    }\n    return res;\n}\nexports.readUnaryLength = readUnaryLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC91dGlscy9yZWFkVW5hcnlMZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsU0FBU0UsZ0JBQWdCQyxLQUFLO0lBQzFCLElBQUlDLE1BQU07SUFDVixNQUFPRCxNQUFNRSxPQUFPLEdBQUk7UUFDcEJEO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBQ0FKLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvZGljdC91dGlscy9yZWFkVW5hcnlMZW5ndGguanM/NDU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVhZFVuYXJ5TGVuZ3RoID0gdm9pZCAwO1xuZnVuY3Rpb24gcmVhZFVuYXJ5TGVuZ3RoKHNsaWNlKSB7XG4gICAgbGV0IHJlcyA9IDA7XG4gICAgd2hpbGUgKHNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICByZXMrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMucmVhZFVuYXJ5TGVuZ3RoID0gcmVhZFVuYXJ5TGVuZ3RoO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVhZFVuYXJ5TGVuZ3RoIiwic2xpY2UiLCJyZXMiLCJsb2FkQml0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@ton/core/dist/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.safeSignVerify = exports.safeSign = exports.getMethodId = exports.base32Encode = exports.base32Decode = exports.crc32c = exports.crc16 = exports.fromNano = exports.toNano = exports.ComputeError = exports.openContract = exports.TupleBuilder = exports.TupleReader = exports.serializeTuple = exports.parseTuple = exports.generateMerkleUpdate = exports.generateMerkleProof = exports.exoticPruned = exports.exoticMerkleUpdate = exports.exoticMerkleProof = exports.Dictionary = exports.Cell = exports.CellType = exports.Slice = exports.beginCell = exports.Builder = exports.BitBuilder = exports.BitReader = exports.BitString = exports.contractAddress = exports.ADNLAddress = exports.ExternalAddress = exports.address = exports.Address = void 0;\n// Address\nvar Address_1 = __webpack_require__(/*! ./address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nObject.defineProperty(exports, \"Address\", ({\n    enumerable: true,\n    get: function() {\n        return Address_1.Address;\n    }\n}));\nObject.defineProperty(exports, \"address\", ({\n    enumerable: true,\n    get: function() {\n        return Address_1.address;\n    }\n}));\nvar ExternalAddress_1 = __webpack_require__(/*! ./address/ExternalAddress */ \"(ssr)/./node_modules/@ton/core/dist/address/ExternalAddress.js\");\nObject.defineProperty(exports, \"ExternalAddress\", ({\n    enumerable: true,\n    get: function() {\n        return ExternalAddress_1.ExternalAddress;\n    }\n}));\nvar ADNLAddress_1 = __webpack_require__(/*! ./address/ADNLAddress */ \"(ssr)/./node_modules/@ton/core/dist/address/ADNLAddress.js\");\nObject.defineProperty(exports, \"ADNLAddress\", ({\n    enumerable: true,\n    get: function() {\n        return ADNLAddress_1.ADNLAddress;\n    }\n}));\nvar contractAddress_1 = __webpack_require__(/*! ./address/contractAddress */ \"(ssr)/./node_modules/@ton/core/dist/address/contractAddress.js\");\nObject.defineProperty(exports, \"contractAddress\", ({\n    enumerable: true,\n    get: function() {\n        return contractAddress_1.contractAddress;\n    }\n}));\n// BitString\nvar BitString_1 = __webpack_require__(/*! ./boc/BitString */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitString.js\");\nObject.defineProperty(exports, \"BitString\", ({\n    enumerable: true,\n    get: function() {\n        return BitString_1.BitString;\n    }\n}));\nvar BitReader_1 = __webpack_require__(/*! ./boc/BitReader */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitReader.js\");\nObject.defineProperty(exports, \"BitReader\", ({\n    enumerable: true,\n    get: function() {\n        return BitReader_1.BitReader;\n    }\n}));\nvar BitBuilder_1 = __webpack_require__(/*! ./boc/BitBuilder */ \"(ssr)/./node_modules/@ton/core/dist/boc/BitBuilder.js\");\nObject.defineProperty(exports, \"BitBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return BitBuilder_1.BitBuilder;\n    }\n}));\n// Cell\nvar Builder_1 = __webpack_require__(/*! ./boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nObject.defineProperty(exports, \"Builder\", ({\n    enumerable: true,\n    get: function() {\n        return Builder_1.Builder;\n    }\n}));\nObject.defineProperty(exports, \"beginCell\", ({\n    enumerable: true,\n    get: function() {\n        return Builder_1.beginCell;\n    }\n}));\nvar Slice_1 = __webpack_require__(/*! ./boc/Slice */ \"(ssr)/./node_modules/@ton/core/dist/boc/Slice.js\");\nObject.defineProperty(exports, \"Slice\", ({\n    enumerable: true,\n    get: function() {\n        return Slice_1.Slice;\n    }\n}));\nvar CellType_1 = __webpack_require__(/*! ./boc/CellType */ \"(ssr)/./node_modules/@ton/core/dist/boc/CellType.js\");\nObject.defineProperty(exports, \"CellType\", ({\n    enumerable: true,\n    get: function() {\n        return CellType_1.CellType;\n    }\n}));\nvar Cell_1 = __webpack_require__(/*! ./boc/Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nObject.defineProperty(exports, \"Cell\", ({\n    enumerable: true,\n    get: function() {\n        return Cell_1.Cell;\n    }\n}));\n// Dict\nvar Dictionary_1 = __webpack_require__(/*! ./dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nObject.defineProperty(exports, \"Dictionary\", ({\n    enumerable: true,\n    get: function() {\n        return Dictionary_1.Dictionary;\n    }\n}));\n// Exotics\nvar exoticMerkleProof_1 = __webpack_require__(/*! ./boc/cell/exoticMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js\");\nObject.defineProperty(exports, \"exoticMerkleProof\", ({\n    enumerable: true,\n    get: function() {\n        return exoticMerkleProof_1.exoticMerkleProof;\n    }\n}));\nvar exoticMerkleUpdate_1 = __webpack_require__(/*! ./boc/cell/exoticMerkleUpdate */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js\");\nObject.defineProperty(exports, \"exoticMerkleUpdate\", ({\n    enumerable: true,\n    get: function() {\n        return exoticMerkleUpdate_1.exoticMerkleUpdate;\n    }\n}));\nvar exoticPruned_1 = __webpack_require__(/*! ./boc/cell/exoticPruned */ \"(ssr)/./node_modules/@ton/core/dist/boc/cell/exoticPruned.js\");\nObject.defineProperty(exports, \"exoticPruned\", ({\n    enumerable: true,\n    get: function() {\n        return exoticPruned_1.exoticPruned;\n    }\n}));\n// Merkle trees\nvar generateMerkleProof_1 = __webpack_require__(/*! ./dict/generateMerkleProof */ \"(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleProof.js\");\nObject.defineProperty(exports, \"generateMerkleProof\", ({\n    enumerable: true,\n    get: function() {\n        return generateMerkleProof_1.generateMerkleProof;\n    }\n}));\nvar generateMerkleUpdate_1 = __webpack_require__(/*! ./dict/generateMerkleUpdate */ \"(ssr)/./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js\");\nObject.defineProperty(exports, \"generateMerkleUpdate\", ({\n    enumerable: true,\n    get: function() {\n        return generateMerkleUpdate_1.generateMerkleUpdate;\n    }\n}));\nvar tuple_1 = __webpack_require__(/*! ./tuple/tuple */ \"(ssr)/./node_modules/@ton/core/dist/tuple/tuple.js\");\nObject.defineProperty(exports, \"parseTuple\", ({\n    enumerable: true,\n    get: function() {\n        return tuple_1.parseTuple;\n    }\n}));\nObject.defineProperty(exports, \"serializeTuple\", ({\n    enumerable: true,\n    get: function() {\n        return tuple_1.serializeTuple;\n    }\n}));\nvar reader_1 = __webpack_require__(/*! ./tuple/reader */ \"(ssr)/./node_modules/@ton/core/dist/tuple/reader.js\");\nObject.defineProperty(exports, \"TupleReader\", ({\n    enumerable: true,\n    get: function() {\n        return reader_1.TupleReader;\n    }\n}));\nvar builder_1 = __webpack_require__(/*! ./tuple/builder */ \"(ssr)/./node_modules/@ton/core/dist/tuple/builder.js\");\nObject.defineProperty(exports, \"TupleBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return builder_1.TupleBuilder;\n    }\n}));\n// Types\n__exportStar(__webpack_require__(/*! ./types/_export */ \"(ssr)/./node_modules/@ton/core/dist/types/_export.js\"), exports);\nvar openContract_1 = __webpack_require__(/*! ./contract/openContract */ \"(ssr)/./node_modules/@ton/core/dist/contract/openContract.js\");\nObject.defineProperty(exports, \"openContract\", ({\n    enumerable: true,\n    get: function() {\n        return openContract_1.openContract;\n    }\n}));\nvar ComputeError_1 = __webpack_require__(/*! ./contract/ComputeError */ \"(ssr)/./node_modules/@ton/core/dist/contract/ComputeError.js\");\nObject.defineProperty(exports, \"ComputeError\", ({\n    enumerable: true,\n    get: function() {\n        return ComputeError_1.ComputeError;\n    }\n}));\n// Utility\nvar convert_1 = __webpack_require__(/*! ./utils/convert */ \"(ssr)/./node_modules/@ton/core/dist/utils/convert.js\");\nObject.defineProperty(exports, \"toNano\", ({\n    enumerable: true,\n    get: function() {\n        return convert_1.toNano;\n    }\n}));\nObject.defineProperty(exports, \"fromNano\", ({\n    enumerable: true,\n    get: function() {\n        return convert_1.fromNano;\n    }\n}));\nvar crc16_1 = __webpack_require__(/*! ./utils/crc16 */ \"(ssr)/./node_modules/@ton/core/dist/utils/crc16.js\");\nObject.defineProperty(exports, \"crc16\", ({\n    enumerable: true,\n    get: function() {\n        return crc16_1.crc16;\n    }\n}));\nvar crc32c_1 = __webpack_require__(/*! ./utils/crc32c */ \"(ssr)/./node_modules/@ton/core/dist/utils/crc32c.js\");\nObject.defineProperty(exports, \"crc32c\", ({\n    enumerable: true,\n    get: function() {\n        return crc32c_1.crc32c;\n    }\n}));\nvar base32_1 = __webpack_require__(/*! ./utils/base32 */ \"(ssr)/./node_modules/@ton/core/dist/utils/base32.js\");\nObject.defineProperty(exports, \"base32Decode\", ({\n    enumerable: true,\n    get: function() {\n        return base32_1.base32Decode;\n    }\n}));\nObject.defineProperty(exports, \"base32Encode\", ({\n    enumerable: true,\n    get: function() {\n        return base32_1.base32Encode;\n    }\n}));\nvar getMethodId_1 = __webpack_require__(/*! ./utils/getMethodId */ \"(ssr)/./node_modules/@ton/core/dist/utils/getMethodId.js\");\nObject.defineProperty(exports, \"getMethodId\", ({\n    enumerable: true,\n    get: function() {\n        return getMethodId_1.getMethodId;\n    }\n}));\n// Crypto\nvar safeSign_1 = __webpack_require__(/*! ./crypto/safeSign */ \"(ssr)/./node_modules/@ton/core/dist/crypto/safeSign.js\");\nObject.defineProperty(exports, \"safeSign\", ({\n    enumerable: true,\n    get: function() {\n        return safeSign_1.safeSign;\n    }\n}));\nObject.defineProperty(exports, \"safeSignVerify\", ({\n    enumerable: true,\n    get: function() {\n        return safeSign_1.safeSignVerify;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/tuple/builder.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/builder.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TupleBuilder = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst Cell_1 = __webpack_require__(/*! ../boc/Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nconst Slice_1 = __webpack_require__(/*! ../boc/Slice */ \"(ssr)/./node_modules/@ton/core/dist/boc/Slice.js\");\nclass TupleBuilder {\n    constructor(){\n        this._tuple = [];\n    }\n    writeNumber(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"int\",\n                value: BigInt(v)\n            });\n        }\n    }\n    writeBoolean(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"int\",\n                value: v ? -1n : 0n\n            });\n        }\n    }\n    writeBuffer(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"slice\",\n                cell: (0, Builder_1.beginCell)().storeBuffer(v).endCell()\n            });\n        }\n    }\n    writeString(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"slice\",\n                cell: (0, Builder_1.beginCell)().storeStringTail(v).endCell()\n            });\n        }\n    }\n    writeCell(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({\n                    type: \"cell\",\n                    cell: v\n                });\n            } else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({\n                    type: \"cell\",\n                    cell: v.asCell()\n                });\n            }\n        }\n    }\n    writeSlice(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({\n                    type: \"slice\",\n                    cell: v\n                });\n            } else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({\n                    type: \"slice\",\n                    cell: v.asCell()\n                });\n            }\n        }\n    }\n    writeBuilder(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({\n                    type: \"builder\",\n                    cell: v\n                });\n            } else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({\n                    type: \"builder\",\n                    cell: v.asCell()\n                });\n            }\n        }\n    }\n    writeTuple(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"tuple\",\n                items: v\n            });\n        }\n    }\n    writeAddress(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({\n                type: \"null\"\n            });\n        } else {\n            this._tuple.push({\n                type: \"slice\",\n                cell: (0, Builder_1.beginCell)().storeAddress(v).endCell()\n            });\n        }\n    }\n    build() {\n        return [\n            ...this._tuple\n        ];\n    }\n}\nexports.TupleBuilder = TupleBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/tuple/builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/tuple/reader.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/reader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TupleReader = void 0;\nclass TupleReader {\n    constructor(items){\n        this.items = [\n            ...items\n        ];\n    }\n    get remaining() {\n        return this.items.length;\n    }\n    peek() {\n        if (this.items.length === 0) {\n            throw Error(\"EOF\");\n        }\n        return this.items[0];\n    }\n    pop() {\n        if (this.items.length === 0) {\n            throw Error(\"EOF\");\n        }\n        let res = this.items[0];\n        this.items.splice(0, 1);\n        return res;\n    }\n    skip(num = 1) {\n        for(let i = 0; i < num; i++){\n            this.pop();\n        }\n        return this;\n    }\n    readBigNumber() {\n        let popped = this.pop();\n        if (popped.type !== \"int\") {\n            throw Error(\"Not a number\");\n        }\n        return popped.value;\n    }\n    readBigNumberOpt() {\n        let popped = this.pop();\n        if (popped.type === \"null\") {\n            return null;\n        }\n        if (popped.type !== \"int\") {\n            throw Error(\"Not a number\");\n        }\n        return popped.value;\n    }\n    readNumber() {\n        return Number(this.readBigNumber());\n    }\n    readNumberOpt() {\n        let r = this.readBigNumberOpt();\n        if (r !== null) {\n            return Number(r);\n        } else {\n            return null;\n        }\n    }\n    readBoolean() {\n        let res = this.readNumber();\n        return res === 0 ? false : true;\n    }\n    readBooleanOpt() {\n        let res = this.readNumberOpt();\n        if (res !== null) {\n            return res === 0 ? false : true;\n        } else {\n            return null;\n        }\n    }\n    readAddress() {\n        let r = this.readCell().beginParse().loadAddress();\n        if (r !== null) {\n            return r;\n        } else {\n            throw Error(\"Not an address\");\n        }\n    }\n    readAddressOpt() {\n        let r = this.readCellOpt();\n        if (r !== null) {\n            return r.beginParse().loadMaybeAddress();\n        } else {\n            return null;\n        }\n    }\n    readCell() {\n        let popped = this.pop();\n        if (popped.type !== \"cell\" && popped.type !== \"slice\" && popped.type !== \"builder\") {\n            throw Error(\"Not a cell: \" + popped.type);\n        }\n        return popped.cell;\n    }\n    readCellOpt() {\n        let popped = this.pop();\n        if (popped.type === \"null\") {\n            return null;\n        }\n        if (popped.type !== \"cell\" && popped.type !== \"slice\" && popped.type !== \"builder\") {\n            throw Error(\"Not a cell\");\n        }\n        return popped.cell;\n    }\n    readTuple() {\n        let popped = this.pop();\n        if (popped.type !== \"tuple\") {\n            throw Error(\"Not a tuple\");\n        }\n        return new TupleReader(popped.items);\n    }\n    readTupleOpt() {\n        let popped = this.pop();\n        if (popped.type === \"null\") {\n            return null;\n        }\n        if (popped.type !== \"tuple\") {\n            throw Error(\"Not a tuple\");\n        }\n        return new TupleReader(popped.items);\n    }\n    static readLispList(reader) {\n        const result = [];\n        let tail = reader;\n        while(tail !== null){\n            var head = tail.pop();\n            if (tail.items.length === 0 || tail.items[0].type !== \"tuple\" && tail.items[0].type !== \"null\") {\n                throw Error(\"Lisp list consists only from (any, tuple) elements and ends with null\");\n            }\n            tail = tail.readTupleOpt();\n            result.push(head);\n        }\n        return result;\n    }\n    readLispListDirect() {\n        if (this.items.length === 1 && this.items[0].type === \"null\") {\n            return [];\n        }\n        return TupleReader.readLispList(this);\n    }\n    readLispList() {\n        return TupleReader.readLispList(this.readTupleOpt());\n    }\n    readBuffer() {\n        let s = this.readCell().beginParse();\n        if (s.remainingRefs !== 0) {\n            throw Error(\"Not a buffer\");\n        }\n        if (s.remainingBits % 8 !== 0) {\n            throw Error(\"Not a buffer\");\n        }\n        return s.loadBuffer(s.remainingBits / 8);\n    }\n    readBufferOpt() {\n        let popped = this.peek();\n        if (popped.type === \"null\") {\n            return null;\n        }\n        let s = this.readCell().beginParse();\n        if (s.remainingRefs !== 0) {\n            throw Error(\"Not a buffer\");\n        }\n        if (s.remainingBits % 8 !== 0) {\n            throw Error(\"Not a buffer\");\n        }\n        return s.loadBuffer(s.remainingBits / 8);\n    }\n    readString() {\n        let s = this.readCell().beginParse();\n        return s.loadStringTail();\n    }\n    readStringOpt() {\n        let popped = this.peek();\n        if (popped.type === \"null\") {\n            return null;\n        }\n        let s = this.readCell().beginParse();\n        return s.loadStringTail();\n    }\n}\nexports.TupleReader = TupleReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/tuple/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/tuple/tuple.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/tuple.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseTuple = exports.serializeTuple = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst INT64_MIN = BigInt(\"-9223372036854775808\");\nconst INT64_MAX = BigInt(\"9223372036854775807\");\n// vm_stk_null#00 = VmStackValue;\n// vm_stk_tinyint#01 value:int64 = VmStackValue;\n// vm_stk_int#0201_ value:int257 = VmStackValue;\n// vm_stk_nan#02ff = VmStackValue;\n// vm_stk_cell#03 cell:^Cell = VmStackValue;\n//_ cell:^Cell st_bits:(## 10) end_bits:(## 10) { st_bits <= end_bits }\n//   st_ref:(#<= 4) end_ref:(#<= 4) { st_ref <= end_ref } = VmCellSlice;\n// vm_stk_slice#04 _:VmCellSlice = VmStackValue;\n// vm_stk_builder#05 cell:^Cell = VmStackValue;\n// vm_stk_cont#06 cont:VmCont = VmStackValue;\n// vm_tupref_nil$_ = VmTupleRef 0;\n// vm_tupref_single$_ entry:^VmStackValue = VmTupleRef 1;\n// vm_tupref_any$_ {n:#} ref:^(VmTuple (n + 2)) = VmTupleRef (n + 2);\n// vm_tuple_nil$_ = VmTuple 0;\n// vm_tuple_tcons$_ {n:#} head:(VmTupleRef n) tail:^VmStackValue = VmTuple (n + 1);\n// vm_stk_tuple#07 len:(## 16) data:(VmTuple len) = VmStackValue;\nfunction serializeTupleItem(src, builder) {\n    if (src.type === \"null\") {\n        builder.storeUint(0x00, 8);\n    } else if (src.type === \"int\") {\n        if (src.value <= INT64_MAX && src.value >= INT64_MIN) {\n            builder.storeUint(0x01, 8);\n            builder.storeInt(src.value, 64);\n        } else {\n            builder.storeUint(0x0100, 15);\n            builder.storeInt(src.value, 257);\n        }\n    } else if (src.type === \"nan\") {\n        builder.storeInt(0x02ff, 16);\n    } else if (src.type === \"cell\") {\n        builder.storeUint(0x03, 8);\n        builder.storeRef(src.cell);\n    } else if (src.type === \"slice\") {\n        builder.storeUint(0x04, 8);\n        builder.storeUint(0, 10);\n        builder.storeUint(src.cell.bits.length, 10);\n        builder.storeUint(0, 3);\n        builder.storeUint(src.cell.refs.length, 3);\n        builder.storeRef(src.cell);\n    } else if (src.type === \"builder\") {\n        builder.storeUint(0x05, 8);\n        builder.storeRef(src.cell);\n    } else if (src.type === \"tuple\") {\n        let head = null;\n        let tail = null;\n        for(let i = 0; i < src.items.length; i++){\n            // Swap\n            let s = head;\n            head = tail;\n            tail = s;\n            if (i > 1) {\n                head = (0, Builder_1.beginCell)().storeRef(tail).storeRef(head).endCell();\n            }\n            let bc = (0, Builder_1.beginCell)();\n            serializeTupleItem(src.items[i], bc);\n            tail = bc.endCell();\n        }\n        builder.storeUint(0x07, 8);\n        builder.storeUint(src.items.length, 16);\n        if (head) {\n            builder.storeRef(head);\n        }\n        if (tail) {\n            builder.storeRef(tail);\n        }\n    } else {\n        throw Error(\"Invalid value\");\n    }\n}\nfunction parseStackItem(cs) {\n    let kind = cs.loadUint(8);\n    if (kind === 0) {\n        return {\n            type: \"null\"\n        };\n    } else if (kind === 1) {\n        return {\n            type: \"int\",\n            value: cs.loadIntBig(64)\n        };\n    } else if (kind === 2) {\n        if (cs.loadUint(7) === 0) {\n            return {\n                type: \"int\",\n                value: cs.loadIntBig(257)\n            };\n        } else {\n            cs.loadBit(); // must eq 1\n            return {\n                type: \"nan\"\n            };\n        }\n    } else if (kind === 3) {\n        return {\n            type: \"cell\",\n            cell: cs.loadRef()\n        };\n    } else if (kind === 4) {\n        let startBits = cs.loadUint(10);\n        let endBits = cs.loadUint(10);\n        let startRefs = cs.loadUint(3);\n        let endRefs = cs.loadUint(3);\n        // Copy to new cell\n        let rs = cs.loadRef().beginParse();\n        rs.skip(startBits);\n        let dt = rs.loadBits(endBits - startBits);\n        let builder = (0, Builder_1.beginCell)().storeBits(dt);\n        // Copy refs if exist\n        if (startRefs < endRefs) {\n            for(let i = 0; i < startRefs; i++){\n                rs.loadRef();\n            }\n            for(let i = 0; i < endRefs - startRefs; i++){\n                builder.storeRef(rs.loadRef());\n            }\n        }\n        return {\n            type: \"slice\",\n            cell: builder.endCell()\n        };\n    } else if (kind === 5) {\n        return {\n            type: \"builder\",\n            cell: cs.loadRef()\n        };\n    } else if (kind === 7) {\n        let length = cs.loadUint(16);\n        let items = [];\n        if (length > 1) {\n            let head = cs.loadRef().beginParse();\n            let tail = cs.loadRef().beginParse();\n            items.unshift(parseStackItem(tail));\n            for(let i = 0; i < length - 2; i++){\n                let ohead = head;\n                head = ohead.loadRef().beginParse();\n                tail = ohead.loadRef().beginParse();\n                items.unshift(parseStackItem(tail));\n            }\n            items.unshift(parseStackItem(head));\n        } else if (length === 1) {\n            items.push(parseStackItem(cs.loadRef().beginParse()));\n        }\n        return {\n            type: \"tuple\",\n            items\n        };\n    } else {\n        throw Error(\"Unsupported stack item\");\n    }\n}\n//\n// Stack parsing\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L783\n//\n// vm_stack#_ depth:(## 24) stack:(VmStackList depth) = VmStack;\n// vm_stk_cons#_ {n:#} rest:^(VmStackList n) tos:VmStackValue = VmStackList (n + 1);\n// vm_stk_nil#_ = VmStackList 0;\n//\nfunction serializeTupleTail(src, builder) {\n    if (src.length > 0) {\n        // rest:^(VmStackList n)\n        let tail = (0, Builder_1.beginCell)();\n        serializeTupleTail(src.slice(0, src.length - 1), tail);\n        builder.storeRef(tail.endCell());\n        // tos\n        serializeTupleItem(src[src.length - 1], builder);\n    }\n}\nfunction serializeTuple(src) {\n    let builder = (0, Builder_1.beginCell)();\n    builder.storeUint(src.length, 24);\n    let r = [\n        ...src\n    ];\n    serializeTupleTail(r, builder);\n    return builder.endCell();\n}\nexports.serializeTuple = serializeTuple;\nfunction parseTuple(src) {\n    let res = [];\n    let cs = src.beginParse();\n    let size = cs.loadUint(24);\n    for(let i = 0; i < size; i++){\n        let next = cs.loadRef();\n        res.unshift(parseStackItem(cs));\n        cs = next.beginParse();\n    }\n    return res;\n}\nexports.parseTuple = parseTuple;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHVwbGUvdHVwbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ25ELE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUMxQyxNQUFNQyxZQUFZQyxPQUFPO0FBQ3pCLE1BQU1DLFlBQVlELE9BQU87QUFDekIsaUNBQWlDO0FBQ2pDLGdEQUFnRDtBQUNoRCxnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDRDQUE0QztBQUM1Qyx1RUFBdUU7QUFDdkUsd0VBQXdFO0FBQ3hFLGdEQUFnRDtBQUNoRCwrQ0FBK0M7QUFDL0MsNkNBQTZDO0FBQzdDLGtDQUFrQztBQUNsQyx5REFBeUQ7QUFDekQscUVBQXFFO0FBQ3JFLDhCQUE4QjtBQUM5QixtRkFBbUY7QUFDbkYsaUVBQWlFO0FBQ2pFLFNBQVNFLG1CQUFtQkMsR0FBRyxFQUFFQyxPQUFPO0lBQ3BDLElBQUlELElBQUlFLElBQUksS0FBSyxRQUFRO1FBQ3JCRCxRQUFRRSxTQUFTLENBQUMsTUFBTTtJQUM1QixPQUNLLElBQUlILElBQUlFLElBQUksS0FBSyxPQUFPO1FBQ3pCLElBQUlGLElBQUlULEtBQUssSUFBSU8sYUFBYUUsSUFBSVQsS0FBSyxJQUFJSyxXQUFXO1lBQ2xESyxRQUFRRSxTQUFTLENBQUMsTUFBTTtZQUN4QkYsUUFBUUcsUUFBUSxDQUFDSixJQUFJVCxLQUFLLEVBQUU7UUFDaEMsT0FDSztZQUNEVSxRQUFRRSxTQUFTLENBQUMsUUFBUTtZQUMxQkYsUUFBUUcsUUFBUSxDQUFDSixJQUFJVCxLQUFLLEVBQUU7UUFDaEM7SUFDSixPQUNLLElBQUlTLElBQUlFLElBQUksS0FBSyxPQUFPO1FBQ3pCRCxRQUFRRyxRQUFRLENBQUMsUUFBUTtJQUM3QixPQUNLLElBQUlKLElBQUlFLElBQUksS0FBSyxRQUFRO1FBQzFCRCxRQUFRRSxTQUFTLENBQUMsTUFBTTtRQUN4QkYsUUFBUUksUUFBUSxDQUFDTCxJQUFJTSxJQUFJO0lBQzdCLE9BQ0ssSUFBSU4sSUFBSUUsSUFBSSxLQUFLLFNBQVM7UUFDM0JELFFBQVFFLFNBQVMsQ0FBQyxNQUFNO1FBQ3hCRixRQUFRRSxTQUFTLENBQUMsR0FBRztRQUNyQkYsUUFBUUUsU0FBUyxDQUFDSCxJQUFJTSxJQUFJLENBQUNDLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1FBQ3hDUCxRQUFRRSxTQUFTLENBQUMsR0FBRztRQUNyQkYsUUFBUUUsU0FBUyxDQUFDSCxJQUFJTSxJQUFJLENBQUNHLElBQUksQ0FBQ0QsTUFBTSxFQUFFO1FBQ3hDUCxRQUFRSSxRQUFRLENBQUNMLElBQUlNLElBQUk7SUFDN0IsT0FDSyxJQUFJTixJQUFJRSxJQUFJLEtBQUssV0FBVztRQUM3QkQsUUFBUUUsU0FBUyxDQUFDLE1BQU07UUFDeEJGLFFBQVFJLFFBQVEsQ0FBQ0wsSUFBSU0sSUFBSTtJQUM3QixPQUNLLElBQUlOLElBQUlFLElBQUksS0FBSyxTQUFTO1FBQzNCLElBQUlRLE9BQU87UUFDWCxJQUFJQyxPQUFPO1FBQ1gsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlaLElBQUlhLEtBQUssQ0FBQ0wsTUFBTSxFQUFFSSxJQUFLO1lBQ3ZDLE9BQU87WUFDUCxJQUFJRSxJQUFJSjtZQUNSQSxPQUFPQztZQUNQQSxPQUFPRztZQUNQLElBQUlGLElBQUksR0FBRztnQkFDUEYsT0FBTyxDQUFDLEdBQUdoQixVQUFVcUIsU0FBUyxJQUN6QlYsUUFBUSxDQUFDTSxNQUNUTixRQUFRLENBQUNLLE1BQ1RNLE9BQU87WUFDaEI7WUFDQSxJQUFJQyxLQUFLLENBQUMsR0FBR3ZCLFVBQVVxQixTQUFTO1lBQ2hDaEIsbUJBQW1CQyxJQUFJYSxLQUFLLENBQUNELEVBQUUsRUFBRUs7WUFDakNOLE9BQU9NLEdBQUdELE9BQU87UUFDckI7UUFDQWYsUUFBUUUsU0FBUyxDQUFDLE1BQU07UUFDeEJGLFFBQVFFLFNBQVMsQ0FBQ0gsSUFBSWEsS0FBSyxDQUFDTCxNQUFNLEVBQUU7UUFDcEMsSUFBSUUsTUFBTTtZQUNOVCxRQUFRSSxRQUFRLENBQUNLO1FBQ3JCO1FBQ0EsSUFBSUMsTUFBTTtZQUNOVixRQUFRSSxRQUFRLENBQUNNO1FBQ3JCO0lBQ0osT0FDSztRQUNELE1BQU1PLE1BQU07SUFDaEI7QUFDSjtBQUNBLFNBQVNDLGVBQWVDLEVBQUU7SUFDdEIsSUFBSUMsT0FBT0QsR0FBR0UsUUFBUSxDQUFDO0lBQ3ZCLElBQUlELFNBQVMsR0FBRztRQUNaLE9BQU87WUFBRW5CLE1BQU07UUFBTztJQUMxQixPQUNLLElBQUltQixTQUFTLEdBQUc7UUFDakIsT0FBTztZQUFFbkIsTUFBTTtZQUFPWCxPQUFPNkIsR0FBR0csVUFBVSxDQUFDO1FBQUk7SUFDbkQsT0FDSyxJQUFJRixTQUFTLEdBQUc7UUFDakIsSUFBSUQsR0FBR0UsUUFBUSxDQUFDLE9BQU8sR0FBRztZQUN0QixPQUFPO2dCQUFFcEIsTUFBTTtnQkFBT1gsT0FBTzZCLEdBQUdHLFVBQVUsQ0FBQztZQUFLO1FBQ3BELE9BQ0s7WUFDREgsR0FBR0ksT0FBTyxJQUFJLFlBQVk7WUFDMUIsT0FBTztnQkFBRXRCLE1BQU07WUFBTTtRQUN6QjtJQUNKLE9BQ0ssSUFBSW1CLFNBQVMsR0FBRztRQUNqQixPQUFPO1lBQUVuQixNQUFNO1lBQVFJLE1BQU1jLEdBQUdLLE9BQU87UUFBRztJQUM5QyxPQUNLLElBQUlKLFNBQVMsR0FBRztRQUNqQixJQUFJSyxZQUFZTixHQUFHRSxRQUFRLENBQUM7UUFDNUIsSUFBSUssVUFBVVAsR0FBR0UsUUFBUSxDQUFDO1FBQzFCLElBQUlNLFlBQVlSLEdBQUdFLFFBQVEsQ0FBQztRQUM1QixJQUFJTyxVQUFVVCxHQUFHRSxRQUFRLENBQUM7UUFDMUIsbUJBQW1CO1FBQ25CLElBQUlRLEtBQUtWLEdBQUdLLE9BQU8sR0FBR00sVUFBVTtRQUNoQ0QsR0FBR0UsSUFBSSxDQUFDTjtRQUNSLElBQUlPLEtBQUtILEdBQUdJLFFBQVEsQ0FBQ1AsVUFBVUQ7UUFDL0IsSUFBSXpCLFVBQVUsQ0FBQyxHQUFHUCxVQUFVcUIsU0FBUyxJQUNoQ29CLFNBQVMsQ0FBQ0Y7UUFDZixxQkFBcUI7UUFDckIsSUFBSUwsWUFBWUMsU0FBUztZQUNyQixJQUFLLElBQUlqQixJQUFJLEdBQUdBLElBQUlnQixXQUFXaEIsSUFBSztnQkFDaENrQixHQUFHTCxPQUFPO1lBQ2Q7WUFDQSxJQUFLLElBQUliLElBQUksR0FBR0EsSUFBSWlCLFVBQVVELFdBQVdoQixJQUFLO2dCQUMxQ1gsUUFBUUksUUFBUSxDQUFDeUIsR0FBR0wsT0FBTztZQUMvQjtRQUNKO1FBQ0EsT0FBTztZQUFFdkIsTUFBTTtZQUFTSSxNQUFNTCxRQUFRZSxPQUFPO1FBQUc7SUFDcEQsT0FDSyxJQUFJSyxTQUFTLEdBQUc7UUFDakIsT0FBTztZQUFFbkIsTUFBTTtZQUFXSSxNQUFNYyxHQUFHSyxPQUFPO1FBQUc7SUFDakQsT0FDSyxJQUFJSixTQUFTLEdBQUc7UUFDakIsSUFBSWIsU0FBU1ksR0FBR0UsUUFBUSxDQUFDO1FBQ3pCLElBQUlULFFBQVEsRUFBRTtRQUNkLElBQUlMLFNBQVMsR0FBRztZQUNaLElBQUlFLE9BQU9VLEdBQUdLLE9BQU8sR0FBR00sVUFBVTtZQUNsQyxJQUFJcEIsT0FBT1MsR0FBR0ssT0FBTyxHQUFHTSxVQUFVO1lBQ2xDbEIsTUFBTXVCLE9BQU8sQ0FBQ2pCLGVBQWVSO1lBQzdCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixTQUFTLEdBQUdJLElBQUs7Z0JBQ2pDLElBQUl5QixRQUFRM0I7Z0JBQ1pBLE9BQU8yQixNQUFNWixPQUFPLEdBQUdNLFVBQVU7Z0JBQ2pDcEIsT0FBTzBCLE1BQU1aLE9BQU8sR0FBR00sVUFBVTtnQkFDakNsQixNQUFNdUIsT0FBTyxDQUFDakIsZUFBZVI7WUFDakM7WUFDQUUsTUFBTXVCLE9BQU8sQ0FBQ2pCLGVBQWVUO1FBQ2pDLE9BQ0ssSUFBSUYsV0FBVyxHQUFHO1lBQ25CSyxNQUFNeUIsSUFBSSxDQUFDbkIsZUFBZUMsR0FBR0ssT0FBTyxHQUFHTSxVQUFVO1FBQ3JEO1FBQ0EsT0FBTztZQUFFN0IsTUFBTTtZQUFTVztRQUFNO0lBQ2xDLE9BQ0s7UUFDRCxNQUFNSyxNQUFNO0lBQ2hCO0FBQ0o7QUFDQSxFQUFFO0FBQ0YsZ0JBQWdCO0FBQ2hCLDBIQUEwSDtBQUMxSCxFQUFFO0FBQ0YsZ0VBQWdFO0FBQ2hFLG9GQUFvRjtBQUNwRixnQ0FBZ0M7QUFDaEMsRUFBRTtBQUNGLFNBQVNxQixtQkFBbUJ2QyxHQUFHLEVBQUVDLE9BQU87SUFDcEMsSUFBSUQsSUFBSVEsTUFBTSxHQUFHLEdBQUc7UUFDaEIsd0JBQXdCO1FBQ3hCLElBQUlHLE9BQU8sQ0FBQyxHQUFHakIsVUFBVXFCLFNBQVM7UUFDbEN3QixtQkFBbUJ2QyxJQUFJd0MsS0FBSyxDQUFDLEdBQUd4QyxJQUFJUSxNQUFNLEdBQUcsSUFBSUc7UUFDakRWLFFBQVFJLFFBQVEsQ0FBQ00sS0FBS0ssT0FBTztRQUM3QixNQUFNO1FBQ05qQixtQkFBbUJDLEdBQUcsQ0FBQ0EsSUFBSVEsTUFBTSxHQUFHLEVBQUUsRUFBRVA7SUFDNUM7QUFDSjtBQUNBLFNBQVNSLGVBQWVPLEdBQUc7SUFDdkIsSUFBSUMsVUFBVSxDQUFDLEdBQUdQLFVBQVVxQixTQUFTO0lBQ3JDZCxRQUFRRSxTQUFTLENBQUNILElBQUlRLE1BQU0sRUFBRTtJQUM5QixJQUFJaUMsSUFBSTtXQUFJekM7S0FBSTtJQUNoQnVDLG1CQUFtQkUsR0FBR3hDO0lBQ3RCLE9BQU9BLFFBQVFlLE9BQU87QUFDMUI7QUFDQTFCLHNCQUFzQixHQUFHRztBQUN6QixTQUFTRCxXQUFXUSxHQUFHO0lBQ25CLElBQUkwQyxNQUFNLEVBQUU7SUFDWixJQUFJdEIsS0FBS3BCLElBQUkrQixVQUFVO0lBQ3ZCLElBQUlZLE9BQU92QixHQUFHRSxRQUFRLENBQUM7SUFDdkIsSUFBSyxJQUFJVixJQUFJLEdBQUdBLElBQUkrQixNQUFNL0IsSUFBSztRQUMzQixJQUFJZ0MsT0FBT3hCLEdBQUdLLE9BQU87UUFDckJpQixJQUFJTixPQUFPLENBQUNqQixlQUFlQztRQUMzQkEsS0FBS3dCLEtBQUtiLFVBQVU7SUFDeEI7SUFDQSxPQUFPVztBQUNYO0FBQ0FwRCxrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3R1cGxlL3R1cGxlLmpzPzYyNjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlVHVwbGUgPSBleHBvcnRzLnNlcmlhbGl6ZVR1cGxlID0gdm9pZCAwO1xuY29uc3QgQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL2JvYy9CdWlsZGVyXCIpO1xuY29uc3QgSU5UNjRfTUlOID0gQmlnSW50KCctOTIyMzM3MjAzNjg1NDc3NTgwOCcpO1xuY29uc3QgSU5UNjRfTUFYID0gQmlnSW50KCc5MjIzMzcyMDM2ODU0Nzc1ODA3Jyk7XG4vLyB2bV9zdGtfbnVsbCMwMCA9IFZtU3RhY2tWYWx1ZTtcbi8vIHZtX3N0a190aW55aW50IzAxIHZhbHVlOmludDY0ID0gVm1TdGFja1ZhbHVlO1xuLy8gdm1fc3RrX2ludCMwMjAxXyB2YWx1ZTppbnQyNTcgPSBWbVN0YWNrVmFsdWU7XG4vLyB2bV9zdGtfbmFuIzAyZmYgPSBWbVN0YWNrVmFsdWU7XG4vLyB2bV9zdGtfY2VsbCMwMyBjZWxsOl5DZWxsID0gVm1TdGFja1ZhbHVlO1xuLy9fIGNlbGw6XkNlbGwgc3RfYml0czooIyMgMTApIGVuZF9iaXRzOigjIyAxMCkgeyBzdF9iaXRzIDw9IGVuZF9iaXRzIH1cbi8vICAgc3RfcmVmOigjPD0gNCkgZW5kX3JlZjooIzw9IDQpIHsgc3RfcmVmIDw9IGVuZF9yZWYgfSA9IFZtQ2VsbFNsaWNlO1xuLy8gdm1fc3RrX3NsaWNlIzA0IF86Vm1DZWxsU2xpY2UgPSBWbVN0YWNrVmFsdWU7XG4vLyB2bV9zdGtfYnVpbGRlciMwNSBjZWxsOl5DZWxsID0gVm1TdGFja1ZhbHVlO1xuLy8gdm1fc3RrX2NvbnQjMDYgY29udDpWbUNvbnQgPSBWbVN0YWNrVmFsdWU7XG4vLyB2bV90dXByZWZfbmlsJF8gPSBWbVR1cGxlUmVmIDA7XG4vLyB2bV90dXByZWZfc2luZ2xlJF8gZW50cnk6XlZtU3RhY2tWYWx1ZSA9IFZtVHVwbGVSZWYgMTtcbi8vIHZtX3R1cHJlZl9hbnkkXyB7bjojfSByZWY6XihWbVR1cGxlIChuICsgMikpID0gVm1UdXBsZVJlZiAobiArIDIpO1xuLy8gdm1fdHVwbGVfbmlsJF8gPSBWbVR1cGxlIDA7XG4vLyB2bV90dXBsZV90Y29ucyRfIHtuOiN9IGhlYWQ6KFZtVHVwbGVSZWYgbikgdGFpbDpeVm1TdGFja1ZhbHVlID0gVm1UdXBsZSAobiArIDEpO1xuLy8gdm1fc3RrX3R1cGxlIzA3IGxlbjooIyMgMTYpIGRhdGE6KFZtVHVwbGUgbGVuKSA9IFZtU3RhY2tWYWx1ZTtcbmZ1bmN0aW9uIHNlcmlhbGl6ZVR1cGxlSXRlbShzcmMsIGJ1aWxkZXIpIHtcbiAgICBpZiAoc3JjLnR5cGUgPT09ICdudWxsJykge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgweDAwLCA4KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3JjLnR5cGUgPT09ICdpbnQnKSB7XG4gICAgICAgIGlmIChzcmMudmFsdWUgPD0gSU5UNjRfTUFYICYmIHNyYy52YWx1ZSA+PSBJTlQ2NF9NSU4pIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDEsIDgpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUludChzcmMudmFsdWUsIDY0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDEwMCwgMTUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUludChzcmMudmFsdWUsIDI1Nyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc3JjLnR5cGUgPT09ICduYW4nKSB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVJbnQoMHgwMmZmLCAxNik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNyYy50eXBlID09PSAnY2VsbCcpIHtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoMHgwMywgOCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVSZWYoc3JjLmNlbGwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzcmMudHlwZSA9PT0gJ3NsaWNlJykge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgweDA0LCA4KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoMCwgMTApO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMuY2VsbC5iaXRzLmxlbmd0aCwgMTApO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgwLCAzKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLmNlbGwucmVmcy5sZW5ndGgsIDMpO1xuICAgICAgICBidWlsZGVyLnN0b3JlUmVmKHNyYy5jZWxsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3JjLnR5cGUgPT09ICdidWlsZGVyJykge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgweDA1LCA4KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVJlZihzcmMuY2VsbCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNyYy50eXBlID09PSAndHVwbGUnKSB7XG4gICAgICAgIGxldCBoZWFkID0gbnVsbDtcbiAgICAgICAgbGV0IHRhaWwgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyYy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gU3dhcFxuICAgICAgICAgICAgbGV0IHMgPSBoZWFkO1xuICAgICAgICAgICAgaGVhZCA9IHRhaWw7XG4gICAgICAgICAgICB0YWlsID0gcztcbiAgICAgICAgICAgIGlmIChpID4gMSkge1xuICAgICAgICAgICAgICAgIGhlYWQgPSAoMCwgQnVpbGRlcl8xLmJlZ2luQ2VsbCkoKVxuICAgICAgICAgICAgICAgICAgICAuc3RvcmVSZWYodGFpbClcbiAgICAgICAgICAgICAgICAgICAgLnN0b3JlUmVmKGhlYWQpXG4gICAgICAgICAgICAgICAgICAgIC5lbmRDZWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYmMgPSAoMCwgQnVpbGRlcl8xLmJlZ2luQ2VsbCkoKTtcbiAgICAgICAgICAgIHNlcmlhbGl6ZVR1cGxlSXRlbShzcmMuaXRlbXNbaV0sIGJjKTtcbiAgICAgICAgICAgIHRhaWwgPSBiYy5lbmRDZWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoMHgwNywgOCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5pdGVtcy5sZW5ndGgsIDE2KTtcbiAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVSZWYoaGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhaWwpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVSZWYodGFpbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHZhbHVlJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VTdGFja0l0ZW0oY3MpIHtcbiAgICBsZXQga2luZCA9IGNzLmxvYWRVaW50KDgpO1xuICAgIGlmIChraW5kID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdudWxsJyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChraW5kID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdpbnQnLCB2YWx1ZTogY3MubG9hZEludEJpZyg2NCkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2luZCA9PT0gMikge1xuICAgICAgICBpZiAoY3MubG9hZFVpbnQoNykgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdpbnQnLCB2YWx1ZTogY3MubG9hZEludEJpZygyNTcpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjcy5sb2FkQml0KCk7IC8vIG11c3QgZXEgMVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ25hbicgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChraW5kID09PSAzKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdjZWxsJywgY2VsbDogY3MubG9hZFJlZigpIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGtpbmQgPT09IDQpIHtcbiAgICAgICAgbGV0IHN0YXJ0Qml0cyA9IGNzLmxvYWRVaW50KDEwKTtcbiAgICAgICAgbGV0IGVuZEJpdHMgPSBjcy5sb2FkVWludCgxMCk7XG4gICAgICAgIGxldCBzdGFydFJlZnMgPSBjcy5sb2FkVWludCgzKTtcbiAgICAgICAgbGV0IGVuZFJlZnMgPSBjcy5sb2FkVWludCgzKTtcbiAgICAgICAgLy8gQ29weSB0byBuZXcgY2VsbFxuICAgICAgICBsZXQgcnMgPSBjcy5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpO1xuICAgICAgICBycy5za2lwKHN0YXJ0Qml0cyk7XG4gICAgICAgIGxldCBkdCA9IHJzLmxvYWRCaXRzKGVuZEJpdHMgLSBzdGFydEJpdHMpO1xuICAgICAgICBsZXQgYnVpbGRlciA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgICAgICAuc3RvcmVCaXRzKGR0KTtcbiAgICAgICAgLy8gQ29weSByZWZzIGlmIGV4aXN0XG4gICAgICAgIGlmIChzdGFydFJlZnMgPCBlbmRSZWZzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJ0UmVmczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcnMubG9hZFJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmRSZWZzIC0gc3RhcnRSZWZzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnN0b3JlUmVmKHJzLmxvYWRSZWYoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3NsaWNlJywgY2VsbDogYnVpbGRlci5lbmRDZWxsKCkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2luZCA9PT0gNSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAnYnVpbGRlcicsIGNlbGw6IGNzLmxvYWRSZWYoKSB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChraW5kID09PSA3KSB7XG4gICAgICAgIGxldCBsZW5ndGggPSBjcy5sb2FkVWludCgxNik7XG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IGhlYWQgPSBjcy5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpO1xuICAgICAgICAgICAgbGV0IHRhaWwgPSBjcy5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpO1xuICAgICAgICAgICAgaXRlbXMudW5zaGlmdChwYXJzZVN0YWNrSXRlbSh0YWlsKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBvaGVhZCA9IGhlYWQ7XG4gICAgICAgICAgICAgICAgaGVhZCA9IG9oZWFkLmxvYWRSZWYoKS5iZWdpblBhcnNlKCk7XG4gICAgICAgICAgICAgICAgdGFpbCA9IG9oZWFkLmxvYWRSZWYoKS5iZWdpblBhcnNlKCk7XG4gICAgICAgICAgICAgICAgaXRlbXMudW5zaGlmdChwYXJzZVN0YWNrSXRlbSh0YWlsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy51bnNoaWZ0KHBhcnNlU3RhY2tJdGVtKGhlYWQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gocGFyc2VTdGFja0l0ZW0oY3MubG9hZFJlZigpLmJlZ2luUGFyc2UoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICd0dXBsZScsIGl0ZW1zIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhY2sgaXRlbScpO1xuICAgIH1cbn1cbi8vXG4vLyBTdGFjayBwYXJzaW5nXG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS90b24tZm91bmRhdGlvbi90b24vYmxvYi9hZTVjMDcyMDE0M2UyMzFjMzJjM2QyMDM0Y2ZlNGU1MzNhMTZkOTY5L2NyeXB0by9ibG9jay9ibG9jay50bGIjTDc4M1xuLy9cbi8vIHZtX3N0YWNrI18gZGVwdGg6KCMjIDI0KSBzdGFjazooVm1TdGFja0xpc3QgZGVwdGgpID0gVm1TdGFjaztcbi8vIHZtX3N0a19jb25zI18ge246I30gcmVzdDpeKFZtU3RhY2tMaXN0IG4pIHRvczpWbVN0YWNrVmFsdWUgPSBWbVN0YWNrTGlzdCAobiArIDEpO1xuLy8gdm1fc3RrX25pbCNfID0gVm1TdGFja0xpc3QgMDtcbi8vXG5mdW5jdGlvbiBzZXJpYWxpemVUdXBsZVRhaWwoc3JjLCBidWlsZGVyKSB7XG4gICAgaWYgKHNyYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIHJlc3Q6XihWbVN0YWNrTGlzdCBuKVxuICAgICAgICBsZXQgdGFpbCA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpO1xuICAgICAgICBzZXJpYWxpemVUdXBsZVRhaWwoc3JjLnNsaWNlKDAsIHNyYy5sZW5ndGggLSAxKSwgdGFpbCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVSZWYodGFpbC5lbmRDZWxsKCkpO1xuICAgICAgICAvLyB0b3NcbiAgICAgICAgc2VyaWFsaXplVHVwbGVJdGVtKHNyY1tzcmMubGVuZ3RoIC0gMV0sIGJ1aWxkZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVR1cGxlKHNyYykge1xuICAgIGxldCBidWlsZGVyID0gKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKCk7XG4gICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLmxlbmd0aCwgMjQpO1xuICAgIGxldCByID0gWy4uLnNyY107XG4gICAgc2VyaWFsaXplVHVwbGVUYWlsKHIsIGJ1aWxkZXIpO1xuICAgIHJldHVybiBidWlsZGVyLmVuZENlbGwoKTtcbn1cbmV4cG9ydHMuc2VyaWFsaXplVHVwbGUgPSBzZXJpYWxpemVUdXBsZTtcbmZ1bmN0aW9uIHBhcnNlVHVwbGUoc3JjKSB7XG4gICAgbGV0IHJlcyA9IFtdO1xuICAgIGxldCBjcyA9IHNyYy5iZWdpblBhcnNlKCk7XG4gICAgbGV0IHNpemUgPSBjcy5sb2FkVWludCgyNCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgbGV0IG5leHQgPSBjcy5sb2FkUmVmKCk7XG4gICAgICAgIHJlcy51bnNoaWZ0KHBhcnNlU3RhY2tJdGVtKGNzKSk7XG4gICAgICAgIGNzID0gbmV4dC5iZWdpblBhcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnBhcnNlVHVwbGUgPSBwYXJzZVR1cGxlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyc2VUdXBsZSIsInNlcmlhbGl6ZVR1cGxlIiwiQnVpbGRlcl8xIiwicmVxdWlyZSIsIklOVDY0X01JTiIsIkJpZ0ludCIsIklOVDY0X01BWCIsInNlcmlhbGl6ZVR1cGxlSXRlbSIsInNyYyIsImJ1aWxkZXIiLCJ0eXBlIiwic3RvcmVVaW50Iiwic3RvcmVJbnQiLCJzdG9yZVJlZiIsImNlbGwiLCJiaXRzIiwibGVuZ3RoIiwicmVmcyIsImhlYWQiLCJ0YWlsIiwiaSIsIml0ZW1zIiwicyIsImJlZ2luQ2VsbCIsImVuZENlbGwiLCJiYyIsIkVycm9yIiwicGFyc2VTdGFja0l0ZW0iLCJjcyIsImtpbmQiLCJsb2FkVWludCIsImxvYWRJbnRCaWciLCJsb2FkQml0IiwibG9hZFJlZiIsInN0YXJ0Qml0cyIsImVuZEJpdHMiLCJzdGFydFJlZnMiLCJlbmRSZWZzIiwicnMiLCJiZWdpblBhcnNlIiwic2tpcCIsImR0IiwibG9hZEJpdHMiLCJzdG9yZUJpdHMiLCJ1bnNoaWZ0Iiwib2hlYWQiLCJwdXNoIiwic2VyaWFsaXplVHVwbGVUYWlsIiwic2xpY2UiLCJyIiwicmVzIiwic2l6ZSIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/tuple/tuple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/Account.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Account.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeAccount = exports.loadAccount = void 0;\nconst AccountStorage_1 = __webpack_require__(/*! ./AccountStorage */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStorage.js\");\nconst StorageInto_1 = __webpack_require__(/*! ./StorageInto */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageInto.js\");\nfunction loadAccount(slice) {\n    return {\n        addr: slice.loadAddress(),\n        storageStats: (0, StorageInto_1.loadStorageInfo)(slice),\n        storage: (0, AccountStorage_1.loadAccountStorage)(slice)\n    };\n}\nexports.loadAccount = loadAccount;\nfunction storeAccount(src) {\n    return (builder)=>{\n        builder.storeAddress(src.addr);\n        builder.store((0, StorageInto_1.storeStorageInfo)(src.storageStats));\n        builder.store((0, AccountStorage_1.storeAccountStorage)(src.storage));\n    };\n}\nexports.storeAccount = storeAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDbEQsTUFBTUksbUJBQW1CQyxtQkFBT0EsQ0FBQyxxRkFBa0I7QUFDbkQsTUFBTUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQywrRUFBZTtBQUM3QyxTQUFTRixZQUFZSSxLQUFLO0lBQ3RCLE9BQU87UUFDSEMsTUFBTUQsTUFBTUUsV0FBVztRQUN2QkMsY0FBYyxDQUFDLEdBQUdKLGNBQWNLLGVBQWUsRUFBRUo7UUFDakRLLFNBQVMsQ0FBQyxHQUFHUixpQkFBaUJTLGtCQUFrQixFQUFFTjtJQUN0RDtBQUNKO0FBQ0FQLG1CQUFtQixHQUFHRztBQUN0QixTQUFTRCxhQUFhWSxHQUFHO0lBQ3JCLE9BQU8sQ0FBQ0M7UUFDSkEsUUFBUUMsWUFBWSxDQUFDRixJQUFJTixJQUFJO1FBQzdCTyxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHWCxjQUFjWSxnQkFBZ0IsRUFBRUosSUFBSUosWUFBWTtRQUNsRUssUUFBUUUsS0FBSyxDQUFDLENBQUMsR0FBR2IsaUJBQWlCZSxtQkFBbUIsRUFBRUwsSUFBSUYsT0FBTztJQUN2RTtBQUNKO0FBQ0FaLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudC5qcz83OWYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZUFjY291bnQgPSBleHBvcnRzLmxvYWRBY2NvdW50ID0gdm9pZCAwO1xuY29uc3QgQWNjb3VudFN0b3JhZ2VfMSA9IHJlcXVpcmUoXCIuL0FjY291bnRTdG9yYWdlXCIpO1xuY29uc3QgU3RvcmFnZUludG9fMSA9IHJlcXVpcmUoXCIuL1N0b3JhZ2VJbnRvXCIpO1xuZnVuY3Rpb24gbG9hZEFjY291bnQoc2xpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyOiBzbGljZS5sb2FkQWRkcmVzcygpLFxuICAgICAgICBzdG9yYWdlU3RhdHM6ICgwLCBTdG9yYWdlSW50b18xLmxvYWRTdG9yYWdlSW5mbykoc2xpY2UpLFxuICAgICAgICBzdG9yYWdlOiAoMCwgQWNjb3VudFN0b3JhZ2VfMS5sb2FkQWNjb3VudFN0b3JhZ2UpKHNsaWNlKVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRBY2NvdW50ID0gbG9hZEFjY291bnQ7XG5mdW5jdGlvbiBzdG9yZUFjY291bnQoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVBZGRyZXNzKHNyYy5hZGRyKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgU3RvcmFnZUludG9fMS5zdG9yZVN0b3JhZ2VJbmZvKShzcmMuc3RvcmFnZVN0YXRzKSk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIEFjY291bnRTdG9yYWdlXzEuc3RvcmVBY2NvdW50U3RvcmFnZSkoc3JjLnN0b3JhZ2UpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZUFjY291bnQgPSBzdG9yZUFjY291bnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZUFjY291bnQiLCJsb2FkQWNjb3VudCIsIkFjY291bnRTdG9yYWdlXzEiLCJyZXF1aXJlIiwiU3RvcmFnZUludG9fMSIsInNsaWNlIiwiYWRkciIsImxvYWRBZGRyZXNzIiwic3RvcmFnZVN0YXRzIiwibG9hZFN0b3JhZ2VJbmZvIiwic3RvcmFnZSIsImxvYWRBY2NvdW50U3RvcmFnZSIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZUFkZHJlc3MiLCJzdG9yZSIsInN0b3JlU3RvcmFnZUluZm8iLCJzdG9yZUFjY291bnRTdG9yYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/Account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/AccountState.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountState.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeAccountState = exports.loadAccountState = void 0;\nconst StateInit_1 = __webpack_require__(/*! ./StateInit */ \"(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\");\nfunction loadAccountState(cs) {\n    if (cs.loadBit()) {\n        return {\n            type: \"active\",\n            state: (0, StateInit_1.loadStateInit)(cs)\n        };\n    } else if (cs.loadBit()) {\n        return {\n            type: \"frozen\",\n            stateHash: cs.loadUintBig(256)\n        };\n    } else {\n        return {\n            type: \"uninit\"\n        };\n    }\n}\nexports.loadAccountState = loadAccountState;\nfunction storeAccountState(src) {\n    return (builder)=>{\n        if (src.type === \"active\") {\n            builder.storeBit(true);\n            builder.store((0, StateInit_1.storeStateInit)(src.state));\n        } else if (src.type === \"frozen\") {\n            builder.storeBit(false);\n            builder.storeBit(true);\n            builder.storeUint(src.stateHash, 256);\n        } else if (src.type === \"uninit\") {\n            builder.storeBit(false);\n            builder.storeBit(false);\n        }\n    };\n}\nexports.storeAccountState = storeAccountState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUM1RCxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQywyRUFBYTtBQUN6QyxTQUFTRixpQkFBaUJHLEVBQUU7SUFDeEIsSUFBSUEsR0FBR0MsT0FBTyxJQUFJO1FBQ2QsT0FBTztZQUFFQyxNQUFNO1lBQVVDLE9BQU8sQ0FBQyxHQUFHTCxZQUFZTSxhQUFhLEVBQUVKO1FBQUk7SUFDdkUsT0FDSyxJQUFJQSxHQUFHQyxPQUFPLElBQUk7UUFDbkIsT0FBTztZQUFFQyxNQUFNO1lBQVVHLFdBQVdMLEdBQUdNLFdBQVcsQ0FBQztRQUFLO0lBQzVELE9BQ0s7UUFDRCxPQUFPO1lBQUVKLE1BQU07UUFBUztJQUM1QjtBQUNKO0FBQ0FSLHdCQUF3QixHQUFHRztBQUMzQixTQUFTRCxrQkFBa0JXLEdBQUc7SUFDMUIsT0FBTyxDQUFDQztRQUNKLElBQUlELElBQUlMLElBQUksS0FBSyxVQUFVO1lBQ3ZCTSxRQUFRQyxRQUFRLENBQUM7WUFDakJELFFBQVFFLEtBQUssQ0FBQyxDQUFDLEdBQUdaLFlBQVlhLGNBQWMsRUFBRUosSUFBSUosS0FBSztRQUMzRCxPQUNLLElBQUlJLElBQUlMLElBQUksS0FBSyxVQUFVO1lBQzVCTSxRQUFRQyxRQUFRLENBQUM7WUFDakJELFFBQVFDLFFBQVEsQ0FBQztZQUNqQkQsUUFBUUksU0FBUyxDQUFDTCxJQUFJRixTQUFTLEVBQUU7UUFDckMsT0FDSyxJQUFJRSxJQUFJTCxJQUFJLEtBQUssVUFBVTtZQUM1Qk0sUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRQyxRQUFRLENBQUM7UUFDckI7SUFDSjtBQUNKO0FBQ0FmLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXRlLmpzPzQzZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlQWNjb3VudFN0YXRlID0gZXhwb3J0cy5sb2FkQWNjb3VudFN0YXRlID0gdm9pZCAwO1xuY29uc3QgU3RhdGVJbml0XzEgPSByZXF1aXJlKFwiLi9TdGF0ZUluaXRcIik7XG5mdW5jdGlvbiBsb2FkQWNjb3VudFN0YXRlKGNzKSB7XG4gICAgaWYgKGNzLmxvYWRCaXQoKSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAnYWN0aXZlJywgc3RhdGU6ICgwLCBTdGF0ZUluaXRfMS5sb2FkU3RhdGVJbml0KShjcykgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY3MubG9hZEJpdCgpKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdmcm96ZW4nLCBzdGF0ZUhhc2g6IGNzLmxvYWRVaW50QmlnKDI1NikgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICd1bmluaXQnIH07XG4gICAgfVxufVxuZXhwb3J0cy5sb2FkQWNjb3VudFN0YXRlID0gbG9hZEFjY291bnRTdGF0ZTtcbmZ1bmN0aW9uIHN0b3JlQWNjb3VudFN0YXRlKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBpZiAoc3JjLnR5cGUgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgU3RhdGVJbml0XzEuc3RvcmVTdGF0ZUluaXQpKHNyYy5zdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYy50eXBlID09PSAnZnJvemVuJykge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLnN0YXRlSGFzaCwgMjU2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcmMudHlwZSA9PT0gJ3VuaW5pdCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoZmFsc2UpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZUFjY291bnRTdGF0ZSA9IHN0b3JlQWNjb3VudFN0YXRlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVBY2NvdW50U3RhdGUiLCJsb2FkQWNjb3VudFN0YXRlIiwiU3RhdGVJbml0XzEiLCJyZXF1aXJlIiwiY3MiLCJsb2FkQml0IiwidHlwZSIsInN0YXRlIiwibG9hZFN0YXRlSW5pdCIsInN0YXRlSGFzaCIsImxvYWRVaW50QmlnIiwic3JjIiwiYnVpbGRlciIsInN0b3JlQml0Iiwic3RvcmUiLCJzdG9yZVN0YXRlSW5pdCIsInN0b3JlVWludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/AccountState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/AccountStatus.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStatus.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeAccountStatus = exports.loadAccountStatus = void 0;\n/**\n * Load account state from slice\n * @param slice\n * @returns AccountState\n */ function loadAccountStatus(slice) {\n    const status = slice.loadUint(2);\n    if (status === 0x00) {\n        return \"uninitialized\";\n    }\n    if (status === 0x01) {\n        return \"frozen\";\n    }\n    if (status === 0x02) {\n        return \"active\";\n    }\n    if (status === 0x03) {\n        return \"non-existing\";\n    }\n    throw Error(\"Invalid data\");\n}\nexports.loadAccountStatus = loadAccountStatus;\n/**\n * Store account state to builder\n * @param src account state\n * @param builder buidler\n */ function storeAccountStatus(src) {\n    return (builder)=>{\n        if (src === \"uninitialized\") {\n            builder.storeUint(0x00, 2);\n        } else if (src === \"frozen\") {\n            builder.storeUint(0x01, 2);\n        } else if (src === \"active\") {\n            builder.storeUint(0x02, 2);\n        } else if (src === \"non-existing\") {\n            builder.storeUint(0x03, 2);\n        } else {\n            throw Error(\"Invalid data\");\n        }\n        return builder;\n    };\n}\nexports.storeAccountStatus = storeAccountStatus;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXR1cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFDOUQ7Ozs7Q0FJQyxHQUNELFNBQVNHLGtCQUFrQkMsS0FBSztJQUM1QixNQUFNQyxTQUFTRCxNQUFNRSxRQUFRLENBQUM7SUFDOUIsSUFBSUQsV0FBVyxNQUFNO1FBQ2pCLE9BQU87SUFDWDtJQUNBLElBQUlBLFdBQVcsTUFBTTtRQUNqQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxXQUFXLE1BQU07UUFDakIsT0FBTztJQUNYO0lBQ0EsSUFBSUEsV0FBVyxNQUFNO1FBQ2pCLE9BQU87SUFDWDtJQUNBLE1BQU1FLE1BQU07QUFDaEI7QUFDQVAseUJBQXlCLEdBQUdHO0FBQzVCOzs7O0NBSUMsR0FDRCxTQUFTRCxtQkFBbUJNLEdBQUc7SUFDM0IsT0FBTyxDQUFDQztRQUNKLElBQUlELFFBQVEsaUJBQWlCO1lBQ3pCQyxRQUFRQyxTQUFTLENBQUMsTUFBTTtRQUM1QixPQUNLLElBQUlGLFFBQVEsVUFBVTtZQUN2QkMsUUFBUUMsU0FBUyxDQUFDLE1BQU07UUFDNUIsT0FDSyxJQUFJRixRQUFRLFVBQVU7WUFDdkJDLFFBQVFDLFNBQVMsQ0FBQyxNQUFNO1FBQzVCLE9BQ0ssSUFBSUYsUUFBUSxnQkFBZ0I7WUFDN0JDLFFBQVFDLFNBQVMsQ0FBQyxNQUFNO1FBQzVCLE9BQ0s7WUFDRCxNQUFNSCxNQUFNO1FBQ2hCO1FBQ0EsT0FBT0U7SUFDWDtBQUNKO0FBQ0FULDBCQUEwQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXR1cy5qcz82NDY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZUFjY291bnRTdGF0dXMgPSBleHBvcnRzLmxvYWRBY2NvdW50U3RhdHVzID0gdm9pZCAwO1xuLyoqXG4gKiBMb2FkIGFjY291bnQgc3RhdGUgZnJvbSBzbGljZVxuICogQHBhcmFtIHNsaWNlXG4gKiBAcmV0dXJucyBBY2NvdW50U3RhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZEFjY291bnRTdGF0dXMoc2xpY2UpIHtcbiAgICBjb25zdCBzdGF0dXMgPSBzbGljZS5sb2FkVWludCgyKTtcbiAgICBpZiAoc3RhdHVzID09PSAweDAwKSB7XG4gICAgICAgIHJldHVybiAndW5pbml0aWFsaXplZCc7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IDB4MDEpIHtcbiAgICAgICAgcmV0dXJuICdmcm96ZW4nO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSAweDAyKSB7XG4gICAgICAgIHJldHVybiAnYWN0aXZlJztcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gMHgwMykge1xuICAgICAgICByZXR1cm4gJ25vbi1leGlzdGluZyc7XG4gICAgfVxuICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGRhdGEnKTtcbn1cbmV4cG9ydHMubG9hZEFjY291bnRTdGF0dXMgPSBsb2FkQWNjb3VudFN0YXR1cztcbi8qKlxuICogU3RvcmUgYWNjb3VudCBzdGF0ZSB0byBidWlsZGVyXG4gKiBAcGFyYW0gc3JjIGFjY291bnQgc3RhdGVcbiAqIEBwYXJhbSBidWlsZGVyIGJ1aWRsZXJcbiAqL1xuZnVuY3Rpb24gc3RvcmVBY2NvdW50U3RhdHVzKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBpZiAoc3JjID09PSAndW5pbml0aWFsaXplZCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDAsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYyA9PT0gJ2Zyb3plbicpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDEsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYyA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDIsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYyA9PT0gJ25vbi1leGlzdGluZycpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDMsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlQWNjb3VudFN0YXR1cyA9IHN0b3JlQWNjb3VudFN0YXR1cztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlQWNjb3VudFN0YXR1cyIsImxvYWRBY2NvdW50U3RhdHVzIiwic2xpY2UiLCJzdGF0dXMiLCJsb2FkVWludCIsIkVycm9yIiwic3JjIiwiYnVpbGRlciIsInN0b3JlVWludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/AccountStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/AccountStatusChange.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStatusChange.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeAccountStatusChange = exports.loadAccountStatusChange = void 0;\nfunction loadAccountStatusChange(slice) {\n    if (!slice.loadBit()) {\n        return \"unchanged\";\n    }\n    if (slice.loadBit()) {\n        return \"deleted\";\n    } else {\n        return \"frozen\";\n    }\n}\nexports.loadAccountStatusChange = loadAccountStatusChange;\nfunction storeAccountStatusChange(src) {\n    return (builder)=>{\n        if (src == \"unchanged\") {\n            builder.storeBit(0);\n        } else if (src === \"frozen\") {\n            builder.storeBit(1);\n            builder.storeBit(0);\n        } else if (src === \"deleted\") {\n            builder.storeBit(1);\n            builder.storeBit(1);\n        } else {\n            throw Error(\"Invalid account status change\");\n        }\n    };\n}\nexports.storeAccountStatusChange = storeAccountStatusChange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXR1c0NoYW5nZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDMUUsU0FBU0csd0JBQXdCQyxLQUFLO0lBQ2xDLElBQUksQ0FBQ0EsTUFBTUMsT0FBTyxJQUFJO1FBQ2xCLE9BQU87SUFDWDtJQUNBLElBQUlELE1BQU1DLE9BQU8sSUFBSTtRQUNqQixPQUFPO0lBQ1gsT0FDSztRQUNELE9BQU87SUFDWDtBQUNKO0FBQ0FMLCtCQUErQixHQUFHRztBQUNsQyxTQUFTRCx5QkFBeUJJLEdBQUc7SUFDakMsT0FBTyxDQUFDQztRQUNKLElBQUlELE9BQU8sYUFBYTtZQUNwQkMsUUFBUUMsUUFBUSxDQUFDO1FBQ3JCLE9BQ0ssSUFBSUYsUUFBUSxVQUFVO1lBQ3ZCQyxRQUFRQyxRQUFRLENBQUM7WUFDakJELFFBQVFDLFFBQVEsQ0FBQztRQUNyQixPQUNLLElBQUlGLFFBQVEsV0FBVztZQUN4QkMsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRQyxRQUFRLENBQUM7UUFDckIsT0FDSztZQUNELE1BQU1DLE1BQU07UUFDaEI7SUFDSjtBQUNKO0FBQ0FULGdDQUFnQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0YXR1c0NoYW5nZS5qcz8yOGY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZUFjY291bnRTdGF0dXNDaGFuZ2UgPSBleHBvcnRzLmxvYWRBY2NvdW50U3RhdHVzQ2hhbmdlID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZEFjY291bnRTdGF0dXNDaGFuZ2Uoc2xpY2UpIHtcbiAgICBpZiAoIXNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICByZXR1cm4gJ3VuY2hhbmdlZCc7XG4gICAgfVxuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgcmV0dXJuICdkZWxldGVkJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnZnJvemVuJztcbiAgICB9XG59XG5leHBvcnRzLmxvYWRBY2NvdW50U3RhdHVzQ2hhbmdlID0gbG9hZEFjY291bnRTdGF0dXNDaGFuZ2U7XG5mdW5jdGlvbiBzdG9yZUFjY291bnRTdGF0dXNDaGFuZ2Uoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGlmIChzcmMgPT0gJ3VuY2hhbmdlZCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3JjID09PSAnZnJvemVuJykge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdCgxKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3JjID09PSAnZGVsZXRlZCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoMSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYWNjb3VudCBzdGF0dXMgY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZUFjY291bnRTdGF0dXNDaGFuZ2UgPSBzdG9yZUFjY291bnRTdGF0dXNDaGFuZ2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZUFjY291bnRTdGF0dXNDaGFuZ2UiLCJsb2FkQWNjb3VudFN0YXR1c0NoYW5nZSIsInNsaWNlIiwibG9hZEJpdCIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZUJpdCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/AccountStatusChange.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/AccountStorage.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStorage.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeAccountStorage = exports.loadAccountStorage = void 0;\nconst AccountState_1 = __webpack_require__(/*! ./AccountState */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountState.js\");\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadAccountStorage(slice) {\n    return {\n        lastTransLt: slice.loadUintBig(64),\n        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice),\n        state: (0, AccountState_1.loadAccountState)(slice)\n    };\n}\nexports.loadAccountStorage = loadAccountStorage;\nfunction storeAccountStorage(src) {\n    return (builder)=>{\n        builder.storeUint(src.lastTransLt, 64);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));\n        builder.store((0, AccountState_1.storeAccountState)(src.state));\n    };\n}\nexports.storeAccountStorage = storeAccountStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2hFLE1BQU1JLGlCQUFpQkMsbUJBQU9BLENBQUMsaUZBQWdCO0FBQy9DLE1BQU1DLHVCQUF1QkQsbUJBQU9BLENBQUMsNkZBQXNCO0FBQzNELFNBQVNGLG1CQUFtQkksS0FBSztJQUM3QixPQUFPO1FBQ0hDLGFBQWFELE1BQU1FLFdBQVcsQ0FBQztRQUMvQkMsU0FBUyxDQUFDLEdBQUdKLHFCQUFxQkssc0JBQXNCLEVBQUVKO1FBQzFESyxPQUFPLENBQUMsR0FBR1IsZUFBZVMsZ0JBQWdCLEVBQUVOO0lBQ2hEO0FBQ0o7QUFDQVAsMEJBQTBCLEdBQUdHO0FBQzdCLFNBQVNELG9CQUFvQlksR0FBRztJQUM1QixPQUFPLENBQUNDO1FBQ0pBLFFBQVFDLFNBQVMsQ0FBQ0YsSUFBSU4sV0FBVyxFQUFFO1FBQ25DTyxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHWCxxQkFBcUJZLHVCQUF1QixFQUFFSixJQUFJSixPQUFPO1FBQzNFSyxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHYixlQUFlZSxpQkFBaUIsRUFBRUwsSUFBSUYsS0FBSztJQUNqRTtBQUNKO0FBQ0FaLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQWNjb3VudFN0b3JhZ2UuanM/NjNhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVBY2NvdW50U3RvcmFnZSA9IGV4cG9ydHMubG9hZEFjY291bnRTdG9yYWdlID0gdm9pZCAwO1xuY29uc3QgQWNjb3VudFN0YXRlXzEgPSByZXF1aXJlKFwiLi9BY2NvdW50U3RhdGVcIik7XG5jb25zdCBDdXJyZW5jeUNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0N1cnJlbmN5Q29sbGVjdGlvblwiKTtcbmZ1bmN0aW9uIGxvYWRBY2NvdW50U3RvcmFnZShzbGljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxhc3RUcmFuc0x0OiBzbGljZS5sb2FkVWludEJpZyg2NCksXG4gICAgICAgIGJhbGFuY2U6ICgwLCBDdXJyZW5jeUNvbGxlY3Rpb25fMS5sb2FkQ3VycmVuY3lDb2xsZWN0aW9uKShzbGljZSksXG4gICAgICAgIHN0YXRlOiAoMCwgQWNjb3VudFN0YXRlXzEubG9hZEFjY291bnRTdGF0ZSkoc2xpY2UpXG4gICAgfTtcbn1cbmV4cG9ydHMubG9hZEFjY291bnRTdG9yYWdlID0gbG9hZEFjY291bnRTdG9yYWdlO1xuZnVuY3Rpb24gc3RvcmVBY2NvdW50U3RvcmFnZShzcmMpIHtcbiAgICByZXR1cm4gKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLmxhc3RUcmFuc0x0LCA2NCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIEN1cnJlbmN5Q29sbGVjdGlvbl8xLnN0b3JlQ3VycmVuY3lDb2xsZWN0aW9uKShzcmMuYmFsYW5jZSkpO1xuICAgICAgICBidWlsZGVyLnN0b3JlKCgwLCBBY2NvdW50U3RhdGVfMS5zdG9yZUFjY291bnRTdGF0ZSkoc3JjLnN0YXRlKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVBY2NvdW50U3RvcmFnZSA9IHN0b3JlQWNjb3VudFN0b3JhZ2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZUFjY291bnRTdG9yYWdlIiwibG9hZEFjY291bnRTdG9yYWdlIiwiQWNjb3VudFN0YXRlXzEiLCJyZXF1aXJlIiwiQ3VycmVuY3lDb2xsZWN0aW9uXzEiLCJzbGljZSIsImxhc3RUcmFuc0x0IiwibG9hZFVpbnRCaWciLCJiYWxhbmNlIiwibG9hZEN1cnJlbmN5Q29sbGVjdGlvbiIsInN0YXRlIiwibG9hZEFjY291bnRTdGF0ZSIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZVVpbnQiLCJzdG9yZSIsInN0b3JlQ3VycmVuY3lDb2xsZWN0aW9uIiwic3RvcmVBY2NvdW50U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/AccountStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfo.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CommonMessageInfo.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeCommonMessageInfo = exports.loadCommonMessageInfo = void 0;\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadCommonMessageInfo(slice) {\n    // Internal message\n    if (!slice.loadBit()) {\n        const ihrDisabled = slice.loadBit();\n        const bounce = slice.loadBit();\n        const bounced = slice.loadBit();\n        const src = slice.loadAddress();\n        const dest = slice.loadAddress();\n        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n        const ihrFee = slice.loadCoins();\n        const forwardFee = slice.loadCoins();\n        const createdLt = slice.loadUintBig(64);\n        const createdAt = slice.loadUint(32);\n        return {\n            type: \"internal\",\n            ihrDisabled,\n            bounce,\n            bounced,\n            src,\n            dest,\n            value,\n            ihrFee,\n            forwardFee,\n            createdLt,\n            createdAt\n        };\n    }\n    // External In mesage\n    if (!slice.loadBit()) {\n        const src = slice.loadMaybeExternalAddress();\n        const dest = slice.loadAddress();\n        const importFee = slice.loadCoins();\n        return {\n            type: \"external-in\",\n            src,\n            dest,\n            importFee\n        };\n    }\n    // External Out message\n    const src = slice.loadAddress();\n    const dest = slice.loadMaybeExternalAddress();\n    const createdLt = slice.loadUintBig(64);\n    const createdAt = slice.loadUint(32);\n    return {\n        type: \"external-out\",\n        src,\n        dest,\n        createdLt,\n        createdAt\n    };\n}\nexports.loadCommonMessageInfo = loadCommonMessageInfo;\nfunction storeCommonMessageInfo(source) {\n    return (builder)=>{\n        if (source.type === \"internal\") {\n            builder.storeBit(0);\n            builder.storeBit(source.ihrDisabled);\n            builder.storeBit(source.bounce);\n            builder.storeBit(source.bounced);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));\n            builder.storeCoins(source.ihrFee);\n            builder.storeCoins(source.forwardFee);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        } else if (source.type === \"external-in\") {\n            builder.storeBit(1);\n            builder.storeBit(0);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeCoins(source.importFee);\n        } else if (source.type === \"external-out\") {\n            builder.storeBit(1);\n            builder.storeBit(1);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        } else {\n            throw new Error(\"Unknown CommonMessageInfo type\");\n        }\n    };\n}\nexports.storeCommonMessageInfo = storeCommonMessageInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = void 0;\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadCommonMessageInfoRelaxed(slice) {\n    // Internal message\n    if (!slice.loadBit()) {\n        const ihrDisabled = slice.loadBit();\n        const bounce = slice.loadBit();\n        const bounced = slice.loadBit();\n        const src = slice.loadMaybeAddress();\n        const dest = slice.loadAddress();\n        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n        const ihrFee = slice.loadCoins();\n        const forwardFee = slice.loadCoins();\n        const createdLt = slice.loadUintBig(64);\n        const createdAt = slice.loadUint(32);\n        return {\n            type: \"internal\",\n            ihrDisabled,\n            bounce,\n            bounced,\n            src,\n            dest,\n            value,\n            ihrFee,\n            forwardFee,\n            createdLt,\n            createdAt\n        };\n    }\n    // External In mesage\n    if (!slice.loadBit()) {\n        throw Error(\"External In message is not possible for CommonMessageInfoRelaxed\");\n    }\n    // External Out message\n    const src = slice.loadMaybeAddress();\n    const dest = slice.loadMaybeExternalAddress();\n    const createdLt = slice.loadUintBig(64);\n    const createdAt = slice.loadUint(32);\n    return {\n        type: \"external-out\",\n        src,\n        dest,\n        createdLt,\n        createdAt\n    };\n}\nexports.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;\nfunction storeCommonMessageInfoRelaxed(source) {\n    return (builder)=>{\n        if (source.type === \"internal\") {\n            builder.storeBit(0);\n            builder.storeBit(source.ihrDisabled);\n            builder.storeBit(source.bounce);\n            builder.storeBit(source.bounced);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));\n            builder.storeCoins(source.ihrFee);\n            builder.storeCoins(source.forwardFee);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        } else if (source.type === \"external-out\") {\n            builder.storeBit(1);\n            builder.storeBit(1);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        } else {\n            throw new Error(\"Unknown CommonMessageInfo type\");\n        }\n    };\n}\nexports.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQ0FBcUMsR0FBR0Esb0NBQW9DLEdBQUcsS0FBSztBQUNwRixNQUFNSSx1QkFBdUJDLG1CQUFPQSxDQUFDLDZGQUFzQjtBQUMzRCxTQUFTRiw2QkFBNkJHLEtBQUs7SUFDdkMsbUJBQW1CO0lBQ25CLElBQUksQ0FBQ0EsTUFBTUMsT0FBTyxJQUFJO1FBQ2xCLE1BQU1DLGNBQWNGLE1BQU1DLE9BQU87UUFDakMsTUFBTUUsU0FBU0gsTUFBTUMsT0FBTztRQUM1QixNQUFNRyxVQUFVSixNQUFNQyxPQUFPO1FBQzdCLE1BQU1JLE1BQU1MLE1BQU1NLGdCQUFnQjtRQUNsQyxNQUFNQyxPQUFPUCxNQUFNUSxXQUFXO1FBQzlCLE1BQU1iLFFBQVEsQ0FBQyxHQUFHRyxxQkFBcUJXLHNCQUFzQixFQUFFVDtRQUMvRCxNQUFNVSxTQUFTVixNQUFNVyxTQUFTO1FBQzlCLE1BQU1DLGFBQWFaLE1BQU1XLFNBQVM7UUFDbEMsTUFBTUUsWUFBWWIsTUFBTWMsV0FBVyxDQUFDO1FBQ3BDLE1BQU1DLFlBQVlmLE1BQU1nQixRQUFRLENBQUM7UUFDakMsT0FBTztZQUNIQyxNQUFNO1lBQ05mO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FFO1lBQ0FaO1lBQ0FlO1lBQ0FFO1lBQ0FDO1lBQ0FFO1FBQ0o7SUFDSjtJQUNBLHFCQUFxQjtJQUNyQixJQUFJLENBQUNmLE1BQU1DLE9BQU8sSUFBSTtRQUNsQixNQUFNaUIsTUFBTTtJQUNoQjtJQUNBLHVCQUF1QjtJQUN2QixNQUFNYixNQUFNTCxNQUFNTSxnQkFBZ0I7SUFDbEMsTUFBTUMsT0FBT1AsTUFBTW1CLHdCQUF3QjtJQUMzQyxNQUFNTixZQUFZYixNQUFNYyxXQUFXLENBQUM7SUFDcEMsTUFBTUMsWUFBWWYsTUFBTWdCLFFBQVEsQ0FBQztJQUNqQyxPQUFPO1FBQ0hDLE1BQU07UUFDTlo7UUFDQUU7UUFDQU07UUFDQUU7SUFDSjtBQUNKO0FBQ0FyQixvQ0FBb0MsR0FBR0c7QUFDdkMsU0FBU0QsOEJBQThCd0IsTUFBTTtJQUN6QyxPQUFPLENBQUNDO1FBQ0osSUFBSUQsT0FBT0gsSUFBSSxLQUFLLFlBQVk7WUFDNUJJLFFBQVFDLFFBQVEsQ0FBQztZQUNqQkQsUUFBUUMsUUFBUSxDQUFDRixPQUFPbEIsV0FBVztZQUNuQ21CLFFBQVFDLFFBQVEsQ0FBQ0YsT0FBT2pCLE1BQU07WUFDOUJrQixRQUFRQyxRQUFRLENBQUNGLE9BQU9oQixPQUFPO1lBQy9CaUIsUUFBUUUsWUFBWSxDQUFDSCxPQUFPZixHQUFHO1lBQy9CZ0IsUUFBUUUsWUFBWSxDQUFDSCxPQUFPYixJQUFJO1lBQ2hDYyxRQUFRRyxLQUFLLENBQUMsQ0FBQyxHQUFHMUIscUJBQXFCMkIsdUJBQXVCLEVBQUVMLE9BQU96QixLQUFLO1lBQzVFMEIsUUFBUUssVUFBVSxDQUFDTixPQUFPVixNQUFNO1lBQ2hDVyxRQUFRSyxVQUFVLENBQUNOLE9BQU9SLFVBQVU7WUFDcENTLFFBQVFNLFNBQVMsQ0FBQ1AsT0FBT1AsU0FBUyxFQUFFO1lBQ3BDUSxRQUFRTSxTQUFTLENBQUNQLE9BQU9MLFNBQVMsRUFBRTtRQUN4QyxPQUNLLElBQUlLLE9BQU9ILElBQUksS0FBSyxnQkFBZ0I7WUFDckNJLFFBQVFDLFFBQVEsQ0FBQztZQUNqQkQsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRRSxZQUFZLENBQUNILE9BQU9mLEdBQUc7WUFDL0JnQixRQUFRRSxZQUFZLENBQUNILE9BQU9iLElBQUk7WUFDaENjLFFBQVFNLFNBQVMsQ0FBQ1AsT0FBT1AsU0FBUyxFQUFFO1lBQ3BDUSxRQUFRTSxTQUFTLENBQUNQLE9BQU9MLFNBQVMsRUFBRTtRQUN4QyxPQUNLO1lBQ0QsTUFBTSxJQUFJRyxNQUFNO1FBQ3BCO0lBQ0o7QUFDSjtBQUNBeEIscUNBQXFDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9Db21tb25NZXNzYWdlSW5mb1JlbGF4ZWQuanM/OWUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQgPSBleHBvcnRzLmxvYWRDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQgPSB2b2lkIDA7XG5jb25zdCBDdXJyZW5jeUNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0N1cnJlbmN5Q29sbGVjdGlvblwiKTtcbmZ1bmN0aW9uIGxvYWRDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQoc2xpY2UpIHtcbiAgICAvLyBJbnRlcm5hbCBtZXNzYWdlXG4gICAgaWYgKCFzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgY29uc3QgaWhyRGlzYWJsZWQgPSBzbGljZS5sb2FkQml0KCk7XG4gICAgICAgIGNvbnN0IGJvdW5jZSA9IHNsaWNlLmxvYWRCaXQoKTtcbiAgICAgICAgY29uc3QgYm91bmNlZCA9IHNsaWNlLmxvYWRCaXQoKTtcbiAgICAgICAgY29uc3Qgc3JjID0gc2xpY2UubG9hZE1heWJlQWRkcmVzcygpO1xuICAgICAgICBjb25zdCBkZXN0ID0gc2xpY2UubG9hZEFkZHJlc3MoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoMCwgQ3VycmVuY3lDb2xsZWN0aW9uXzEubG9hZEN1cnJlbmN5Q29sbGVjdGlvbikoc2xpY2UpO1xuICAgICAgICBjb25zdCBpaHJGZWUgPSBzbGljZS5sb2FkQ29pbnMoKTtcbiAgICAgICAgY29uc3QgZm9yd2FyZEZlZSA9IHNsaWNlLmxvYWRDb2lucygpO1xuICAgICAgICBjb25zdCBjcmVhdGVkTHQgPSBzbGljZS5sb2FkVWludEJpZyg2NCk7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHNsaWNlLmxvYWRVaW50KDMyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdpbnRlcm5hbCcsXG4gICAgICAgICAgICBpaHJEaXNhYmxlZCxcbiAgICAgICAgICAgIGJvdW5jZSxcbiAgICAgICAgICAgIGJvdW5jZWQsXG4gICAgICAgICAgICBzcmMsXG4gICAgICAgICAgICBkZXN0LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBpaHJGZWUsXG4gICAgICAgICAgICBmb3J3YXJkRmVlLFxuICAgICAgICAgICAgY3JlYXRlZEx0LFxuICAgICAgICAgICAgY3JlYXRlZEF0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBFeHRlcm5hbCBJbiBtZXNhZ2VcbiAgICBpZiAoIXNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignRXh0ZXJuYWwgSW4gbWVzc2FnZSBpcyBub3QgcG9zc2libGUgZm9yIENvbW1vbk1lc3NhZ2VJbmZvUmVsYXhlZCcpO1xuICAgIH1cbiAgICAvLyBFeHRlcm5hbCBPdXQgbWVzc2FnZVxuICAgIGNvbnN0IHNyYyA9IHNsaWNlLmxvYWRNYXliZUFkZHJlc3MoKTtcbiAgICBjb25zdCBkZXN0ID0gc2xpY2UubG9hZE1heWJlRXh0ZXJuYWxBZGRyZXNzKCk7XG4gICAgY29uc3QgY3JlYXRlZEx0ID0gc2xpY2UubG9hZFVpbnRCaWcoNjQpO1xuICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHNsaWNlLmxvYWRVaW50KDMyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZXh0ZXJuYWwtb3V0JyxcbiAgICAgICAgc3JjLFxuICAgICAgICBkZXN0LFxuICAgICAgICBjcmVhdGVkTHQsXG4gICAgICAgIGNyZWF0ZWRBdCxcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkID0gbG9hZENvbW1vbk1lc3NhZ2VJbmZvUmVsYXhlZDtcbmZ1bmN0aW9uIHN0b3JlQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkKHNvdXJjZSkge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBpZiAoc291cmNlLnR5cGUgPT09ICdpbnRlcm5hbCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoMCk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNvdXJjZS5paHJEaXNhYmxlZCk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNvdXJjZS5ib3VuY2UpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChzb3VyY2UuYm91bmNlZCk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQWRkcmVzcyhzb3VyY2Uuc3JjKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVBZGRyZXNzKHNvdXJjZS5kZXN0KTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIEN1cnJlbmN5Q29sbGVjdGlvbl8xLnN0b3JlQ3VycmVuY3lDb2xsZWN0aW9uKShzb3VyY2UudmFsdWUpKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVDb2lucyhzb3VyY2UuaWhyRmVlKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVDb2lucyhzb3VyY2UuZm9yd2FyZEZlZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlVWludChzb3VyY2UuY3JlYXRlZEx0LCA2NCk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlVWludChzb3VyY2UuY3JlYXRlZEF0LCAzMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc291cmNlLnR5cGUgPT09ICdleHRlcm5hbC1vdXQnKSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KDEpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdCgxKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVBZGRyZXNzKHNvdXJjZS5zcmMpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUFkZHJlc3Moc291cmNlLmRlc3QpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc291cmNlLmNyZWF0ZWRMdCwgNjQpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc291cmNlLmNyZWF0ZWRBdCwgMzIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIENvbW1vbk1lc3NhZ2VJbmZvIHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnN0b3JlQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkID0gc3RvcmVDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZUNvbW1vbk1lc3NhZ2VJbmZvUmVsYXhlZCIsImxvYWRDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQiLCJDdXJyZW5jeUNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJzbGljZSIsImxvYWRCaXQiLCJpaHJEaXNhYmxlZCIsImJvdW5jZSIsImJvdW5jZWQiLCJzcmMiLCJsb2FkTWF5YmVBZGRyZXNzIiwiZGVzdCIsImxvYWRBZGRyZXNzIiwibG9hZEN1cnJlbmN5Q29sbGVjdGlvbiIsImlockZlZSIsImxvYWRDb2lucyIsImZvcndhcmRGZWUiLCJjcmVhdGVkTHQiLCJsb2FkVWludEJpZyIsImNyZWF0ZWRBdCIsImxvYWRVaW50IiwidHlwZSIsIkVycm9yIiwibG9hZE1heWJlRXh0ZXJuYWxBZGRyZXNzIiwic291cmNlIiwiYnVpbGRlciIsInN0b3JlQml0Iiwic3RvcmVBZGRyZXNzIiwic3RvcmUiLCJzdG9yZUN1cnJlbmN5Q29sbGVjdGlvbiIsInN0b3JlQ29pbnMiLCJzdG9yZVVpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/ComputeSkipReason.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ComputeSkipReason.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeComputeSkipReason = exports.loadComputeSkipReason = void 0;\nfunction loadComputeSkipReason(slice) {\n    let reason = slice.loadUint(2);\n    if (reason === 0x00) {\n        return \"no-state\";\n    } else if (reason === 0x01) {\n        return \"bad-state\";\n    } else if (reason === 0x02) {\n        return \"no-gas\";\n    }\n    throw new Error(`Unknown ComputeSkipReason: ${reason}`);\n}\nexports.loadComputeSkipReason = loadComputeSkipReason;\nfunction storeComputeSkipReason(src) {\n    return (builder)=>{\n        if (src === \"no-state\") {\n            builder.storeUint(0x00, 2);\n        } else if (src === \"bad-state\") {\n            builder.storeUint(0x01, 2);\n        } else if (src === \"no-gas\") {\n            builder.storeUint(0x02, 2);\n        } else {\n            throw new Error(`Unknown ComputeSkipReason: ${src}`);\n        }\n    };\n}\nexports.storeComputeSkipReason = storeComputeSkipReason;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQ29tcHV0ZVNraXBSZWFzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBQ3RFLFNBQVNHLHNCQUFzQkMsS0FBSztJQUNoQyxJQUFJQyxTQUFTRCxNQUFNRSxRQUFRLENBQUM7SUFDNUIsSUFBSUQsV0FBVyxNQUFNO1FBQ2pCLE9BQU87SUFDWCxPQUNLLElBQUlBLFdBQVcsTUFBTTtRQUN0QixPQUFPO0lBQ1gsT0FDSyxJQUFJQSxXQUFXLE1BQU07UUFDdEIsT0FBTztJQUNYO0lBQ0EsTUFBTSxJQUFJRSxNQUFNLENBQUMsMkJBQTJCLEVBQUVGLE9BQU8sQ0FBQztBQUMxRDtBQUNBTCw2QkFBNkIsR0FBR0c7QUFDaEMsU0FBU0QsdUJBQXVCTSxHQUFHO0lBQy9CLE9BQU8sQ0FBQ0M7UUFDSixJQUFJRCxRQUFRLFlBQVk7WUFDcEJDLFFBQVFDLFNBQVMsQ0FBQyxNQUFNO1FBQzVCLE9BQ0ssSUFBSUYsUUFBUSxhQUFhO1lBQzFCQyxRQUFRQyxTQUFTLENBQUMsTUFBTTtRQUM1QixPQUNLLElBQUlGLFFBQVEsVUFBVTtZQUN2QkMsUUFBUUMsU0FBUyxDQUFDLE1BQU07UUFDNUIsT0FDSztZQUNELE1BQU0sSUFBSUgsTUFBTSxDQUFDLDJCQUEyQixFQUFFQyxJQUFJLENBQUM7UUFDdkQ7SUFDSjtBQUNKO0FBQ0FSLDhCQUE4QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQ29tcHV0ZVNraXBSZWFzb24uanM/ZmFmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVDb21wdXRlU2tpcFJlYXNvbiA9IGV4cG9ydHMubG9hZENvbXB1dGVTa2lwUmVhc29uID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZENvbXB1dGVTa2lwUmVhc29uKHNsaWNlKSB7XG4gICAgbGV0IHJlYXNvbiA9IHNsaWNlLmxvYWRVaW50KDIpO1xuICAgIGlmIChyZWFzb24gPT09IDB4MDApIHtcbiAgICAgICAgcmV0dXJuICduby1zdGF0ZSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlYXNvbiA9PT0gMHgwMSkge1xuICAgICAgICByZXR1cm4gJ2JhZC1zdGF0ZSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlYXNvbiA9PT0gMHgwMikge1xuICAgICAgICByZXR1cm4gJ25vLWdhcyc7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBDb21wdXRlU2tpcFJlYXNvbjogJHtyZWFzb259YCk7XG59XG5leHBvcnRzLmxvYWRDb21wdXRlU2tpcFJlYXNvbiA9IGxvYWRDb21wdXRlU2tpcFJlYXNvbjtcbmZ1bmN0aW9uIHN0b3JlQ29tcHV0ZVNraXBSZWFzb24oc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGlmIChzcmMgPT09ICduby1zdGF0ZScpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDAsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYyA9PT0gJ2JhZC1zdGF0ZScpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDEsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNyYyA9PT0gJ25vLWdhcycpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KDB4MDIsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIENvbXB1dGVTa2lwUmVhc29uOiAke3NyY31gKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnN0b3JlQ29tcHV0ZVNraXBSZWFzb24gPSBzdG9yZUNvbXB1dGVTa2lwUmVhc29uO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVDb21wdXRlU2tpcFJlYXNvbiIsImxvYWRDb21wdXRlU2tpcFJlYXNvbiIsInNsaWNlIiwicmVhc29uIiwibG9hZFVpbnQiLCJFcnJvciIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZVVpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/ComputeSkipReason.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CurrencyCollection.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeCurrencyCollection = exports.loadCurrencyCollection = void 0;\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\n;\nfunction loadCurrencyCollection(slice) {\n    const coins = slice.loadCoins();\n    const other = slice.loadDict(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5 /* log2(32) */ ));\n    if (other.size === 0) {\n        return {\n            coins\n        };\n    } else {\n        return {\n            other,\n            coins\n        };\n    }\n}\nexports.loadCurrencyCollection = loadCurrencyCollection;\nfunction storeCurrencyCollection(collection) {\n    return (builder)=>{\n        builder.storeCoins(collection.coins);\n        if (collection.other) {\n            builder.storeDict(collection.other);\n        } else {\n            builder.storeBit(0);\n        }\n    };\n}\nexports.storeCurrencyCollection = storeCurrencyCollection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvQ3VycmVuY3lDb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwrQkFBK0IsR0FBR0EsOEJBQThCLEdBQUcsS0FBSztBQUN4RSxNQUFNSSxlQUFlQyxtQkFBT0EsQ0FBQyxrRkFBb0I7O0FBRWpELFNBQVNGLHVCQUF1QkcsS0FBSztJQUNqQyxNQUFNQyxRQUFRRCxNQUFNRSxTQUFTO0lBQzdCLE1BQU1DLFFBQVFILE1BQU1JLFFBQVEsQ0FBQ04sYUFBYU8sVUFBVSxDQUFDQyxJQUFJLENBQUNDLElBQUksQ0FBQyxLQUFLVCxhQUFhTyxVQUFVLENBQUNHLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLEVBQUUsWUFBWTtJQUM1SCxJQUFJTixNQUFNTyxJQUFJLEtBQUssR0FBRztRQUNsQixPQUFPO1lBQUVUO1FBQU07SUFDbkIsT0FDSztRQUNELE9BQU87WUFBRUU7WUFBT0Y7UUFBTTtJQUMxQjtBQUNKO0FBQ0FQLDhCQUE4QixHQUFHRztBQUNqQyxTQUFTRCx3QkFBd0JlLFVBQVU7SUFDdkMsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxVQUFVLENBQUNGLFdBQVdWLEtBQUs7UUFDbkMsSUFBSVUsV0FBV1IsS0FBSyxFQUFFO1lBQ2xCUyxRQUFRRSxTQUFTLENBQUNILFdBQVdSLEtBQUs7UUFDdEMsT0FDSztZQUNEUyxRQUFRRyxRQUFRLENBQUM7UUFDckI7SUFDSjtBQUNKO0FBQ0FyQiwrQkFBK0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3R5cGVzL0N1cnJlbmN5Q29sbGVjdGlvbi5qcz80NmE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZUN1cnJlbmN5Q29sbGVjdGlvbiA9IGV4cG9ydHMubG9hZEN1cnJlbmN5Q29sbGVjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IERpY3Rpb25hcnlfMSA9IHJlcXVpcmUoXCIuLi9kaWN0L0RpY3Rpb25hcnlcIik7XG47XG5mdW5jdGlvbiBsb2FkQ3VycmVuY3lDb2xsZWN0aW9uKHNsaWNlKSB7XG4gICAgY29uc3QgY29pbnMgPSBzbGljZS5sb2FkQ29pbnMoKTtcbiAgICBjb25zdCBvdGhlciA9IHNsaWNlLmxvYWREaWN0KERpY3Rpb25hcnlfMS5EaWN0aW9uYXJ5LktleXMuVWludCgzMiksIERpY3Rpb25hcnlfMS5EaWN0aW9uYXJ5LlZhbHVlcy5CaWdWYXJVaW50KDUgLyogbG9nMigzMikgKi8pKTtcbiAgICBpZiAob3RoZXIuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyBjb2lucyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgb3RoZXIsIGNvaW5zIH07XG4gICAgfVxufVxuZXhwb3J0cy5sb2FkQ3VycmVuY3lDb2xsZWN0aW9uID0gbG9hZEN1cnJlbmN5Q29sbGVjdGlvbjtcbmZ1bmN0aW9uIHN0b3JlQ3VycmVuY3lDb2xsZWN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgYnVpbGRlci5zdG9yZUNvaW5zKGNvbGxlY3Rpb24uY29pbnMpO1xuICAgICAgICBpZiAoY29sbGVjdGlvbi5vdGhlcikge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZURpY3QoY29sbGVjdGlvbi5vdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KDApO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVDdXJyZW5jeUNvbGxlY3Rpb24gPSBzdG9yZUN1cnJlbmN5Q29sbGVjdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlQ3VycmVuY3lDb2xsZWN0aW9uIiwibG9hZEN1cnJlbmN5Q29sbGVjdGlvbiIsIkRpY3Rpb25hcnlfMSIsInJlcXVpcmUiLCJzbGljZSIsImNvaW5zIiwibG9hZENvaW5zIiwib3RoZXIiLCJsb2FkRGljdCIsIkRpY3Rpb25hcnkiLCJLZXlzIiwiVWludCIsIlZhbHVlcyIsIkJpZ1ZhclVpbnQiLCJzaXplIiwiY29sbGVjdGlvbiIsImJ1aWxkZXIiLCJzdG9yZUNvaW5zIiwic3RvcmVEaWN0Iiwic3RvcmVCaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/DepthBalanceInfo.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/DepthBalanceInfo.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = void 0;\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadDepthBalanceInfo(slice) {\n    let splitDepth = slice.loadUint(5);\n    return {\n        splitDepth,\n        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice)\n    };\n}\nexports.loadDepthBalanceInfo = loadDepthBalanceInfo;\nfunction storeDepthBalanceInfo(src) {\n    return (builder)=>{\n        builder.storeUint(src.splitDepth, 5);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));\n    };\n}\nexports.storeDepthBalanceInfo = storeDepthBalanceInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvRGVwdGhCYWxhbmNlSW5mby5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDcEUsTUFBTUksdUJBQXVCQyxtQkFBT0EsQ0FBQyw2RkFBc0I7QUFDM0QsU0FBU0YscUJBQXFCRyxLQUFLO0lBQy9CLElBQUlDLGFBQWFELE1BQU1FLFFBQVEsQ0FBQztJQUNoQyxPQUFPO1FBQ0hEO1FBQ0FFLFNBQVMsQ0FBQyxHQUFHTCxxQkFBcUJNLHNCQUFzQixFQUFFSjtJQUM5RDtBQUNKO0FBQ0FOLDRCQUE0QixHQUFHRztBQUMvQixTQUFTRCxzQkFBc0JTLEdBQUc7SUFDOUIsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxTQUFTLENBQUNGLElBQUlKLFVBQVUsRUFBRTtRQUNsQ0ssUUFBUUUsS0FBSyxDQUFDLENBQUMsR0FBR1YscUJBQXFCVyx1QkFBdUIsRUFBRUosSUFBSUYsT0FBTztJQUMvRTtBQUNKO0FBQ0FULDZCQUE2QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvRGVwdGhCYWxhbmNlSW5mby5qcz9jODZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZURlcHRoQmFsYW5jZUluZm8gPSBleHBvcnRzLmxvYWREZXB0aEJhbGFuY2VJbmZvID0gdm9pZCAwO1xuY29uc3QgQ3VycmVuY3lDb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9DdXJyZW5jeUNvbGxlY3Rpb25cIik7XG5mdW5jdGlvbiBsb2FkRGVwdGhCYWxhbmNlSW5mbyhzbGljZSkge1xuICAgIGxldCBzcGxpdERlcHRoID0gc2xpY2UubG9hZFVpbnQoNSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3BsaXREZXB0aCxcbiAgICAgICAgYmFsYW5jZTogKDAsIEN1cnJlbmN5Q29sbGVjdGlvbl8xLmxvYWRDdXJyZW5jeUNvbGxlY3Rpb24pKHNsaWNlKVxuICAgIH07XG59XG5leHBvcnRzLmxvYWREZXB0aEJhbGFuY2VJbmZvID0gbG9hZERlcHRoQmFsYW5jZUluZm87XG5mdW5jdGlvbiBzdG9yZURlcHRoQmFsYW5jZUluZm8oc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5zcGxpdERlcHRoLCA1KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgQ3VycmVuY3lDb2xsZWN0aW9uXzEuc3RvcmVDdXJyZW5jeUNvbGxlY3Rpb24pKHNyYy5iYWxhbmNlKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVEZXB0aEJhbGFuY2VJbmZvID0gc3RvcmVEZXB0aEJhbGFuY2VJbmZvO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVEZXB0aEJhbGFuY2VJbmZvIiwibG9hZERlcHRoQmFsYW5jZUluZm8iLCJDdXJyZW5jeUNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJzbGljZSIsInNwbGl0RGVwdGgiLCJsb2FkVWludCIsImJhbGFuY2UiLCJsb2FkQ3VycmVuY3lDb2xsZWN0aW9uIiwic3JjIiwiYnVpbGRlciIsInN0b3JlVWludCIsInN0b3JlIiwic3RvcmVDdXJyZW5jeUNvbGxlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/DepthBalanceInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/HashUpdate.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/HashUpdate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeHashUpdate = exports.loadHashUpdate = void 0;\nfunction loadHashUpdate(slice) {\n    if (slice.loadUint(8) !== 0x72) {\n        throw Error(\"Invalid data\");\n    }\n    const oldHash = slice.loadBuffer(32);\n    const newHash = slice.loadBuffer(32);\n    return {\n        oldHash,\n        newHash\n    };\n}\nexports.loadHashUpdate = loadHashUpdate;\nfunction storeHashUpdate(src) {\n    return (builder)=>{\n        builder.storeUint(0x72, 8);\n        builder.storeBuffer(src.oldHash);\n        builder.storeBuffer(src.newHash);\n    };\n}\nexports.storeHashUpdate = storeHashUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvSGFzaFVwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDeEQsU0FBU0csZUFBZUMsS0FBSztJQUN6QixJQUFJQSxNQUFNQyxRQUFRLENBQUMsT0FBTyxNQUFNO1FBQzVCLE1BQU1DLE1BQU07SUFDaEI7SUFDQSxNQUFNQyxVQUFVSCxNQUFNSSxVQUFVLENBQUM7SUFDakMsTUFBTUMsVUFBVUwsTUFBTUksVUFBVSxDQUFDO0lBQ2pDLE9BQU87UUFBRUQ7UUFBU0U7SUFBUTtBQUM5QjtBQUNBVCxzQkFBc0IsR0FBR0c7QUFDekIsU0FBU0QsZ0JBQWdCUSxHQUFHO0lBQ3hCLE9BQU8sQ0FBQ0M7UUFDSkEsUUFBUUMsU0FBUyxDQUFDLE1BQU07UUFDeEJELFFBQVFFLFdBQVcsQ0FBQ0gsSUFBSUgsT0FBTztRQUMvQkksUUFBUUUsV0FBVyxDQUFDSCxJQUFJRCxPQUFPO0lBQ25DO0FBQ0o7QUFDQVQsdUJBQXVCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9IYXNoVXBkYXRlLmpzPzExNGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlSGFzaFVwZGF0ZSA9IGV4cG9ydHMubG9hZEhhc2hVcGRhdGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBsb2FkSGFzaFVwZGF0ZShzbGljZSkge1xuICAgIGlmIChzbGljZS5sb2FkVWludCg4KSAhPT0gMHg3Mikge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IG9sZEhhc2ggPSBzbGljZS5sb2FkQnVmZmVyKDMyKTtcbiAgICBjb25zdCBuZXdIYXNoID0gc2xpY2UubG9hZEJ1ZmZlcigzMik7XG4gICAgcmV0dXJuIHsgb2xkSGFzaCwgbmV3SGFzaCB9O1xufVxuZXhwb3J0cy5sb2FkSGFzaFVwZGF0ZSA9IGxvYWRIYXNoVXBkYXRlO1xuZnVuY3Rpb24gc3RvcmVIYXNoVXBkYXRlKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgweDcyLCA4KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZUJ1ZmZlcihzcmMub2xkSGFzaCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVCdWZmZXIoc3JjLm5ld0hhc2gpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlSGFzaFVwZGF0ZSA9IHN0b3JlSGFzaFVwZGF0ZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlSGFzaFVwZGF0ZSIsImxvYWRIYXNoVXBkYXRlIiwic2xpY2UiLCJsb2FkVWludCIsIkVycm9yIiwib2xkSGFzaCIsImxvYWRCdWZmZXIiLCJuZXdIYXNoIiwic3JjIiwiYnVpbGRlciIsInN0b3JlVWludCIsInN0b3JlQnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/HashUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/MasterchainStateExtra.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/MasterchainStateExtra.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadMasterchainStateExtra = void 0;\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadMasterchainStateExtra(cs) {\n    // Check magic\n    if (cs.loadUint(16) !== 0xcc26) {\n        throw Error(\"Invalid data\");\n    }\n    // Skip shard_hashes\n    if (cs.loadBit()) {\n        cs.loadRef();\n    }\n    // Read config\n    let configAddress = cs.loadUintBig(256);\n    let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);\n    // Rad global balance\n    const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);\n    return {\n        config,\n        configAddress,\n        globalBalance\n    };\n}\nexports.loadMasterchainStateExtra = loadMasterchainStateExtra;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvTWFzdGVyY2hhaW5TdGF0ZUV4dHJhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBRyxLQUFLO0FBQ3pDLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLGtGQUFvQjtBQUNqRCxNQUFNQyx1QkFBdUJELG1CQUFPQSxDQUFDLDZGQUFzQjtBQUMzRCxTQUFTRiwwQkFBMEJJLEVBQUU7SUFDakMsY0FBYztJQUNkLElBQUlBLEdBQUdDLFFBQVEsQ0FBQyxRQUFRLFFBQVE7UUFDNUIsTUFBTUMsTUFBTTtJQUNoQjtJQUNBLG9CQUFvQjtJQUNwQixJQUFJRixHQUFHRyxPQUFPLElBQUk7UUFDZEgsR0FBR0ksT0FBTztJQUNkO0lBQ0EsY0FBYztJQUNkLElBQUlDLGdCQUFnQkwsR0FBR00sV0FBVyxDQUFDO0lBQ25DLElBQUlDLFNBQVNWLGFBQWFXLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDWixhQUFhVyxVQUFVLENBQUNFLElBQUksQ0FBQ0MsR0FBRyxDQUFDLEtBQUtkLGFBQWFXLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDQyxJQUFJLElBQUliO0lBQ3ZILHFCQUFxQjtJQUNyQixNQUFNYyxnQkFBZ0IsQ0FBQyxHQUFHZixxQkFBcUJnQixzQkFBc0IsRUFBRWY7SUFDdkUsT0FBTztRQUNITztRQUNBRjtRQUNBUztJQUNKO0FBQ0o7QUFDQXBCLGlDQUFpQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvTWFzdGVyY2hhaW5TdGF0ZUV4dHJhLmpzP2I2MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRNYXN0ZXJjaGFpblN0YXRlRXh0cmEgPSB2b2lkIDA7XG5jb25zdCBEaWN0aW9uYXJ5XzEgPSByZXF1aXJlKFwiLi4vZGljdC9EaWN0aW9uYXJ5XCIpO1xuY29uc3QgQ3VycmVuY3lDb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9DdXJyZW5jeUNvbGxlY3Rpb25cIik7XG5mdW5jdGlvbiBsb2FkTWFzdGVyY2hhaW5TdGF0ZUV4dHJhKGNzKSB7XG4gICAgLy8gQ2hlY2sgbWFnaWNcbiAgICBpZiAoY3MubG9hZFVpbnQoMTYpICE9PSAweGNjMjYpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xuICAgIH1cbiAgICAvLyBTa2lwIHNoYXJkX2hhc2hlc1xuICAgIGlmIChjcy5sb2FkQml0KCkpIHtcbiAgICAgICAgY3MubG9hZFJlZigpO1xuICAgIH1cbiAgICAvLyBSZWFkIGNvbmZpZ1xuICAgIGxldCBjb25maWdBZGRyZXNzID0gY3MubG9hZFVpbnRCaWcoMjU2KTtcbiAgICBsZXQgY29uZmlnID0gRGljdGlvbmFyeV8xLkRpY3Rpb25hcnkubG9hZChEaWN0aW9uYXJ5XzEuRGljdGlvbmFyeS5LZXlzLkludCgzMiksIERpY3Rpb25hcnlfMS5EaWN0aW9uYXJ5LlZhbHVlcy5DZWxsKCksIGNzKTtcbiAgICAvLyBSYWQgZ2xvYmFsIGJhbGFuY2VcbiAgICBjb25zdCBnbG9iYWxCYWxhbmNlID0gKDAsIEN1cnJlbmN5Q29sbGVjdGlvbl8xLmxvYWRDdXJyZW5jeUNvbGxlY3Rpb24pKGNzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb25maWcsXG4gICAgICAgIGNvbmZpZ0FkZHJlc3MsXG4gICAgICAgIGdsb2JhbEJhbGFuY2VcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkTWFzdGVyY2hhaW5TdGF0ZUV4dHJhID0gbG9hZE1hc3RlcmNoYWluU3RhdGVFeHRyYTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRNYXN0ZXJjaGFpblN0YXRlRXh0cmEiLCJEaWN0aW9uYXJ5XzEiLCJyZXF1aXJlIiwiQ3VycmVuY3lDb2xsZWN0aW9uXzEiLCJjcyIsImxvYWRVaW50IiwiRXJyb3IiLCJsb2FkQml0IiwibG9hZFJlZiIsImNvbmZpZ0FkZHJlc3MiLCJsb2FkVWludEJpZyIsImNvbmZpZyIsIkRpY3Rpb25hcnkiLCJsb2FkIiwiS2V5cyIsIkludCIsIlZhbHVlcyIsIkNlbGwiLCJnbG9iYWxCYWxhbmNlIiwibG9hZEN1cnJlbmN5Q29sbGVjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/MasterchainStateExtra.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/Message.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Message.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst CommonMessageInfo_1 = __webpack_require__(/*! ./CommonMessageInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfo.js\");\nconst StateInit_1 = __webpack_require__(/*! ./StateInit */ \"(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\");\nfunction loadMessage(slice) {\n    const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        } else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessage = loadMessage;\nfunction storeMessage(message, opts) {\n    return (builder)=>{\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if need to store it in ref\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            } else {\n                needRef = builder.availableBits - 2 /* At least two bits for ref flags */  < initCell.bits + message.body.bits.length;\n            }\n            // Persist init\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            } else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        } else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        } else {\n            needRef = builder.availableBits - 1 /* At least one bit for ref flag */  < message.body.bits.length || builder.refs + message.body.refs.length > 4;\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        } else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessage = storeMessage;\nexports.MessageValue = {\n    serialize (src, builder) {\n        builder.storeRef((0, Builder_1.beginCell)().store(storeMessage(src)));\n    },\n    parse (slice) {\n        return loadMessage(slice.loadRef().beginParse());\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvTWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ3pFLE1BQU1LLFlBQVlDLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUMxQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLDJGQUFxQjtBQUN6RCxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQywyRUFBYTtBQUN6QyxTQUFTRixZQUFZSyxLQUFLO0lBQ3RCLE1BQU1DLE9BQU8sQ0FBQyxHQUFHSCxvQkFBb0JJLHFCQUFxQixFQUFFRjtJQUM1RCxJQUFJRyxPQUFPO0lBQ1gsSUFBSUgsTUFBTUksT0FBTyxJQUFJO1FBQ2pCLElBQUksQ0FBQ0osTUFBTUksT0FBTyxJQUFJO1lBQ2xCRCxPQUFPLENBQUMsR0FBR0osWUFBWU0sYUFBYSxFQUFFTDtRQUMxQyxPQUNLO1lBQ0RHLE9BQU8sQ0FBQyxHQUFHSixZQUFZTSxhQUFhLEVBQUVMLE1BQU1NLE9BQU8sR0FBR0MsVUFBVTtRQUNwRTtJQUNKO0lBQ0EsTUFBTUMsT0FBT1IsTUFBTUksT0FBTyxLQUFLSixNQUFNTSxPQUFPLEtBQUtOLE1BQU1TLE1BQU07SUFDN0QsT0FBTztRQUNIUjtRQUNBRTtRQUNBSztJQUNKO0FBQ0o7QUFDQWpCLG1CQUFtQixHQUFHSTtBQUN0QixTQUFTRCxhQUFhZ0IsT0FBTyxFQUFFQyxJQUFJO0lBQy9CLE9BQU8sQ0FBQ0M7UUFDSixzQkFBc0I7UUFDdEJBLFFBQVFDLEtBQUssQ0FBQyxDQUFDLEdBQUdmLG9CQUFvQmdCLHNCQUFzQixFQUFFSixRQUFRVCxJQUFJO1FBQzFFLGFBQWE7UUFDYixJQUFJUyxRQUFRUCxJQUFJLEVBQUU7WUFDZFMsUUFBUUcsUUFBUSxDQUFDO1lBQ2pCLElBQUlDLFdBQVcsQ0FBQyxHQUFHcEIsVUFBVXFCLFNBQVMsSUFBSUosS0FBSyxDQUFDLENBQUMsR0FBR2QsWUFBWW1CLGNBQWMsRUFBRVIsUUFBUVAsSUFBSTtZQUM1RixtQ0FBbUM7WUFDbkMsSUFBSWdCLFVBQVU7WUFDZCxJQUFJUixRQUFRQSxLQUFLUyxRQUFRLEVBQUU7Z0JBQ3ZCRCxVQUFVO1lBQ2QsT0FDSztnQkFDREEsVUFBVVAsUUFBUVMsYUFBYSxHQUFHLEVBQUUsbUNBQW1DLE1BQUtMLFNBQVNNLElBQUksR0FBR1osUUFBUUYsSUFBSSxDQUFDYyxJQUFJLENBQUNDLE1BQU07WUFDeEg7WUFDQSxlQUFlO1lBQ2YsSUFBSUosU0FBUztnQkFDVFAsUUFBUUcsUUFBUSxDQUFDO2dCQUNqQkgsUUFBUVksUUFBUSxDQUFDUjtZQUNyQixPQUNLO2dCQUNESixRQUFRRyxRQUFRLENBQUM7Z0JBQ2pCSCxRQUFRYSxZQUFZLENBQUNUO1lBQ3pCO1FBQ0osT0FDSztZQUNESixRQUFRRyxRQUFRLENBQUM7UUFDckI7UUFDQSxhQUFhO1FBQ2IsSUFBSUksVUFBVTtRQUNkLElBQUlSLFFBQVFBLEtBQUtTLFFBQVEsRUFBRTtZQUN2QkQsVUFBVTtRQUNkLE9BQ0s7WUFDREEsVUFBVVAsUUFBUVMsYUFBYSxHQUFHLEVBQUUsaUNBQWlDLE1BQUtYLFFBQVFGLElBQUksQ0FBQ2MsSUFBSSxDQUFDQyxNQUFNLElBQzlGWCxRQUFRYyxJQUFJLEdBQUdoQixRQUFRRixJQUFJLENBQUNrQixJQUFJLENBQUNILE1BQU0sR0FBRztRQUNsRDtRQUNBLElBQUlKLFNBQVM7WUFDVFAsUUFBUUcsUUFBUSxDQUFDO1lBQ2pCSCxRQUFRWSxRQUFRLENBQUNkLFFBQVFGLElBQUk7UUFDakMsT0FDSztZQUNESSxRQUFRRyxRQUFRLENBQUM7WUFDakJILFFBQVFhLFlBQVksQ0FBQ2YsUUFBUUYsSUFBSSxDQUFDbUIsU0FBUztRQUMvQztJQUNKO0FBQ0o7QUFDQXBDLG9CQUFvQixHQUFHRztBQUN2Qkgsb0JBQW9CLEdBQUc7SUFDbkJxQyxXQUFVQyxHQUFHLEVBQUVqQixPQUFPO1FBQ2xCQSxRQUFRWSxRQUFRLENBQUMsQ0FBQyxHQUFHNUIsVUFBVXFCLFNBQVMsSUFDbkNKLEtBQUssQ0FBQ25CLGFBQWFtQztJQUM1QjtJQUNBQyxPQUFNOUIsS0FBSztRQUNQLE9BQU9MLFlBQVlLLE1BQU1NLE9BQU8sR0FBR0MsVUFBVTtJQUNqRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9NZXNzYWdlLmpzPzcyZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lc3NhZ2VWYWx1ZSA9IGV4cG9ydHMuc3RvcmVNZXNzYWdlID0gZXhwb3J0cy5sb2FkTWVzc2FnZSA9IHZvaWQgMDtcbmNvbnN0IEJ1aWxkZXJfMSA9IHJlcXVpcmUoXCIuLi9ib2MvQnVpbGRlclwiKTtcbmNvbnN0IENvbW1vbk1lc3NhZ2VJbmZvXzEgPSByZXF1aXJlKFwiLi9Db21tb25NZXNzYWdlSW5mb1wiKTtcbmNvbnN0IFN0YXRlSW5pdF8xID0gcmVxdWlyZShcIi4vU3RhdGVJbml0XCIpO1xuZnVuY3Rpb24gbG9hZE1lc3NhZ2Uoc2xpY2UpIHtcbiAgICBjb25zdCBpbmZvID0gKDAsIENvbW1vbk1lc3NhZ2VJbmZvXzEubG9hZENvbW1vbk1lc3NhZ2VJbmZvKShzbGljZSk7XG4gICAgbGV0IGluaXQgPSBudWxsO1xuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgaWYgKCFzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgICAgIGluaXQgPSAoMCwgU3RhdGVJbml0XzEubG9hZFN0YXRlSW5pdCkoc2xpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5pdCA9ICgwLCBTdGF0ZUluaXRfMS5sb2FkU3RhdGVJbml0KShzbGljZS5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBib2R5ID0gc2xpY2UubG9hZEJpdCgpID8gc2xpY2UubG9hZFJlZigpIDogc2xpY2UuYXNDZWxsKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5mbyxcbiAgICAgICAgaW5pdCxcbiAgICAgICAgYm9keVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRNZXNzYWdlID0gbG9hZE1lc3NhZ2U7XG5mdW5jdGlvbiBzdG9yZU1lc3NhZ2UobWVzc2FnZSwgb3B0cykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICAvLyBTdG9yZSBDb21tb25Nc2dJbmZvXG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIENvbW1vbk1lc3NhZ2VJbmZvXzEuc3RvcmVDb21tb25NZXNzYWdlSW5mbykobWVzc2FnZS5pbmZvKSk7XG4gICAgICAgIC8vIFN0b3JlIGluaXRcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5pdCkge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdCh0cnVlKTtcbiAgICAgICAgICAgIGxldCBpbml0Q2VsbCA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpLnN0b3JlKCgwLCBTdGF0ZUluaXRfMS5zdG9yZVN0YXRlSW5pdCkobWVzc2FnZS5pbml0KSk7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBuZWVkIHRvIHN0b3JlIGl0IGluIHJlZlxuICAgICAgICAgICAgbGV0IG5lZWRSZWYgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvcHRzICYmIG9wdHMuZm9yY2VSZWYpIHtcbiAgICAgICAgICAgICAgICBuZWVkUmVmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5lZWRSZWYgPSBidWlsZGVyLmF2YWlsYWJsZUJpdHMgLSAyIC8qIEF0IGxlYXN0IHR3byBiaXRzIGZvciByZWYgZmxhZ3MgKi8gPCBpbml0Q2VsbC5iaXRzICsgbWVzc2FnZS5ib2R5LmJpdHMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGVyc2lzdCBpbml0XG4gICAgICAgICAgICBpZiAobmVlZFJlZikge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5zdG9yZVJlZihpbml0Q2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnN0b3JlQnVpbGRlcihpbml0Q2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yZSBib2R5XG4gICAgICAgIGxldCBuZWVkUmVmID0gZmFsc2U7XG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuZm9yY2VSZWYpIHtcbiAgICAgICAgICAgIG5lZWRSZWYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmVlZFJlZiA9IGJ1aWxkZXIuYXZhaWxhYmxlQml0cyAtIDEgLyogQXQgbGVhc3Qgb25lIGJpdCBmb3IgcmVmIGZsYWcgKi8gPCBtZXNzYWdlLmJvZHkuYml0cy5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICBidWlsZGVyLnJlZnMgKyBtZXNzYWdlLmJvZHkucmVmcy5sZW5ndGggPiA0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkUmVmKSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVJlZihtZXNzYWdlLmJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQnVpbGRlcihtZXNzYWdlLmJvZHkuYXNCdWlsZGVyKCkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVNZXNzYWdlID0gc3RvcmVNZXNzYWdlO1xuZXhwb3J0cy5NZXNzYWdlVmFsdWUgPSB7XG4gICAgc2VyaWFsaXplKHNyYywgYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyLnN0b3JlUmVmKCgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgICAgICAuc3RvcmUoc3RvcmVNZXNzYWdlKHNyYykpKTtcbiAgICB9LFxuICAgIHBhcnNlKHNsaWNlKSB7XG4gICAgICAgIHJldHVybiBsb2FkTWVzc2FnZShzbGljZS5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTWVzc2FnZVZhbHVlIiwic3RvcmVNZXNzYWdlIiwibG9hZE1lc3NhZ2UiLCJCdWlsZGVyXzEiLCJyZXF1aXJlIiwiQ29tbW9uTWVzc2FnZUluZm9fMSIsIlN0YXRlSW5pdF8xIiwic2xpY2UiLCJpbmZvIiwibG9hZENvbW1vbk1lc3NhZ2VJbmZvIiwiaW5pdCIsImxvYWRCaXQiLCJsb2FkU3RhdGVJbml0IiwibG9hZFJlZiIsImJlZ2luUGFyc2UiLCJib2R5IiwiYXNDZWxsIiwibWVzc2FnZSIsIm9wdHMiLCJidWlsZGVyIiwic3RvcmUiLCJzdG9yZUNvbW1vbk1lc3NhZ2VJbmZvIiwic3RvcmVCaXQiLCJpbml0Q2VsbCIsImJlZ2luQ2VsbCIsInN0b3JlU3RhdGVJbml0IiwibmVlZFJlZiIsImZvcmNlUmVmIiwiYXZhaWxhYmxlQml0cyIsImJpdHMiLCJsZW5ndGgiLCJzdG9yZVJlZiIsInN0b3JlQnVpbGRlciIsInJlZnMiLCJhc0J1aWxkZXIiLCJzZXJpYWxpemUiLCJzcmMiLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/Message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/MessageRelaxed.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/MessageRelaxed.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst CommonMessageInfoRelaxed_1 = __webpack_require__(/*! ./CommonMessageInfoRelaxed */ \"(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js\");\nconst StateInit_1 = __webpack_require__(/*! ./StateInit */ \"(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\");\nfunction loadMessageRelaxed(slice) {\n    const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        } else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessageRelaxed = loadMessageRelaxed;\nfunction storeMessageRelaxed(message, opts) {\n    return (builder)=>{\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if ref is needed\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            } else {\n                if (builder.availableBits - 2 /* At least on byte for ref flag */  >= initCell.bits) {\n                    needRef = false;\n                } else {\n                    needRef = true;\n                }\n            }\n            // Store ref\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            } else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        } else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        } else {\n            /*\n             1. If at least one bit for ref flag\n             2. If enough space for refs\n             3. If not exotic\n            */ if (builder.availableBits - 1 >= message.body.bits.length && builder.refs + message.body.refs.length <= 4 && !message.body.isExotic) {\n                needRef = false;\n            } else {\n                needRef = true;\n            }\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        } else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessageRelaxed = storeMessageRelaxed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvTWVzc2FnZVJlbGF4ZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2hFLE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUMxQyxNQUFNQyw2QkFBNkJELG1CQUFPQSxDQUFDLHlHQUE0QjtBQUN2RSxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQywyRUFBYTtBQUN6QyxTQUFTRixtQkFBbUJLLEtBQUs7SUFDN0IsTUFBTUMsT0FBTyxDQUFDLEdBQUdILDJCQUEyQkksNEJBQTRCLEVBQUVGO0lBQzFFLElBQUlHLE9BQU87SUFDWCxJQUFJSCxNQUFNSSxPQUFPLElBQUk7UUFDakIsSUFBSSxDQUFDSixNQUFNSSxPQUFPLElBQUk7WUFDbEJELE9BQU8sQ0FBQyxHQUFHSixZQUFZTSxhQUFhLEVBQUVMO1FBQzFDLE9BQ0s7WUFDREcsT0FBTyxDQUFDLEdBQUdKLFlBQVlNLGFBQWEsRUFBRUwsTUFBTU0sT0FBTyxHQUFHQyxVQUFVO1FBQ3BFO0lBQ0o7SUFDQSxNQUFNQyxPQUFPUixNQUFNSSxPQUFPLEtBQUtKLE1BQU1NLE9BQU8sS0FBS04sTUFBTVMsTUFBTTtJQUM3RCxPQUFPO1FBQ0hSO1FBQ0FFO1FBQ0FLO0lBQ0o7QUFDSjtBQUNBaEIsMEJBQTBCLEdBQUdHO0FBQzdCLFNBQVNELG9CQUFvQmdCLE9BQU8sRUFBRUMsSUFBSTtJQUN0QyxPQUFPLENBQUNDO1FBQ0osc0JBQXNCO1FBQ3RCQSxRQUFRQyxLQUFLLENBQUMsQ0FBQyxHQUFHZiwyQkFBMkJnQiw2QkFBNkIsRUFBRUosUUFBUVQsSUFBSTtRQUN4RixhQUFhO1FBQ2IsSUFBSVMsUUFBUVAsSUFBSSxFQUFFO1lBQ2RTLFFBQVFHLFFBQVEsQ0FBQztZQUNqQixJQUFJQyxXQUFXLENBQUMsR0FBR3BCLFVBQVVxQixTQUFTLElBQUlKLEtBQUssQ0FBQyxDQUFDLEdBQUdkLFlBQVltQixjQUFjLEVBQUVSLFFBQVFQLElBQUk7WUFDNUYseUJBQXlCO1lBQ3pCLElBQUlnQixVQUFVO1lBQ2QsSUFBSVIsUUFBUUEsS0FBS1MsUUFBUSxFQUFFO2dCQUN2QkQsVUFBVTtZQUNkLE9BQ0s7Z0JBQ0QsSUFBSVAsUUFBUVMsYUFBYSxHQUFHLEVBQUUsaUNBQWlDLE9BQU1MLFNBQVNNLElBQUksRUFBRTtvQkFDaEZILFVBQVU7Z0JBQ2QsT0FDSztvQkFDREEsVUFBVTtnQkFDZDtZQUNKO1lBQ0EsWUFBWTtZQUNaLElBQUlBLFNBQVM7Z0JBQ1RQLFFBQVFHLFFBQVEsQ0FBQztnQkFDakJILFFBQVFXLFFBQVEsQ0FBQ1A7WUFDckIsT0FDSztnQkFDREosUUFBUUcsUUFBUSxDQUFDO2dCQUNqQkgsUUFBUVksWUFBWSxDQUFDUjtZQUN6QjtRQUNKLE9BQ0s7WUFDREosUUFBUUcsUUFBUSxDQUFDO1FBQ3JCO1FBQ0EsYUFBYTtRQUNiLElBQUlJLFVBQVU7UUFDZCxJQUFJUixRQUFRQSxLQUFLUyxRQUFRLEVBQUU7WUFDdkJELFVBQVU7UUFDZCxPQUNLO1lBQ0Q7Ozs7WUFJQSxHQUNBLElBQUlQLFFBQVFTLGFBQWEsR0FBRyxLQUFLWCxRQUFRRixJQUFJLENBQUNjLElBQUksQ0FBQ0csTUFBTSxJQUNyRGIsUUFBUWMsSUFBSSxHQUFHaEIsUUFBUUYsSUFBSSxDQUFDa0IsSUFBSSxDQUFDRCxNQUFNLElBQUksS0FDM0MsQ0FBQ2YsUUFBUUYsSUFBSSxDQUFDbUIsUUFBUSxFQUFFO2dCQUN4QlIsVUFBVTtZQUNkLE9BQ0s7Z0JBQ0RBLFVBQVU7WUFDZDtRQUNKO1FBQ0EsSUFBSUEsU0FBUztZQUNUUCxRQUFRRyxRQUFRLENBQUM7WUFDakJILFFBQVFXLFFBQVEsQ0FBQ2IsUUFBUUYsSUFBSTtRQUNqQyxPQUNLO1lBQ0RJLFFBQVFHLFFBQVEsQ0FBQztZQUNqQkgsUUFBUVksWUFBWSxDQUFDZCxRQUFRRixJQUFJLENBQUNvQixTQUFTO1FBQy9DO0lBQ0o7QUFDSjtBQUNBcEMsMkJBQTJCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9NZXNzYWdlUmVsYXhlZC5qcz9kMzU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZU1lc3NhZ2VSZWxheGVkID0gZXhwb3J0cy5sb2FkTWVzc2FnZVJlbGF4ZWQgPSB2b2lkIDA7XG5jb25zdCBCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi4vYm9jL0J1aWxkZXJcIik7XG5jb25zdCBDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWRfMSA9IHJlcXVpcmUoXCIuL0NvbW1vbk1lc3NhZ2VJbmZvUmVsYXhlZFwiKTtcbmNvbnN0IFN0YXRlSW5pdF8xID0gcmVxdWlyZShcIi4vU3RhdGVJbml0XCIpO1xuZnVuY3Rpb24gbG9hZE1lc3NhZ2VSZWxheGVkKHNsaWNlKSB7XG4gICAgY29uc3QgaW5mbyA9ICgwLCBDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWRfMS5sb2FkQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkKShzbGljZSk7XG4gICAgbGV0IGluaXQgPSBudWxsO1xuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgaWYgKCFzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgICAgIGluaXQgPSAoMCwgU3RhdGVJbml0XzEubG9hZFN0YXRlSW5pdCkoc2xpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5pdCA9ICgwLCBTdGF0ZUluaXRfMS5sb2FkU3RhdGVJbml0KShzbGljZS5sb2FkUmVmKCkuYmVnaW5QYXJzZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBib2R5ID0gc2xpY2UubG9hZEJpdCgpID8gc2xpY2UubG9hZFJlZigpIDogc2xpY2UuYXNDZWxsKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5mbyxcbiAgICAgICAgaW5pdCxcbiAgICAgICAgYm9keVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRNZXNzYWdlUmVsYXhlZCA9IGxvYWRNZXNzYWdlUmVsYXhlZDtcbmZ1bmN0aW9uIHN0b3JlTWVzc2FnZVJlbGF4ZWQobWVzc2FnZSwgb3B0cykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICAvLyBTdG9yZSBDb21tb25Nc2dJbmZvXG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIENvbW1vbk1lc3NhZ2VJbmZvUmVsYXhlZF8xLnN0b3JlQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkKShtZXNzYWdlLmluZm8pKTtcbiAgICAgICAgLy8gU3RvcmUgaW5pdFxuICAgICAgICBpZiAobWVzc2FnZS5pbml0KSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgbGV0IGluaXRDZWxsID0gKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKCkuc3RvcmUoKDAsIFN0YXRlSW5pdF8xLnN0b3JlU3RhdGVJbml0KShtZXNzYWdlLmluaXQpKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHJlZiBpcyBuZWVkZWRcbiAgICAgICAgICAgIGxldCBuZWVkUmVmID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmZvcmNlUmVmKSB7XG4gICAgICAgICAgICAgICAgbmVlZFJlZiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRlci5hdmFpbGFibGVCaXRzIC0gMiAvKiBBdCBsZWFzdCBvbiBieXRlIGZvciByZWYgZmxhZyAqLyA+PSBpbml0Q2VsbC5iaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRSZWYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRSZWYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHJlZlxuICAgICAgICAgICAgaWYgKG5lZWRSZWYpIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVSZWYoaW5pdENlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJ1aWxkZXIoaW5pdENlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RvcmUgYm9keVxuICAgICAgICBsZXQgbmVlZFJlZiA9IGZhbHNlO1xuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmZvcmNlUmVmKSB7XG4gICAgICAgICAgICBuZWVkUmVmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgMS4gSWYgYXQgbGVhc3Qgb25lIGJpdCBmb3IgcmVmIGZsYWdcbiAgICAgICAgICAgICAyLiBJZiBlbm91Z2ggc3BhY2UgZm9yIHJlZnNcbiAgICAgICAgICAgICAzLiBJZiBub3QgZXhvdGljXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGJ1aWxkZXIuYXZhaWxhYmxlQml0cyAtIDEgPj0gbWVzc2FnZS5ib2R5LmJpdHMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgYnVpbGRlci5yZWZzICsgbWVzc2FnZS5ib2R5LnJlZnMubGVuZ3RoIDw9IDQgJiZcbiAgICAgICAgICAgICAgICAhbWVzc2FnZS5ib2R5LmlzRXhvdGljKSB7XG4gICAgICAgICAgICAgICAgbmVlZFJlZiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmVlZFJlZiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRSZWYpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQodHJ1ZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlUmVmKG1lc3NhZ2UuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KGZhbHNlKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCdWlsZGVyKG1lc3NhZ2UuYm9keS5hc0J1aWxkZXIoKSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZU1lc3NhZ2VSZWxheGVkID0gc3RvcmVNZXNzYWdlUmVsYXhlZDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlTWVzc2FnZVJlbGF4ZWQiLCJsb2FkTWVzc2FnZVJlbGF4ZWQiLCJCdWlsZGVyXzEiLCJyZXF1aXJlIiwiQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkXzEiLCJTdGF0ZUluaXRfMSIsInNsaWNlIiwiaW5mbyIsImxvYWRDb21tb25NZXNzYWdlSW5mb1JlbGF4ZWQiLCJpbml0IiwibG9hZEJpdCIsImxvYWRTdGF0ZUluaXQiLCJsb2FkUmVmIiwiYmVnaW5QYXJzZSIsImJvZHkiLCJhc0NlbGwiLCJtZXNzYWdlIiwib3B0cyIsImJ1aWxkZXIiLCJzdG9yZSIsInN0b3JlQ29tbW9uTWVzc2FnZUluZm9SZWxheGVkIiwic3RvcmVCaXQiLCJpbml0Q2VsbCIsImJlZ2luQ2VsbCIsInN0b3JlU3RhdGVJbml0IiwibmVlZFJlZiIsImZvcmNlUmVmIiwiYXZhaWxhYmxlQml0cyIsImJpdHMiLCJzdG9yZVJlZiIsInN0b3JlQnVpbGRlciIsImxlbmd0aCIsInJlZnMiLCJpc0V4b3RpYyIsImFzQnVpbGRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/MessageRelaxed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/OutList.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/OutList.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadOutList = exports.storeOutList = exports.loadOutAction = exports.storeOutAction = void 0;\nconst MessageRelaxed_1 = __webpack_require__(/*! ./MessageRelaxed */ \"(ssr)/./node_modules/@ton/core/dist/types/MessageRelaxed.js\");\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nfunction storeOutAction(action) {\n    switch(action.type){\n        case \"sendMsg\":\n            return storeOutActionSendMsg(action);\n        case \"setCode\":\n            return storeOutActionSetCode(action);\n        default:\n            throw new Error(`Unknown action type ${action.type}`);\n    }\n}\nexports.storeOutAction = storeOutAction;\n/*\naction_send_msg#0ec3c86d mode:(## 8)\n  out_msg:^(MessageRelaxed Any) = OutAction;\n*/ const outActionSendMsgTag = 0x0ec3c86d;\nfunction storeOutActionSendMsg(action) {\n    return (builder)=>{\n        builder.storeUint(outActionSendMsgTag, 32).storeUint(action.mode, 8).storeRef((0, Builder_1.beginCell)().store((0, MessageRelaxed_1.storeMessageRelaxed)(action.outMsg)).endCell());\n    };\n}\n/*\naction_set_code#ad4de08e new_code:^Cell = OutAction;\n */ const outActionSetCodeTag = 0xad4de08e;\nfunction storeOutActionSetCode(action) {\n    return (builder)=>{\n        builder.storeUint(outActionSetCodeTag, 32).storeRef(action.newCode);\n    };\n}\nfunction loadOutAction(slice) {\n    const tag = slice.loadUint(32);\n    if (tag === outActionSendMsgTag) {\n        const mode = slice.loadUint(8);\n        const outMsg = (0, MessageRelaxed_1.loadMessageRelaxed)(slice.loadRef().beginParse());\n        return {\n            type: \"sendMsg\",\n            mode,\n            outMsg\n        };\n    }\n    if (tag === outActionSetCodeTag) {\n        const newCode = slice.loadRef();\n        return {\n            type: \"setCode\",\n            newCode\n        };\n    }\n    throw new Error(`Unknown out action tag 0x${tag.toString(16)}`);\n}\nexports.loadOutAction = loadOutAction;\n/*\nout_list_empty$_ = OutList 0;\nout_list$_ {n:#} prev:^(OutList n) action:OutAction\n  = OutList (n + 1);\n */ function storeOutList(actions) {\n    const cell = actions.reduce((cell, action)=>(0, Builder_1.beginCell)().storeRef(cell).store(storeOutAction(action)).endCell(), (0, Builder_1.beginCell)().endCell());\n    return (builder)=>{\n        builder.storeSlice(cell.beginParse());\n    };\n}\nexports.storeOutList = storeOutList;\nfunction loadOutList(slice) {\n    const actions = [];\n    while(slice.remainingRefs){\n        const nextCell = slice.loadRef();\n        actions.push(loadOutAction(slice));\n        slice = nextCell.beginParse();\n    }\n    return actions.reverse();\n}\nexports.loadOutList = loadOutList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvT3V0TGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUNuRyxNQUFNTSxtQkFBbUJDLG1CQUFPQSxDQUFDLHFGQUFrQjtBQUNuRCxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQywwRUFBZ0I7QUFDMUMsU0FBU0YsZUFBZUksTUFBTTtJQUMxQixPQUFRQSxPQUFPQyxJQUFJO1FBQ2YsS0FBSztZQUNELE9BQU9DLHNCQUFzQkY7UUFDakMsS0FBSztZQUNELE9BQU9HLHNCQUFzQkg7UUFDakM7WUFDSSxNQUFNLElBQUlJLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRUosT0FBT0MsSUFBSSxDQUFDLENBQUM7SUFDNUQ7QUFDSjtBQUNBVixzQkFBc0IsR0FBR0s7QUFDekI7OztBQUdBLEdBQ0EsTUFBTVMsc0JBQXNCO0FBQzVCLFNBQVNILHNCQUFzQkYsTUFBTTtJQUNqQyxPQUFPLENBQUNNO1FBQ0pBLFFBQVFDLFNBQVMsQ0FBQ0YscUJBQXFCLElBQ2xDRSxTQUFTLENBQUNQLE9BQU9RLElBQUksRUFBRSxHQUN2QkMsUUFBUSxDQUFDLENBQUMsR0FBR1YsVUFBVVcsU0FBUyxJQUFJQyxLQUFLLENBQUMsQ0FBQyxHQUFHZCxpQkFBaUJlLG1CQUFtQixFQUFFWixPQUFPYSxNQUFNLEdBQUdDLE9BQU87SUFDcEg7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTUMsc0JBQXNCO0FBQzVCLFNBQVNaLHNCQUFzQkgsTUFBTTtJQUNqQyxPQUFPLENBQUNNO1FBQ0pBLFFBQVFDLFNBQVMsQ0FBQ1EscUJBQXFCLElBQUlOLFFBQVEsQ0FBQ1QsT0FBT2dCLE9BQU87SUFDdEU7QUFDSjtBQUNBLFNBQVNyQixjQUFjc0IsS0FBSztJQUN4QixNQUFNQyxNQUFNRCxNQUFNRSxRQUFRLENBQUM7SUFDM0IsSUFBSUQsUUFBUWIscUJBQXFCO1FBQzdCLE1BQU1HLE9BQU9TLE1BQU1FLFFBQVEsQ0FBQztRQUM1QixNQUFNTixTQUFTLENBQUMsR0FBR2hCLGlCQUFpQnVCLGtCQUFrQixFQUFFSCxNQUFNSSxPQUFPLEdBQUdDLFVBQVU7UUFDbEYsT0FBTztZQUNIckIsTUFBTTtZQUNOTztZQUNBSztRQUNKO0lBQ0o7SUFDQSxJQUFJSyxRQUFRSCxxQkFBcUI7UUFDN0IsTUFBTUMsVUFBVUMsTUFBTUksT0FBTztRQUM3QixPQUFPO1lBQ0hwQixNQUFNO1lBQ05lO1FBQ0o7SUFDSjtJQUNBLE1BQU0sSUFBSVosTUFBTSxDQUFDLHlCQUF5QixFQUFFYyxJQUFJSyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQ2xFO0FBQ0FoQyxxQkFBcUIsR0FBR0k7QUFDeEI7Ozs7Q0FJQyxHQUNELFNBQVNELGFBQWE4QixPQUFPO0lBQ3pCLE1BQU1DLE9BQU9ELFFBQVFFLE1BQU0sQ0FBQyxDQUFDRCxNQUFNekIsU0FBVyxDQUFDLEdBQUdELFVBQVVXLFNBQVMsSUFDaEVELFFBQVEsQ0FBQ2dCLE1BQ1RkLEtBQUssQ0FBQ2YsZUFBZUksU0FDckJjLE9BQU8sSUFBSSxDQUFDLEdBQUdmLFVBQVVXLFNBQVMsSUFBSUksT0FBTztJQUNsRCxPQUFPLENBQUNSO1FBQ0pBLFFBQVFxQixVQUFVLENBQUNGLEtBQUtILFVBQVU7SUFDdEM7QUFDSjtBQUNBL0Isb0JBQW9CLEdBQUdHO0FBQ3ZCLFNBQVNELFlBQVl3QixLQUFLO0lBQ3RCLE1BQU1PLFVBQVUsRUFBRTtJQUNsQixNQUFPUCxNQUFNVyxhQUFhLENBQUU7UUFDeEIsTUFBTUMsV0FBV1osTUFBTUksT0FBTztRQUM5QkcsUUFBUU0sSUFBSSxDQUFDbkMsY0FBY3NCO1FBQzNCQSxRQUFRWSxTQUFTUCxVQUFVO0lBQy9CO0lBQ0EsT0FBT0UsUUFBUU8sT0FBTztBQUMxQjtBQUNBeEMsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9PdXRMaXN0LmpzPzQ2ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRPdXRMaXN0ID0gZXhwb3J0cy5zdG9yZU91dExpc3QgPSBleHBvcnRzLmxvYWRPdXRBY3Rpb24gPSBleHBvcnRzLnN0b3JlT3V0QWN0aW9uID0gdm9pZCAwO1xuY29uc3QgTWVzc2FnZVJlbGF4ZWRfMSA9IHJlcXVpcmUoXCIuL01lc3NhZ2VSZWxheGVkXCIpO1xuY29uc3QgQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL2JvYy9CdWlsZGVyXCIpO1xuZnVuY3Rpb24gc3RvcmVPdXRBY3Rpb24oYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdzZW5kTXNnJzpcbiAgICAgICAgICAgIHJldHVybiBzdG9yZU91dEFjdGlvblNlbmRNc2coYWN0aW9uKTtcbiAgICAgICAgY2FzZSAnc2V0Q29kZSc6XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVPdXRBY3Rpb25TZXRDb2RlKGFjdGlvbik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gYWN0aW9uIHR5cGUgJHthY3Rpb24udHlwZX1gKTtcbiAgICB9XG59XG5leHBvcnRzLnN0b3JlT3V0QWN0aW9uID0gc3RvcmVPdXRBY3Rpb247XG4vKlxuYWN0aW9uX3NlbmRfbXNnIzBlYzNjODZkIG1vZGU6KCMjIDgpXG4gIG91dF9tc2c6XihNZXNzYWdlUmVsYXhlZCBBbnkpID0gT3V0QWN0aW9uO1xuKi9cbmNvbnN0IG91dEFjdGlvblNlbmRNc2dUYWcgPSAweDBlYzNjODZkO1xuZnVuY3Rpb24gc3RvcmVPdXRBY3Rpb25TZW5kTXNnKGFjdGlvbikge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChvdXRBY3Rpb25TZW5kTXNnVGFnLCAzMilcbiAgICAgICAgICAgIC5zdG9yZVVpbnQoYWN0aW9uLm1vZGUsIDgpXG4gICAgICAgICAgICAuc3RvcmVSZWYoKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKCkuc3RvcmUoKDAsIE1lc3NhZ2VSZWxheGVkXzEuc3RvcmVNZXNzYWdlUmVsYXhlZCkoYWN0aW9uLm91dE1zZykpLmVuZENlbGwoKSk7XG4gICAgfTtcbn1cbi8qXG5hY3Rpb25fc2V0X2NvZGUjYWQ0ZGUwOGUgbmV3X2NvZGU6XkNlbGwgPSBPdXRBY3Rpb247XG4gKi9cbmNvbnN0IG91dEFjdGlvblNldENvZGVUYWcgPSAweGFkNGRlMDhlO1xuZnVuY3Rpb24gc3RvcmVPdXRBY3Rpb25TZXRDb2RlKGFjdGlvbikge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChvdXRBY3Rpb25TZXRDb2RlVGFnLCAzMikuc3RvcmVSZWYoYWN0aW9uLm5ld0NvZGUpO1xuICAgIH07XG59XG5mdW5jdGlvbiBsb2FkT3V0QWN0aW9uKHNsaWNlKSB7XG4gICAgY29uc3QgdGFnID0gc2xpY2UubG9hZFVpbnQoMzIpO1xuICAgIGlmICh0YWcgPT09IG91dEFjdGlvblNlbmRNc2dUYWcpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHNsaWNlLmxvYWRVaW50KDgpO1xuICAgICAgICBjb25zdCBvdXRNc2cgPSAoMCwgTWVzc2FnZVJlbGF4ZWRfMS5sb2FkTWVzc2FnZVJlbGF4ZWQpKHNsaWNlLmxvYWRSZWYoKS5iZWdpblBhcnNlKCkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ3NlbmRNc2cnLFxuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIG91dE1zZ1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodGFnID09PSBvdXRBY3Rpb25TZXRDb2RlVGFnKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvZGUgPSBzbGljZS5sb2FkUmVmKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnc2V0Q29kZScsXG4gICAgICAgICAgICBuZXdDb2RlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvdXQgYWN0aW9uIHRhZyAweCR7dGFnLnRvU3RyaW5nKDE2KX1gKTtcbn1cbmV4cG9ydHMubG9hZE91dEFjdGlvbiA9IGxvYWRPdXRBY3Rpb247XG4vKlxub3V0X2xpc3RfZW1wdHkkXyA9IE91dExpc3QgMDtcbm91dF9saXN0JF8ge246I30gcHJldjpeKE91dExpc3QgbikgYWN0aW9uOk91dEFjdGlvblxuICA9IE91dExpc3QgKG4gKyAxKTtcbiAqL1xuZnVuY3Rpb24gc3RvcmVPdXRMaXN0KGFjdGlvbnMpIHtcbiAgICBjb25zdCBjZWxsID0gYWN0aW9ucy5yZWR1Y2UoKGNlbGwsIGFjdGlvbikgPT4gKDAsIEJ1aWxkZXJfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgLnN0b3JlUmVmKGNlbGwpXG4gICAgICAgIC5zdG9yZShzdG9yZU91dEFjdGlvbihhY3Rpb24pKVxuICAgICAgICAuZW5kQ2VsbCgpLCAoMCwgQnVpbGRlcl8xLmJlZ2luQ2VsbCkoKS5lbmRDZWxsKCkpO1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlU2xpY2UoY2VsbC5iZWdpblBhcnNlKCkpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlT3V0TGlzdCA9IHN0b3JlT3V0TGlzdDtcbmZ1bmN0aW9uIGxvYWRPdXRMaXN0KHNsaWNlKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgIHdoaWxlIChzbGljZS5yZW1haW5pbmdSZWZzKSB7XG4gICAgICAgIGNvbnN0IG5leHRDZWxsID0gc2xpY2UubG9hZFJlZigpO1xuICAgICAgICBhY3Rpb25zLnB1c2gobG9hZE91dEFjdGlvbihzbGljZSkpO1xuICAgICAgICBzbGljZSA9IG5leHRDZWxsLmJlZ2luUGFyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbnMucmV2ZXJzZSgpO1xufVxuZXhwb3J0cy5sb2FkT3V0TGlzdCA9IGxvYWRPdXRMaXN0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9hZE91dExpc3QiLCJzdG9yZU91dExpc3QiLCJsb2FkT3V0QWN0aW9uIiwic3RvcmVPdXRBY3Rpb24iLCJNZXNzYWdlUmVsYXhlZF8xIiwicmVxdWlyZSIsIkJ1aWxkZXJfMSIsImFjdGlvbiIsInR5cGUiLCJzdG9yZU91dEFjdGlvblNlbmRNc2ciLCJzdG9yZU91dEFjdGlvblNldENvZGUiLCJFcnJvciIsIm91dEFjdGlvblNlbmRNc2dUYWciLCJidWlsZGVyIiwic3RvcmVVaW50IiwibW9kZSIsInN0b3JlUmVmIiwiYmVnaW5DZWxsIiwic3RvcmUiLCJzdG9yZU1lc3NhZ2VSZWxheGVkIiwib3V0TXNnIiwiZW5kQ2VsbCIsIm91dEFjdGlvblNldENvZGVUYWciLCJuZXdDb2RlIiwic2xpY2UiLCJ0YWciLCJsb2FkVWludCIsImxvYWRNZXNzYWdlUmVsYXhlZCIsImxvYWRSZWYiLCJiZWdpblBhcnNlIiwidG9TdHJpbmciLCJhY3Rpb25zIiwiY2VsbCIsInJlZHVjZSIsInN0b3JlU2xpY2UiLCJyZW1haW5pbmdSZWZzIiwibmV4dENlbGwiLCJwdXNoIiwicmV2ZXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/OutList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/SendMode.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SendMode.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SendMode = void 0;\nvar SendMode;\n(function(SendMode) {\n    SendMode[SendMode[\"CARRY_ALL_REMAINING_BALANCE\"] = 128] = \"CARRY_ALL_REMAINING_BALANCE\";\n    SendMode[SendMode[\"CARRY_ALL_REMAINING_INCOMING_VALUE\"] = 64] = \"CARRY_ALL_REMAINING_INCOMING_VALUE\";\n    SendMode[SendMode[\"DESTROY_ACCOUNT_IF_ZERO\"] = 32] = \"DESTROY_ACCOUNT_IF_ZERO\";\n    SendMode[SendMode[\"PAY_GAS_SEPARATELY\"] = 1] = \"PAY_GAS_SEPARATELY\";\n    SendMode[SendMode[\"IGNORE_ERRORS\"] = 2] = \"IGNORE_ERRORS\";\n    SendMode[SendMode[\"NONE\"] = 0] = \"NONE\";\n})(SendMode || (exports.SendMode = SendMode = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2VuZE1vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsSUFBSUU7QUFDSCxVQUFVQSxRQUFRO0lBQ2ZBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLDhCQUE4QixHQUFHLElBQUksR0FBRztJQUMxREEsUUFBUSxDQUFDQSxRQUFRLENBQUMscUNBQXFDLEdBQUcsR0FBRyxHQUFHO0lBQ2hFQSxRQUFRLENBQUNBLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxHQUFHLEdBQUc7SUFDckRBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLHFCQUFxQixHQUFHLEVBQUUsR0FBRztJQUMvQ0EsUUFBUSxDQUFDQSxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0FBQ3JDLEdBQUdBLFlBQWFGLENBQUFBLGdCQUFnQixHQUFHRSxXQUFXLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3R5cGVzL1NlbmRNb2RlLmpzP2QzYzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlbmRNb2RlID0gdm9pZCAwO1xudmFyIFNlbmRNb2RlO1xuKGZ1bmN0aW9uIChTZW5kTW9kZSkge1xuICAgIFNlbmRNb2RlW1NlbmRNb2RlW1wiQ0FSUllfQUxMX1JFTUFJTklOR19CQUxBTkNFXCJdID0gMTI4XSA9IFwiQ0FSUllfQUxMX1JFTUFJTklOR19CQUxBTkNFXCI7XG4gICAgU2VuZE1vZGVbU2VuZE1vZGVbXCJDQVJSWV9BTExfUkVNQUlOSU5HX0lOQ09NSU5HX1ZBTFVFXCJdID0gNjRdID0gXCJDQVJSWV9BTExfUkVNQUlOSU5HX0lOQ09NSU5HX1ZBTFVFXCI7XG4gICAgU2VuZE1vZGVbU2VuZE1vZGVbXCJERVNUUk9ZX0FDQ09VTlRfSUZfWkVST1wiXSA9IDMyXSA9IFwiREVTVFJPWV9BQ0NPVU5UX0lGX1pFUk9cIjtcbiAgICBTZW5kTW9kZVtTZW5kTW9kZVtcIlBBWV9HQVNfU0VQQVJBVEVMWVwiXSA9IDFdID0gXCJQQVlfR0FTX1NFUEFSQVRFTFlcIjtcbiAgICBTZW5kTW9kZVtTZW5kTW9kZVtcIklHTk9SRV9FUlJPUlNcIl0gPSAyXSA9IFwiSUdOT1JFX0VSUk9SU1wiO1xuICAgIFNlbmRNb2RlW1NlbmRNb2RlW1wiTk9ORVwiXSA9IDBdID0gXCJOT05FXCI7XG59KShTZW5kTW9kZSB8fCAoZXhwb3J0cy5TZW5kTW9kZSA9IFNlbmRNb2RlID0ge30pKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNlbmRNb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/SendMode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/ShardAccount.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardAccount.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeShardAccount = exports.loadShardAccount = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst Account_1 = __webpack_require__(/*! ./Account */ \"(ssr)/./node_modules/@ton/core/dist/types/Account.js\");\nfunction loadShardAccount(slice) {\n    let accountRef = slice.loadRef();\n    let account = undefined;\n    if (!accountRef.isExotic) {\n        let accountSlice = accountRef.beginParse();\n        if (accountSlice.loadBit()) {\n            account = (0, Account_1.loadAccount)(accountSlice);\n        }\n    }\n    return {\n        account,\n        lastTransactionHash: slice.loadUintBig(256),\n        lastTransactionLt: slice.loadUintBig(64)\n    };\n}\nexports.loadShardAccount = loadShardAccount;\nfunction storeShardAccount(src) {\n    return (builder)=>{\n        if (src.account) {\n            builder.storeRef((0, Builder_1.beginCell)().storeBit(true).store((0, Account_1.storeAccount)(src.account)));\n        } else {\n            builder.storeRef((0, Builder_1.beginCell)().storeBit(false));\n        }\n        builder.storeUint(src.lastTransactionHash, 256);\n        builder.storeUint(src.lastTransactionLt, 64);\n    };\n}\nexports.storeShardAccount = storeShardAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRBY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUM1RCxNQUFNSSxZQUFZQyxtQkFBT0EsQ0FBQywwRUFBZ0I7QUFDMUMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMsdUVBQVc7QUFDckMsU0FBU0YsaUJBQWlCSSxLQUFLO0lBQzNCLElBQUlDLGFBQWFELE1BQU1FLE9BQU87SUFDOUIsSUFBSUMsVUFBVUM7SUFDZCxJQUFJLENBQUNILFdBQVdJLFFBQVEsRUFBRTtRQUN0QixJQUFJQyxlQUFlTCxXQUFXTSxVQUFVO1FBQ3hDLElBQUlELGFBQWFFLE9BQU8sSUFBSTtZQUN4QkwsVUFBVSxDQUFDLEdBQUdKLFVBQVVVLFdBQVcsRUFBRUg7UUFDekM7SUFDSjtJQUNBLE9BQU87UUFDSEg7UUFDQU8scUJBQXFCVixNQUFNVyxXQUFXLENBQUM7UUFDdkNDLG1CQUFtQlosTUFBTVcsV0FBVyxDQUFDO0lBQ3pDO0FBQ0o7QUFDQWxCLHdCQUF3QixHQUFHRztBQUMzQixTQUFTRCxrQkFBa0JrQixHQUFHO0lBQzFCLE9BQU8sQ0FBQ0M7UUFDSixJQUFJRCxJQUFJVixPQUFPLEVBQUU7WUFDYlcsUUFBUUMsUUFBUSxDQUFDLENBQUMsR0FBR2xCLFVBQVVtQixTQUFTLElBQ25DQyxRQUFRLENBQUMsTUFDVEMsS0FBSyxDQUFDLENBQUMsR0FBR25CLFVBQVVvQixZQUFZLEVBQUVOLElBQUlWLE9BQU87UUFDdEQsT0FDSztZQUNEVyxRQUFRQyxRQUFRLENBQUMsQ0FBQyxHQUFHbEIsVUFBVW1CLFNBQVMsSUFDbkNDLFFBQVEsQ0FBQztRQUNsQjtRQUNBSCxRQUFRTSxTQUFTLENBQUNQLElBQUlILG1CQUFtQixFQUFFO1FBQzNDSSxRQUFRTSxTQUFTLENBQUNQLElBQUlELGlCQUFpQixFQUFFO0lBQzdDO0FBQ0o7QUFDQW5CLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRBY2NvdW50LmpzPzg2M2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlU2hhcmRBY2NvdW50ID0gZXhwb3J0cy5sb2FkU2hhcmRBY2NvdW50ID0gdm9pZCAwO1xuY29uc3QgQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL2JvYy9CdWlsZGVyXCIpO1xuY29uc3QgQWNjb3VudF8xID0gcmVxdWlyZShcIi4vQWNjb3VudFwiKTtcbmZ1bmN0aW9uIGxvYWRTaGFyZEFjY291bnQoc2xpY2UpIHtcbiAgICBsZXQgYWNjb3VudFJlZiA9IHNsaWNlLmxvYWRSZWYoKTtcbiAgICBsZXQgYWNjb3VudCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIWFjY291bnRSZWYuaXNFeG90aWMpIHtcbiAgICAgICAgbGV0IGFjY291bnRTbGljZSA9IGFjY291bnRSZWYuYmVnaW5QYXJzZSgpO1xuICAgICAgICBpZiAoYWNjb3VudFNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICAgICAgYWNjb3VudCA9ICgwLCBBY2NvdW50XzEubG9hZEFjY291bnQpKGFjY291bnRTbGljZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgbGFzdFRyYW5zYWN0aW9uSGFzaDogc2xpY2UubG9hZFVpbnRCaWcoMjU2KSxcbiAgICAgICAgbGFzdFRyYW5zYWN0aW9uTHQ6IHNsaWNlLmxvYWRVaW50QmlnKDY0KVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRTaGFyZEFjY291bnQgPSBsb2FkU2hhcmRBY2NvdW50O1xuZnVuY3Rpb24gc3RvcmVTaGFyZEFjY291bnQoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGlmIChzcmMuYWNjb3VudCkge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVJlZigoMCwgQnVpbGRlcl8xLmJlZ2luQ2VsbCkoKVxuICAgICAgICAgICAgICAgIC5zdG9yZUJpdCh0cnVlKVxuICAgICAgICAgICAgICAgIC5zdG9yZSgoMCwgQWNjb3VudF8xLnN0b3JlQWNjb3VudCkoc3JjLmFjY291bnQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlUmVmKCgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgICAgICAgICAgLnN0b3JlQml0KGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLmxhc3RUcmFuc2FjdGlvbkhhc2gsIDI1Nik7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5sYXN0VHJhbnNhY3Rpb25MdCwgNjQpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlU2hhcmRBY2NvdW50ID0gc3RvcmVTaGFyZEFjY291bnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVNoYXJkQWNjb3VudCIsImxvYWRTaGFyZEFjY291bnQiLCJCdWlsZGVyXzEiLCJyZXF1aXJlIiwiQWNjb3VudF8xIiwic2xpY2UiLCJhY2NvdW50UmVmIiwibG9hZFJlZiIsImFjY291bnQiLCJ1bmRlZmluZWQiLCJpc0V4b3RpYyIsImFjY291bnRTbGljZSIsImJlZ2luUGFyc2UiLCJsb2FkQml0IiwibG9hZEFjY291bnQiLCJsYXN0VHJhbnNhY3Rpb25IYXNoIiwibG9hZFVpbnRCaWciLCJsYXN0VHJhbnNhY3Rpb25MdCIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZVJlZiIsImJlZ2luQ2VsbCIsInN0b3JlQml0Iiwic3RvcmUiLCJzdG9yZUFjY291bnQiLCJzdG9yZVVpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/ShardAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/ShardAccounts.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardAccounts.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = void 0;\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nconst DepthBalanceInfo_1 = __webpack_require__(/*! ./DepthBalanceInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/DepthBalanceInfo.js\");\nconst ShardAccount_1 = __webpack_require__(/*! ./ShardAccount */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardAccount.js\");\nexports.ShardAccountRefValue = {\n    parse: (cs)=>{\n        let depthBalanceInfo = (0, DepthBalanceInfo_1.loadDepthBalanceInfo)(cs);\n        let shardAccount = (0, ShardAccount_1.loadShardAccount)(cs);\n        return {\n            depthBalanceInfo,\n            shardAccount\n        };\n    },\n    serialize (src, builder) {\n        builder.store((0, DepthBalanceInfo_1.storeDepthBalanceInfo)(src.depthBalanceInfo));\n        builder.store((0, ShardAccount_1.storeShardAccount)(src.shardAccount));\n    }\n};\nfunction loadShardAccounts(cs) {\n    return Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.BigUint(256), exports.ShardAccountRefValue, cs);\n}\nexports.loadShardAccounts = loadShardAccounts;\nfunction storeShardAccounts(src) {\n    return (Builder)=>{\n        Builder.storeDict(src);\n    };\n}\nexports.storeShardAccounts = storeShardAccounts;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRBY2NvdW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLHlCQUF5QixHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQzdGLE1BQU1LLGVBQWVDLG1CQUFPQSxDQUFDLGtGQUFvQjtBQUNqRCxNQUFNQyxxQkFBcUJELG1CQUFPQSxDQUFDLHlGQUFvQjtBQUN2RCxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLGlGQUFnQjtBQUMvQ04sNEJBQTRCLEdBQUc7SUFDM0JTLE9BQU8sQ0FBQ0M7UUFDSixJQUFJQyxtQkFBbUIsQ0FBQyxHQUFHSixtQkFBbUJLLG9CQUFvQixFQUFFRjtRQUNwRSxJQUFJRyxlQUFlLENBQUMsR0FBR0wsZUFBZU0sZ0JBQWdCLEVBQUVKO1FBQ3hELE9BQU87WUFDSEM7WUFDQUU7UUFDSjtJQUNKO0lBQ0FFLFdBQVVDLEdBQUcsRUFBRUMsT0FBTztRQUNsQkEsUUFBUUMsS0FBSyxDQUFDLENBQUMsR0FBR1gsbUJBQW1CWSxxQkFBcUIsRUFBRUgsSUFBSUwsZ0JBQWdCO1FBQ2hGTSxRQUFRQyxLQUFLLENBQUMsQ0FBQyxHQUFHVixlQUFlWSxpQkFBaUIsRUFBRUosSUFBSUgsWUFBWTtJQUN4RTtBQUNKO0FBQ0EsU0FBU1Ysa0JBQWtCTyxFQUFFO0lBQ3pCLE9BQU9MLGFBQWFnQixVQUFVLENBQUNDLElBQUksQ0FBQ2pCLGFBQWFnQixVQUFVLENBQUNFLElBQUksQ0FBQ0MsT0FBTyxDQUFDLE1BQU14QixRQUFRSSxvQkFBb0IsRUFBRU07QUFDakg7QUFDQVYseUJBQXlCLEdBQUdHO0FBQzVCLFNBQVNELG1CQUFtQmMsR0FBRztJQUMzQixPQUFPLENBQUNTO1FBQ0pBLFFBQVFDLFNBQVMsQ0FBQ1Y7SUFDdEI7QUFDSjtBQUNBaEIsMEJBQTBCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9TaGFyZEFjY291bnRzLmpzPzZmNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlU2hhcmRBY2NvdW50cyA9IGV4cG9ydHMubG9hZFNoYXJkQWNjb3VudHMgPSBleHBvcnRzLlNoYXJkQWNjb3VudFJlZlZhbHVlID0gdm9pZCAwO1xuY29uc3QgRGljdGlvbmFyeV8xID0gcmVxdWlyZShcIi4uL2RpY3QvRGljdGlvbmFyeVwiKTtcbmNvbnN0IERlcHRoQmFsYW5jZUluZm9fMSA9IHJlcXVpcmUoXCIuL0RlcHRoQmFsYW5jZUluZm9cIik7XG5jb25zdCBTaGFyZEFjY291bnRfMSA9IHJlcXVpcmUoXCIuL1NoYXJkQWNjb3VudFwiKTtcbmV4cG9ydHMuU2hhcmRBY2NvdW50UmVmVmFsdWUgPSB7XG4gICAgcGFyc2U6IChjcykgPT4ge1xuICAgICAgICBsZXQgZGVwdGhCYWxhbmNlSW5mbyA9ICgwLCBEZXB0aEJhbGFuY2VJbmZvXzEubG9hZERlcHRoQmFsYW5jZUluZm8pKGNzKTtcbiAgICAgICAgbGV0IHNoYXJkQWNjb3VudCA9ICgwLCBTaGFyZEFjY291bnRfMS5sb2FkU2hhcmRBY2NvdW50KShjcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZXB0aEJhbGFuY2VJbmZvLFxuICAgICAgICAgICAgc2hhcmRBY2NvdW50XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBzZXJpYWxpemUoc3JjLCBidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIERlcHRoQmFsYW5jZUluZm9fMS5zdG9yZURlcHRoQmFsYW5jZUluZm8pKHNyYy5kZXB0aEJhbGFuY2VJbmZvKSk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIFNoYXJkQWNjb3VudF8xLnN0b3JlU2hhcmRBY2NvdW50KShzcmMuc2hhcmRBY2NvdW50KSk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBsb2FkU2hhcmRBY2NvdW50cyhjcykge1xuICAgIHJldHVybiBEaWN0aW9uYXJ5XzEuRGljdGlvbmFyeS5sb2FkKERpY3Rpb25hcnlfMS5EaWN0aW9uYXJ5LktleXMuQmlnVWludCgyNTYpLCBleHBvcnRzLlNoYXJkQWNjb3VudFJlZlZhbHVlLCBjcyk7XG59XG5leHBvcnRzLmxvYWRTaGFyZEFjY291bnRzID0gbG9hZFNoYXJkQWNjb3VudHM7XG5mdW5jdGlvbiBzdG9yZVNoYXJkQWNjb3VudHMoc3JjKSB7XG4gICAgcmV0dXJuIChCdWlsZGVyKSA9PiB7XG4gICAgICAgIEJ1aWxkZXIuc3RvcmVEaWN0KHNyYyk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVTaGFyZEFjY291bnRzID0gc3RvcmVTaGFyZEFjY291bnRzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVTaGFyZEFjY291bnRzIiwibG9hZFNoYXJkQWNjb3VudHMiLCJTaGFyZEFjY291bnRSZWZWYWx1ZSIsIkRpY3Rpb25hcnlfMSIsInJlcXVpcmUiLCJEZXB0aEJhbGFuY2VJbmZvXzEiLCJTaGFyZEFjY291bnRfMSIsInBhcnNlIiwiY3MiLCJkZXB0aEJhbGFuY2VJbmZvIiwibG9hZERlcHRoQmFsYW5jZUluZm8iLCJzaGFyZEFjY291bnQiLCJsb2FkU2hhcmRBY2NvdW50Iiwic2VyaWFsaXplIiwic3JjIiwiYnVpbGRlciIsInN0b3JlIiwic3RvcmVEZXB0aEJhbGFuY2VJbmZvIiwic3RvcmVTaGFyZEFjY291bnQiLCJEaWN0aW9uYXJ5IiwibG9hZCIsIktleXMiLCJCaWdVaW50IiwiQnVpbGRlciIsInN0b3JlRGljdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/ShardAccounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/ShardIdent.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardIdent.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeShardIdent = exports.loadShardIdent = void 0;\nfunction loadShardIdent(slice) {\n    if (slice.loadUint(2) !== 0) {\n        throw Error(\"Invalid data\");\n    }\n    return {\n        shardPrefixBits: slice.loadUint(6),\n        workchainId: slice.loadInt(32),\n        shardPrefix: slice.loadUintBig(64)\n    };\n}\nexports.loadShardIdent = loadShardIdent;\nfunction storeShardIdent(src) {\n    return (builder)=>{\n        builder.storeUint(0, 2);\n        builder.storeUint(src.shardPrefixBits, 6);\n        builder.storeInt(src.workchainId, 32);\n        builder.storeUint(src.shardPrefix, 64);\n    };\n}\nexports.storeShardIdent = storeShardIdent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRJZGVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDeEQsU0FBU0csZUFBZUMsS0FBSztJQUN6QixJQUFJQSxNQUFNQyxRQUFRLENBQUMsT0FBTyxHQUFHO1FBQ3pCLE1BQU1DLE1BQU07SUFDaEI7SUFDQSxPQUFPO1FBQ0hDLGlCQUFpQkgsTUFBTUMsUUFBUSxDQUFDO1FBQ2hDRyxhQUFhSixNQUFNSyxPQUFPLENBQUM7UUFDM0JDLGFBQWFOLE1BQU1PLFdBQVcsQ0FBQztJQUNuQztBQUNKO0FBQ0FYLHNCQUFzQixHQUFHRztBQUN6QixTQUFTRCxnQkFBZ0JVLEdBQUc7SUFDeEIsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxTQUFTLENBQUMsR0FBRztRQUNyQkQsUUFBUUMsU0FBUyxDQUFDRixJQUFJTCxlQUFlLEVBQUU7UUFDdkNNLFFBQVFFLFFBQVEsQ0FBQ0gsSUFBSUosV0FBVyxFQUFFO1FBQ2xDSyxRQUFRQyxTQUFTLENBQUNGLElBQUlGLFdBQVcsRUFBRTtJQUN2QztBQUNKO0FBQ0FWLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRJZGVudC5qcz8zNGYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZVNoYXJkSWRlbnQgPSBleHBvcnRzLmxvYWRTaGFyZElkZW50ID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZFNoYXJkSWRlbnQoc2xpY2UpIHtcbiAgICBpZiAoc2xpY2UubG9hZFVpbnQoMikgIT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzaGFyZFByZWZpeEJpdHM6IHNsaWNlLmxvYWRVaW50KDYpLFxuICAgICAgICB3b3JrY2hhaW5JZDogc2xpY2UubG9hZEludCgzMiksXG4gICAgICAgIHNoYXJkUHJlZml4OiBzbGljZS5sb2FkVWludEJpZyg2NClcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkU2hhcmRJZGVudCA9IGxvYWRTaGFyZElkZW50O1xuZnVuY3Rpb24gc3RvcmVTaGFyZElkZW50KHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludCgwLCAyKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLnNoYXJkUHJlZml4Qml0cywgNik7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVJbnQoc3JjLndvcmtjaGFpbklkLCAzMik7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5zaGFyZFByZWZpeCwgNjQpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlU2hhcmRJZGVudCA9IHN0b3JlU2hhcmRJZGVudDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlU2hhcmRJZGVudCIsImxvYWRTaGFyZElkZW50Iiwic2xpY2UiLCJsb2FkVWludCIsIkVycm9yIiwic2hhcmRQcmVmaXhCaXRzIiwid29ya2NoYWluSWQiLCJsb2FkSW50Iiwic2hhcmRQcmVmaXgiLCJsb2FkVWludEJpZyIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZVVpbnQiLCJzdG9yZUludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/ShardIdent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/ShardStateUnsplit.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardStateUnsplit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadShardStateUnsplit = void 0;\nconst MasterchainStateExtra_1 = __webpack_require__(/*! ./MasterchainStateExtra */ \"(ssr)/./node_modules/@ton/core/dist/types/MasterchainStateExtra.js\");\nconst ShardAccounts_1 = __webpack_require__(/*! ./ShardAccounts */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardAccounts.js\");\nconst ShardIdent_1 = __webpack_require__(/*! ./ShardIdent */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardIdent.js\");\nfunction loadShardStateUnsplit(cs) {\n    if (cs.loadUint(32) !== 0x9023afe2) {\n        throw Error(\"Invalid data\");\n    }\n    let globalId = cs.loadInt(32);\n    let shardId = (0, ShardIdent_1.loadShardIdent)(cs);\n    let seqno = cs.loadUint(32);\n    let vertSeqNo = cs.loadUint(32);\n    let genUtime = cs.loadUint(32);\n    let genLt = cs.loadUintBig(64);\n    let minRefMcSeqno = cs.loadUint(32);\n    // Skip OutMsgQueueInfo: usually exotic\n    cs.loadRef();\n    let beforeSplit = cs.loadBit();\n    // Parse accounts\n    let shardAccountsRef = cs.loadRef();\n    let accounts = undefined;\n    if (!shardAccountsRef.isExotic) {\n        accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());\n    }\n    // Skip (not used by apps)\n    cs.loadRef();\n    // Parse extras\n    let mcStateExtra = cs.loadBit();\n    let extras = null;\n    if (mcStateExtra) {\n        let cell = cs.loadRef();\n        if (!cell.isExotic) {\n            extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());\n        }\n    }\n    ;\n    return {\n        globalId,\n        shardId,\n        seqno,\n        vertSeqNo,\n        genUtime,\n        genLt,\n        minRefMcSeqno,\n        beforeSplit,\n        accounts,\n        extras\n    };\n}\nexports.loadShardStateUnsplit = loadShardStateUnsplit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2hhcmRTdGF0ZVVuc3BsaXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUcsMEJBQTBCQyxtQkFBT0EsQ0FBQyxtR0FBeUI7QUFDakUsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxtRkFBaUI7QUFDakQsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsNkVBQWM7QUFDM0MsU0FBU0Ysc0JBQXNCSyxFQUFFO0lBQzdCLElBQUlBLEdBQUdDLFFBQVEsQ0FBQyxRQUFRLFlBQVk7UUFDaEMsTUFBTUMsTUFBTTtJQUNoQjtJQUNBLElBQUlDLFdBQVdILEdBQUdJLE9BQU8sQ0FBQztJQUMxQixJQUFJQyxVQUFVLENBQUMsR0FBR04sYUFBYU8sY0FBYyxFQUFFTjtJQUMvQyxJQUFJTyxRQUFRUCxHQUFHQyxRQUFRLENBQUM7SUFDeEIsSUFBSU8sWUFBWVIsR0FBR0MsUUFBUSxDQUFDO0lBQzVCLElBQUlRLFdBQVdULEdBQUdDLFFBQVEsQ0FBQztJQUMzQixJQUFJUyxRQUFRVixHQUFHVyxXQUFXLENBQUM7SUFDM0IsSUFBSUMsZ0JBQWdCWixHQUFHQyxRQUFRLENBQUM7SUFDaEMsdUNBQXVDO0lBQ3ZDRCxHQUFHYSxPQUFPO0lBQ1YsSUFBSUMsY0FBY2QsR0FBR2UsT0FBTztJQUM1QixpQkFBaUI7SUFDakIsSUFBSUMsbUJBQW1CaEIsR0FBR2EsT0FBTztJQUNqQyxJQUFJSSxXQUFXQztJQUNmLElBQUksQ0FBQ0YsaUJBQWlCRyxRQUFRLEVBQUU7UUFDNUJGLFdBQVcsQ0FBQyxHQUFHbkIsZ0JBQWdCc0IsaUJBQWlCLEVBQUVKLGlCQUFpQkssVUFBVTtJQUNqRjtJQUNBLDBCQUEwQjtJQUMxQnJCLEdBQUdhLE9BQU87SUFDVixlQUFlO0lBQ2YsSUFBSVMsZUFBZXRCLEdBQUdlLE9BQU87SUFDN0IsSUFBSVEsU0FBUztJQUNiLElBQUlELGNBQWM7UUFDZCxJQUFJRSxPQUFPeEIsR0FBR2EsT0FBTztRQUNyQixJQUFJLENBQUNXLEtBQUtMLFFBQVEsRUFBRTtZQUNoQkksU0FBUyxDQUFDLEdBQUczQix3QkFBd0I2Qix5QkFBeUIsRUFBRUQsS0FBS0gsVUFBVTtRQUNuRjtJQUNKOztJQUVBLE9BQU87UUFDSGxCO1FBQ0FFO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FFO1FBQ0FHO1FBQ0FNO0lBQ0o7QUFDSjtBQUNBOUIsNkJBQTZCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9TaGFyZFN0YXRlVW5zcGxpdC5qcz9jOWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkU2hhcmRTdGF0ZVVuc3BsaXQgPSB2b2lkIDA7XG5jb25zdCBNYXN0ZXJjaGFpblN0YXRlRXh0cmFfMSA9IHJlcXVpcmUoXCIuL01hc3RlcmNoYWluU3RhdGVFeHRyYVwiKTtcbmNvbnN0IFNoYXJkQWNjb3VudHNfMSA9IHJlcXVpcmUoXCIuL1NoYXJkQWNjb3VudHNcIik7XG5jb25zdCBTaGFyZElkZW50XzEgPSByZXF1aXJlKFwiLi9TaGFyZElkZW50XCIpO1xuZnVuY3Rpb24gbG9hZFNoYXJkU3RhdGVVbnNwbGl0KGNzKSB7XG4gICAgaWYgKGNzLmxvYWRVaW50KDMyKSAhPT0gMHg5MDIzYWZlMikge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICAgIGxldCBnbG9iYWxJZCA9IGNzLmxvYWRJbnQoMzIpO1xuICAgIGxldCBzaGFyZElkID0gKDAsIFNoYXJkSWRlbnRfMS5sb2FkU2hhcmRJZGVudCkoY3MpO1xuICAgIGxldCBzZXFubyA9IGNzLmxvYWRVaW50KDMyKTtcbiAgICBsZXQgdmVydFNlcU5vID0gY3MubG9hZFVpbnQoMzIpO1xuICAgIGxldCBnZW5VdGltZSA9IGNzLmxvYWRVaW50KDMyKTtcbiAgICBsZXQgZ2VuTHQgPSBjcy5sb2FkVWludEJpZyg2NCk7XG4gICAgbGV0IG1pblJlZk1jU2Vxbm8gPSBjcy5sb2FkVWludCgzMik7XG4gICAgLy8gU2tpcCBPdXRNc2dRdWV1ZUluZm86IHVzdWFsbHkgZXhvdGljXG4gICAgY3MubG9hZFJlZigpO1xuICAgIGxldCBiZWZvcmVTcGxpdCA9IGNzLmxvYWRCaXQoKTtcbiAgICAvLyBQYXJzZSBhY2NvdW50c1xuICAgIGxldCBzaGFyZEFjY291bnRzUmVmID0gY3MubG9hZFJlZigpO1xuICAgIGxldCBhY2NvdW50cyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIXNoYXJkQWNjb3VudHNSZWYuaXNFeG90aWMpIHtcbiAgICAgICAgYWNjb3VudHMgPSAoMCwgU2hhcmRBY2NvdW50c18xLmxvYWRTaGFyZEFjY291bnRzKShzaGFyZEFjY291bnRzUmVmLmJlZ2luUGFyc2UoKSk7XG4gICAgfVxuICAgIC8vIFNraXAgKG5vdCB1c2VkIGJ5IGFwcHMpXG4gICAgY3MubG9hZFJlZigpO1xuICAgIC8vIFBhcnNlIGV4dHJhc1xuICAgIGxldCBtY1N0YXRlRXh0cmEgPSBjcy5sb2FkQml0KCk7XG4gICAgbGV0IGV4dHJhcyA9IG51bGw7XG4gICAgaWYgKG1jU3RhdGVFeHRyYSkge1xuICAgICAgICBsZXQgY2VsbCA9IGNzLmxvYWRSZWYoKTtcbiAgICAgICAgaWYgKCFjZWxsLmlzRXhvdGljKSB7XG4gICAgICAgICAgICBleHRyYXMgPSAoMCwgTWFzdGVyY2hhaW5TdGF0ZUV4dHJhXzEubG9hZE1hc3RlcmNoYWluU3RhdGVFeHRyYSkoY2VsbC5iZWdpblBhcnNlKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICByZXR1cm4ge1xuICAgICAgICBnbG9iYWxJZCxcbiAgICAgICAgc2hhcmRJZCxcbiAgICAgICAgc2Vxbm8sXG4gICAgICAgIHZlcnRTZXFObyxcbiAgICAgICAgZ2VuVXRpbWUsXG4gICAgICAgIGdlbkx0LFxuICAgICAgICBtaW5SZWZNY1NlcW5vLFxuICAgICAgICBiZWZvcmVTcGxpdCxcbiAgICAgICAgYWNjb3VudHMsXG4gICAgICAgIGV4dHJhc1xuICAgIH07XG59XG5leHBvcnRzLmxvYWRTaGFyZFN0YXRlVW5zcGxpdCA9IGxvYWRTaGFyZFN0YXRlVW5zcGxpdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRTaGFyZFN0YXRlVW5zcGxpdCIsIk1hc3RlcmNoYWluU3RhdGVFeHRyYV8xIiwicmVxdWlyZSIsIlNoYXJkQWNjb3VudHNfMSIsIlNoYXJkSWRlbnRfMSIsImNzIiwibG9hZFVpbnQiLCJFcnJvciIsImdsb2JhbElkIiwibG9hZEludCIsInNoYXJkSWQiLCJsb2FkU2hhcmRJZGVudCIsInNlcW5vIiwidmVydFNlcU5vIiwiZ2VuVXRpbWUiLCJnZW5MdCIsImxvYWRVaW50QmlnIiwibWluUmVmTWNTZXFubyIsImxvYWRSZWYiLCJiZWZvcmVTcGxpdCIsImxvYWRCaXQiLCJzaGFyZEFjY291bnRzUmVmIiwiYWNjb3VudHMiLCJ1bmRlZmluZWQiLCJpc0V4b3RpYyIsImxvYWRTaGFyZEFjY291bnRzIiwiYmVnaW5QYXJzZSIsIm1jU3RhdGVFeHRyYSIsImV4dHJhcyIsImNlbGwiLCJsb2FkTWFzdGVyY2hhaW5TdGF0ZUV4dHJhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/ShardStateUnsplit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/SimpleLibrary.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SimpleLibrary.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SimpleLibraryValue = exports.storeSimpleLibrary = exports.loadSimpleLibrary = void 0;\nfunction loadSimpleLibrary(slice) {\n    return {\n        public: slice.loadBit(),\n        root: slice.loadRef()\n    };\n}\nexports.loadSimpleLibrary = loadSimpleLibrary;\nfunction storeSimpleLibrary(src) {\n    return (builder)=>{\n        builder.storeBit(src.public);\n        builder.storeRef(src.root);\n    };\n}\nexports.storeSimpleLibrary = storeSimpleLibrary;\nexports.SimpleLibraryValue = {\n    serialize (src, builder) {\n        storeSimpleLibrary(src)(builder);\n    },\n    parse (src) {\n        return loadSimpleLibrary(src);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2ltcGxlTGlicmFyeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLDBCQUEwQixHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQzNGLFNBQVNJLGtCQUFrQkMsS0FBSztJQUM1QixPQUFPO1FBQ0hDLFFBQVFELE1BQU1FLE9BQU87UUFDckJDLE1BQU1ILE1BQU1JLE9BQU87SUFDdkI7QUFDSjtBQUNBVCx5QkFBeUIsR0FBR0k7QUFDNUIsU0FBU0QsbUJBQW1CTyxHQUFHO0lBQzNCLE9BQU8sQ0FBQ0M7UUFDSkEsUUFBUUMsUUFBUSxDQUFDRixJQUFJSixNQUFNO1FBQzNCSyxRQUFRRSxRQUFRLENBQUNILElBQUlGLElBQUk7SUFDN0I7QUFDSjtBQUNBUiwwQkFBMEIsR0FBR0c7QUFDN0JILDBCQUEwQixHQUFHO0lBQ3pCYyxXQUFVSixHQUFHLEVBQUVDLE9BQU87UUFDbEJSLG1CQUFtQk8sS0FBS0M7SUFDNUI7SUFDQUksT0FBTUwsR0FBRztRQUNMLE9BQU9OLGtCQUFrQk07SUFDN0I7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU2ltcGxlTGlicmFyeS5qcz8wMjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaW1wbGVMaWJyYXJ5VmFsdWUgPSBleHBvcnRzLnN0b3JlU2ltcGxlTGlicmFyeSA9IGV4cG9ydHMubG9hZFNpbXBsZUxpYnJhcnkgPSB2b2lkIDA7XG5mdW5jdGlvbiBsb2FkU2ltcGxlTGlicmFyeShzbGljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpYzogc2xpY2UubG9hZEJpdCgpLFxuICAgICAgICByb290OiBzbGljZS5sb2FkUmVmKClcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkU2ltcGxlTGlicmFyeSA9IGxvYWRTaW1wbGVMaWJyYXJ5O1xuZnVuY3Rpb24gc3RvcmVTaW1wbGVMaWJyYXJ5KHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNyYy5wdWJsaWMpO1xuICAgICAgICBidWlsZGVyLnN0b3JlUmVmKHNyYy5yb290KTtcbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZVNpbXBsZUxpYnJhcnkgPSBzdG9yZVNpbXBsZUxpYnJhcnk7XG5leHBvcnRzLlNpbXBsZUxpYnJhcnlWYWx1ZSA9IHtcbiAgICBzZXJpYWxpemUoc3JjLCBidWlsZGVyKSB7XG4gICAgICAgIHN0b3JlU2ltcGxlTGlicmFyeShzcmMpKGJ1aWxkZXIpO1xuICAgIH0sXG4gICAgcGFyc2Uoc3JjKSB7XG4gICAgICAgIHJldHVybiBsb2FkU2ltcGxlTGlicmFyeShzcmMpO1xuICAgIH0sXG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2ltcGxlTGlicmFyeVZhbHVlIiwic3RvcmVTaW1wbGVMaWJyYXJ5IiwibG9hZFNpbXBsZUxpYnJhcnkiLCJzbGljZSIsInB1YmxpYyIsImxvYWRCaXQiLCJyb290IiwibG9hZFJlZiIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZUJpdCIsInN0b3JlUmVmIiwic2VyaWFsaXplIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/SimpleLibrary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/SplitMergeInfo.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SplitMergeInfo.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeSplitMergeInfo = exports.loadSplitMergeInfo = void 0;\nfunction loadSplitMergeInfo(slice) {\n    let currentShardPrefixLength = slice.loadUint(6);\n    let accountSplitDepth = slice.loadUint(6);\n    let thisAddress = slice.loadUintBig(256);\n    let siblingAddress = slice.loadUintBig(256);\n    return {\n        currentShardPrefixLength,\n        accountSplitDepth,\n        thisAddress,\n        siblingAddress\n    };\n}\nexports.loadSplitMergeInfo = loadSplitMergeInfo;\nfunction storeSplitMergeInfo(src) {\n    return (builder)=>{\n        builder.storeUint(src.currentShardPrefixLength, 6);\n        builder.storeUint(src.accountSplitDepth, 6);\n        builder.storeUint(src.thisAddress, 256);\n        builder.storeUint(src.siblingAddress, 256);\n    };\n}\nexports.storeSplitMergeInfo = storeSplitMergeInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3BsaXRNZXJnZUluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2hFLFNBQVNHLG1CQUFtQkMsS0FBSztJQUM3QixJQUFJQywyQkFBMkJELE1BQU1FLFFBQVEsQ0FBQztJQUM5QyxJQUFJQyxvQkFBb0JILE1BQU1FLFFBQVEsQ0FBQztJQUN2QyxJQUFJRSxjQUFjSixNQUFNSyxXQUFXLENBQUM7SUFDcEMsSUFBSUMsaUJBQWlCTixNQUFNSyxXQUFXLENBQUM7SUFDdkMsT0FBTztRQUNISjtRQUNBRTtRQUNBQztRQUNBRTtJQUNKO0FBQ0o7QUFDQVYsMEJBQTBCLEdBQUdHO0FBQzdCLFNBQVNELG9CQUFvQlMsR0FBRztJQUM1QixPQUFPLENBQUNDO1FBQ0pBLFFBQVFDLFNBQVMsQ0FBQ0YsSUFBSU4sd0JBQXdCLEVBQUU7UUFDaERPLFFBQVFDLFNBQVMsQ0FBQ0YsSUFBSUosaUJBQWlCLEVBQUU7UUFDekNLLFFBQVFDLFNBQVMsQ0FBQ0YsSUFBSUgsV0FBVyxFQUFFO1FBQ25DSSxRQUFRQyxTQUFTLENBQUNGLElBQUlELGNBQWMsRUFBRTtJQUMxQztBQUNKO0FBQ0FWLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3BsaXRNZXJnZUluZm8uanM/Zjk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVTcGxpdE1lcmdlSW5mbyA9IGV4cG9ydHMubG9hZFNwbGl0TWVyZ2VJbmZvID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZFNwbGl0TWVyZ2VJbmZvKHNsaWNlKSB7XG4gICAgbGV0IGN1cnJlbnRTaGFyZFByZWZpeExlbmd0aCA9IHNsaWNlLmxvYWRVaW50KDYpO1xuICAgIGxldCBhY2NvdW50U3BsaXREZXB0aCA9IHNsaWNlLmxvYWRVaW50KDYpO1xuICAgIGxldCB0aGlzQWRkcmVzcyA9IHNsaWNlLmxvYWRVaW50QmlnKDI1Nik7XG4gICAgbGV0IHNpYmxpbmdBZGRyZXNzID0gc2xpY2UubG9hZFVpbnRCaWcoMjU2KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjdXJyZW50U2hhcmRQcmVmaXhMZW5ndGgsXG4gICAgICAgIGFjY291bnRTcGxpdERlcHRoLFxuICAgICAgICB0aGlzQWRkcmVzcyxcbiAgICAgICAgc2libGluZ0FkZHJlc3NcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkU3BsaXRNZXJnZUluZm8gPSBsb2FkU3BsaXRNZXJnZUluZm87XG5mdW5jdGlvbiBzdG9yZVNwbGl0TWVyZ2VJbmZvKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMuY3VycmVudFNoYXJkUHJlZml4TGVuZ3RoLCA2KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLmFjY291bnRTcGxpdERlcHRoLCA2KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLnRoaXNBZGRyZXNzLCAyNTYpO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMuc2libGluZ0FkZHJlc3MsIDI1Nik7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVTcGxpdE1lcmdlSW5mbyA9IHN0b3JlU3BsaXRNZXJnZUluZm87XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVNwbGl0TWVyZ2VJbmZvIiwibG9hZFNwbGl0TWVyZ2VJbmZvIiwic2xpY2UiLCJjdXJyZW50U2hhcmRQcmVmaXhMZW5ndGgiLCJsb2FkVWludCIsImFjY291bnRTcGxpdERlcHRoIiwidGhpc0FkZHJlc3MiLCJsb2FkVWludEJpZyIsInNpYmxpbmdBZGRyZXNzIiwic3JjIiwiYnVpbGRlciIsInN0b3JlVWludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/SplitMergeInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/StateInit.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StateInit.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeStateInit = exports.loadStateInit = void 0;\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nconst SimpleLibrary_1 = __webpack_require__(/*! ./SimpleLibrary */ \"(ssr)/./node_modules/@ton/core/dist/types/SimpleLibrary.js\");\nconst TickTock_1 = __webpack_require__(/*! ./TickTock */ \"(ssr)/./node_modules/@ton/core/dist/types/TickTock.js\");\n;\nfunction loadStateInit(slice) {\n    // Split Depth\n    let splitDepth;\n    if (slice.loadBit()) {\n        splitDepth = slice.loadUint(5);\n    }\n    // TickTock\n    let special;\n    if (slice.loadBit()) {\n        special = (0, TickTock_1.loadTickTock)(slice);\n    }\n    // Code and Data\n    let code = slice.loadMaybeRef();\n    let data = slice.loadMaybeRef();\n    // Libs\n    let libraries = slice.loadDict(Dictionary_1.Dictionary.Keys.BigUint(256), SimpleLibrary_1.SimpleLibraryValue);\n    if (libraries.size === 0) {\n        libraries = undefined;\n    }\n    return {\n        splitDepth,\n        special,\n        code,\n        data,\n        libraries\n    };\n}\nexports.loadStateInit = loadStateInit;\nfunction storeStateInit(src) {\n    return (builder)=>{\n        if (src.splitDepth !== null && src.splitDepth !== undefined) {\n            builder.storeBit(true);\n            builder.storeUint(src.splitDepth, 5);\n        } else {\n            builder.storeBit(false);\n        }\n        if (src.special !== null && src.special !== undefined) {\n            builder.storeBit(true);\n            builder.store((0, TickTock_1.storeTickTock)(src.special));\n        } else {\n            builder.storeBit(false);\n        }\n        builder.storeMaybeRef(src.code);\n        builder.storeMaybeRef(src.data);\n        builder.storeDict(src.libraries);\n    };\n}\nexports.storeStateInit = storeStateInit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RhdGVJbml0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN0RCxNQUFNSSxlQUFlQyxtQkFBT0EsQ0FBQyxrRkFBb0I7QUFDakQsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxtRkFBaUI7QUFDakQsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUMseUVBQVk7O0FBRXZDLFNBQVNGLGNBQWNLLEtBQUs7SUFDeEIsY0FBYztJQUNkLElBQUlDO0lBQ0osSUFBSUQsTUFBTUUsT0FBTyxJQUFJO1FBQ2pCRCxhQUFhRCxNQUFNRyxRQUFRLENBQUM7SUFDaEM7SUFDQSxXQUFXO0lBQ1gsSUFBSUM7SUFDSixJQUFJSixNQUFNRSxPQUFPLElBQUk7UUFDakJFLFVBQVUsQ0FBQyxHQUFHTCxXQUFXTSxZQUFZLEVBQUVMO0lBQzNDO0lBQ0EsZ0JBQWdCO0lBQ2hCLElBQUlNLE9BQU9OLE1BQU1PLFlBQVk7SUFDN0IsSUFBSUMsT0FBT1IsTUFBTU8sWUFBWTtJQUM3QixPQUFPO0lBQ1AsSUFBSUUsWUFBWVQsTUFBTVUsUUFBUSxDQUFDZCxhQUFhZSxVQUFVLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDLE1BQU1mLGdCQUFnQmdCLGtCQUFrQjtJQUM1RyxJQUFJTCxVQUFVTSxJQUFJLEtBQUssR0FBRztRQUN0Qk4sWUFBWU87SUFDaEI7SUFDQSxPQUFPO1FBQ0hmO1FBQ0FHO1FBQ0FFO1FBQ0FFO1FBQ0FDO0lBQ0o7QUFDSjtBQUNBakIscUJBQXFCLEdBQUdHO0FBQ3hCLFNBQVNELGVBQWV1QixHQUFHO0lBQ3ZCLE9BQU8sQ0FBQ0M7UUFDSixJQUFJRCxJQUFJaEIsVUFBVSxLQUFLLFFBQVFnQixJQUFJaEIsVUFBVSxLQUFLZSxXQUFXO1lBQ3pERSxRQUFRQyxRQUFRLENBQUM7WUFDakJELFFBQVFFLFNBQVMsQ0FBQ0gsSUFBSWhCLFVBQVUsRUFBRTtRQUN0QyxPQUNLO1lBQ0RpQixRQUFRQyxRQUFRLENBQUM7UUFDckI7UUFDQSxJQUFJRixJQUFJYixPQUFPLEtBQUssUUFBUWEsSUFBSWIsT0FBTyxLQUFLWSxXQUFXO1lBQ25ERSxRQUFRQyxRQUFRLENBQUM7WUFDakJELFFBQVFHLEtBQUssQ0FBQyxDQUFDLEdBQUd0QixXQUFXdUIsYUFBYSxFQUFFTCxJQUFJYixPQUFPO1FBQzNELE9BQ0s7WUFDRGMsUUFBUUMsUUFBUSxDQUFDO1FBQ3JCO1FBQ0FELFFBQVFLLGFBQWEsQ0FBQ04sSUFBSVgsSUFBSTtRQUM5QlksUUFBUUssYUFBYSxDQUFDTixJQUFJVCxJQUFJO1FBQzlCVSxRQUFRTSxTQUFTLENBQUNQLElBQUlSLFNBQVM7SUFDbkM7QUFDSjtBQUNBakIsc0JBQXNCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9TdGF0ZUluaXQuanM/NGI4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVTdGF0ZUluaXQgPSBleHBvcnRzLmxvYWRTdGF0ZUluaXQgPSB2b2lkIDA7XG5jb25zdCBEaWN0aW9uYXJ5XzEgPSByZXF1aXJlKFwiLi4vZGljdC9EaWN0aW9uYXJ5XCIpO1xuY29uc3QgU2ltcGxlTGlicmFyeV8xID0gcmVxdWlyZShcIi4vU2ltcGxlTGlicmFyeVwiKTtcbmNvbnN0IFRpY2tUb2NrXzEgPSByZXF1aXJlKFwiLi9UaWNrVG9ja1wiKTtcbjtcbmZ1bmN0aW9uIGxvYWRTdGF0ZUluaXQoc2xpY2UpIHtcbiAgICAvLyBTcGxpdCBEZXB0aFxuICAgIGxldCBzcGxpdERlcHRoO1xuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgc3BsaXREZXB0aCA9IHNsaWNlLmxvYWRVaW50KDUpO1xuICAgIH1cbiAgICAvLyBUaWNrVG9ja1xuICAgIGxldCBzcGVjaWFsO1xuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgc3BlY2lhbCA9ICgwLCBUaWNrVG9ja18xLmxvYWRUaWNrVG9jaykoc2xpY2UpO1xuICAgIH1cbiAgICAvLyBDb2RlIGFuZCBEYXRhXG4gICAgbGV0IGNvZGUgPSBzbGljZS5sb2FkTWF5YmVSZWYoKTtcbiAgICBsZXQgZGF0YSA9IHNsaWNlLmxvYWRNYXliZVJlZigpO1xuICAgIC8vIExpYnNcbiAgICBsZXQgbGlicmFyaWVzID0gc2xpY2UubG9hZERpY3QoRGljdGlvbmFyeV8xLkRpY3Rpb25hcnkuS2V5cy5CaWdVaW50KDI1NiksIFNpbXBsZUxpYnJhcnlfMS5TaW1wbGVMaWJyYXJ5VmFsdWUpO1xuICAgIGlmIChsaWJyYXJpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBsaWJyYXJpZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNwbGl0RGVwdGgsXG4gICAgICAgIHNwZWNpYWwsXG4gICAgICAgIGNvZGUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGxpYnJhcmllc1xuICAgIH07XG59XG5leHBvcnRzLmxvYWRTdGF0ZUluaXQgPSBsb2FkU3RhdGVJbml0O1xuZnVuY3Rpb24gc3RvcmVTdGF0ZUluaXQoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGlmIChzcmMuc3BsaXREZXB0aCAhPT0gbnVsbCAmJiBzcmMuc3BsaXREZXB0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLnNwbGl0RGVwdGgsIDUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYy5zcGVjaWFsICE9PSBudWxsICYmIHNyYy5zcGVjaWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQodHJ1ZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlKCgwLCBUaWNrVG9ja18xLnN0b3JlVGlja1RvY2spKHNyYy5zcGVjaWFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBidWlsZGVyLnN0b3JlTWF5YmVSZWYoc3JjLmNvZGUpO1xuICAgICAgICBidWlsZGVyLnN0b3JlTWF5YmVSZWYoc3JjLmRhdGEpO1xuICAgICAgICBidWlsZGVyLnN0b3JlRGljdChzcmMubGlicmFyaWVzKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZVN0YXRlSW5pdCA9IHN0b3JlU3RhdGVJbml0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVTdGF0ZUluaXQiLCJsb2FkU3RhdGVJbml0IiwiRGljdGlvbmFyeV8xIiwicmVxdWlyZSIsIlNpbXBsZUxpYnJhcnlfMSIsIlRpY2tUb2NrXzEiLCJzbGljZSIsInNwbGl0RGVwdGgiLCJsb2FkQml0IiwibG9hZFVpbnQiLCJzcGVjaWFsIiwibG9hZFRpY2tUb2NrIiwiY29kZSIsImxvYWRNYXliZVJlZiIsImRhdGEiLCJsaWJyYXJpZXMiLCJsb2FkRGljdCIsIkRpY3Rpb25hcnkiLCJLZXlzIiwiQmlnVWludCIsIlNpbXBsZUxpYnJhcnlWYWx1ZSIsInNpemUiLCJ1bmRlZmluZWQiLCJzcmMiLCJidWlsZGVyIiwic3RvcmVCaXQiLCJzdG9yZVVpbnQiLCJzdG9yZSIsInN0b3JlVGlja1RvY2siLCJzdG9yZU1heWJlUmVmIiwic3RvcmVEaWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/StorageInto.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageInto.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeStorageInfo = exports.loadStorageInfo = void 0;\nconst StorageUsed_1 = __webpack_require__(/*! ./StorageUsed */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageUsed.js\");\nfunction loadStorageInfo(slice) {\n    return {\n        used: (0, StorageUsed_1.loadStorageUsed)(slice),\n        lastPaid: slice.loadUint(32),\n        duePayment: slice.loadMaybeCoins()\n    };\n}\nexports.loadStorageInfo = loadStorageInfo;\nfunction storeStorageInfo(src) {\n    return (builder)=>{\n        builder.store((0, StorageUsed_1.storeStorageUsed)(src.used));\n        builder.storeUint(src.lastPaid, 32);\n        builder.storeMaybeCoins(src.duePayment);\n    };\n}\nexports.storeStorageInfo = storeStorageInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZUludG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBQzFELE1BQU1JLGdCQUFnQkMsbUJBQU9BLENBQUMsK0VBQWU7QUFDN0MsU0FBU0YsZ0JBQWdCRyxLQUFLO0lBQzFCLE9BQU87UUFDSEMsTUFBTSxDQUFDLEdBQUdILGNBQWNJLGVBQWUsRUFBRUY7UUFDekNHLFVBQVVILE1BQU1JLFFBQVEsQ0FBQztRQUN6QkMsWUFBWUwsTUFBTU0sY0FBYztJQUNwQztBQUNKO0FBQ0FaLHVCQUF1QixHQUFHRztBQUMxQixTQUFTRCxpQkFBaUJXLEdBQUc7SUFDekIsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxLQUFLLENBQUMsQ0FBQyxHQUFHWCxjQUFjWSxnQkFBZ0IsRUFBRUgsSUFBSU4sSUFBSTtRQUMxRE8sUUFBUUcsU0FBUyxDQUFDSixJQUFJSixRQUFRLEVBQUU7UUFDaENLLFFBQVFJLGVBQWUsQ0FBQ0wsSUFBSUYsVUFBVTtJQUMxQztBQUNKO0FBQ0FYLHdCQUF3QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZUludG8uanM/NzJjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVTdG9yYWdlSW5mbyA9IGV4cG9ydHMubG9hZFN0b3JhZ2VJbmZvID0gdm9pZCAwO1xuY29uc3QgU3RvcmFnZVVzZWRfMSA9IHJlcXVpcmUoXCIuL1N0b3JhZ2VVc2VkXCIpO1xuZnVuY3Rpb24gbG9hZFN0b3JhZ2VJbmZvKHNsaWNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlZDogKDAsIFN0b3JhZ2VVc2VkXzEubG9hZFN0b3JhZ2VVc2VkKShzbGljZSksXG4gICAgICAgIGxhc3RQYWlkOiBzbGljZS5sb2FkVWludCgzMiksXG4gICAgICAgIGR1ZVBheW1lbnQ6IHNsaWNlLmxvYWRNYXliZUNvaW5zKClcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkU3RvcmFnZUluZm8gPSBsb2FkU3RvcmFnZUluZm87XG5mdW5jdGlvbiBzdG9yZVN0b3JhZ2VJbmZvKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlKCgwLCBTdG9yYWdlVXNlZF8xLnN0b3JlU3RvcmFnZVVzZWQpKHNyYy51c2VkKSk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5sYXN0UGFpZCwgMzIpO1xuICAgICAgICBidWlsZGVyLnN0b3JlTWF5YmVDb2lucyhzcmMuZHVlUGF5bWVudCk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVTdG9yYWdlSW5mbyA9IHN0b3JlU3RvcmFnZUluZm87XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVN0b3JhZ2VJbmZvIiwibG9hZFN0b3JhZ2VJbmZvIiwiU3RvcmFnZVVzZWRfMSIsInJlcXVpcmUiLCJzbGljZSIsInVzZWQiLCJsb2FkU3RvcmFnZVVzZWQiLCJsYXN0UGFpZCIsImxvYWRVaW50IiwiZHVlUGF5bWVudCIsImxvYWRNYXliZUNvaW5zIiwic3JjIiwiYnVpbGRlciIsInN0b3JlIiwic3RvcmVTdG9yYWdlVXNlZCIsInN0b3JlVWludCIsInN0b3JlTWF5YmVDb2lucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/StorageInto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/StorageUsed.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageUsed.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeStorageUsed = exports.loadStorageUsed = void 0;\nfunction loadStorageUsed(cs) {\n    return {\n        cells: cs.loadVarUintBig(3),\n        bits: cs.loadVarUintBig(3),\n        publicCells: cs.loadVarUintBig(3)\n    };\n}\nexports.loadStorageUsed = loadStorageUsed;\nfunction storeStorageUsed(src) {\n    return (builder)=>{\n        builder.storeVarUint(src.cells, 3);\n        builder.storeVarUint(src.bits, 3);\n        builder.storeVarUint(src.publicCells, 3);\n    };\n}\nexports.storeStorageUsed = storeStorageUsed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZVVzZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBQzFELFNBQVNHLGdCQUFnQkMsRUFBRTtJQUN2QixPQUFPO1FBQ0hDLE9BQU9ELEdBQUdFLGNBQWMsQ0FBQztRQUN6QkMsTUFBTUgsR0FBR0UsY0FBYyxDQUFDO1FBQ3hCRSxhQUFhSixHQUFHRSxjQUFjLENBQUM7SUFDbkM7QUFDSjtBQUNBTix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0QsaUJBQWlCTyxHQUFHO0lBQ3pCLE9BQU8sQ0FBQ0M7UUFDSkEsUUFBUUMsWUFBWSxDQUFDRixJQUFJSixLQUFLLEVBQUU7UUFDaENLLFFBQVFDLFlBQVksQ0FBQ0YsSUFBSUYsSUFBSSxFQUFFO1FBQy9CRyxRQUFRQyxZQUFZLENBQUNGLElBQUlELFdBQVcsRUFBRTtJQUMxQztBQUNKO0FBQ0FSLHdCQUF3QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZVVzZWQuanM/ZTQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVTdG9yYWdlVXNlZCA9IGV4cG9ydHMubG9hZFN0b3JhZ2VVc2VkID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZFN0b3JhZ2VVc2VkKGNzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2VsbHM6IGNzLmxvYWRWYXJVaW50QmlnKDMpLFxuICAgICAgICBiaXRzOiBjcy5sb2FkVmFyVWludEJpZygzKSxcbiAgICAgICAgcHVibGljQ2VsbHM6IGNzLmxvYWRWYXJVaW50QmlnKDMpLFxuICAgIH07XG59XG5leHBvcnRzLmxvYWRTdG9yYWdlVXNlZCA9IGxvYWRTdG9yYWdlVXNlZDtcbmZ1bmN0aW9uIHN0b3JlU3RvcmFnZVVzZWQoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVWYXJVaW50KHNyYy5jZWxscywgMyk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVWYXJVaW50KHNyYy5iaXRzLCAzKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVZhclVpbnQoc3JjLnB1YmxpY0NlbGxzLCAzKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZVN0b3JhZ2VVc2VkID0gc3RvcmVTdG9yYWdlVXNlZDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlU3RvcmFnZVVzZWQiLCJsb2FkU3RvcmFnZVVzZWQiLCJjcyIsImNlbGxzIiwibG9hZFZhclVpbnRCaWciLCJiaXRzIiwicHVibGljQ2VsbHMiLCJzcmMiLCJidWlsZGVyIiwic3RvcmVWYXJVaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/StorageUsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/StorageUsedShort.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageUsedShort.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeStorageUsedShort = exports.loadStorageUsedShort = void 0;\nfunction loadStorageUsedShort(slice) {\n    let cells = slice.loadVarUintBig(3);\n    let bits = slice.loadVarUintBig(3);\n    return {\n        cells,\n        bits\n    };\n}\nexports.loadStorageUsedShort = loadStorageUsedShort;\nfunction storeStorageUsedShort(src) {\n    return (builder)=>{\n        builder.storeVarUint(src.cells, 3);\n        builder.storeVarUint(src.bits, 3);\n    };\n}\nexports.storeStorageUsedShort = storeStorageUsedShort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZVVzZWRTaG9ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDcEUsU0FBU0cscUJBQXFCQyxLQUFLO0lBQy9CLElBQUlDLFFBQVFELE1BQU1FLGNBQWMsQ0FBQztJQUNqQyxJQUFJQyxPQUFPSCxNQUFNRSxjQUFjLENBQUM7SUFDaEMsT0FBTztRQUNIRDtRQUNBRTtJQUNKO0FBQ0o7QUFDQVAsNEJBQTRCLEdBQUdHO0FBQy9CLFNBQVNELHNCQUFzQk0sR0FBRztJQUM5QixPQUFPLENBQUNDO1FBQ0pBLFFBQVFDLFlBQVksQ0FBQ0YsSUFBSUgsS0FBSyxFQUFFO1FBQ2hDSSxRQUFRQyxZQUFZLENBQUNGLElBQUlELElBQUksRUFBRTtJQUNuQztBQUNKO0FBQ0FQLDZCQUE2QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvU3RvcmFnZVVzZWRTaG9ydC5qcz9jNGE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZVN0b3JhZ2VVc2VkU2hvcnQgPSBleHBvcnRzLmxvYWRTdG9yYWdlVXNlZFNob3J0ID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZFN0b3JhZ2VVc2VkU2hvcnQoc2xpY2UpIHtcbiAgICBsZXQgY2VsbHMgPSBzbGljZS5sb2FkVmFyVWludEJpZygzKTtcbiAgICBsZXQgYml0cyA9IHNsaWNlLmxvYWRWYXJVaW50QmlnKDMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNlbGxzLFxuICAgICAgICBiaXRzXG4gICAgfTtcbn1cbmV4cG9ydHMubG9hZFN0b3JhZ2VVc2VkU2hvcnQgPSBsb2FkU3RvcmFnZVVzZWRTaG9ydDtcbmZ1bmN0aW9uIHN0b3JlU3RvcmFnZVVzZWRTaG9ydChzcmMpIHtcbiAgICByZXR1cm4gKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgYnVpbGRlci5zdG9yZVZhclVpbnQoc3JjLmNlbGxzLCAzKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVZhclVpbnQoc3JjLmJpdHMsIDMpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlU3RvcmFnZVVzZWRTaG9ydCA9IHN0b3JlU3RvcmFnZVVzZWRTaG9ydDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JlU3RvcmFnZVVzZWRTaG9ydCIsImxvYWRTdG9yYWdlVXNlZFNob3J0Iiwic2xpY2UiLCJjZWxscyIsImxvYWRWYXJVaW50QmlnIiwiYml0cyIsInNyYyIsImJ1aWxkZXIiLCJzdG9yZVZhclVpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/StorageUsedShort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TickTock.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TickTock.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTickTock = exports.loadTickTock = void 0;\nfunction loadTickTock(slice) {\n    return {\n        tick: slice.loadBit(),\n        tock: slice.loadBit()\n    };\n}\nexports.loadTickTock = loadTickTock;\nfunction storeTickTock(src) {\n    return (builder)=>{\n        builder.storeBit(src.tick);\n        builder.storeBit(src.tock);\n    };\n}\nexports.storeTickTock = storeTickTock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVGlja1RvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ3BELFNBQVNHLGFBQWFDLEtBQUs7SUFDdkIsT0FBTztRQUNIQyxNQUFNRCxNQUFNRSxPQUFPO1FBQ25CQyxNQUFNSCxNQUFNRSxPQUFPO0lBQ3ZCO0FBQ0o7QUFDQU4sb0JBQW9CLEdBQUdHO0FBQ3ZCLFNBQVNELGNBQWNNLEdBQUc7SUFDdEIsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxRQUFRLENBQUNGLElBQUlILElBQUk7UUFDekJJLFFBQVFDLFFBQVEsQ0FBQ0YsSUFBSUQsSUFBSTtJQUM3QjtBQUNKO0FBQ0FQLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVGlja1RvY2suanM/N2E2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVUaWNrVG9jayA9IGV4cG9ydHMubG9hZFRpY2tUb2NrID0gdm9pZCAwO1xuZnVuY3Rpb24gbG9hZFRpY2tUb2NrKHNsaWNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGljazogc2xpY2UubG9hZEJpdCgpLFxuICAgICAgICB0b2NrOiBzbGljZS5sb2FkQml0KClcbiAgICB9O1xufVxuZXhwb3J0cy5sb2FkVGlja1RvY2sgPSBsb2FkVGlja1RvY2s7XG5mdW5jdGlvbiBzdG9yZVRpY2tUb2NrKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNyYy50aWNrKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZUJpdChzcmMudG9jayk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVUaWNrVG9jayA9IHN0b3JlVGlja1RvY2s7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVRpY2tUb2NrIiwibG9hZFRpY2tUb2NrIiwic2xpY2UiLCJ0aWNrIiwibG9hZEJpdCIsInRvY2siLCJzcmMiLCJidWlsZGVyIiwic3RvcmVCaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TickTock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/Transaction.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Transaction.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransaction = exports.loadTransaction = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ \"(ssr)/./node_modules/@ton/core/dist/dict/Dictionary.js\");\nconst AccountStatus_1 = __webpack_require__(/*! ./AccountStatus */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStatus.js\");\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nconst HashUpdate_1 = __webpack_require__(/*! ./HashUpdate */ \"(ssr)/./node_modules/@ton/core/dist/types/HashUpdate.js\");\nconst Message_1 = __webpack_require__(/*! ./Message */ \"(ssr)/./node_modules/@ton/core/dist/types/Message.js\");\nconst TransactionDescription_1 = __webpack_require__(/*! ./TransactionDescription */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionDescription.js\");\nfunction loadTransaction(slice) {\n    let raw = slice.asCell();\n    if (slice.loadUint(4) !== 0x07) {\n        throw Error(\"Invalid data\");\n    }\n    let address = slice.loadUintBig(256);\n    let lt = slice.loadUintBig(64);\n    let prevTransactionHash = slice.loadUintBig(256);\n    let prevTransactionLt = slice.loadUintBig(64);\n    let now = slice.loadUint(32);\n    let outMessagesCount = slice.loadUint(15);\n    let oldStatus = (0, AccountStatus_1.loadAccountStatus)(slice);\n    let endStatus = (0, AccountStatus_1.loadAccountStatus)(slice);\n    let msgRef = slice.loadRef();\n    let msgSlice = msgRef.beginParse();\n    let inMessage = msgSlice.loadBit() ? (0, Message_1.loadMessage)(msgSlice.loadRef().beginParse()) : undefined;\n    let outMessages = msgSlice.loadDict(Dictionary_1.Dictionary.Keys.Uint(15), Message_1.MessageValue);\n    msgSlice.endParse();\n    let totalFees = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n    let stateUpdate = (0, HashUpdate_1.loadHashUpdate)(slice.loadRef().beginParse());\n    let description = (0, TransactionDescription_1.loadTransactionDescription)(slice.loadRef().beginParse());\n    return {\n        address,\n        lt,\n        prevTransactionHash,\n        prevTransactionLt,\n        now,\n        outMessagesCount,\n        oldStatus,\n        endStatus,\n        inMessage,\n        outMessages,\n        totalFees,\n        stateUpdate,\n        description,\n        raw,\n        hash: ()=>raw.hash()\n    };\n}\nexports.loadTransaction = loadTransaction;\nfunction storeTransaction(src) {\n    return (builder)=>{\n        builder.storeUint(0x07, 4);\n        builder.storeUint(src.address, 256);\n        builder.storeUint(src.lt, 64);\n        builder.storeUint(src.prevTransactionHash, 256);\n        builder.storeUint(src.prevTransactionLt, 64);\n        builder.storeUint(src.now, 32);\n        builder.storeUint(src.outMessagesCount, 15);\n        builder.store((0, AccountStatus_1.storeAccountStatus)(src.oldStatus));\n        builder.store((0, AccountStatus_1.storeAccountStatus)(src.endStatus));\n        let msgBuilder = (0, Builder_1.beginCell)();\n        if (src.inMessage) {\n            msgBuilder.storeBit(true);\n            msgBuilder.storeRef((0, Builder_1.beginCell)().store((0, Message_1.storeMessage)(src.inMessage)));\n        } else {\n            msgBuilder.storeBit(false);\n        }\n        msgBuilder.storeDict(src.outMessages);\n        builder.storeRef(msgBuilder);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.totalFees));\n        builder.storeRef((0, Builder_1.beginCell)().store((0, HashUpdate_1.storeHashUpdate)(src.stateUpdate)));\n        builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionDescription_1.storeTransactionDescription)(src.description)));\n    };\n}\nexports.storeTransaction = storeTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionActionPhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionActionPhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionActionPhase = exports.loadTransactionActionPhase = void 0;\nconst AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStatusChange.js\");\nconst StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageUsedShort.js\");\nfunction loadTransactionActionPhase(slice) {\n    let success = slice.loadBit();\n    let valid = slice.loadBit();\n    let noFunds = slice.loadBit();\n    let statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);\n    let totalFwdFees = slice.loadBit() ? slice.loadCoins() : undefined;\n    let totalActionFees = slice.loadBit() ? slice.loadCoins() : undefined;\n    let resultCode = slice.loadInt(32);\n    let resultArg = slice.loadBit() ? slice.loadInt(32) : undefined;\n    let totalActions = slice.loadUint(16);\n    let specActions = slice.loadUint(16);\n    let skippedActions = slice.loadUint(16);\n    let messagesCreated = slice.loadUint(16);\n    let actionListHash = slice.loadUintBig(256);\n    let totalMessageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n    return {\n        success,\n        valid,\n        noFunds,\n        statusChange,\n        totalFwdFees,\n        totalActionFees,\n        resultCode,\n        resultArg,\n        totalActions,\n        specActions,\n        skippedActions,\n        messagesCreated,\n        actionListHash,\n        totalMessageSize\n    };\n}\nexports.loadTransactionActionPhase = loadTransactionActionPhase;\nfunction storeTransactionActionPhase(src) {\n    return (builder)=>{\n        builder.storeBit(src.success);\n        builder.storeBit(src.valid);\n        builder.storeBit(src.noFunds);\n        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));\n        builder.storeMaybeCoins(src.totalFwdFees);\n        builder.storeMaybeCoins(src.totalActionFees);\n        builder.storeInt(src.resultCode, 32);\n        builder.storeMaybeInt(src.resultArg, 32);\n        builder.storeUint(src.totalActions, 16);\n        builder.storeUint(src.specActions, 16);\n        builder.storeUint(src.skippedActions, 16);\n        builder.storeUint(src.messagesCreated, 16);\n        builder.storeUint(src.actionListHash, 256);\n        builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.totalMessageSize));\n    };\n}\nexports.storeTransactionActionPhase = storeTransactionActionPhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25BY3Rpb25QaGFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUdBLGtDQUFrQyxHQUFHLEtBQUs7QUFDaEYsTUFBTUksd0JBQXdCQyxtQkFBT0EsQ0FBQywrRkFBdUI7QUFDN0QsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQyx5RkFBb0I7QUFDdkQsU0FBU0YsMkJBQTJCSSxLQUFLO0lBQ3JDLElBQUlDLFVBQVVELE1BQU1FLE9BQU87SUFDM0IsSUFBSUMsUUFBUUgsTUFBTUUsT0FBTztJQUN6QixJQUFJRSxVQUFVSixNQUFNRSxPQUFPO0lBQzNCLElBQUlHLGVBQWUsQ0FBQyxHQUFHUixzQkFBc0JTLHVCQUF1QixFQUFFTjtJQUN0RSxJQUFJTyxlQUFlUCxNQUFNRSxPQUFPLEtBQUtGLE1BQU1RLFNBQVMsS0FBS0M7SUFDekQsSUFBSUMsa0JBQWtCVixNQUFNRSxPQUFPLEtBQUtGLE1BQU1RLFNBQVMsS0FBS0M7SUFDNUQsSUFBSUUsYUFBYVgsTUFBTVksT0FBTyxDQUFDO0lBQy9CLElBQUlDLFlBQVliLE1BQU1FLE9BQU8sS0FBS0YsTUFBTVksT0FBTyxDQUFDLE1BQU1IO0lBQ3RELElBQUlLLGVBQWVkLE1BQU1lLFFBQVEsQ0FBQztJQUNsQyxJQUFJQyxjQUFjaEIsTUFBTWUsUUFBUSxDQUFDO0lBQ2pDLElBQUlFLGlCQUFpQmpCLE1BQU1lLFFBQVEsQ0FBQztJQUNwQyxJQUFJRyxrQkFBa0JsQixNQUFNZSxRQUFRLENBQUM7SUFDckMsSUFBSUksaUJBQWlCbkIsTUFBTW9CLFdBQVcsQ0FBQztJQUN2QyxJQUFJQyxtQkFBbUIsQ0FBQyxHQUFHdEIsbUJBQW1CdUIsb0JBQW9CLEVBQUV0QjtJQUNwRSxPQUFPO1FBQ0hDO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FHO1FBQ0FDO1FBQ0FFO1FBQ0FDO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FFO0lBQ0o7QUFDSjtBQUNBNUIsa0NBQWtDLEdBQUdHO0FBQ3JDLFNBQVNELDRCQUE0QjRCLEdBQUc7SUFDcEMsT0FBTyxDQUFDQztRQUNKQSxRQUFRQyxRQUFRLENBQUNGLElBQUl0QixPQUFPO1FBQzVCdUIsUUFBUUMsUUFBUSxDQUFDRixJQUFJcEIsS0FBSztRQUMxQnFCLFFBQVFDLFFBQVEsQ0FBQ0YsSUFBSW5CLE9BQU87UUFDNUJvQixRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHN0Isc0JBQXNCOEIsd0JBQXdCLEVBQUVKLElBQUlsQixZQUFZO1FBQ2xGbUIsUUFBUUksZUFBZSxDQUFDTCxJQUFJaEIsWUFBWTtRQUN4Q2lCLFFBQVFJLGVBQWUsQ0FBQ0wsSUFBSWIsZUFBZTtRQUMzQ2MsUUFBUUssUUFBUSxDQUFDTixJQUFJWixVQUFVLEVBQUU7UUFDakNhLFFBQVFNLGFBQWEsQ0FBQ1AsSUFBSVYsU0FBUyxFQUFFO1FBQ3JDVyxRQUFRTyxTQUFTLENBQUNSLElBQUlULFlBQVksRUFBRTtRQUNwQ1UsUUFBUU8sU0FBUyxDQUFDUixJQUFJUCxXQUFXLEVBQUU7UUFDbkNRLFFBQVFPLFNBQVMsQ0FBQ1IsSUFBSU4sY0FBYyxFQUFFO1FBQ3RDTyxRQUFRTyxTQUFTLENBQUNSLElBQUlMLGVBQWUsRUFBRTtRQUN2Q00sUUFBUU8sU0FBUyxDQUFDUixJQUFJSixjQUFjLEVBQUU7UUFDdENLLFFBQVFFLEtBQUssQ0FBQyxDQUFDLEdBQUczQixtQkFBbUJpQyxxQkFBcUIsRUFBRVQsSUFBSUYsZ0JBQWdCO0lBQ3BGO0FBQ0o7QUFDQTVCLG1DQUFtQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25BY3Rpb25QaGFzZS5qcz9mNjY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdG9yZVRyYW5zYWN0aW9uQWN0aW9uUGhhc2UgPSBleHBvcnRzLmxvYWRUcmFuc2FjdGlvbkFjdGlvblBoYXNlID0gdm9pZCAwO1xuY29uc3QgQWNjb3VudFN0YXR1c0NoYW5nZV8xID0gcmVxdWlyZShcIi4vQWNjb3VudFN0YXR1c0NoYW5nZVwiKTtcbmNvbnN0IFN0b3JhZ2VVc2VkU2hvcnRfMSA9IHJlcXVpcmUoXCIuL1N0b3JhZ2VVc2VkU2hvcnRcIik7XG5mdW5jdGlvbiBsb2FkVHJhbnNhY3Rpb25BY3Rpb25QaGFzZShzbGljZSkge1xuICAgIGxldCBzdWNjZXNzID0gc2xpY2UubG9hZEJpdCgpO1xuICAgIGxldCB2YWxpZCA9IHNsaWNlLmxvYWRCaXQoKTtcbiAgICBsZXQgbm9GdW5kcyA9IHNsaWNlLmxvYWRCaXQoKTtcbiAgICBsZXQgc3RhdHVzQ2hhbmdlID0gKDAsIEFjY291bnRTdGF0dXNDaGFuZ2VfMS5sb2FkQWNjb3VudFN0YXR1c0NoYW5nZSkoc2xpY2UpO1xuICAgIGxldCB0b3RhbEZ3ZEZlZXMgPSBzbGljZS5sb2FkQml0KCkgPyBzbGljZS5sb2FkQ29pbnMoKSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgdG90YWxBY3Rpb25GZWVzID0gc2xpY2UubG9hZEJpdCgpID8gc2xpY2UubG9hZENvaW5zKCkgOiB1bmRlZmluZWQ7XG4gICAgbGV0IHJlc3VsdENvZGUgPSBzbGljZS5sb2FkSW50KDMyKTtcbiAgICBsZXQgcmVzdWx0QXJnID0gc2xpY2UubG9hZEJpdCgpID8gc2xpY2UubG9hZEludCgzMikgOiB1bmRlZmluZWQ7XG4gICAgbGV0IHRvdGFsQWN0aW9ucyA9IHNsaWNlLmxvYWRVaW50KDE2KTtcbiAgICBsZXQgc3BlY0FjdGlvbnMgPSBzbGljZS5sb2FkVWludCgxNik7XG4gICAgbGV0IHNraXBwZWRBY3Rpb25zID0gc2xpY2UubG9hZFVpbnQoMTYpO1xuICAgIGxldCBtZXNzYWdlc0NyZWF0ZWQgPSBzbGljZS5sb2FkVWludCgxNik7XG4gICAgbGV0IGFjdGlvbkxpc3RIYXNoID0gc2xpY2UubG9hZFVpbnRCaWcoMjU2KTtcbiAgICBsZXQgdG90YWxNZXNzYWdlU2l6ZSA9ICgwLCBTdG9yYWdlVXNlZFNob3J0XzEubG9hZFN0b3JhZ2VVc2VkU2hvcnQpKHNsaWNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzLFxuICAgICAgICB2YWxpZCxcbiAgICAgICAgbm9GdW5kcyxcbiAgICAgICAgc3RhdHVzQ2hhbmdlLFxuICAgICAgICB0b3RhbEZ3ZEZlZXMsXG4gICAgICAgIHRvdGFsQWN0aW9uRmVlcyxcbiAgICAgICAgcmVzdWx0Q29kZSxcbiAgICAgICAgcmVzdWx0QXJnLFxuICAgICAgICB0b3RhbEFjdGlvbnMsXG4gICAgICAgIHNwZWNBY3Rpb25zLFxuICAgICAgICBza2lwcGVkQWN0aW9ucyxcbiAgICAgICAgbWVzc2FnZXNDcmVhdGVkLFxuICAgICAgICBhY3Rpb25MaXN0SGFzaCxcbiAgICAgICAgdG90YWxNZXNzYWdlU2l6ZVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRUcmFuc2FjdGlvbkFjdGlvblBoYXNlID0gbG9hZFRyYW5zYWN0aW9uQWN0aW9uUGhhc2U7XG5mdW5jdGlvbiBzdG9yZVRyYW5zYWN0aW9uQWN0aW9uUGhhc2Uoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoc3JjLnN1Y2Nlc3MpO1xuICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNyYy52YWxpZCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoc3JjLm5vRnVuZHMpO1xuICAgICAgICBidWlsZGVyLnN0b3JlKCgwLCBBY2NvdW50U3RhdHVzQ2hhbmdlXzEuc3RvcmVBY2NvdW50U3RhdHVzQ2hhbmdlKShzcmMuc3RhdHVzQ2hhbmdlKSk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVNYXliZUNvaW5zKHNyYy50b3RhbEZ3ZEZlZXMpO1xuICAgICAgICBidWlsZGVyLnN0b3JlTWF5YmVDb2lucyhzcmMudG90YWxBY3Rpb25GZWVzKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZUludChzcmMucmVzdWx0Q29kZSwgMzIpO1xuICAgICAgICBidWlsZGVyLnN0b3JlTWF5YmVJbnQoc3JjLnJlc3VsdEFyZywgMzIpO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMudG90YWxBY3Rpb25zLCAxNik7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVVaW50KHNyYy5zcGVjQWN0aW9ucywgMTYpO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMuc2tpcHBlZEFjdGlvbnMsIDE2KTtcbiAgICAgICAgYnVpbGRlci5zdG9yZVVpbnQoc3JjLm1lc3NhZ2VzQ3JlYXRlZCwgMTYpO1xuICAgICAgICBidWlsZGVyLnN0b3JlVWludChzcmMuYWN0aW9uTGlzdEhhc2gsIDI1Nik7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIFN0b3JhZ2VVc2VkU2hvcnRfMS5zdG9yZVN0b3JhZ2VVc2VkU2hvcnQpKHNyYy50b3RhbE1lc3NhZ2VTaXplKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVUcmFuc2FjdGlvbkFjdGlvblBoYXNlID0gc3RvcmVUcmFuc2FjdGlvbkFjdGlvblBoYXNlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmVUcmFuc2FjdGlvbkFjdGlvblBoYXNlIiwibG9hZFRyYW5zYWN0aW9uQWN0aW9uUGhhc2UiLCJBY2NvdW50U3RhdHVzQ2hhbmdlXzEiLCJyZXF1aXJlIiwiU3RvcmFnZVVzZWRTaG9ydF8xIiwic2xpY2UiLCJzdWNjZXNzIiwibG9hZEJpdCIsInZhbGlkIiwibm9GdW5kcyIsInN0YXR1c0NoYW5nZSIsImxvYWRBY2NvdW50U3RhdHVzQ2hhbmdlIiwidG90YWxGd2RGZWVzIiwibG9hZENvaW5zIiwidW5kZWZpbmVkIiwidG90YWxBY3Rpb25GZWVzIiwicmVzdWx0Q29kZSIsImxvYWRJbnQiLCJyZXN1bHRBcmciLCJ0b3RhbEFjdGlvbnMiLCJsb2FkVWludCIsInNwZWNBY3Rpb25zIiwic2tpcHBlZEFjdGlvbnMiLCJtZXNzYWdlc0NyZWF0ZWQiLCJhY3Rpb25MaXN0SGFzaCIsImxvYWRVaW50QmlnIiwidG90YWxNZXNzYWdlU2l6ZSIsImxvYWRTdG9yYWdlVXNlZFNob3J0Iiwic3JjIiwiYnVpbGRlciIsInN0b3JlQml0Iiwic3RvcmUiLCJzdG9yZUFjY291bnRTdGF0dXNDaGFuZ2UiLCJzdG9yZU1heWJlQ29pbnMiLCJzdG9yZUludCIsInN0b3JlTWF5YmVJbnQiLCJzdG9yZVVpbnQiLCJzdG9yZVN0b3JhZ2VVc2VkU2hvcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionActionPhase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionBouncePhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionBouncePhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = void 0;\nconst StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageUsedShort.js\");\nfunction loadTransactionBouncePhase(slice) {\n    // Ok\n    if (slice.loadBit()) {\n        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n        let messageFees = slice.loadCoins();\n        let forwardFees = slice.loadCoins();\n        return {\n            type: \"ok\",\n            messageSize,\n            messageFees,\n            forwardFees\n        };\n    }\n    // No funds\n    if (slice.loadBit()) {\n        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n        let requiredForwardFees = slice.loadCoins();\n        return {\n            type: \"no-funds\",\n            messageSize,\n            requiredForwardFees\n        };\n    }\n    // Negative funds\n    return {\n        type: \"negative-funds\"\n    };\n}\nexports.loadTransactionBouncePhase = loadTransactionBouncePhase;\nfunction storeTransactionBouncePhase(src) {\n    return (builder)=>{\n        if (src.type === \"ok\") {\n            builder.storeBit(true);\n            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));\n            builder.storeCoins(src.messageFees);\n            builder.storeCoins(src.forwardFees);\n        } else if (src.type === \"negative-funds\") {\n            builder.storeBit(false);\n            builder.storeBit(false);\n        } else if (src.type === \"no-funds\") {\n            builder.storeBit(false);\n            builder.storeBit(true);\n            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));\n            builder.storeCoins(src.requiredForwardFees);\n        } else {\n            throw new Error(\"Invalid TransactionBouncePhase type\");\n        }\n    };\n}\nexports.storeTransactionBouncePhase = storeTransactionBouncePhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25Cb3VuY2VQaGFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUdBLGtDQUFrQyxHQUFHLEtBQUs7QUFDaEYsTUFBTUkscUJBQXFCQyxtQkFBT0EsQ0FBQyx5RkFBb0I7QUFDdkQsU0FBU0YsMkJBQTJCRyxLQUFLO0lBQ3JDLEtBQUs7SUFDTCxJQUFJQSxNQUFNQyxPQUFPLElBQUk7UUFDakIsSUFBSUMsY0FBYyxDQUFDLEdBQUdKLG1CQUFtQkssb0JBQW9CLEVBQUVIO1FBQy9ELElBQUlJLGNBQWNKLE1BQU1LLFNBQVM7UUFDakMsSUFBSUMsY0FBY04sTUFBTUssU0FBUztRQUNqQyxPQUFPO1lBQ0hFLE1BQU07WUFDTkw7WUFDQUU7WUFDQUU7UUFDSjtJQUNKO0lBQ0EsV0FBVztJQUNYLElBQUlOLE1BQU1DLE9BQU8sSUFBSTtRQUNqQixJQUFJQyxjQUFjLENBQUMsR0FBR0osbUJBQW1CSyxvQkFBb0IsRUFBRUg7UUFDL0QsSUFBSVEsc0JBQXNCUixNQUFNSyxTQUFTO1FBQ3pDLE9BQU87WUFDSEUsTUFBTTtZQUNOTDtZQUNBTTtRQUNKO0lBQ0o7SUFDQSxpQkFBaUI7SUFDakIsT0FBTztRQUNIRCxNQUFNO0lBQ1Y7QUFDSjtBQUNBYixrQ0FBa0MsR0FBR0c7QUFDckMsU0FBU0QsNEJBQTRCYSxHQUFHO0lBQ3BDLE9BQU8sQ0FBQ0M7UUFDSixJQUFJRCxJQUFJRixJQUFJLEtBQUssTUFBTTtZQUNuQkcsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHZCxtQkFBbUJlLHFCQUFxQixFQUFFSixJQUFJUCxXQUFXO1lBQzNFUSxRQUFRSSxVQUFVLENBQUNMLElBQUlMLFdBQVc7WUFDbENNLFFBQVFJLFVBQVUsQ0FBQ0wsSUFBSUgsV0FBVztRQUN0QyxPQUNLLElBQUlHLElBQUlGLElBQUksS0FBSyxrQkFBa0I7WUFDcENHLFFBQVFDLFFBQVEsQ0FBQztZQUNqQkQsUUFBUUMsUUFBUSxDQUFDO1FBQ3JCLE9BQ0ssSUFBSUYsSUFBSUYsSUFBSSxLQUFLLFlBQVk7WUFDOUJHLFFBQVFDLFFBQVEsQ0FBQztZQUNqQkQsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHZCxtQkFBbUJlLHFCQUFxQixFQUFFSixJQUFJUCxXQUFXO1lBQzNFUSxRQUFRSSxVQUFVLENBQUNMLElBQUlELG1CQUFtQjtRQUM5QyxPQUNLO1lBQ0QsTUFBTSxJQUFJTyxNQUFNO1FBQ3BCO0lBQ0o7QUFDSjtBQUNBckIsbUNBQW1DLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9UcmFuc2FjdGlvbkJvdW5jZVBoYXNlLmpzPzFkNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlVHJhbnNhY3Rpb25Cb3VuY2VQaGFzZSA9IGV4cG9ydHMubG9hZFRyYW5zYWN0aW9uQm91bmNlUGhhc2UgPSB2b2lkIDA7XG5jb25zdCBTdG9yYWdlVXNlZFNob3J0XzEgPSByZXF1aXJlKFwiLi9TdG9yYWdlVXNlZFNob3J0XCIpO1xuZnVuY3Rpb24gbG9hZFRyYW5zYWN0aW9uQm91bmNlUGhhc2Uoc2xpY2UpIHtcbiAgICAvLyBPa1xuICAgIGlmIChzbGljZS5sb2FkQml0KCkpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2VTaXplID0gKDAsIFN0b3JhZ2VVc2VkU2hvcnRfMS5sb2FkU3RvcmFnZVVzZWRTaG9ydCkoc2xpY2UpO1xuICAgICAgICBsZXQgbWVzc2FnZUZlZXMgPSBzbGljZS5sb2FkQ29pbnMoKTtcbiAgICAgICAgbGV0IGZvcndhcmRGZWVzID0gc2xpY2UubG9hZENvaW5zKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcIm9rXCIsXG4gICAgICAgICAgICBtZXNzYWdlU2l6ZSxcbiAgICAgICAgICAgIG1lc3NhZ2VGZWVzLFxuICAgICAgICAgICAgZm9yd2FyZEZlZXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIE5vIGZ1bmRzXG4gICAgaWYgKHNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICBsZXQgbWVzc2FnZVNpemUgPSAoMCwgU3RvcmFnZVVzZWRTaG9ydF8xLmxvYWRTdG9yYWdlVXNlZFNob3J0KShzbGljZSk7XG4gICAgICAgIGxldCByZXF1aXJlZEZvcndhcmRGZWVzID0gc2xpY2UubG9hZENvaW5zKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcIm5vLWZ1bmRzXCIsXG4gICAgICAgICAgICBtZXNzYWdlU2l6ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkRm9yd2FyZEZlZXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIE5lZ2F0aXZlIGZ1bmRzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJuZWdhdGl2ZS1mdW5kc1wiLFxuICAgIH07XG59XG5leHBvcnRzLmxvYWRUcmFuc2FjdGlvbkJvdW5jZVBoYXNlID0gbG9hZFRyYW5zYWN0aW9uQm91bmNlUGhhc2U7XG5mdW5jdGlvbiBzdG9yZVRyYW5zYWN0aW9uQm91bmNlUGhhc2Uoc3JjKSB7XG4gICAgcmV0dXJuIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGlmIChzcmMudHlwZSA9PT0gJ29rJykge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdCh0cnVlKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmUoKDAsIFN0b3JhZ2VVc2VkU2hvcnRfMS5zdG9yZVN0b3JhZ2VVc2VkU2hvcnQpKHNyYy5tZXNzYWdlU2l6ZSkpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUNvaW5zKHNyYy5tZXNzYWdlRmVlcyk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQ29pbnMoc3JjLmZvcndhcmRGZWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcmMudHlwZSA9PT0gJ25lZ2F0aXZlLWZ1bmRzJykge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcmMudHlwZSA9PT0gJ25vLWZ1bmRzJykge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgU3RvcmFnZVVzZWRTaG9ydF8xLnN0b3JlU3RvcmFnZVVzZWRTaG9ydCkoc3JjLm1lc3NhZ2VTaXplKSk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQ29pbnMoc3JjLnJlcXVpcmVkRm9yd2FyZEZlZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBUcmFuc2FjdGlvbkJvdW5jZVBoYXNlIHR5cGVcIik7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZVRyYW5zYWN0aW9uQm91bmNlUGhhc2UgPSBzdG9yZVRyYW5zYWN0aW9uQm91bmNlUGhhc2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVRyYW5zYWN0aW9uQm91bmNlUGhhc2UiLCJsb2FkVHJhbnNhY3Rpb25Cb3VuY2VQaGFzZSIsIlN0b3JhZ2VVc2VkU2hvcnRfMSIsInJlcXVpcmUiLCJzbGljZSIsImxvYWRCaXQiLCJtZXNzYWdlU2l6ZSIsImxvYWRTdG9yYWdlVXNlZFNob3J0IiwibWVzc2FnZUZlZXMiLCJsb2FkQ29pbnMiLCJmb3J3YXJkRmVlcyIsInR5cGUiLCJyZXF1aXJlZEZvcndhcmRGZWVzIiwic3JjIiwiYnVpbGRlciIsInN0b3JlQml0Iiwic3RvcmUiLCJzdG9yZVN0b3JhZ2VVc2VkU2hvcnQiLCJzdG9yZUNvaW5zIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionBouncePhase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionComputePhase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionComputePhase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionComputePhase = exports.loadTransactionComputePhase = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst ComputeSkipReason_1 = __webpack_require__(/*! ./ComputeSkipReason */ \"(ssr)/./node_modules/@ton/core/dist/types/ComputeSkipReason.js\");\nfunction loadTransactionComputePhase(slice) {\n    // Skipped\n    if (!slice.loadBit()) {\n        let reason = (0, ComputeSkipReason_1.loadComputeSkipReason)(slice);\n        return {\n            type: \"skipped\",\n            reason\n        };\n    }\n    let success = slice.loadBit();\n    let messageStateUsed = slice.loadBit();\n    let accountActivated = slice.loadBit();\n    let gasFees = slice.loadCoins();\n    const vmState = slice.loadRef().beginParse();\n    let gasUsed = vmState.loadVarUintBig(3);\n    let gasLimit = vmState.loadVarUintBig(3);\n    let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : undefined;\n    let mode = vmState.loadUint(8);\n    let exitCode = vmState.loadInt(32);\n    let exitArg = vmState.loadBit() ? vmState.loadInt(32) : undefined;\n    let vmSteps = vmState.loadUint(32);\n    let vmInitStateHash = vmState.loadUintBig(256);\n    let vmFinalStateHash = vmState.loadUintBig(256);\n    return {\n        type: \"vm\",\n        success,\n        messageStateUsed,\n        accountActivated,\n        gasFees,\n        gasUsed,\n        gasLimit,\n        gasCredit,\n        mode,\n        exitCode,\n        exitArg,\n        vmSteps,\n        vmInitStateHash,\n        vmFinalStateHash\n    };\n}\nexports.loadTransactionComputePhase = loadTransactionComputePhase;\nfunction storeTransactionComputePhase(src) {\n    return (builder)=>{\n        if (src.type === \"skipped\") {\n            builder.storeBit(0);\n            builder.store((0, ComputeSkipReason_1.storeComputeSkipReason)(src.reason));\n            return;\n        }\n        builder.storeBit(1);\n        builder.storeBit(src.success);\n        builder.storeBit(src.messageStateUsed);\n        builder.storeBit(src.accountActivated);\n        builder.storeCoins(src.gasFees);\n        builder.storeRef((0, Builder_1.beginCell)().storeVarUint(src.gasUsed, 3).storeVarUint(src.gasLimit, 3).store((b)=>src.gasCredit !== undefined && src.gasCredit !== null ? b.storeBit(1).storeVarUint(src.gasCredit, 2) : b.storeBit(0)).storeUint(src.mode, 8).storeInt(src.exitCode, 32).store((b)=>src.exitArg !== undefined && src.exitArg !== null ? b.storeBit(1).storeInt(src.exitArg, 32) : b.storeBit(0)).storeUint(src.vmSteps, 32).storeUint(src.vmInitStateHash, 256).storeUint(src.vmFinalStateHash, 256).endCell());\n    };\n}\nexports.storeTransactionComputePhase = storeTransactionComputePhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25Db21wdXRlUGhhc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9DQUFvQyxHQUFHQSxtQ0FBbUMsR0FBRyxLQUFLO0FBQ2xGLE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUMxQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLDJGQUFxQjtBQUN6RCxTQUFTRiw0QkFBNEJJLEtBQUs7SUFDdEMsVUFBVTtJQUNWLElBQUksQ0FBQ0EsTUFBTUMsT0FBTyxJQUFJO1FBQ2xCLElBQUlDLFNBQVMsQ0FBQyxHQUFHSCxvQkFBb0JJLHFCQUFxQixFQUFFSDtRQUM1RCxPQUFPO1lBQ0hJLE1BQU07WUFDTkY7UUFDSjtJQUNKO0lBQ0EsSUFBSUcsVUFBVUwsTUFBTUMsT0FBTztJQUMzQixJQUFJSyxtQkFBbUJOLE1BQU1DLE9BQU87SUFDcEMsSUFBSU0sbUJBQW1CUCxNQUFNQyxPQUFPO0lBQ3BDLElBQUlPLFVBQVVSLE1BQU1TLFNBQVM7SUFDN0IsTUFBTUMsVUFBVVYsTUFBTVcsT0FBTyxHQUFHQyxVQUFVO0lBQzFDLElBQUlDLFVBQVVILFFBQVFJLGNBQWMsQ0FBQztJQUNyQyxJQUFJQyxXQUFXTCxRQUFRSSxjQUFjLENBQUM7SUFDdEMsSUFBSUUsWUFBWU4sUUFBUVQsT0FBTyxLQUFLUyxRQUFRSSxjQUFjLENBQUMsS0FBS0c7SUFDaEUsSUFBSUMsT0FBT1IsUUFBUVMsUUFBUSxDQUFDO0lBQzVCLElBQUlDLFdBQVdWLFFBQVFXLE9BQU8sQ0FBQztJQUMvQixJQUFJQyxVQUFVWixRQUFRVCxPQUFPLEtBQUtTLFFBQVFXLE9BQU8sQ0FBQyxNQUFNSjtJQUN4RCxJQUFJTSxVQUFVYixRQUFRUyxRQUFRLENBQUM7SUFDL0IsSUFBSUssa0JBQWtCZCxRQUFRZSxXQUFXLENBQUM7SUFDMUMsSUFBSUMsbUJBQW1CaEIsUUFBUWUsV0FBVyxDQUFDO0lBQzNDLE9BQU87UUFDSHJCLE1BQU07UUFDTkM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUs7UUFDQUU7UUFDQUM7UUFDQUU7UUFDQUU7UUFDQUU7UUFDQUM7UUFDQUM7UUFDQUU7SUFDSjtBQUNKO0FBQ0FqQyxtQ0FBbUMsR0FBR0c7QUFDdEMsU0FBU0QsNkJBQTZCZ0MsR0FBRztJQUNyQyxPQUFPLENBQUNDO1FBQ0osSUFBSUQsSUFBSXZCLElBQUksS0FBSyxXQUFXO1lBQ3hCd0IsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRRSxLQUFLLENBQUMsQ0FBQyxHQUFHL0Isb0JBQW9CZ0Msc0JBQXNCLEVBQUVKLElBQUl6QixNQUFNO1lBQ3hFO1FBQ0o7UUFDQTBCLFFBQVFDLFFBQVEsQ0FBQztRQUNqQkQsUUFBUUMsUUFBUSxDQUFDRixJQUFJdEIsT0FBTztRQUM1QnVCLFFBQVFDLFFBQVEsQ0FBQ0YsSUFBSXJCLGdCQUFnQjtRQUNyQ3NCLFFBQVFDLFFBQVEsQ0FBQ0YsSUFBSXBCLGdCQUFnQjtRQUNyQ3FCLFFBQVFJLFVBQVUsQ0FBQ0wsSUFBSW5CLE9BQU87UUFDOUJvQixRQUFRSyxRQUFRLENBQUMsQ0FBQyxHQUFHcEMsVUFBVXFDLFNBQVMsSUFDbkNDLFlBQVksQ0FBQ1IsSUFBSWQsT0FBTyxFQUFFLEdBQzFCc0IsWUFBWSxDQUFDUixJQUFJWixRQUFRLEVBQUUsR0FDM0JlLEtBQUssQ0FBQyxDQUFDTSxJQUFNLElBQUtwQixTQUFTLEtBQUtDLGFBQWFVLElBQUlYLFNBQVMsS0FBSyxPQUFRb0IsRUFBRVAsUUFBUSxDQUFDLEdBQUdNLFlBQVksQ0FBQ1IsSUFBSVgsU0FBUyxFQUFFLEtBQUtvQixFQUFFUCxRQUFRLENBQUMsSUFDaklRLFNBQVMsQ0FBQ1YsSUFBSVQsSUFBSSxFQUFFLEdBQ3BCb0IsUUFBUSxDQUFDWCxJQUFJUCxRQUFRLEVBQUUsSUFDdkJVLEtBQUssQ0FBQyxDQUFDTSxJQUFNLElBQUtkLE9BQU8sS0FBS0wsYUFBYVUsSUFBSUwsT0FBTyxLQUFLLE9BQVFjLEVBQUVQLFFBQVEsQ0FBQyxHQUFHUyxRQUFRLENBQUNYLElBQUlMLE9BQU8sRUFBRSxNQUFNYyxFQUFFUCxRQUFRLENBQUMsSUFDeEhRLFNBQVMsQ0FBQ1YsSUFBSUosT0FBTyxFQUFFLElBQ3ZCYyxTQUFTLENBQUNWLElBQUlILGVBQWUsRUFBRSxLQUMvQmEsU0FBUyxDQUFDVixJQUFJRCxnQkFBZ0IsRUFBRSxLQUNoQ2EsT0FBTztJQUNoQjtBQUNKO0FBQ0E5QyxvQ0FBb0MsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3R5cGVzL1RyYW5zYWN0aW9uQ29tcHV0ZVBoYXNlLmpzPzgyZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlVHJhbnNhY3Rpb25Db21wdXRlUGhhc2UgPSBleHBvcnRzLmxvYWRUcmFuc2FjdGlvbkNvbXB1dGVQaGFzZSA9IHZvaWQgMDtcbmNvbnN0IEJ1aWxkZXJfMSA9IHJlcXVpcmUoXCIuLi9ib2MvQnVpbGRlclwiKTtcbmNvbnN0IENvbXB1dGVTa2lwUmVhc29uXzEgPSByZXF1aXJlKFwiLi9Db21wdXRlU2tpcFJlYXNvblwiKTtcbmZ1bmN0aW9uIGxvYWRUcmFuc2FjdGlvbkNvbXB1dGVQaGFzZShzbGljZSkge1xuICAgIC8vIFNraXBwZWRcbiAgICBpZiAoIXNsaWNlLmxvYWRCaXQoKSkge1xuICAgICAgICBsZXQgcmVhc29uID0gKDAsIENvbXB1dGVTa2lwUmVhc29uXzEubG9hZENvbXB1dGVTa2lwUmVhc29uKShzbGljZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnc2tpcHBlZCcsXG4gICAgICAgICAgICByZWFzb25cbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHN1Y2Nlc3MgPSBzbGljZS5sb2FkQml0KCk7XG4gICAgbGV0IG1lc3NhZ2VTdGF0ZVVzZWQgPSBzbGljZS5sb2FkQml0KCk7XG4gICAgbGV0IGFjY291bnRBY3RpdmF0ZWQgPSBzbGljZS5sb2FkQml0KCk7XG4gICAgbGV0IGdhc0ZlZXMgPSBzbGljZS5sb2FkQ29pbnMoKTtcbiAgICBjb25zdCB2bVN0YXRlID0gc2xpY2UubG9hZFJlZigpLmJlZ2luUGFyc2UoKTtcbiAgICBsZXQgZ2FzVXNlZCA9IHZtU3RhdGUubG9hZFZhclVpbnRCaWcoMyk7XG4gICAgbGV0IGdhc0xpbWl0ID0gdm1TdGF0ZS5sb2FkVmFyVWludEJpZygzKTtcbiAgICBsZXQgZ2FzQ3JlZGl0ID0gdm1TdGF0ZS5sb2FkQml0KCkgPyB2bVN0YXRlLmxvYWRWYXJVaW50QmlnKDIpIDogdW5kZWZpbmVkO1xuICAgIGxldCBtb2RlID0gdm1TdGF0ZS5sb2FkVWludCg4KTtcbiAgICBsZXQgZXhpdENvZGUgPSB2bVN0YXRlLmxvYWRJbnQoMzIpO1xuICAgIGxldCBleGl0QXJnID0gdm1TdGF0ZS5sb2FkQml0KCkgPyB2bVN0YXRlLmxvYWRJbnQoMzIpIDogdW5kZWZpbmVkO1xuICAgIGxldCB2bVN0ZXBzID0gdm1TdGF0ZS5sb2FkVWludCgzMik7XG4gICAgbGV0IHZtSW5pdFN0YXRlSGFzaCA9IHZtU3RhdGUubG9hZFVpbnRCaWcoMjU2KTtcbiAgICBsZXQgdm1GaW5hbFN0YXRlSGFzaCA9IHZtU3RhdGUubG9hZFVpbnRCaWcoMjU2KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAndm0nLFxuICAgICAgICBzdWNjZXNzLFxuICAgICAgICBtZXNzYWdlU3RhdGVVc2VkLFxuICAgICAgICBhY2NvdW50QWN0aXZhdGVkLFxuICAgICAgICBnYXNGZWVzLFxuICAgICAgICBnYXNVc2VkLFxuICAgICAgICBnYXNMaW1pdCxcbiAgICAgICAgZ2FzQ3JlZGl0LFxuICAgICAgICBtb2RlLFxuICAgICAgICBleGl0Q29kZSxcbiAgICAgICAgZXhpdEFyZyxcbiAgICAgICAgdm1TdGVwcyxcbiAgICAgICAgdm1Jbml0U3RhdGVIYXNoLFxuICAgICAgICB2bUZpbmFsU3RhdGVIYXNoXG4gICAgfTtcbn1cbmV4cG9ydHMubG9hZFRyYW5zYWN0aW9uQ29tcHV0ZVBoYXNlID0gbG9hZFRyYW5zYWN0aW9uQ29tcHV0ZVBoYXNlO1xuZnVuY3Rpb24gc3RvcmVUcmFuc2FjdGlvbkNvbXB1dGVQaGFzZShzcmMpIHtcbiAgICByZXR1cm4gKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgaWYgKHNyYy50eXBlID09PSAnc2tpcHBlZCcpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoMCk7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlKCgwLCBDb21wdXRlU2tpcFJlYXNvbl8xLnN0b3JlQ29tcHV0ZVNraXBSZWFzb24pKHNyYy5yZWFzb24pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBidWlsZGVyLnN0b3JlQml0KDEpO1xuICAgICAgICBidWlsZGVyLnN0b3JlQml0KHNyYy5zdWNjZXNzKTtcbiAgICAgICAgYnVpbGRlci5zdG9yZUJpdChzcmMubWVzc2FnZVN0YXRlVXNlZCk7XG4gICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoc3JjLmFjY291bnRBY3RpdmF0ZWQpO1xuICAgICAgICBidWlsZGVyLnN0b3JlQ29pbnMoc3JjLmdhc0ZlZXMpO1xuICAgICAgICBidWlsZGVyLnN0b3JlUmVmKCgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgICAgICAuc3RvcmVWYXJVaW50KHNyYy5nYXNVc2VkLCAzKVxuICAgICAgICAgICAgLnN0b3JlVmFyVWludChzcmMuZ2FzTGltaXQsIDMpXG4gICAgICAgICAgICAuc3RvcmUoKGIpID0+IChzcmMuZ2FzQ3JlZGl0ICE9PSB1bmRlZmluZWQgJiYgc3JjLmdhc0NyZWRpdCAhPT0gbnVsbCkgPyBiLnN0b3JlQml0KDEpLnN0b3JlVmFyVWludChzcmMuZ2FzQ3JlZGl0LCAyKSA6IGIuc3RvcmVCaXQoMCkpXG4gICAgICAgICAgICAuc3RvcmVVaW50KHNyYy5tb2RlLCA4KVxuICAgICAgICAgICAgLnN0b3JlSW50KHNyYy5leGl0Q29kZSwgMzIpXG4gICAgICAgICAgICAuc3RvcmUoKGIpID0+IChzcmMuZXhpdEFyZyAhPT0gdW5kZWZpbmVkICYmIHNyYy5leGl0QXJnICE9PSBudWxsKSA/IGIuc3RvcmVCaXQoMSkuc3RvcmVJbnQoc3JjLmV4aXRBcmcsIDMyKSA6IGIuc3RvcmVCaXQoMCkpXG4gICAgICAgICAgICAuc3RvcmVVaW50KHNyYy52bVN0ZXBzLCAzMilcbiAgICAgICAgICAgIC5zdG9yZVVpbnQoc3JjLnZtSW5pdFN0YXRlSGFzaCwgMjU2KVxuICAgICAgICAgICAgLnN0b3JlVWludChzcmMudm1GaW5hbFN0YXRlSGFzaCwgMjU2KVxuICAgICAgICAgICAgLmVuZENlbGwoKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc3RvcmVUcmFuc2FjdGlvbkNvbXB1dGVQaGFzZSA9IHN0b3JlVHJhbnNhY3Rpb25Db21wdXRlUGhhc2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVRyYW5zYWN0aW9uQ29tcHV0ZVBoYXNlIiwibG9hZFRyYW5zYWN0aW9uQ29tcHV0ZVBoYXNlIiwiQnVpbGRlcl8xIiwicmVxdWlyZSIsIkNvbXB1dGVTa2lwUmVhc29uXzEiLCJzbGljZSIsImxvYWRCaXQiLCJyZWFzb24iLCJsb2FkQ29tcHV0ZVNraXBSZWFzb24iLCJ0eXBlIiwic3VjY2VzcyIsIm1lc3NhZ2VTdGF0ZVVzZWQiLCJhY2NvdW50QWN0aXZhdGVkIiwiZ2FzRmVlcyIsImxvYWRDb2lucyIsInZtU3RhdGUiLCJsb2FkUmVmIiwiYmVnaW5QYXJzZSIsImdhc1VzZWQiLCJsb2FkVmFyVWludEJpZyIsImdhc0xpbWl0IiwiZ2FzQ3JlZGl0IiwidW5kZWZpbmVkIiwibW9kZSIsImxvYWRVaW50IiwiZXhpdENvZGUiLCJsb2FkSW50IiwiZXhpdEFyZyIsInZtU3RlcHMiLCJ2bUluaXRTdGF0ZUhhc2giLCJsb2FkVWludEJpZyIsInZtRmluYWxTdGF0ZUhhc2giLCJzcmMiLCJidWlsZGVyIiwic3RvcmVCaXQiLCJzdG9yZSIsInN0b3JlQ29tcHV0ZVNraXBSZWFzb24iLCJzdG9yZUNvaW5zIiwic3RvcmVSZWYiLCJiZWdpbkNlbGwiLCJzdG9yZVZhclVpbnQiLCJiIiwic3RvcmVVaW50Iiwic3RvcmVJbnQiLCJlbmRDZWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionComputePhase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionCreditPhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionCreditPhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = void 0;\nconst CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nfunction loadTransactionCreditPhase(slice) {\n    const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : undefined;\n    const credit = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n    return {\n        dueFeesColelcted,\n        credit\n    };\n}\nexports.loadTransactionCreditPhase = loadTransactionCreditPhase;\nfunction storeTransactionCreditPhase(src) {\n    return (builder)=>{\n        if (src.dueFeesColelcted === null || src.dueFeesColelcted === undefined) {\n            builder.storeBit(false);\n        } else {\n            builder.storeBit(true);\n            builder.storeCoins(src.dueFeesColelcted);\n        }\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.credit));\n    };\n}\nexports.storeTransactionCreditPhase = storeTransactionCreditPhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25DcmVkaXRQaGFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUdBLGtDQUFrQyxHQUFHLEtBQUs7QUFDaEYsTUFBTUksdUJBQXVCQyxtQkFBT0EsQ0FBQyw2RkFBc0I7QUFDM0QsU0FBU0YsMkJBQTJCRyxLQUFLO0lBQ3JDLE1BQU1DLG1CQUFtQkQsTUFBTUUsT0FBTyxLQUFLRixNQUFNRyxTQUFTLEtBQUtDO0lBQy9ELE1BQU1DLFNBQVMsQ0FBQyxHQUFHUCxxQkFBcUJRLHNCQUFzQixFQUFFTjtJQUNoRSxPQUFPO1FBQ0hDO1FBQ0FJO0lBQ0o7QUFDSjtBQUNBWCxrQ0FBa0MsR0FBR0c7QUFDckMsU0FBU0QsNEJBQTRCVyxHQUFHO0lBQ3BDLE9BQU8sQ0FBQ0M7UUFDSixJQUFJRCxJQUFJTixnQkFBZ0IsS0FBSyxRQUFRTSxJQUFJTixnQkFBZ0IsS0FBS0csV0FBVztZQUNyRUksUUFBUUMsUUFBUSxDQUFDO1FBQ3JCLE9BQ0s7WUFDREQsUUFBUUMsUUFBUSxDQUFDO1lBQ2pCRCxRQUFRRSxVQUFVLENBQUNILElBQUlOLGdCQUFnQjtRQUMzQztRQUNBTyxRQUFRRyxLQUFLLENBQUMsQ0FBQyxHQUFHYixxQkFBcUJjLHVCQUF1QixFQUFFTCxJQUFJRixNQUFNO0lBQzlFO0FBQ0o7QUFDQVgsbUNBQW1DLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC90eXBlcy9UcmFuc2FjdGlvbkNyZWRpdFBoYXNlLmpzP2U4YWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JlVHJhbnNhY3Rpb25DcmVkaXRQaGFzZSA9IGV4cG9ydHMubG9hZFRyYW5zYWN0aW9uQ3JlZGl0UGhhc2UgPSB2b2lkIDA7XG5jb25zdCBDdXJyZW5jeUNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0N1cnJlbmN5Q29sbGVjdGlvblwiKTtcbmZ1bmN0aW9uIGxvYWRUcmFuc2FjdGlvbkNyZWRpdFBoYXNlKHNsaWNlKSB7XG4gICAgY29uc3QgZHVlRmVlc0NvbGVsY3RlZCA9IHNsaWNlLmxvYWRCaXQoKSA/IHNsaWNlLmxvYWRDb2lucygpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGNyZWRpdCA9ICgwLCBDdXJyZW5jeUNvbGxlY3Rpb25fMS5sb2FkQ3VycmVuY3lDb2xsZWN0aW9uKShzbGljZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHVlRmVlc0NvbGVsY3RlZCxcbiAgICAgICAgY3JlZGl0XG4gICAgfTtcbn1cbmV4cG9ydHMubG9hZFRyYW5zYWN0aW9uQ3JlZGl0UGhhc2UgPSBsb2FkVHJhbnNhY3Rpb25DcmVkaXRQaGFzZTtcbmZ1bmN0aW9uIHN0b3JlVHJhbnNhY3Rpb25DcmVkaXRQaGFzZShzcmMpIHtcbiAgICByZXR1cm4gKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgaWYgKHNyYy5kdWVGZWVzQ29sZWxjdGVkID09PSBudWxsIHx8IHNyYy5kdWVGZWVzQ29sZWxjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVCaXQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdCh0cnVlKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuc3RvcmVDb2lucyhzcmMuZHVlRmVlc0NvbGVsY3RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgQ3VycmVuY3lDb2xsZWN0aW9uXzEuc3RvcmVDdXJyZW5jeUNvbGxlY3Rpb24pKHNyYy5jcmVkaXQpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zdG9yZVRyYW5zYWN0aW9uQ3JlZGl0UGhhc2UgPSBzdG9yZVRyYW5zYWN0aW9uQ3JlZGl0UGhhc2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVRyYW5zYWN0aW9uQ3JlZGl0UGhhc2UiLCJsb2FkVHJhbnNhY3Rpb25DcmVkaXRQaGFzZSIsIkN1cnJlbmN5Q29sbGVjdGlvbl8xIiwicmVxdWlyZSIsInNsaWNlIiwiZHVlRmVlc0NvbGVsY3RlZCIsImxvYWRCaXQiLCJsb2FkQ29pbnMiLCJ1bmRlZmluZWQiLCJjcmVkaXQiLCJsb2FkQ3VycmVuY3lDb2xsZWN0aW9uIiwic3JjIiwiYnVpbGRlciIsInN0b3JlQml0Iiwic3RvcmVDb2lucyIsInN0b3JlIiwic3RvcmVDdXJyZW5jeUNvbGxlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionCreditPhase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionDescription.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionDescription.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionDescription = exports.loadTransactionDescription = void 0;\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst SplitMergeInfo_1 = __webpack_require__(/*! ./SplitMergeInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/SplitMergeInfo.js\");\nconst Transaction_1 = __webpack_require__(/*! ./Transaction */ \"(ssr)/./node_modules/@ton/core/dist/types/Transaction.js\");\nconst TransactionActionPhase_1 = __webpack_require__(/*! ./TransactionActionPhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionActionPhase.js\");\nconst TransactionBouncePhase_1 = __webpack_require__(/*! ./TransactionBouncePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionBouncePhase.js\");\nconst TransactionComputePhase_1 = __webpack_require__(/*! ./TransactionComputePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionComputePhase.js\");\nconst TransactionCreditPhase_1 = __webpack_require__(/*! ./TransactionCreditPhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionCreditPhase.js\");\nconst TransactionStoragePhase_1 = __webpack_require__(/*! ./TransactionStoragePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionStoragePhase.js\");\nfunction loadTransactionDescription(slice) {\n    let type = slice.loadUint(4);\n    if (type === 0x00) {\n        const creditFirst = slice.loadBit();\n        let storagePhase = undefined;\n        if (slice.loadBit()) {\n            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        }\n        let creditPhase = undefined;\n        if (slice.loadBit()) {\n            creditPhase = (0, TransactionCreditPhase_1.loadTransactionCreditPhase)(slice);\n        }\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        let aborted = slice.loadBit();\n        let bouncePhase = undefined;\n        if (slice.loadBit()) {\n            bouncePhase = (0, TransactionBouncePhase_1.loadTransactionBouncePhase)(slice);\n        }\n        const destroyed = slice.loadBit();\n        return {\n            type: \"generic\",\n            creditFirst,\n            storagePhase,\n            creditPhase,\n            computePhase,\n            actionPhase,\n            bouncePhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x01) {\n        return {\n            type: \"storage\",\n            storagePhase: (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice)\n        };\n    }\n    if (type === 0x2 || type === 0x03) {\n        const isTock = type === 0x03;\n        let storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        const aborted = slice.loadBit();\n        const destroyed = slice.loadBit();\n        return {\n            type: \"tick-tock\",\n            isTock,\n            storagePhase,\n            computePhase,\n            actionPhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x04) {\n        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);\n        let storagePhase = undefined;\n        if (slice.loadBit()) {\n            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        }\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        const aborted = slice.loadBit();\n        const destroyed = slice.loadBit();\n        return {\n            type: \"split-prepare\",\n            splitInfo,\n            storagePhase,\n            computePhase,\n            actionPhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x05) {\n        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);\n        let prepareTransaction = (0, Transaction_1.loadTransaction)(slice.loadRef().beginParse());\n        const installed = slice.loadBit();\n        return {\n            type: \"split-install\",\n            splitInfo,\n            prepareTransaction,\n            installed\n        };\n    }\n    throw Error(`Unsupported transaction description type ${type}`);\n}\nexports.loadTransactionDescription = loadTransactionDescription;\nfunction storeTransactionDescription(src) {\n    return (builder)=>{\n        if (src.type === \"generic\") {\n            builder.storeUint(0x00, 4);\n            builder.storeBit(src.creditFirst);\n            if (src.storagePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            } else {\n                builder.storeBit(false);\n            }\n            if (src.creditPhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionCreditPhase_1.storeTransactionCreditPhase)(src.creditPhase));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            if (src.bouncePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionBouncePhase_1.storeTransactionBouncePhase)(src.bouncePhase));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.destroyed);\n        } else if (src.type === \"storage\") {\n            builder.storeUint(0x01, 4);\n            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n        } else if (src.type === \"tick-tock\") {\n            builder.storeUint(src.isTock ? 0x03 : 0x02, 4);\n            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            builder.storeBit(src.destroyed);\n        } else if (src.type === \"split-prepare\") {\n            builder.storeUint(0x04, 4);\n            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));\n            if (src.storagePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase));\n            } else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            builder.storeBit(src.destroyed);\n        } else if (src.type === \"split-install\") {\n            builder.storeUint(0x05, 4);\n            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));\n            builder.storeRef((0, Builder_1.beginCell)().store((0, Transaction_1.storeTransaction)(src.prepareTransaction)));\n            builder.storeBit(src.installed);\n        } else {\n            throw Error(`Unsupported transaction description type ${src.type}`);\n        }\n    };\n}\nexports.storeTransactionDescription = storeTransactionDescription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionDescription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/TransactionStoragePhase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionStoragePhase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = void 0;\nconst AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStatusChange.js\");\nfunction loadTransactionStoragePhase(slice) {\n    const storageFeesCollected = slice.loadCoins();\n    let storageFeesDue = undefined;\n    if (slice.loadBit()) {\n        storageFeesDue = slice.loadCoins();\n    }\n    const statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);\n    return {\n        storageFeesCollected,\n        storageFeesDue,\n        statusChange\n    };\n}\nexports.loadTransactionStoragePhase = loadTransactionStoragePhase;\nfunction storeTransactionsStoragePhase(src) {\n    return (builder)=>{\n        builder.storeCoins(src.storageFeesCollected);\n        if (src.storageFeesDue === null || src.storageFeesDue === undefined) {\n            builder.storeBit(false);\n        } else {\n            builder.storeBit(true);\n            builder.storeCoins(src.storageFeesDue);\n        }\n        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));\n    };\n}\nexports.storeTransactionsStoragePhase = storeTransactionsStoragePhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25TdG9yYWdlUGhhc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFDQUFxQyxHQUFHQSxtQ0FBbUMsR0FBRyxLQUFLO0FBQ25GLE1BQU1JLHdCQUF3QkMsbUJBQU9BLENBQUMsK0ZBQXVCO0FBQzdELFNBQVNGLDRCQUE0QkcsS0FBSztJQUN0QyxNQUFNQyx1QkFBdUJELE1BQU1FLFNBQVM7SUFDNUMsSUFBSUMsaUJBQWlCQztJQUNyQixJQUFJSixNQUFNSyxPQUFPLElBQUk7UUFDakJGLGlCQUFpQkgsTUFBTUUsU0FBUztJQUNwQztJQUNBLE1BQU1JLGVBQWUsQ0FBQyxHQUFHUixzQkFBc0JTLHVCQUF1QixFQUFFUDtJQUN4RSxPQUFPO1FBQ0hDO1FBQ0FFO1FBQ0FHO0lBQ0o7QUFDSjtBQUNBWixtQ0FBbUMsR0FBR0c7QUFDdEMsU0FBU0QsOEJBQThCWSxHQUFHO0lBQ3RDLE9BQU8sQ0FBQ0M7UUFDSkEsUUFBUUMsVUFBVSxDQUFDRixJQUFJUCxvQkFBb0I7UUFDM0MsSUFBSU8sSUFBSUwsY0FBYyxLQUFLLFFBQVFLLElBQUlMLGNBQWMsS0FBS0MsV0FBVztZQUNqRUssUUFBUUUsUUFBUSxDQUFDO1FBQ3JCLE9BQ0s7WUFDREYsUUFBUUUsUUFBUSxDQUFDO1lBQ2pCRixRQUFRQyxVQUFVLENBQUNGLElBQUlMLGNBQWM7UUFDekM7UUFDQU0sUUFBUUcsS0FBSyxDQUFDLENBQUMsR0FBR2Qsc0JBQXNCZSx3QkFBd0IsRUFBRUwsSUFBSUYsWUFBWTtJQUN0RjtBQUNKO0FBQ0FaLHFDQUFxQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvVHJhbnNhY3Rpb25TdG9yYWdlUGhhc2UuanM/NjA1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmVUcmFuc2FjdGlvbnNTdG9yYWdlUGhhc2UgPSBleHBvcnRzLmxvYWRUcmFuc2FjdGlvblN0b3JhZ2VQaGFzZSA9IHZvaWQgMDtcbmNvbnN0IEFjY291bnRTdGF0dXNDaGFuZ2VfMSA9IHJlcXVpcmUoXCIuL0FjY291bnRTdGF0dXNDaGFuZ2VcIik7XG5mdW5jdGlvbiBsb2FkVHJhbnNhY3Rpb25TdG9yYWdlUGhhc2Uoc2xpY2UpIHtcbiAgICBjb25zdCBzdG9yYWdlRmVlc0NvbGxlY3RlZCA9IHNsaWNlLmxvYWRDb2lucygpO1xuICAgIGxldCBzdG9yYWdlRmVlc0R1ZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoc2xpY2UubG9hZEJpdCgpKSB7XG4gICAgICAgIHN0b3JhZ2VGZWVzRHVlID0gc2xpY2UubG9hZENvaW5zKCk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXR1c0NoYW5nZSA9ICgwLCBBY2NvdW50U3RhdHVzQ2hhbmdlXzEubG9hZEFjY291bnRTdGF0dXNDaGFuZ2UpKHNsaWNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9yYWdlRmVlc0NvbGxlY3RlZCxcbiAgICAgICAgc3RvcmFnZUZlZXNEdWUsXG4gICAgICAgIHN0YXR1c0NoYW5nZVxuICAgIH07XG59XG5leHBvcnRzLmxvYWRUcmFuc2FjdGlvblN0b3JhZ2VQaGFzZSA9IGxvYWRUcmFuc2FjdGlvblN0b3JhZ2VQaGFzZTtcbmZ1bmN0aW9uIHN0b3JlVHJhbnNhY3Rpb25zU3RvcmFnZVBoYXNlKHNyYykge1xuICAgIHJldHVybiAoYnVpbGRlcikgPT4ge1xuICAgICAgICBidWlsZGVyLnN0b3JlQ29pbnMoc3JjLnN0b3JhZ2VGZWVzQ29sbGVjdGVkKTtcbiAgICAgICAgaWYgKHNyYy5zdG9yYWdlRmVlc0R1ZSA9PT0gbnVsbCB8fCBzcmMuc3RvcmFnZUZlZXNEdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUJpdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVyLnN0b3JlQml0KHRydWUpO1xuICAgICAgICAgICAgYnVpbGRlci5zdG9yZUNvaW5zKHNyYy5zdG9yYWdlRmVlc0R1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRlci5zdG9yZSgoMCwgQWNjb3VudFN0YXR1c0NoYW5nZV8xLnN0b3JlQWNjb3VudFN0YXR1c0NoYW5nZSkoc3JjLnN0YXR1c0NoYW5nZSkpO1xuICAgIH07XG59XG5leHBvcnRzLnN0b3JlVHJhbnNhY3Rpb25zU3RvcmFnZVBoYXNlID0gc3RvcmVUcmFuc2FjdGlvbnNTdG9yYWdlUGhhc2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVRyYW5zYWN0aW9uc1N0b3JhZ2VQaGFzZSIsImxvYWRUcmFuc2FjdGlvblN0b3JhZ2VQaGFzZSIsIkFjY291bnRTdGF0dXNDaGFuZ2VfMSIsInJlcXVpcmUiLCJzbGljZSIsInN0b3JhZ2VGZWVzQ29sbGVjdGVkIiwibG9hZENvaW5zIiwic3RvcmFnZUZlZXNEdWUiLCJ1bmRlZmluZWQiLCJsb2FkQml0Iiwic3RhdHVzQ2hhbmdlIiwibG9hZEFjY291bnRTdGF0dXNDaGFuZ2UiLCJzcmMiLCJidWlsZGVyIiwic3RvcmVDb2lucyIsInN0b3JlQml0Iiwic3RvcmUiLCJzdG9yZUFjY291bnRTdGF0dXNDaGFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/TransactionStoragePhase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/_export.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/_export.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadStorageInfo = exports.storeStateInit = exports.loadStateInit = exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = exports.storeSimpleLibrary = exports.loadSimpleLibrary = exports.loadShardStateUnsplit = exports.storeShardIdent = exports.loadShardIdent = exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = exports.storeShardAccount = exports.loadShardAccount = exports.SendMode = exports.storeMessageRelaxed = exports.loadMessageRelaxed = exports.storeMessage = exports.loadMessage = exports.loadMasterchainStateExtra = exports.storeHashUpdate = exports.loadHashUpdate = exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = exports.storeCurrencyCollection = exports.loadCurrencyCollection = exports.storeComputeSkipReason = exports.loadComputeSkipReason = exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = exports.storeOutList = exports.loadOutList = exports.storeOutAction = exports.loadOutAction = exports.storeAccountStorage = exports.loadAccountStorage = exports.storeAccountStatusChange = exports.loadAccountStatusChange = exports.storeAccountStatus = exports.loadAccountStatus = exports.storeAccountState = exports.loadAccountState = exports.storeAccount = exports.loadAccount = exports.comment = exports.external = exports.internal = void 0;\nexports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = exports.storeTransactionDescription = exports.loadTransactionDescription = exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = exports.storeTransaction = exports.loadTransaction = exports.storeTickTock = exports.loadTickTock = exports.storeStorageUsedShort = exports.loadStorageUsedShort = exports.storeStorageUsed = exports.loadStorageUsed = exports.storeStorageInfo = void 0;\nvar _helpers_1 = __webpack_require__(/*! ./_helpers */ \"(ssr)/./node_modules/@ton/core/dist/types/_helpers.js\");\nObject.defineProperty(exports, \"internal\", ({\n    enumerable: true,\n    get: function() {\n        return _helpers_1.internal;\n    }\n}));\nObject.defineProperty(exports, \"external\", ({\n    enumerable: true,\n    get: function() {\n        return _helpers_1.external;\n    }\n}));\nObject.defineProperty(exports, \"comment\", ({\n    enumerable: true,\n    get: function() {\n        return _helpers_1.comment;\n    }\n}));\nvar Account_1 = __webpack_require__(/*! ./Account */ \"(ssr)/./node_modules/@ton/core/dist/types/Account.js\");\nObject.defineProperty(exports, \"loadAccount\", ({\n    enumerable: true,\n    get: function() {\n        return Account_1.loadAccount;\n    }\n}));\nObject.defineProperty(exports, \"storeAccount\", ({\n    enumerable: true,\n    get: function() {\n        return Account_1.storeAccount;\n    }\n}));\nvar AccountState_1 = __webpack_require__(/*! ./AccountState */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountState.js\");\nObject.defineProperty(exports, \"loadAccountState\", ({\n    enumerable: true,\n    get: function() {\n        return AccountState_1.loadAccountState;\n    }\n}));\nObject.defineProperty(exports, \"storeAccountState\", ({\n    enumerable: true,\n    get: function() {\n        return AccountState_1.storeAccountState;\n    }\n}));\nvar AccountStatus_1 = __webpack_require__(/*! ./AccountStatus */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStatus.js\");\nObject.defineProperty(exports, \"loadAccountStatus\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStatus_1.loadAccountStatus;\n    }\n}));\nObject.defineProperty(exports, \"storeAccountStatus\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStatus_1.storeAccountStatus;\n    }\n}));\nvar AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStatusChange.js\");\nObject.defineProperty(exports, \"loadAccountStatusChange\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStatusChange_1.loadAccountStatusChange;\n    }\n}));\nObject.defineProperty(exports, \"storeAccountStatusChange\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStatusChange_1.storeAccountStatusChange;\n    }\n}));\nvar AccountStorage_1 = __webpack_require__(/*! ./AccountStorage */ \"(ssr)/./node_modules/@ton/core/dist/types/AccountStorage.js\");\nObject.defineProperty(exports, \"loadAccountStorage\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStorage_1.loadAccountStorage;\n    }\n}));\nObject.defineProperty(exports, \"storeAccountStorage\", ({\n    enumerable: true,\n    get: function() {\n        return AccountStorage_1.storeAccountStorage;\n    }\n}));\nvar OutList_1 = __webpack_require__(/*! ./OutList */ \"(ssr)/./node_modules/@ton/core/dist/types/OutList.js\");\nObject.defineProperty(exports, \"loadOutAction\", ({\n    enumerable: true,\n    get: function() {\n        return OutList_1.loadOutAction;\n    }\n}));\nObject.defineProperty(exports, \"storeOutAction\", ({\n    enumerable: true,\n    get: function() {\n        return OutList_1.storeOutAction;\n    }\n}));\nObject.defineProperty(exports, \"loadOutList\", ({\n    enumerable: true,\n    get: function() {\n        return OutList_1.loadOutList;\n    }\n}));\nObject.defineProperty(exports, \"storeOutList\", ({\n    enumerable: true,\n    get: function() {\n        return OutList_1.storeOutList;\n    }\n}));\nvar CommonMessageInfo_1 = __webpack_require__(/*! ./CommonMessageInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfo.js\");\nObject.defineProperty(exports, \"loadCommonMessageInfo\", ({\n    enumerable: true,\n    get: function() {\n        return CommonMessageInfo_1.loadCommonMessageInfo;\n    }\n}));\nObject.defineProperty(exports, \"storeCommonMessageInfo\", ({\n    enumerable: true,\n    get: function() {\n        return CommonMessageInfo_1.storeCommonMessageInfo;\n    }\n}));\nvar CommonMessageInfoRelaxed_1 = __webpack_require__(/*! ./CommonMessageInfoRelaxed */ \"(ssr)/./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js\");\nObject.defineProperty(exports, \"loadCommonMessageInfoRelaxed\", ({\n    enumerable: true,\n    get: function() {\n        return CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed;\n    }\n}));\nObject.defineProperty(exports, \"storeCommonMessageInfoRelaxed\", ({\n    enumerable: true,\n    get: function() {\n        return CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed;\n    }\n}));\nvar ComputeSkipReason_1 = __webpack_require__(/*! ./ComputeSkipReason */ \"(ssr)/./node_modules/@ton/core/dist/types/ComputeSkipReason.js\");\nObject.defineProperty(exports, \"loadComputeSkipReason\", ({\n    enumerable: true,\n    get: function() {\n        return ComputeSkipReason_1.loadComputeSkipReason;\n    }\n}));\nObject.defineProperty(exports, \"storeComputeSkipReason\", ({\n    enumerable: true,\n    get: function() {\n        return ComputeSkipReason_1.storeComputeSkipReason;\n    }\n}));\nvar CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ \"(ssr)/./node_modules/@ton/core/dist/types/CurrencyCollection.js\");\nObject.defineProperty(exports, \"loadCurrencyCollection\", ({\n    enumerable: true,\n    get: function() {\n        return CurrencyCollection_1.loadCurrencyCollection;\n    }\n}));\nObject.defineProperty(exports, \"storeCurrencyCollection\", ({\n    enumerable: true,\n    get: function() {\n        return CurrencyCollection_1.storeCurrencyCollection;\n    }\n}));\nvar DepthBalanceInfo_1 = __webpack_require__(/*! ./DepthBalanceInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/DepthBalanceInfo.js\");\nObject.defineProperty(exports, \"loadDepthBalanceInfo\", ({\n    enumerable: true,\n    get: function() {\n        return DepthBalanceInfo_1.loadDepthBalanceInfo;\n    }\n}));\nObject.defineProperty(exports, \"storeDepthBalanceInfo\", ({\n    enumerable: true,\n    get: function() {\n        return DepthBalanceInfo_1.storeDepthBalanceInfo;\n    }\n}));\nvar HashUpdate_1 = __webpack_require__(/*! ./HashUpdate */ \"(ssr)/./node_modules/@ton/core/dist/types/HashUpdate.js\");\nObject.defineProperty(exports, \"loadHashUpdate\", ({\n    enumerable: true,\n    get: function() {\n        return HashUpdate_1.loadHashUpdate;\n    }\n}));\nObject.defineProperty(exports, \"storeHashUpdate\", ({\n    enumerable: true,\n    get: function() {\n        return HashUpdate_1.storeHashUpdate;\n    }\n}));\nvar MasterchainStateExtra_1 = __webpack_require__(/*! ./MasterchainStateExtra */ \"(ssr)/./node_modules/@ton/core/dist/types/MasterchainStateExtra.js\");\nObject.defineProperty(exports, \"loadMasterchainStateExtra\", ({\n    enumerable: true,\n    get: function() {\n        return MasterchainStateExtra_1.loadMasterchainStateExtra;\n    }\n}));\nvar Message_1 = __webpack_require__(/*! ./Message */ \"(ssr)/./node_modules/@ton/core/dist/types/Message.js\");\nObject.defineProperty(exports, \"loadMessage\", ({\n    enumerable: true,\n    get: function() {\n        return Message_1.loadMessage;\n    }\n}));\nObject.defineProperty(exports, \"storeMessage\", ({\n    enumerable: true,\n    get: function() {\n        return Message_1.storeMessage;\n    }\n}));\nvar MessageRelaxed_1 = __webpack_require__(/*! ./MessageRelaxed */ \"(ssr)/./node_modules/@ton/core/dist/types/MessageRelaxed.js\");\nObject.defineProperty(exports, \"loadMessageRelaxed\", ({\n    enumerable: true,\n    get: function() {\n        return MessageRelaxed_1.loadMessageRelaxed;\n    }\n}));\nObject.defineProperty(exports, \"storeMessageRelaxed\", ({\n    enumerable: true,\n    get: function() {\n        return MessageRelaxed_1.storeMessageRelaxed;\n    }\n}));\nvar SendMode_1 = __webpack_require__(/*! ./SendMode */ \"(ssr)/./node_modules/@ton/core/dist/types/SendMode.js\");\nObject.defineProperty(exports, \"SendMode\", ({\n    enumerable: true,\n    get: function() {\n        return SendMode_1.SendMode;\n    }\n}));\nvar ShardAccount_1 = __webpack_require__(/*! ./ShardAccount */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardAccount.js\");\nObject.defineProperty(exports, \"loadShardAccount\", ({\n    enumerable: true,\n    get: function() {\n        return ShardAccount_1.loadShardAccount;\n    }\n}));\nObject.defineProperty(exports, \"storeShardAccount\", ({\n    enumerable: true,\n    get: function() {\n        return ShardAccount_1.storeShardAccount;\n    }\n}));\nvar ShardAccounts_1 = __webpack_require__(/*! ./ShardAccounts */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardAccounts.js\");\nObject.defineProperty(exports, \"ShardAccountRefValue\", ({\n    enumerable: true,\n    get: function() {\n        return ShardAccounts_1.ShardAccountRefValue;\n    }\n}));\nObject.defineProperty(exports, \"loadShardAccounts\", ({\n    enumerable: true,\n    get: function() {\n        return ShardAccounts_1.loadShardAccounts;\n    }\n}));\nObject.defineProperty(exports, \"storeShardAccounts\", ({\n    enumerable: true,\n    get: function() {\n        return ShardAccounts_1.storeShardAccounts;\n    }\n}));\nvar ShardIdent_1 = __webpack_require__(/*! ./ShardIdent */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardIdent.js\");\nObject.defineProperty(exports, \"loadShardIdent\", ({\n    enumerable: true,\n    get: function() {\n        return ShardIdent_1.loadShardIdent;\n    }\n}));\nObject.defineProperty(exports, \"storeShardIdent\", ({\n    enumerable: true,\n    get: function() {\n        return ShardIdent_1.storeShardIdent;\n    }\n}));\nvar ShardStateUnsplit_1 = __webpack_require__(/*! ./ShardStateUnsplit */ \"(ssr)/./node_modules/@ton/core/dist/types/ShardStateUnsplit.js\");\nObject.defineProperty(exports, \"loadShardStateUnsplit\", ({\n    enumerable: true,\n    get: function() {\n        return ShardStateUnsplit_1.loadShardStateUnsplit;\n    }\n}));\nvar SimpleLibrary_1 = __webpack_require__(/*! ./SimpleLibrary */ \"(ssr)/./node_modules/@ton/core/dist/types/SimpleLibrary.js\");\nObject.defineProperty(exports, \"loadSimpleLibrary\", ({\n    enumerable: true,\n    get: function() {\n        return SimpleLibrary_1.loadSimpleLibrary;\n    }\n}));\nObject.defineProperty(exports, \"storeSimpleLibrary\", ({\n    enumerable: true,\n    get: function() {\n        return SimpleLibrary_1.storeSimpleLibrary;\n    }\n}));\nvar SplitMergeInfo_1 = __webpack_require__(/*! ./SplitMergeInfo */ \"(ssr)/./node_modules/@ton/core/dist/types/SplitMergeInfo.js\");\nObject.defineProperty(exports, \"loadSplitMergeInfo\", ({\n    enumerable: true,\n    get: function() {\n        return SplitMergeInfo_1.loadSplitMergeInfo;\n    }\n}));\nObject.defineProperty(exports, \"storeSplitMergeInfo\", ({\n    enumerable: true,\n    get: function() {\n        return SplitMergeInfo_1.storeSplitMergeInfo;\n    }\n}));\nvar StateInit_1 = __webpack_require__(/*! ./StateInit */ \"(ssr)/./node_modules/@ton/core/dist/types/StateInit.js\");\nObject.defineProperty(exports, \"loadStateInit\", ({\n    enumerable: true,\n    get: function() {\n        return StateInit_1.loadStateInit;\n    }\n}));\nObject.defineProperty(exports, \"storeStateInit\", ({\n    enumerable: true,\n    get: function() {\n        return StateInit_1.storeStateInit;\n    }\n}));\nvar StorageInto_1 = __webpack_require__(/*! ./StorageInto */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageInto.js\");\nObject.defineProperty(exports, \"loadStorageInfo\", ({\n    enumerable: true,\n    get: function() {\n        return StorageInto_1.loadStorageInfo;\n    }\n}));\nObject.defineProperty(exports, \"storeStorageInfo\", ({\n    enumerable: true,\n    get: function() {\n        return StorageInto_1.storeStorageInfo;\n    }\n}));\nvar StorageUsed_1 = __webpack_require__(/*! ./StorageUsed */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageUsed.js\");\nObject.defineProperty(exports, \"loadStorageUsed\", ({\n    enumerable: true,\n    get: function() {\n        return StorageUsed_1.loadStorageUsed;\n    }\n}));\nObject.defineProperty(exports, \"storeStorageUsed\", ({\n    enumerable: true,\n    get: function() {\n        return StorageUsed_1.storeStorageUsed;\n    }\n}));\nvar StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ \"(ssr)/./node_modules/@ton/core/dist/types/StorageUsedShort.js\");\nObject.defineProperty(exports, \"loadStorageUsedShort\", ({\n    enumerable: true,\n    get: function() {\n        return StorageUsedShort_1.loadStorageUsedShort;\n    }\n}));\nObject.defineProperty(exports, \"storeStorageUsedShort\", ({\n    enumerable: true,\n    get: function() {\n        return StorageUsedShort_1.storeStorageUsedShort;\n    }\n}));\nvar TickTock_1 = __webpack_require__(/*! ./TickTock */ \"(ssr)/./node_modules/@ton/core/dist/types/TickTock.js\");\nObject.defineProperty(exports, \"loadTickTock\", ({\n    enumerable: true,\n    get: function() {\n        return TickTock_1.loadTickTock;\n    }\n}));\nObject.defineProperty(exports, \"storeTickTock\", ({\n    enumerable: true,\n    get: function() {\n        return TickTock_1.storeTickTock;\n    }\n}));\nvar Transaction_1 = __webpack_require__(/*! ./Transaction */ \"(ssr)/./node_modules/@ton/core/dist/types/Transaction.js\");\nObject.defineProperty(exports, \"loadTransaction\", ({\n    enumerable: true,\n    get: function() {\n        return Transaction_1.loadTransaction;\n    }\n}));\nObject.defineProperty(exports, \"storeTransaction\", ({\n    enumerable: true,\n    get: function() {\n        return Transaction_1.storeTransaction;\n    }\n}));\nvar TransactionActionPhase_1 = __webpack_require__(/*! ./TransactionActionPhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionActionPhase.js\");\nObject.defineProperty(exports, \"loadTransactionActionPhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionActionPhase_1.loadTransactionActionPhase;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionActionPhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionActionPhase_1.storeTransactionActionPhase;\n    }\n}));\nvar TransactionBouncePhase_1 = __webpack_require__(/*! ./TransactionBouncePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionBouncePhase.js\");\nObject.defineProperty(exports, \"loadTransactionBouncePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionBouncePhase_1.loadTransactionBouncePhase;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionBouncePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionBouncePhase_1.storeTransactionBouncePhase;\n    }\n}));\nvar TransactionComputePhase_1 = __webpack_require__(/*! ./TransactionComputePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionComputePhase.js\");\nObject.defineProperty(exports, \"loadTransactionComputePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionComputePhase_1.loadTransactionComputePhase;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionComputePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionComputePhase_1.storeTransactionComputePhase;\n    }\n}));\nvar TransactionCreditPhase_1 = __webpack_require__(/*! ./TransactionCreditPhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionCreditPhase.js\");\nObject.defineProperty(exports, \"loadTransactionCreditPhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionCreditPhase_1.loadTransactionCreditPhase;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionCreditPhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionCreditPhase_1.storeTransactionCreditPhase;\n    }\n}));\nvar TransactionDescription_1 = __webpack_require__(/*! ./TransactionDescription */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionDescription.js\");\nObject.defineProperty(exports, \"loadTransactionDescription\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionDescription_1.loadTransactionDescription;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionDescription\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionDescription_1.storeTransactionDescription;\n    }\n}));\nvar TransactionStoragePhase_1 = __webpack_require__(/*! ./TransactionStoragePhase */ \"(ssr)/./node_modules/@ton/core/dist/types/TransactionStoragePhase.js\");\nObject.defineProperty(exports, \"loadTransactionStoragePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionStoragePhase_1.loadTransactionStoragePhase;\n    }\n}));\nObject.defineProperty(exports, \"storeTransactionsStoragePhase\", ({\n    enumerable: true,\n    get: function() {\n        return TransactionStoragePhase_1.storeTransactionsStoragePhase;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/_export.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/types/_helpers.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/_helpers.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.comment = exports.external = exports.internal = void 0;\nconst Address_1 = __webpack_require__(/*! ../address/Address */ \"(ssr)/./node_modules/@ton/core/dist/address/Address.js\");\nconst Cell_1 = __webpack_require__(/*! ../boc/Cell */ \"(ssr)/./node_modules/@ton/core/dist/boc/Cell.js\");\nconst Builder_1 = __webpack_require__(/*! ../boc/Builder */ \"(ssr)/./node_modules/@ton/core/dist/boc/Builder.js\");\nconst convert_1 = __webpack_require__(/*! ../utils/convert */ \"(ssr)/./node_modules/@ton/core/dist/utils/convert.js\");\nfunction internal(src) {\n    // Resolve bounce\n    let bounce = true;\n    if (src.bounce !== null && src.bounce !== undefined) {\n        bounce = src.bounce;\n    }\n    // Resolve address\n    let to;\n    if (typeof src.to === \"string\") {\n        to = Address_1.Address.parse(src.to);\n    } else if (Address_1.Address.isAddress(src.to)) {\n        to = src.to;\n    } else {\n        throw new Error(`Invalid address ${src.to}`);\n    }\n    // Resolve value\n    let value;\n    if (typeof src.value === \"string\") {\n        value = (0, convert_1.toNano)(src.value);\n    } else {\n        value = src.value;\n    }\n    // Resolve body\n    let body = Cell_1.Cell.EMPTY;\n    if (typeof src.body === \"string\") {\n        body = (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src.body).endCell();\n    } else if (src.body) {\n        body = src.body;\n    }\n    // Create message\n    return {\n        info: {\n            type: \"internal\",\n            dest: to,\n            value: {\n                coins: value\n            },\n            bounce,\n            ihrDisabled: true,\n            bounced: false,\n            ihrFee: 0n,\n            forwardFee: 0n,\n            createdAt: 0,\n            createdLt: 0n\n        },\n        init: src.init ?? undefined,\n        body: body\n    };\n}\nexports.internal = internal;\nfunction external(src) {\n    // Resolve address\n    let to;\n    if (typeof src.to === \"string\") {\n        to = Address_1.Address.parse(src.to);\n    } else if (Address_1.Address.isAddress(src.to)) {\n        to = src.to;\n    } else {\n        throw new Error(`Invalid address ${src.to}`);\n    }\n    return {\n        info: {\n            type: \"external-in\",\n            dest: to,\n            importFee: 0n\n        },\n        init: src.init ?? undefined,\n        body: src.body || Cell_1.Cell.EMPTY\n    };\n}\nexports.external = external;\nfunction comment(src) {\n    return (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src).endCell();\n}\nexports.comment = comment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdHlwZXMvX2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDN0QsTUFBTUssWUFBWUMsbUJBQU9BLENBQUMsa0ZBQW9CO0FBQzlDLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLG9FQUFhO0FBQ3BDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUMxQyxNQUFNRyxZQUFZSCxtQkFBT0EsQ0FBQyw4RUFBa0I7QUFDNUMsU0FBU0YsU0FBU00sR0FBRztJQUNqQixpQkFBaUI7SUFDakIsSUFBSUMsU0FBUztJQUNiLElBQUlELElBQUlDLE1BQU0sS0FBSyxRQUFRRCxJQUFJQyxNQUFNLEtBQUtDLFdBQVc7UUFDakRELFNBQVNELElBQUlDLE1BQU07SUFDdkI7SUFDQSxrQkFBa0I7SUFDbEIsSUFBSUU7SUFDSixJQUFJLE9BQU9ILElBQUlHLEVBQUUsS0FBSyxVQUFVO1FBQzVCQSxLQUFLUixVQUFVUyxPQUFPLENBQUNDLEtBQUssQ0FBQ0wsSUFBSUcsRUFBRTtJQUN2QyxPQUNLLElBQUlSLFVBQVVTLE9BQU8sQ0FBQ0UsU0FBUyxDQUFDTixJQUFJRyxFQUFFLEdBQUc7UUFDMUNBLEtBQUtILElBQUlHLEVBQUU7SUFDZixPQUNLO1FBQ0QsTUFBTSxJQUFJSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUVQLElBQUlHLEVBQUUsQ0FBQyxDQUFDO0lBQy9DO0lBQ0EsZ0JBQWdCO0lBQ2hCLElBQUlaO0lBQ0osSUFBSSxPQUFPUyxJQUFJVCxLQUFLLEtBQUssVUFBVTtRQUMvQkEsUUFBUSxDQUFDLEdBQUdRLFVBQVVTLE1BQU0sRUFBRVIsSUFBSVQsS0FBSztJQUMzQyxPQUNLO1FBQ0RBLFFBQVFTLElBQUlULEtBQUs7SUFDckI7SUFDQSxlQUFlO0lBQ2YsSUFBSWtCLE9BQU9aLE9BQU9hLElBQUksQ0FBQ0MsS0FBSztJQUM1QixJQUFJLE9BQU9YLElBQUlTLElBQUksS0FBSyxVQUFVO1FBQzlCQSxPQUFPLENBQUMsR0FBR1gsVUFBVWMsU0FBUyxJQUFJQyxTQUFTLENBQUMsR0FBRyxJQUFJQyxlQUFlLENBQUNkLElBQUlTLElBQUksRUFBRU0sT0FBTztJQUN4RixPQUNLLElBQUlmLElBQUlTLElBQUksRUFBRTtRQUNmQSxPQUFPVCxJQUFJUyxJQUFJO0lBQ25CO0lBQ0EsaUJBQWlCO0lBQ2pCLE9BQU87UUFDSE8sTUFBTTtZQUNGQyxNQUFNO1lBQ05DLE1BQU1mO1lBQ05aLE9BQU87Z0JBQUU0QixPQUFPNUI7WUFBTTtZQUN0QlU7WUFDQW1CLGFBQWE7WUFDYkMsU0FBUztZQUNUQyxRQUFRLEVBQUU7WUFDVkMsWUFBWSxFQUFFO1lBQ2RDLFdBQVc7WUFDWEMsV0FBVyxFQUFFO1FBQ2pCO1FBQ0FDLE1BQU0xQixJQUFJMEIsSUFBSSxJQUFJeEI7UUFDbEJPLE1BQU1BO0lBQ1Y7QUFDSjtBQUNBbkIsZ0JBQWdCLEdBQUdJO0FBQ25CLFNBQVNELFNBQVNPLEdBQUc7SUFDakIsa0JBQWtCO0lBQ2xCLElBQUlHO0lBQ0osSUFBSSxPQUFPSCxJQUFJRyxFQUFFLEtBQUssVUFBVTtRQUM1QkEsS0FBS1IsVUFBVVMsT0FBTyxDQUFDQyxLQUFLLENBQUNMLElBQUlHLEVBQUU7SUFDdkMsT0FDSyxJQUFJUixVQUFVUyxPQUFPLENBQUNFLFNBQVMsQ0FBQ04sSUFBSUcsRUFBRSxHQUFHO1FBQzFDQSxLQUFLSCxJQUFJRyxFQUFFO0lBQ2YsT0FDSztRQUNELE1BQU0sSUFBSUksTUFBTSxDQUFDLGdCQUFnQixFQUFFUCxJQUFJRyxFQUFFLENBQUMsQ0FBQztJQUMvQztJQUNBLE9BQU87UUFDSGEsTUFBTTtZQUNGQyxNQUFNO1lBQ05DLE1BQU1mO1lBQ053QixXQUFXLEVBQUU7UUFDakI7UUFDQUQsTUFBTTFCLElBQUkwQixJQUFJLElBQUl4QjtRQUNsQk8sTUFBTVQsSUFBSVMsSUFBSSxJQUFJWixPQUFPYSxJQUFJLENBQUNDLEtBQUs7SUFDdkM7QUFDSjtBQUNBckIsZ0JBQWdCLEdBQUdHO0FBQ25CLFNBQVNELFFBQVFRLEdBQUc7SUFDaEIsT0FBTyxDQUFDLEdBQUdGLFVBQVVjLFNBQVMsSUFDekJDLFNBQVMsQ0FBQyxHQUFHLElBQ2JDLGVBQWUsQ0FBQ2QsS0FDaEJlLE9BQU87QUFDaEI7QUFDQXpCLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3R5cGVzL19oZWxwZXJzLmpzPzkyOGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbW1lbnQgPSBleHBvcnRzLmV4dGVybmFsID0gZXhwb3J0cy5pbnRlcm5hbCA9IHZvaWQgMDtcbmNvbnN0IEFkZHJlc3NfMSA9IHJlcXVpcmUoXCIuLi9hZGRyZXNzL0FkZHJlc3NcIik7XG5jb25zdCBDZWxsXzEgPSByZXF1aXJlKFwiLi4vYm9jL0NlbGxcIik7XG5jb25zdCBCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi4vYm9jL0J1aWxkZXJcIik7XG5jb25zdCBjb252ZXJ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY29udmVydFwiKTtcbmZ1bmN0aW9uIGludGVybmFsKHNyYykge1xuICAgIC8vIFJlc29sdmUgYm91bmNlXG4gICAgbGV0IGJvdW5jZSA9IHRydWU7XG4gICAgaWYgKHNyYy5ib3VuY2UgIT09IG51bGwgJiYgc3JjLmJvdW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGJvdW5jZSA9IHNyYy5ib3VuY2U7XG4gICAgfVxuICAgIC8vIFJlc29sdmUgYWRkcmVzc1xuICAgIGxldCB0bztcbiAgICBpZiAodHlwZW9mIHNyYy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG8gPSBBZGRyZXNzXzEuQWRkcmVzcy5wYXJzZShzcmMudG8pO1xuICAgIH1cbiAgICBlbHNlIGlmIChBZGRyZXNzXzEuQWRkcmVzcy5pc0FkZHJlc3Moc3JjLnRvKSkge1xuICAgICAgICB0byA9IHNyYy50bztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhZGRyZXNzICR7c3JjLnRvfWApO1xuICAgIH1cbiAgICAvLyBSZXNvbHZlIHZhbHVlXG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh0eXBlb2Ygc3JjLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZSA9ICgwLCBjb252ZXJ0XzEudG9OYW5vKShzcmMudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzcmMudmFsdWU7XG4gICAgfVxuICAgIC8vIFJlc29sdmUgYm9keVxuICAgIGxldCBib2R5ID0gQ2VsbF8xLkNlbGwuRU1QVFk7XG4gICAgaWYgKHR5cGVvZiBzcmMuYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9ICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpLnN0b3JlVWludCgwLCAzMikuc3RvcmVTdHJpbmdUYWlsKHNyYy5ib2R5KS5lbmRDZWxsKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNyYy5ib2R5KSB7XG4gICAgICAgIGJvZHkgPSBzcmMuYm9keTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIG1lc3NhZ2VcbiAgICByZXR1cm4ge1xuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgICB0eXBlOiAnaW50ZXJuYWwnLFxuICAgICAgICAgICAgZGVzdDogdG8sXG4gICAgICAgICAgICB2YWx1ZTogeyBjb2luczogdmFsdWUgfSxcbiAgICAgICAgICAgIGJvdW5jZSxcbiAgICAgICAgICAgIGlockRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgYm91bmNlZDogZmFsc2UsXG4gICAgICAgICAgICBpaHJGZWU6IDBuLFxuICAgICAgICAgICAgZm9yd2FyZEZlZTogMG4sXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IDAsXG4gICAgICAgICAgICBjcmVhdGVkTHQ6IDBuXG4gICAgICAgIH0sXG4gICAgICAgIGluaXQ6IHNyYy5pbml0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgYm9keTogYm9keVxuICAgIH07XG59XG5leHBvcnRzLmludGVybmFsID0gaW50ZXJuYWw7XG5mdW5jdGlvbiBleHRlcm5hbChzcmMpIHtcbiAgICAvLyBSZXNvbHZlIGFkZHJlc3NcbiAgICBsZXQgdG87XG4gICAgaWYgKHR5cGVvZiBzcmMudG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRvID0gQWRkcmVzc18xLkFkZHJlc3MucGFyc2Uoc3JjLnRvKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQWRkcmVzc18xLkFkZHJlc3MuaXNBZGRyZXNzKHNyYy50bykpIHtcbiAgICAgICAgdG8gPSBzcmMudG87XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYWRkcmVzcyAke3NyYy50b31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgdHlwZTogJ2V4dGVybmFsLWluJyxcbiAgICAgICAgICAgIGRlc3Q6IHRvLFxuICAgICAgICAgICAgaW1wb3J0RmVlOiAwblxuICAgICAgICB9LFxuICAgICAgICBpbml0OiBzcmMuaW5pdCA/PyB1bmRlZmluZWQsXG4gICAgICAgIGJvZHk6IHNyYy5ib2R5IHx8IENlbGxfMS5DZWxsLkVNUFRZXG4gICAgfTtcbn1cbmV4cG9ydHMuZXh0ZXJuYWwgPSBleHRlcm5hbDtcbmZ1bmN0aW9uIGNvbW1lbnQoc3JjKSB7XG4gICAgcmV0dXJuICgwLCBCdWlsZGVyXzEuYmVnaW5DZWxsKSgpXG4gICAgICAgIC5zdG9yZVVpbnQoMCwgMzIpXG4gICAgICAgIC5zdG9yZVN0cmluZ1RhaWwoc3JjKVxuICAgICAgICAuZW5kQ2VsbCgpO1xufVxuZXhwb3J0cy5jb21tZW50ID0gY29tbWVudDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbW1lbnQiLCJleHRlcm5hbCIsImludGVybmFsIiwiQWRkcmVzc18xIiwicmVxdWlyZSIsIkNlbGxfMSIsIkJ1aWxkZXJfMSIsImNvbnZlcnRfMSIsInNyYyIsImJvdW5jZSIsInVuZGVmaW5lZCIsInRvIiwiQWRkcmVzcyIsInBhcnNlIiwiaXNBZGRyZXNzIiwiRXJyb3IiLCJ0b05hbm8iLCJib2R5IiwiQ2VsbCIsIkVNUFRZIiwiYmVnaW5DZWxsIiwic3RvcmVVaW50Iiwic3RvcmVTdHJpbmdUYWlsIiwiZW5kQ2VsbCIsImluZm8iLCJ0eXBlIiwiZGVzdCIsImNvaW5zIiwiaWhyRGlzYWJsZWQiLCJib3VuY2VkIiwiaWhyRmVlIiwiZm9yd2FyZEZlZSIsImNyZWF0ZWRBdCIsImNyZWF0ZWRMdCIsImluaXQiLCJpbXBvcnRGZWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/types/_helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/base32.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/base32.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.base32Decode = exports.base32Encode = void 0;\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz234567\";\nfunction base32Encode(buffer) {\n    const length = buffer.byteLength;\n    let bits = 0;\n    let value = 0;\n    let output = \"\";\n    for(let i = 0; i < length; i++){\n        value = value << 8 | buffer[i];\n        bits += 8;\n        while(bits >= 5){\n            output += alphabet[value >>> bits - 5 & 31];\n            bits -= 5;\n        }\n    }\n    if (bits > 0) {\n        output += alphabet[value << 5 - bits & 31];\n    }\n    return output;\n}\nexports.base32Encode = base32Encode;\nfunction readChar(alphabet, char) {\n    const idx = alphabet.indexOf(char);\n    if (idx === -1) {\n        throw new Error(\"Invalid character found: \" + char);\n    }\n    return idx;\n}\nfunction base32Decode(input) {\n    let cleanedInput;\n    cleanedInput = input.toLowerCase();\n    const { length } = cleanedInput;\n    let bits = 0;\n    let value = 0;\n    let index = 0;\n    const output = Buffer.alloc(length * 5 / 8 | 0);\n    for(let i = 0; i < length; i++){\n        value = value << 5 | readChar(alphabet, cleanedInput[i]);\n        bits += 5;\n        if (bits >= 8) {\n            output[index++] = value >>> bits - 8 & 255;\n            bits -= 8;\n        }\n    }\n    return output;\n}\nexports.base32Decode = base32Decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvYmFzZTMyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUNuRCxNQUFNSSxXQUFXO0FBQ2pCLFNBQVNELGFBQWFFLE1BQU07SUFDeEIsTUFBTUMsU0FBU0QsT0FBT0UsVUFBVTtJQUNoQyxJQUFJQyxPQUFPO0lBQ1gsSUFBSVAsUUFBUTtJQUNaLElBQUlRLFNBQVM7SUFDYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosUUFBUUksSUFBSztRQUM3QlQsUUFBUSxTQUFVLElBQUtJLE1BQU0sQ0FBQ0ssRUFBRTtRQUNoQ0YsUUFBUTtRQUNSLE1BQU9BLFFBQVEsRUFBRztZQUNkQyxVQUFVTCxRQUFRLENBQUMsVUFBWUksT0FBTyxJQUFNLEdBQUc7WUFDL0NBLFFBQVE7UUFDWjtJQUNKO0lBQ0EsSUFBSUEsT0FBTyxHQUFHO1FBQ1ZDLFVBQVVMLFFBQVEsQ0FBQyxTQUFXLElBQUlJLE9BQVMsR0FBRztJQUNsRDtJQUNBLE9BQU9DO0FBQ1g7QUFDQVQsb0JBQW9CLEdBQUdHO0FBQ3ZCLFNBQVNRLFNBQVNQLFFBQVEsRUFBRVEsSUFBSTtJQUM1QixNQUFNQyxNQUFNVCxTQUFTVSxPQUFPLENBQUNGO0lBQzdCLElBQUlDLFFBQVEsQ0FBQyxHQUFHO1FBQ1osTUFBTSxJQUFJRSxNQUFNLDhCQUE4Qkg7SUFDbEQ7SUFDQSxPQUFPQztBQUNYO0FBQ0EsU0FBU1gsYUFBYWMsS0FBSztJQUN2QixJQUFJQztJQUNKQSxlQUFlRCxNQUFNRSxXQUFXO0lBQ2hDLE1BQU0sRUFBRVosTUFBTSxFQUFFLEdBQUdXO0lBQ25CLElBQUlULE9BQU87SUFDWCxJQUFJUCxRQUFRO0lBQ1osSUFBSWtCLFFBQVE7SUFDWixNQUFNVixTQUFTVyxPQUFPQyxLQUFLLENBQUMsU0FBVyxJQUFLLElBQUs7SUFDakQsSUFBSyxJQUFJWCxJQUFJLEdBQUdBLElBQUlKLFFBQVFJLElBQUs7UUFDN0JULFFBQVEsU0FBVSxJQUFLVSxTQUFTUCxVQUFVYSxZQUFZLENBQUNQLEVBQUU7UUFDekRGLFFBQVE7UUFDUixJQUFJQSxRQUFRLEdBQUc7WUFDWEMsTUFBTSxDQUFDVSxRQUFRLEdBQUcsVUFBWVgsT0FBTyxJQUFNO1lBQzNDQSxRQUFRO1FBQ1o7SUFDSjtJQUNBLE9BQU9DO0FBQ1g7QUFDQVQsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC91dGlscy9iYXNlMzIuanM/NWE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmFzZTMyRGVjb2RlID0gZXhwb3J0cy5iYXNlMzJFbmNvZGUgPSB2b2lkIDA7XG5jb25zdCBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2Nyc7XG5mdW5jdGlvbiBiYXNlMzJFbmNvZGUoYnVmZmVyKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgbGV0IGJpdHMgPSAwO1xuICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgbGV0IG91dHB1dCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgPDwgOCkgfCBidWZmZXJbaV07XG4gICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgd2hpbGUgKGJpdHMgPj0gNSkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGFscGhhYmV0Wyh2YWx1ZSA+Pj4gKGJpdHMgLSA1KSkgJiAzMV07XG4gICAgICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgIG91dHB1dCArPSBhbHBoYWJldFsodmFsdWUgPDwgKDUgLSBiaXRzKSkgJiAzMV07XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnRzLmJhc2UzMkVuY29kZSA9IGJhc2UzMkVuY29kZTtcbmZ1bmN0aW9uIHJlYWRDaGFyKGFscGhhYmV0LCBjaGFyKSB7XG4gICAgY29uc3QgaWR4ID0gYWxwaGFiZXQuaW5kZXhPZihjaGFyKTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGZvdW5kOiAnICsgY2hhcik7XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG59XG5mdW5jdGlvbiBiYXNlMzJEZWNvZGUoaW5wdXQpIHtcbiAgICBsZXQgY2xlYW5lZElucHV0O1xuICAgIGNsZWFuZWRJbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IGNsZWFuZWRJbnB1dDtcbiAgICBsZXQgYml0cyA9IDA7XG4gICAgbGV0IHZhbHVlID0gMDtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IG91dHB1dCA9IEJ1ZmZlci5hbGxvYygoKGxlbmd0aCAqIDUpIC8gOCkgfCAwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIDw8IDUpIHwgcmVhZENoYXIoYWxwaGFiZXQsIGNsZWFuZWRJbnB1dFtpXSk7XG4gICAgICAgIGJpdHMgKz0gNTtcbiAgICAgICAgaWYgKGJpdHMgPj0gOCkge1xuICAgICAgICAgICAgb3V0cHV0W2luZGV4KytdID0gKHZhbHVlID4+PiAoYml0cyAtIDgpKSAmIDI1NTtcbiAgICAgICAgICAgIGJpdHMgLT0gODtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0cy5iYXNlMzJEZWNvZGUgPSBiYXNlMzJEZWNvZGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJiYXNlMzJEZWNvZGUiLCJiYXNlMzJFbmNvZGUiLCJhbHBoYWJldCIsImJ1ZmZlciIsImxlbmd0aCIsImJ5dGVMZW5ndGgiLCJiaXRzIiwib3V0cHV0IiwiaSIsInJlYWRDaGFyIiwiY2hhciIsImlkeCIsImluZGV4T2YiLCJFcnJvciIsImlucHV0IiwiY2xlYW5lZElucHV0IiwidG9Mb3dlckNhc2UiLCJpbmRleCIsIkJ1ZmZlciIsImFsbG9jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/bitsForNumber.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/bitsForNumber.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bitsForNumber = void 0;\nfunction bitsForNumber(src, mode) {\n    let v = BigInt(src);\n    // Handle negative values\n    if (mode === \"int\") {\n        // Corner case for zero or -1 value\n        if (v === 0n || v === -1n) {\n            return 1;\n        }\n        let v2 = v > 0 ? v : -v;\n        return v2.toString(2).length + 1 /* Sign bit */ ;\n    } else if (mode === \"uint\") {\n        if (v < 0) {\n            throw Error(`value is negative. Got ${src}`);\n        }\n        return v.toString(2).length;\n    } else {\n        throw Error(`invalid mode. Got ${mode}`);\n    }\n}\nexports.bitsForNumber = bitsForNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvYml0c0Zvck51bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixTQUFTRSxjQUFjQyxHQUFHLEVBQUVDLElBQUk7SUFDNUIsSUFBSUMsSUFBSUMsT0FBT0g7SUFDZix5QkFBeUI7SUFDekIsSUFBSUMsU0FBUyxPQUFPO1FBQ2hCLG1DQUFtQztRQUNuQyxJQUFJQyxNQUFNLEVBQUUsSUFBSUEsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUN2QixPQUFPO1FBQ1g7UUFDQSxJQUFJRSxLQUFLRixJQUFJLElBQUlBLElBQUksQ0FBQ0E7UUFDdEIsT0FBUUUsR0FBR0MsUUFBUSxDQUFDLEdBQUdDLE1BQU0sR0FBRyxFQUFFLFlBQVk7SUFDbEQsT0FDSyxJQUFJTCxTQUFTLFFBQVE7UUFDdEIsSUFBSUMsSUFBSSxHQUFHO1lBQ1AsTUFBTUssTUFBTSxDQUFDLHVCQUF1QixFQUFFUCxJQUFJLENBQUM7UUFDL0M7UUFDQSxPQUFRRSxFQUFFRyxRQUFRLENBQUMsR0FBR0MsTUFBTTtJQUNoQyxPQUNLO1FBQ0QsTUFBTUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFTixLQUFLLENBQUM7SUFDM0M7QUFDSjtBQUNBSixxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3V0aWxzL2JpdHNGb3JOdW1iZXIuanM/MjQ1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYml0c0Zvck51bWJlciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGJpdHNGb3JOdW1iZXIoc3JjLCBtb2RlKSB7XG4gICAgbGV0IHYgPSBCaWdJbnQoc3JjKTtcbiAgICAvLyBIYW5kbGUgbmVnYXRpdmUgdmFsdWVzXG4gICAgaWYgKG1vZGUgPT09ICdpbnQnKSB7XG4gICAgICAgIC8vIENvcm5lciBjYXNlIGZvciB6ZXJvIG9yIC0xIHZhbHVlXG4gICAgICAgIGlmICh2ID09PSAwbiB8fCB2ID09PSAtMW4pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2MiA9IHYgPiAwID8gdiA6IC12O1xuICAgICAgICByZXR1cm4gKHYyLnRvU3RyaW5nKDIpLmxlbmd0aCArIDEgLyogU2lnbiBiaXQgKi8pO1xuICAgIH1cbiAgICBlbHNlIGlmIChtb2RlID09PSAndWludCcpIHtcbiAgICAgICAgaWYgKHYgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgdmFsdWUgaXMgbmVnYXRpdmUuIEdvdCAke3NyY31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHYudG9TdHJpbmcoMikubGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKGBpbnZhbGlkIG1vZGUuIEdvdCAke21vZGV9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5iaXRzRm9yTnVtYmVyID0gYml0c0Zvck51bWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJpdHNGb3JOdW1iZXIiLCJzcmMiLCJtb2RlIiwidiIsIkJpZ0ludCIsInYyIiwidG9TdHJpbmciLCJsZW5ndGgiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/bitsForNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/convert.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/convert.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromNano = exports.toNano = void 0;\nfunction toNano(src) {\n    if (typeof src === \"bigint\") {\n        return src * 1000000000n;\n    } else {\n        if (typeof src === \"number\") {\n            if (!Number.isFinite(src)) {\n                throw Error(\"Invalid number\");\n            }\n            if (Math.log10(src) <= 6) {\n                src = src.toLocaleString(\"en\", {\n                    minimumFractionDigits: 9,\n                    useGrouping: false\n                });\n            } else if (src - Math.trunc(src) === 0) {\n                src = src.toLocaleString(\"en\", {\n                    maximumFractionDigits: 0,\n                    useGrouping: false\n                });\n            } else {\n                throw Error(\"Not enough precision for a number value. Use string value instead\");\n            }\n        }\n        // Check sign\n        let neg = false;\n        while(src.startsWith(\"-\")){\n            neg = !neg;\n            src = src.slice(1);\n        }\n        // Split string\n        if (src === \".\") {\n            throw Error(\"Invalid number\");\n        }\n        let parts = src.split(\".\");\n        if (parts.length > 2) {\n            throw Error(\"Invalid number\");\n        }\n        // Prepare parts\n        let whole = parts[0];\n        let frac = parts[1];\n        if (!whole) {\n            whole = \"0\";\n        }\n        if (!frac) {\n            frac = \"0\";\n        }\n        if (frac.length > 9) {\n            throw Error(\"Invalid number\");\n        }\n        while(frac.length < 9){\n            frac += \"0\";\n        }\n        // Convert\n        let r = BigInt(whole) * 1000000000n + BigInt(frac);\n        if (neg) {\n            r = -r;\n        }\n        return r;\n    }\n}\nexports.toNano = toNano;\nfunction fromNano(src) {\n    let v = BigInt(src);\n    let neg = false;\n    if (v < 0) {\n        neg = true;\n        v = -v;\n    }\n    // Convert fraction\n    let frac = v % 1000000000n;\n    let facStr = frac.toString();\n    while(facStr.length < 9){\n        facStr = \"0\" + facStr;\n    }\n    facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    // Convert whole\n    let whole = v / 1000000000n;\n    let wholeStr = whole.toString();\n    // Value\n    let value = `${wholeStr}${facStr === \"0\" ? \"\" : `.${facStr}`}`;\n    if (neg) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexports.fromNano = fromNano;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvY29udmVydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ3pDLFNBQVNHLE9BQU9DLEdBQUc7SUFDZixJQUFJLE9BQU9BLFFBQVEsVUFBVTtRQUN6QixPQUFPQSxNQUFNLFdBQVc7SUFDNUIsT0FDSztRQUNELElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLElBQUksQ0FBQ0MsT0FBT0MsUUFBUSxDQUFDRixNQUFNO2dCQUN2QixNQUFNRyxNQUFNO1lBQ2hCO1lBQ0EsSUFBSUMsS0FBS0MsS0FBSyxDQUFDTCxRQUFRLEdBQUc7Z0JBQ3RCQSxNQUFNQSxJQUFJTSxjQUFjLENBQUMsTUFBTTtvQkFBRUMsdUJBQXVCO29CQUFHQyxhQUFhO2dCQUFNO1lBQ2xGLE9BQ0ssSUFBSVIsTUFBTUksS0FBS0ssS0FBSyxDQUFDVCxTQUFTLEdBQUc7Z0JBQ2xDQSxNQUFNQSxJQUFJTSxjQUFjLENBQUMsTUFBTTtvQkFBRUksdUJBQXVCO29CQUFHRixhQUFhO2dCQUFNO1lBQ2xGLE9BQ0s7Z0JBQ0QsTUFBTUwsTUFBTTtZQUNoQjtRQUNKO1FBQ0EsYUFBYTtRQUNiLElBQUlRLE1BQU07UUFDVixNQUFPWCxJQUFJWSxVQUFVLENBQUMsS0FBTTtZQUN4QkQsTUFBTSxDQUFDQTtZQUNQWCxNQUFNQSxJQUFJYSxLQUFLLENBQUM7UUFDcEI7UUFDQSxlQUFlO1FBQ2YsSUFBSWIsUUFBUSxLQUFLO1lBQ2IsTUFBTUcsTUFBTTtRQUNoQjtRQUNBLElBQUlXLFFBQVFkLElBQUllLEtBQUssQ0FBQztRQUN0QixJQUFJRCxNQUFNRSxNQUFNLEdBQUcsR0FBRztZQUNsQixNQUFNYixNQUFNO1FBQ2hCO1FBQ0EsZ0JBQWdCO1FBQ2hCLElBQUljLFFBQVFILEtBQUssQ0FBQyxFQUFFO1FBQ3BCLElBQUlJLE9BQU9KLEtBQUssQ0FBQyxFQUFFO1FBQ25CLElBQUksQ0FBQ0csT0FBTztZQUNSQSxRQUFRO1FBQ1o7UUFDQSxJQUFJLENBQUNDLE1BQU07WUFDUEEsT0FBTztRQUNYO1FBQ0EsSUFBSUEsS0FBS0YsTUFBTSxHQUFHLEdBQUc7WUFDakIsTUFBTWIsTUFBTTtRQUNoQjtRQUNBLE1BQU9lLEtBQUtGLE1BQU0sR0FBRyxFQUFHO1lBQ3BCRSxRQUFRO1FBQ1o7UUFDQSxVQUFVO1FBQ1YsSUFBSUMsSUFBSUMsT0FBT0gsU0FBUyxXQUFXLEdBQUdHLE9BQU9GO1FBQzdDLElBQUlQLEtBQUs7WUFDTFEsSUFBSSxDQUFDQTtRQUNUO1FBQ0EsT0FBT0E7SUFDWDtBQUNKO0FBQ0F2QixjQUFjLEdBQUdHO0FBQ2pCLFNBQVNELFNBQVNFLEdBQUc7SUFDakIsSUFBSXFCLElBQUlELE9BQU9wQjtJQUNmLElBQUlXLE1BQU07SUFDVixJQUFJVSxJQUFJLEdBQUc7UUFDUFYsTUFBTTtRQUNOVSxJQUFJLENBQUNBO0lBQ1Q7SUFDQSxtQkFBbUI7SUFDbkIsSUFBSUgsT0FBT0csSUFBSSxXQUFXO0lBQzFCLElBQUlDLFNBQVNKLEtBQUtLLFFBQVE7SUFDMUIsTUFBT0QsT0FBT04sTUFBTSxHQUFHLEVBQUc7UUFDdEJNLFNBQVMsTUFBTUE7SUFDbkI7SUFDQUEsU0FBU0EsT0FBT0UsS0FBSyxDQUFDLHVCQUF1QixDQUFDLEVBQUU7SUFDaEQsZ0JBQWdCO0lBQ2hCLElBQUlQLFFBQVFJLElBQUksV0FBVztJQUMzQixJQUFJSSxXQUFXUixNQUFNTSxRQUFRO0lBQzdCLFFBQVE7SUFDUixJQUFJMUIsUUFBUSxDQUFDLEVBQUU0QixTQUFTLEVBQUVILFdBQVcsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFQSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELElBQUlYLEtBQUs7UUFDTGQsUUFBUSxNQUFNQTtJQUNsQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQUQsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC91dGlscy9jb252ZXJ0LmpzPzk5N2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21OYW5vID0gZXhwb3J0cy50b05hbm8gPSB2b2lkIDA7XG5mdW5jdGlvbiB0b05hbm8oc3JjKSB7XG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHJldHVybiBzcmMgKiAxMDAwMDAwMDAwbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoc3JjKSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIG51bWJlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGgubG9nMTAoc3JjKSA8PSA2KSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnRvTG9jYWxlU3RyaW5nKCdlbicsIHsgbWluaW11bUZyYWN0aW9uRGlnaXRzOiA5LCB1c2VHcm91cGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzcmMgLSBNYXRoLnRydW5jKHNyYykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMudG9Mb2NhbGVTdHJpbmcoJ2VuJywgeyBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDAsIHVzZUdyb3VwaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdOb3QgZW5vdWdoIHByZWNpc2lvbiBmb3IgYSBudW1iZXIgdmFsdWUuIFVzZSBzdHJpbmcgdmFsdWUgaW5zdGVhZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIHNpZ25cbiAgICAgICAgbGV0IG5lZyA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAoc3JjLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgICAgICAgICAgbmVnID0gIW5lZztcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTcGxpdCBzdHJpbmdcbiAgICAgICAgaWYgKHNyYyA9PT0gJy4nKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFydHMgPSBzcmMuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXBhcmUgcGFydHNcbiAgICAgICAgbGV0IHdob2xlID0gcGFydHNbMF07XG4gICAgICAgIGxldCBmcmFjID0gcGFydHNbMV07XG4gICAgICAgIGlmICghd2hvbGUpIHtcbiAgICAgICAgICAgIHdob2xlID0gJzAnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnJhYykge1xuICAgICAgICAgICAgZnJhYyA9ICcwJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJhYy5sZW5ndGggPiA5KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZnJhYy5sZW5ndGggPCA5KSB7XG4gICAgICAgICAgICBmcmFjICs9ICcwJztcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0XG4gICAgICAgIGxldCByID0gQmlnSW50KHdob2xlKSAqIDEwMDAwMDAwMDBuICsgQmlnSW50KGZyYWMpO1xuICAgICAgICBpZiAobmVnKSB7XG4gICAgICAgICAgICByID0gLXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxufVxuZXhwb3J0cy50b05hbm8gPSB0b05hbm87XG5mdW5jdGlvbiBmcm9tTmFubyhzcmMpIHtcbiAgICBsZXQgdiA9IEJpZ0ludChzcmMpO1xuICAgIGxldCBuZWcgPSBmYWxzZTtcbiAgICBpZiAodiA8IDApIHtcbiAgICAgICAgbmVnID0gdHJ1ZTtcbiAgICAgICAgdiA9IC12O1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGZyYWN0aW9uXG4gICAgbGV0IGZyYWMgPSB2ICUgMTAwMDAwMDAwMG47XG4gICAgbGV0IGZhY1N0ciA9IGZyYWMudG9TdHJpbmcoKTtcbiAgICB3aGlsZSAoZmFjU3RyLmxlbmd0aCA8IDkpIHtcbiAgICAgICAgZmFjU3RyID0gJzAnICsgZmFjU3RyO1xuICAgIH1cbiAgICBmYWNTdHIgPSBmYWNTdHIubWF0Y2goL14oWzAtOV0qWzEtOV18MCkoMCopLylbMV07XG4gICAgLy8gQ29udmVydCB3aG9sZVxuICAgIGxldCB3aG9sZSA9IHYgLyAxMDAwMDAwMDAwbjtcbiAgICBsZXQgd2hvbGVTdHIgPSB3aG9sZS50b1N0cmluZygpO1xuICAgIC8vIFZhbHVlXG4gICAgbGV0IHZhbHVlID0gYCR7d2hvbGVTdHJ9JHtmYWNTdHIgPT09ICcwJyA/ICcnIDogYC4ke2ZhY1N0cn1gfWA7XG4gICAgaWYgKG5lZykge1xuICAgICAgICB2YWx1ZSA9ICctJyArIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnRzLmZyb21OYW5vID0gZnJvbU5hbm87XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tTmFubyIsInRvTmFubyIsInNyYyIsIk51bWJlciIsImlzRmluaXRlIiwiRXJyb3IiLCJNYXRoIiwibG9nMTAiLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsInVzZUdyb3VwaW5nIiwidHJ1bmMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJuZWciLCJzdGFydHNXaXRoIiwic2xpY2UiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwid2hvbGUiLCJmcmFjIiwiciIsIkJpZ0ludCIsInYiLCJmYWNTdHIiLCJ0b1N0cmluZyIsIm1hdGNoIiwid2hvbGVTdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/crc16.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/crc16.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.crc16 = void 0;\nfunction crc16(data) {\n    const poly = 0x1021;\n    let reg = 0;\n    const message = Buffer.alloc(data.length + 2);\n    message.set(data);\n    for (let byte of message){\n        let mask = 0x80;\n        while(mask > 0){\n            reg <<= 1;\n            if (byte & mask) {\n                reg += 1;\n            }\n            mask >>= 1;\n            if (reg > 0xffff) {\n                reg &= 0xffff;\n                reg ^= poly;\n            }\n        }\n    }\n    return Buffer.from([\n        Math.floor(reg / 256),\n        reg % 256\n    ]);\n}\nexports.crc16 = crc16;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvY3JjMTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLFNBQVNFLE1BQU1DLElBQUk7SUFDZixNQUFNQyxPQUFPO0lBQ2IsSUFBSUMsTUFBTTtJQUNWLE1BQU1DLFVBQVVDLE9BQU9DLEtBQUssQ0FBQ0wsS0FBS00sTUFBTSxHQUFHO0lBQzNDSCxRQUFRSSxHQUFHLENBQUNQO0lBQ1osS0FBSyxJQUFJUSxRQUFRTCxRQUFTO1FBQ3RCLElBQUlNLE9BQU87UUFDWCxNQUFPQSxPQUFPLEVBQUc7WUFDYlAsUUFBUTtZQUNSLElBQUlNLE9BQU9DLE1BQU07Z0JBQ2JQLE9BQU87WUFDWDtZQUNBTyxTQUFTO1lBQ1QsSUFBSVAsTUFBTSxRQUFRO2dCQUNkQSxPQUFPO2dCQUNQQSxPQUFPRDtZQUNYO1FBQ0o7SUFDSjtJQUNBLE9BQU9HLE9BQU9NLElBQUksQ0FBQztRQUFDQyxLQUFLQyxLQUFLLENBQUNWLE1BQU07UUFBTUEsTUFBTTtLQUFJO0FBQ3pEO0FBQ0FMLGFBQWEsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3V0aWxzL2NyYzE2LmpzPzgyYjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyYzE2ID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JjMTYoZGF0YSkge1xuICAgIGNvbnN0IHBvbHkgPSAweDEwMjE7XG4gICAgbGV0IHJlZyA9IDA7XG4gICAgY29uc3QgbWVzc2FnZSA9IEJ1ZmZlci5hbGxvYyhkYXRhLmxlbmd0aCArIDIpO1xuICAgIG1lc3NhZ2Uuc2V0KGRhdGEpO1xuICAgIGZvciAobGV0IGJ5dGUgb2YgbWVzc2FnZSkge1xuICAgICAgICBsZXQgbWFzayA9IDB4ODA7XG4gICAgICAgIHdoaWxlIChtYXNrID4gMCkge1xuICAgICAgICAgICAgcmVnIDw8PSAxO1xuICAgICAgICAgICAgaWYgKGJ5dGUgJiBtYXNrKSB7XG4gICAgICAgICAgICAgICAgcmVnICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNrID4+PSAxO1xuICAgICAgICAgICAgaWYgKHJlZyA+IDB4ZmZmZikge1xuICAgICAgICAgICAgICAgIHJlZyAmPSAweGZmZmY7XG4gICAgICAgICAgICAgICAgcmVnIF49IHBvbHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFtNYXRoLmZsb29yKHJlZyAvIDI1NiksIHJlZyAlIDI1Nl0pO1xufVxuZXhwb3J0cy5jcmMxNiA9IGNyYzE2O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JjMTYiLCJkYXRhIiwicG9seSIsInJlZyIsIm1lc3NhZ2UiLCJCdWZmZXIiLCJhbGxvYyIsImxlbmd0aCIsInNldCIsImJ5dGUiLCJtYXNrIiwiZnJvbSIsIk1hdGgiLCJmbG9vciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/crc16.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/crc32c.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/crc32c.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.crc32c = void 0;\nconst POLY = 0x82f63b78;\nfunction crc32c(source) {\n    let crc = 0 ^ 0xffffffff;\n    for(let n = 0; n < source.length; n++){\n        crc ^= source[n];\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n        crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    }\n    crc = crc ^ 0xffffffff;\n    // Convert endianness\n    let res = Buffer.alloc(4);\n    res.writeInt32LE(crc);\n    return res;\n}\nexports.crc32c = crc32c;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvY3JjMzJjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixNQUFNRyxPQUFPO0FBQ2IsU0FBU0QsT0FBT0UsTUFBTTtJQUNsQixJQUFJQyxNQUFNLElBQUk7SUFDZCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsT0FBT0csTUFBTSxFQUFFRCxJQUFLO1FBQ3BDRCxPQUFPRCxNQUFNLENBQUNFLEVBQUU7UUFDaEJELE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7UUFDN0NBLE1BQU1BLE1BQU0sSUFBSSxRQUFTLElBQUtGLE9BQU9FLFFBQVE7SUFDakQ7SUFDQUEsTUFBTUEsTUFBTTtJQUNaLHFCQUFxQjtJQUNyQixJQUFJRyxNQUFNQyxPQUFPQyxLQUFLLENBQUM7SUFDdkJGLElBQUlHLFlBQVksQ0FBQ047SUFDakIsT0FBT0c7QUFDWDtBQUNBUixjQUFjLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NvcmUvZGlzdC91dGlscy9jcmMzMmMuanM/MjAxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JjMzJjID0gdm9pZCAwO1xuY29uc3QgUE9MWSA9IDB4ODJmNjNiNzg7XG5mdW5jdGlvbiBjcmMzMmMoc291cmNlKSB7XG4gICAgbGV0IGNyYyA9IDAgXiAweGZmZmZmZmZmO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgc291cmNlLmxlbmd0aDsgbisrKSB7XG4gICAgICAgIGNyYyBePSBzb3VyY2Vbbl07XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgICAgIGNyYyA9IGNyYyAmIDEgPyAoY3JjID4+PiAxKSBeIFBPTFkgOiBjcmMgPj4+IDE7XG4gICAgfVxuICAgIGNyYyA9IGNyYyBeIDB4ZmZmZmZmZmY7XG4gICAgLy8gQ29udmVydCBlbmRpYW5uZXNzXG4gICAgbGV0IHJlcyA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICByZXMud3JpdGVJbnQzMkxFKGNyYyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuY3JjMzJjID0gY3JjMzJjO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JjMzJjIiwiUE9MWSIsInNvdXJjZSIsImNyYyIsIm4iLCJsZW5ndGgiLCJyZXMiLCJCdWZmZXIiLCJhbGxvYyIsIndyaXRlSW50MzJMRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/crc32c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/core/dist/utils/getMethodId.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/getMethodId.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMethodId = void 0;\nconst TABLE = new Int16Array([\n    0x0000,\n    0x1021,\n    0x2042,\n    0x3063,\n    0x4084,\n    0x50a5,\n    0x60c6,\n    0x70e7,\n    0x8108,\n    0x9129,\n    0xa14a,\n    0xb16b,\n    0xc18c,\n    0xd1ad,\n    0xe1ce,\n    0xf1ef,\n    0x1231,\n    0x0210,\n    0x3273,\n    0x2252,\n    0x52b5,\n    0x4294,\n    0x72f7,\n    0x62d6,\n    0x9339,\n    0x8318,\n    0xb37b,\n    0xa35a,\n    0xd3bd,\n    0xc39c,\n    0xf3ff,\n    0xe3de,\n    0x2462,\n    0x3443,\n    0x0420,\n    0x1401,\n    0x64e6,\n    0x74c7,\n    0x44a4,\n    0x5485,\n    0xa56a,\n    0xb54b,\n    0x8528,\n    0x9509,\n    0xe5ee,\n    0xf5cf,\n    0xc5ac,\n    0xd58d,\n    0x3653,\n    0x2672,\n    0x1611,\n    0x0630,\n    0x76d7,\n    0x66f6,\n    0x5695,\n    0x46b4,\n    0xb75b,\n    0xa77a,\n    0x9719,\n    0x8738,\n    0xf7df,\n    0xe7fe,\n    0xd79d,\n    0xc7bc,\n    0x48c4,\n    0x58e5,\n    0x6886,\n    0x78a7,\n    0x0840,\n    0x1861,\n    0x2802,\n    0x3823,\n    0xc9cc,\n    0xd9ed,\n    0xe98e,\n    0xf9af,\n    0x8948,\n    0x9969,\n    0xa90a,\n    0xb92b,\n    0x5af5,\n    0x4ad4,\n    0x7ab7,\n    0x6a96,\n    0x1a71,\n    0x0a50,\n    0x3a33,\n    0x2a12,\n    0xdbfd,\n    0xcbdc,\n    0xfbbf,\n    0xeb9e,\n    0x9b79,\n    0x8b58,\n    0xbb3b,\n    0xab1a,\n    0x6ca6,\n    0x7c87,\n    0x4ce4,\n    0x5cc5,\n    0x2c22,\n    0x3c03,\n    0x0c60,\n    0x1c41,\n    0xedae,\n    0xfd8f,\n    0xcdec,\n    0xddcd,\n    0xad2a,\n    0xbd0b,\n    0x8d68,\n    0x9d49,\n    0x7e97,\n    0x6eb6,\n    0x5ed5,\n    0x4ef4,\n    0x3e13,\n    0x2e32,\n    0x1e51,\n    0x0e70,\n    0xff9f,\n    0xefbe,\n    0xdfdd,\n    0xcffc,\n    0xbf1b,\n    0xaf3a,\n    0x9f59,\n    0x8f78,\n    0x9188,\n    0x81a9,\n    0xb1ca,\n    0xa1eb,\n    0xd10c,\n    0xc12d,\n    0xf14e,\n    0xe16f,\n    0x1080,\n    0x00a1,\n    0x30c2,\n    0x20e3,\n    0x5004,\n    0x4025,\n    0x7046,\n    0x6067,\n    0x83b9,\n    0x9398,\n    0xa3fb,\n    0xb3da,\n    0xc33d,\n    0xd31c,\n    0xe37f,\n    0xf35e,\n    0x02b1,\n    0x1290,\n    0x22f3,\n    0x32d2,\n    0x4235,\n    0x5214,\n    0x6277,\n    0x7256,\n    0xb5ea,\n    0xa5cb,\n    0x95a8,\n    0x8589,\n    0xf56e,\n    0xe54f,\n    0xd52c,\n    0xc50d,\n    0x34e2,\n    0x24c3,\n    0x14a0,\n    0x0481,\n    0x7466,\n    0x6447,\n    0x5424,\n    0x4405,\n    0xa7db,\n    0xb7fa,\n    0x8799,\n    0x97b8,\n    0xe75f,\n    0xf77e,\n    0xc71d,\n    0xd73c,\n    0x26d3,\n    0x36f2,\n    0x0691,\n    0x16b0,\n    0x6657,\n    0x7676,\n    0x4615,\n    0x5634,\n    0xd94c,\n    0xc96d,\n    0xf90e,\n    0xe92f,\n    0x99c8,\n    0x89e9,\n    0xb98a,\n    0xa9ab,\n    0x5844,\n    0x4865,\n    0x7806,\n    0x6827,\n    0x18c0,\n    0x08e1,\n    0x3882,\n    0x28a3,\n    0xcb7d,\n    0xdb5c,\n    0xeb3f,\n    0xfb1e,\n    0x8bf9,\n    0x9bd8,\n    0xabbb,\n    0xbb9a,\n    0x4a75,\n    0x5a54,\n    0x6a37,\n    0x7a16,\n    0x0af1,\n    0x1ad0,\n    0x2ab3,\n    0x3a92,\n    0xfd2e,\n    0xed0f,\n    0xdd6c,\n    0xcd4d,\n    0xbdaa,\n    0xad8b,\n    0x9de8,\n    0x8dc9,\n    0x7c26,\n    0x6c07,\n    0x5c64,\n    0x4c45,\n    0x3ca2,\n    0x2c83,\n    0x1ce0,\n    0x0cc1,\n    0xef1f,\n    0xff3e,\n    0xcf5d,\n    0xdf7c,\n    0xaf9b,\n    0xbfba,\n    0x8fd9,\n    0x9ff8,\n    0x6e17,\n    0x7e36,\n    0x4e55,\n    0x5e74,\n    0x2e93,\n    0x3eb2,\n    0x0ed1,\n    0x1ef0\n]);\nfunction crc16(data) {\n    if (!(data instanceof Buffer)) {\n        data = Buffer.from(data);\n    }\n    let crc = 0;\n    for(let index = 0; index < data.length; index++){\n        const byte = data[index];\n        crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;\n    }\n    return crc;\n}\nfunction getMethodId(name) {\n    return crc16(name) & 0xffff | 0x10000;\n}\nexports.getMethodId = getMethodId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jb3JlL2Rpc3QvdXRpbHMvZ2V0TWV0aG9kSWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsUUFBUSxJQUFJQyxXQUFXO0lBQ3pCO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUN4RDtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hEO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFDeEQ7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtDQUMzRDtBQUNELFNBQVNDLE1BQU1DLElBQUk7SUFDZixJQUFJLENBQUVBLENBQUFBLGdCQUFnQkMsTUFBSyxHQUFJO1FBQzNCRCxPQUFPQyxPQUFPQyxJQUFJLENBQUNGO0lBQ3ZCO0lBQ0EsSUFBSUcsTUFBTTtJQUNWLElBQUssSUFBSUMsUUFBUSxHQUFHQSxRQUFRSixLQUFLSyxNQUFNLEVBQUVELFFBQVM7UUFDOUMsTUFBTUUsT0FBT04sSUFBSSxDQUFDSSxNQUFNO1FBQ3hCRCxNQUFNLENBQUNOLEtBQUssQ0FBQyxDQUFDLE9BQVEsSUFBS1MsSUFBRyxJQUFLLEtBQUssR0FBSUgsT0FBTyxDQUFDLElBQUs7SUFDN0Q7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU1AsWUFBWVcsSUFBSTtJQUNyQixPQUFPLE1BQU9BLFFBQVEsU0FBVTtBQUNwQztBQUNBYixtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY29yZS9kaXN0L3V0aWxzL2dldE1ldGhvZElkLmpzPzBjZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE1ldGhvZElkID0gdm9pZCAwO1xuY29uc3QgVEFCTEUgPSBuZXcgSW50MTZBcnJheShbXG4gICAgMHgwMDAwLCAweDEwMjEsIDB4MjA0MiwgMHgzMDYzLCAweDQwODQsIDB4NTBhNSwgMHg2MGM2LCAweDcwZTcsXG4gICAgMHg4MTA4LCAweDkxMjksIDB4YTE0YSwgMHhiMTZiLCAweGMxOGMsIDB4ZDFhZCwgMHhlMWNlLCAweGYxZWYsXG4gICAgMHgxMjMxLCAweDAyMTAsIDB4MzI3MywgMHgyMjUyLCAweDUyYjUsIDB4NDI5NCwgMHg3MmY3LCAweDYyZDYsXG4gICAgMHg5MzM5LCAweDgzMTgsIDB4YjM3YiwgMHhhMzVhLCAweGQzYmQsIDB4YzM5YywgMHhmM2ZmLCAweGUzZGUsXG4gICAgMHgyNDYyLCAweDM0NDMsIDB4MDQyMCwgMHgxNDAxLCAweDY0ZTYsIDB4NzRjNywgMHg0NGE0LCAweDU0ODUsXG4gICAgMHhhNTZhLCAweGI1NGIsIDB4ODUyOCwgMHg5NTA5LCAweGU1ZWUsIDB4ZjVjZiwgMHhjNWFjLCAweGQ1OGQsXG4gICAgMHgzNjUzLCAweDI2NzIsIDB4MTYxMSwgMHgwNjMwLCAweDc2ZDcsIDB4NjZmNiwgMHg1Njk1LCAweDQ2YjQsXG4gICAgMHhiNzViLCAweGE3N2EsIDB4OTcxOSwgMHg4NzM4LCAweGY3ZGYsIDB4ZTdmZSwgMHhkNzlkLCAweGM3YmMsXG4gICAgMHg0OGM0LCAweDU4ZTUsIDB4Njg4NiwgMHg3OGE3LCAweDA4NDAsIDB4MTg2MSwgMHgyODAyLCAweDM4MjMsXG4gICAgMHhjOWNjLCAweGQ5ZWQsIDB4ZTk4ZSwgMHhmOWFmLCAweDg5NDgsIDB4OTk2OSwgMHhhOTBhLCAweGI5MmIsXG4gICAgMHg1YWY1LCAweDRhZDQsIDB4N2FiNywgMHg2YTk2LCAweDFhNzEsIDB4MGE1MCwgMHgzYTMzLCAweDJhMTIsXG4gICAgMHhkYmZkLCAweGNiZGMsIDB4ZmJiZiwgMHhlYjllLCAweDliNzksIDB4OGI1OCwgMHhiYjNiLCAweGFiMWEsXG4gICAgMHg2Y2E2LCAweDdjODcsIDB4NGNlNCwgMHg1Y2M1LCAweDJjMjIsIDB4M2MwMywgMHgwYzYwLCAweDFjNDEsXG4gICAgMHhlZGFlLCAweGZkOGYsIDB4Y2RlYywgMHhkZGNkLCAweGFkMmEsIDB4YmQwYiwgMHg4ZDY4LCAweDlkNDksXG4gICAgMHg3ZTk3LCAweDZlYjYsIDB4NWVkNSwgMHg0ZWY0LCAweDNlMTMsIDB4MmUzMiwgMHgxZTUxLCAweDBlNzAsXG4gICAgMHhmZjlmLCAweGVmYmUsIDB4ZGZkZCwgMHhjZmZjLCAweGJmMWIsIDB4YWYzYSwgMHg5ZjU5LCAweDhmNzgsXG4gICAgMHg5MTg4LCAweDgxYTksIDB4YjFjYSwgMHhhMWViLCAweGQxMGMsIDB4YzEyZCwgMHhmMTRlLCAweGUxNmYsXG4gICAgMHgxMDgwLCAweDAwYTEsIDB4MzBjMiwgMHgyMGUzLCAweDUwMDQsIDB4NDAyNSwgMHg3MDQ2LCAweDYwNjcsXG4gICAgMHg4M2I5LCAweDkzOTgsIDB4YTNmYiwgMHhiM2RhLCAweGMzM2QsIDB4ZDMxYywgMHhlMzdmLCAweGYzNWUsXG4gICAgMHgwMmIxLCAweDEyOTAsIDB4MjJmMywgMHgzMmQyLCAweDQyMzUsIDB4NTIxNCwgMHg2Mjc3LCAweDcyNTYsXG4gICAgMHhiNWVhLCAweGE1Y2IsIDB4OTVhOCwgMHg4NTg5LCAweGY1NmUsIDB4ZTU0ZiwgMHhkNTJjLCAweGM1MGQsXG4gICAgMHgzNGUyLCAweDI0YzMsIDB4MTRhMCwgMHgwNDgxLCAweDc0NjYsIDB4NjQ0NywgMHg1NDI0LCAweDQ0MDUsXG4gICAgMHhhN2RiLCAweGI3ZmEsIDB4ODc5OSwgMHg5N2I4LCAweGU3NWYsIDB4Zjc3ZSwgMHhjNzFkLCAweGQ3M2MsXG4gICAgMHgyNmQzLCAweDM2ZjIsIDB4MDY5MSwgMHgxNmIwLCAweDY2NTcsIDB4NzY3NiwgMHg0NjE1LCAweDU2MzQsXG4gICAgMHhkOTRjLCAweGM5NmQsIDB4ZjkwZSwgMHhlOTJmLCAweDk5YzgsIDB4ODllOSwgMHhiOThhLCAweGE5YWIsXG4gICAgMHg1ODQ0LCAweDQ4NjUsIDB4NzgwNiwgMHg2ODI3LCAweDE4YzAsIDB4MDhlMSwgMHgzODgyLCAweDI4YTMsXG4gICAgMHhjYjdkLCAweGRiNWMsIDB4ZWIzZiwgMHhmYjFlLCAweDhiZjksIDB4OWJkOCwgMHhhYmJiLCAweGJiOWEsXG4gICAgMHg0YTc1LCAweDVhNTQsIDB4NmEzNywgMHg3YTE2LCAweDBhZjEsIDB4MWFkMCwgMHgyYWIzLCAweDNhOTIsXG4gICAgMHhmZDJlLCAweGVkMGYsIDB4ZGQ2YywgMHhjZDRkLCAweGJkYWEsIDB4YWQ4YiwgMHg5ZGU4LCAweDhkYzksXG4gICAgMHg3YzI2LCAweDZjMDcsIDB4NWM2NCwgMHg0YzQ1LCAweDNjYTIsIDB4MmM4MywgMHgxY2UwLCAweDBjYzEsXG4gICAgMHhlZjFmLCAweGZmM2UsIDB4Y2Y1ZCwgMHhkZjdjLCAweGFmOWIsIDB4YmZiYSwgMHg4ZmQ5LCAweDlmZjgsXG4gICAgMHg2ZTE3LCAweDdlMzYsIDB4NGU1NSwgMHg1ZTc0LCAweDJlOTMsIDB4M2ViMiwgMHgwZWQxLCAweDFlZjBcbl0pO1xuZnVuY3Rpb24gY3JjMTYoZGF0YSkge1xuICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICB9XG4gICAgbGV0IGNyYyA9IDA7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGRhdGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBkYXRhW2luZGV4XTtcbiAgICAgICAgY3JjID0gKFRBQkxFWygoY3JjID4+IDgpIF4gYnl0ZSkgJiAweGZmXSBeIChjcmMgPDwgOCkpICYgMHhmZmZmO1xuICAgIH1cbiAgICByZXR1cm4gY3JjO1xufVxuZnVuY3Rpb24gZ2V0TWV0aG9kSWQobmFtZSkge1xuICAgIHJldHVybiAoY3JjMTYobmFtZSkgJiAweGZmZmYpIHwgMHgxMDAwMDtcbn1cbmV4cG9ydHMuZ2V0TWV0aG9kSWQgPSBnZXRNZXRob2RJZDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE1ldGhvZElkIiwiVEFCTEUiLCJJbnQxNkFycmF5IiwiY3JjMTYiLCJkYXRhIiwiQnVmZmVyIiwiZnJvbSIsImNyYyIsImluZGV4IiwibGVuZ3RoIiwiYnl0ZSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/core/dist/utils/getMethodId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha512 = exports.sha256 = exports.pbkdf2_sha512 = exports.hmac_sha512 = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nvar getSecureRandom_1 = __webpack_require__(/*! ./node/getSecureRandom */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js\");\nObject.defineProperty(exports, \"getSecureRandomBytes\", ({\n    enumerable: true,\n    get: function() {\n        return getSecureRandom_1.getSecureRandomBytes;\n    }\n}));\nObject.defineProperty(exports, \"getSecureRandomWords\", ({\n    enumerable: true,\n    get: function() {\n        return getSecureRandom_1.getSecureRandomWords;\n    }\n}));\nvar hmac_sha512_1 = __webpack_require__(/*! ./node/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js\");\nObject.defineProperty(exports, \"hmac_sha512\", ({\n    enumerable: true,\n    get: function() {\n        return hmac_sha512_1.hmac_sha512;\n    }\n}));\nvar pbkdf2_sha512_1 = __webpack_require__(/*! ./node/pbkdf2_sha512 */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js\");\nObject.defineProperty(exports, \"pbkdf2_sha512\", ({\n    enumerable: true,\n    get: function() {\n        return pbkdf2_sha512_1.pbkdf2_sha512;\n    }\n}));\nvar sha256_1 = __webpack_require__(/*! ./node/sha256 */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha256.js\");\nObject.defineProperty(exports, \"sha256\", ({\n    enumerable: true,\n    get: function() {\n        return sha256_1.sha256;\n    }\n}));\nvar sha512_1 = __webpack_require__(/*! ./node/sha512 */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha512.js\");\nObject.defineProperty(exports, \"sha512\", ({\n    enumerable: true,\n    get: function() {\n        return sha512_1.sha512;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBR0EsbUJBQW1CLEdBQUdBLDRCQUE0QixHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ25KLElBQUlRLG9CQUFvQkMsbUJBQU9BLENBQUMsd0dBQXdCO0FBQ3hEWCx3REFBdUQ7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsa0JBQWtCRCxvQkFBb0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNqSlQsd0RBQXVEO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILGtCQUFrQkYsb0JBQW9CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakosSUFBSU0sZ0JBQWdCSCxtQkFBT0EsQ0FBQyxnR0FBb0I7QUFDaERYLCtDQUE4QztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxjQUFjUCxXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0gsSUFBSVEsa0JBQWtCSixtQkFBT0EsQ0FBQyxvR0FBc0I7QUFDcERYLGlEQUFnRDtJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxnQkFBZ0JULGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNqSSxJQUFJVSxXQUFXTCxtQkFBT0EsQ0FBQyxzRkFBZTtBQUN0Q1gsMENBQXlDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFNBQVNYLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUM1RyxJQUFJWSxXQUFXTixtQkFBT0EsQ0FBQyxzRkFBZTtBQUN0Q1gsMENBQXlDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLFNBQVNiLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUuanM/MTQ4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhNTEyID0gZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLnBia2RmMl9zaGE1MTIgPSBleHBvcnRzLmhtYWNfc2hhNTEyID0gZXhwb3J0cy5nZXRTZWN1cmVSYW5kb21Xb3JkcyA9IGV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tQnl0ZXMgPSB2b2lkIDA7XG52YXIgZ2V0U2VjdXJlUmFuZG9tXzEgPSByZXF1aXJlKFwiLi9ub2RlL2dldFNlY3VyZVJhbmRvbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNlY3VyZVJhbmRvbUJ5dGVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRTZWN1cmVSYW5kb21fMS5nZXRTZWN1cmVSYW5kb21CeXRlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNlY3VyZVJhbmRvbVdvcmRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRTZWN1cmVSYW5kb21fMS5nZXRTZWN1cmVSYW5kb21Xb3JkczsgfSB9KTtcbnZhciBobWFjX3NoYTUxMl8xID0gcmVxdWlyZShcIi4vbm9kZS9obWFjX3NoYTUxMlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImhtYWNfc2hhNTEyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBobWFjX3NoYTUxMl8xLmhtYWNfc2hhNTEyOyB9IH0pO1xudmFyIHBia2RmMl9zaGE1MTJfMSA9IHJlcXVpcmUoXCIuL25vZGUvcGJrZGYyX3NoYTUxMlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBia2RmMl9zaGE1MTJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBia2RmMl9zaGE1MTJfMS5wYmtkZjJfc2hhNTEyOyB9IH0pO1xudmFyIHNoYTI1Nl8xID0gcmVxdWlyZShcIi4vbm9kZS9zaGEyNTZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGEyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYTI1Nl8xLnNoYTI1NjsgfSB9KTtcbnZhciBzaGE1MTJfMSA9IHJlcXVpcmUoXCIuL25vZGUvc2hhNTEyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2hhNTEyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaGE1MTJfMS5zaGE1MTI7IH0gfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaGE1MTIiLCJzaGEyNTYiLCJwYmtkZjJfc2hhNTEyIiwiaG1hY19zaGE1MTIiLCJnZXRTZWN1cmVSYW5kb21Xb3JkcyIsImdldFNlY3VyZVJhbmRvbUJ5dGVzIiwiZ2V0U2VjdXJlUmFuZG9tXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImhtYWNfc2hhNTEyXzEiLCJwYmtkZjJfc2hhNTEyXzEiLCJzaGEyNTZfMSIsInNoYTUxMl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nfunction getSecureRandomBytes(size) {\n    return crypto_1.default.randomBytes(size);\n}\nexports.getSecureRandomBytes = getSecureRandomBytes;\nfunction getSecureRandomWords(size) {\n    let res = new Uint16Array(size);\n    crypto_1.default.randomFillSync(res);\n    return res;\n}\nexports.getSecureRandomWords = getSecureRandomWords;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUvZ2V0U2VjdXJlUmFuZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDbkUsTUFBTUksV0FBV1QsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqRCxTQUFTRixxQkFBcUJHLElBQUk7SUFDOUIsT0FBT0YsU0FBU0csT0FBTyxDQUFDQyxXQUFXLENBQUNGO0FBQ3hDO0FBQ0FOLDRCQUE0QixHQUFHRztBQUMvQixTQUFTRCxxQkFBcUJJLElBQUk7SUFDOUIsSUFBSUcsTUFBTSxJQUFJQyxZQUFZSjtJQUMxQkYsU0FBU0csT0FBTyxDQUFDSSxjQUFjLENBQUNGO0lBQ2hDLE9BQU9BO0FBQ1g7QUFDQVQsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by1wcmltaXRpdmVzL2Rpc3Qvbm9kZS9nZXRTZWN1cmVSYW5kb20uanM/Mzc3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tV29yZHMgPSBleHBvcnRzLmdldFNlY3VyZVJhbmRvbUJ5dGVzID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyeXB0b1wiKSk7XG5mdW5jdGlvbiBnZXRTZWN1cmVSYW5kb21CeXRlcyhzaXplKSB7XG4gICAgcmV0dXJuIGNyeXB0b18xLmRlZmF1bHQucmFuZG9tQnl0ZXMoc2l6ZSk7XG59XG5leHBvcnRzLmdldFNlY3VyZVJhbmRvbUJ5dGVzID0gZ2V0U2VjdXJlUmFuZG9tQnl0ZXM7XG5mdW5jdGlvbiBnZXRTZWN1cmVSYW5kb21Xb3JkcyhzaXplKSB7XG4gICAgbGV0IHJlcyA9IG5ldyBVaW50MTZBcnJheShzaXplKTtcbiAgICBjcnlwdG9fMS5kZWZhdWx0LnJhbmRvbUZpbGxTeW5jKHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tV29yZHMgPSBnZXRTZWN1cmVSYW5kb21Xb3JkcztcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRTZWN1cmVSYW5kb21Xb3JkcyIsImdldFNlY3VyZVJhbmRvbUJ5dGVzIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwic2l6ZSIsImRlZmF1bHQiLCJyYW5kb21CeXRlcyIsInJlcyIsIlVpbnQxNkFycmF5IiwicmFuZG9tRmlsbFN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hmac_sha512 = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nasync function hmac_sha512(key, data) {\n    let keyBuffer = typeof key === \"string\" ? Buffer.from(key, \"utf-8\") : key;\n    let dataBuffer = typeof data === \"string\" ? Buffer.from(data, \"utf-8\") : data;\n    return crypto_1.default.createHmac(\"sha512\", keyBuffer).update(dataBuffer).digest();\n}\nexports.hmac_sha512 = hmac_sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUvaG1hY19zaGE1MTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLE1BQU1HLFdBQVdSLGdCQUFnQlMsbUJBQU9BLENBQUMsc0JBQVE7QUFDakQsZUFBZUYsWUFBWUcsR0FBRyxFQUFFQyxJQUFJO0lBQ2hDLElBQUlDLFlBQVksT0FBT0YsUUFBUSxXQUFXRyxPQUFPQyxJQUFJLENBQUNKLEtBQUssV0FBV0E7SUFDdEUsSUFBSUssYUFBYSxPQUFPSixTQUFTLFdBQVdFLE9BQU9DLElBQUksQ0FBQ0gsTUFBTSxXQUFXQTtJQUN6RSxPQUFPSCxTQUFTUSxPQUFPLENBQUNDLFVBQVUsQ0FBQyxVQUFVTCxXQUN4Q00sTUFBTSxDQUFDSCxZQUNQSSxNQUFNO0FBQ2Y7QUFDQWQsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by1wcmltaXRpdmVzL2Rpc3Qvbm9kZS9obWFjX3NoYTUxMi5qcz8yMTNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5obWFjX3NoYTUxMiA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjcnlwdG9cIikpO1xuYXN5bmMgZnVuY3Rpb24gaG1hY19zaGE1MTIoa2V5LCBkYXRhKSB7XG4gICAgbGV0IGtleUJ1ZmZlciA9IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gQnVmZmVyLmZyb20oa2V5LCAndXRmLTgnKSA6IGtleTtcbiAgICBsZXQgZGF0YUJ1ZmZlciA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IEJ1ZmZlci5mcm9tKGRhdGEsICd1dGYtOCcpIDogZGF0YTtcbiAgICByZXR1cm4gY3J5cHRvXzEuZGVmYXVsdC5jcmVhdGVIbWFjKCdzaGE1MTInLCBrZXlCdWZmZXIpXG4gICAgICAgIC51cGRhdGUoZGF0YUJ1ZmZlcilcbiAgICAgICAgLmRpZ2VzdCgpO1xufVxuZXhwb3J0cy5obWFjX3NoYTUxMiA9IGhtYWNfc2hhNTEyO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhtYWNfc2hhNTEyIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwia2V5IiwiZGF0YSIsImtleUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJkYXRhQnVmZmVyIiwiZGVmYXVsdCIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pbkdf2_sha512 = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nfunction pbkdf2_sha512(key, salt, iterations, keyLen) {\n    return new Promise((resolve, reject)=>crypto_1.default.pbkdf2(key, salt, iterations, keyLen, \"sha512\", (error, derivedKey)=>{\n            if (error) {\n                reject(error);\n            } else {\n                resolve(derivedKey);\n            }\n        }));\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUvcGJrZGYyX3NoYTUxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNELElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUcsV0FBV1IsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqRCxTQUFTRixjQUFjRyxHQUFHLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxNQUFNO0lBQ2hELE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQyxTQUFXUixTQUFTUyxPQUFPLENBQUNDLE1BQU0sQ0FBQ1IsS0FBS0MsTUFBTUMsWUFBWUMsUUFBUSxVQUFVLENBQUNNLE9BQU9DO1lBQzdHLElBQUlELE9BQU87Z0JBQ1BILE9BQU9HO1lBQ1gsT0FDSztnQkFDREosUUFBUUs7WUFDWjtRQUNKO0FBQ0o7QUFDQWYscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by1wcmltaXRpdmVzL2Rpc3Qvbm9kZS9wYmtkZjJfc2hhNTEyLmpzP2YwMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBia2RmMl9zaGE1MTIgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY3J5cHRvXCIpKTtcbmZ1bmN0aW9uIHBia2RmMl9zaGE1MTIoa2V5LCBzYWx0LCBpdGVyYXRpb25zLCBrZXlMZW4pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gY3J5cHRvXzEuZGVmYXVsdC5wYmtkZjIoa2V5LCBzYWx0LCBpdGVyYXRpb25zLCBrZXlMZW4sICdzaGE1MTInLCAoZXJyb3IsIGRlcml2ZWRLZXkpID0+IHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShkZXJpdmVkS2V5KTtcbiAgICAgICAgfVxuICAgIH0pKTtcbn1cbmV4cG9ydHMucGJrZGYyX3NoYTUxMiA9IHBia2RmMl9zaGE1MTI7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGJrZGYyX3NoYTUxMiIsImNyeXB0b18xIiwicmVxdWlyZSIsImtleSIsInNhbHQiLCJpdGVyYXRpb25zIiwia2V5TGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWZhdWx0IiwicGJrZGYyIiwiZXJyb3IiLCJkZXJpdmVkS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha256.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/sha256.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha256 = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nasync function sha256(source) {\n    return crypto_1.default.createHash(\"sha256\").update(source).digest();\n}\nexports.sha256 = sha256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUvc2hhMjU2LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsV0FBV1IsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqRCxlQUFlRixPQUFPRyxNQUFNO0lBQ3hCLE9BQU9GLFNBQVNHLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLFVBQVVDLE1BQU0sQ0FBQ0gsUUFBUUksTUFBTTtBQUN0RTtBQUNBVCxjQUFjLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by1wcmltaXRpdmVzL2Rpc3Qvbm9kZS9zaGEyNTYuanM/M2VlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhMjU2ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyeXB0b1wiKSk7XG5hc3luYyBmdW5jdGlvbiBzaGEyNTYoc291cmNlKSB7XG4gICAgcmV0dXJuIGNyeXB0b18xLmRlZmF1bHQuY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHNvdXJjZSkuZGlnZXN0KCk7XG59XG5leHBvcnRzLnNoYTI1NiA9IHNoYTI1NjtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaGEyNTYiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJzb3VyY2UiLCJkZWZhdWx0IiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha512.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/sha512.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha512 = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nasync function sha512(source) {\n    return crypto_1.default.createHash(\"sha512\").update(source).digest();\n}\nexports.sha512 = sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8tcHJpbWl0aXZlcy9kaXN0L25vZGUvc2hhNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsV0FBV1IsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqRCxlQUFlRixPQUFPRyxNQUFNO0lBQ3hCLE9BQU9GLFNBQVNHLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLFVBQVVDLE1BQU0sQ0FBQ0gsUUFBUUksTUFBTTtBQUN0RTtBQUNBVCxjQUFjLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by1wcmltaXRpdmVzL2Rpc3Qvbm9kZS9zaGE1MTIuanM/ZTg4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhNTEyID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyeXB0b1wiKSk7XG5hc3luYyBmdW5jdGlvbiBzaGE1MTIoc291cmNlKSB7XG4gICAgcmV0dXJuIGNyeXB0b18xLmRlZmF1bHQuY3JlYXRlSGFzaCgnc2hhNTEyJykudXBkYXRlKHNvdXJjZSkuZGlnZXN0KCk7XG59XG5leHBvcnRzLnNoYTUxMiA9IHNoYTUxMjtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaGE1MTIiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJzb3VyY2UiLCJkZWZhdWx0IiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto-primitives/dist/node/sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/hd/ed25519.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/ed25519.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = void 0;\nconst hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\");\nconst ED25519_CURVE = \"ed25519 seed\";\nconst HARDENED_OFFSET = 0x80000000;\nasync function getED25519MasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(ED25519_CURVE, seed);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;\n;\nasync function deriveED25519HardenedKey(parent, index) {\n    if (index >= HARDENED_OFFSET) {\n        throw Error(\"Key index must be less than offset\");\n    }\n    // Key Derive Path: 0x00 + parent.key + index;\n    const indexBuffer = Buffer.alloc(4);\n    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);\n    const data = Buffer.concat([\n        Buffer.alloc(1, 0),\n        parent.key,\n        indexBuffer\n    ]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.deriveED25519HardenedKey = deriveED25519HardenedKey;\n;\nasync function deriveEd25519Path(seed, path) {\n    let state = await getED25519MasterKeyFromSeed(seed);\n    let remaining = [\n        ...path\n    ];\n    while(remaining.length > 0){\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveED25519HardenedKey(state, index);\n    }\n    return state.key;\n}\nexports.deriveEd25519Path = deriveEd25519Path;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9oZC9lZDI1NTE5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBR0EsZ0NBQWdDLEdBQUdBLG1DQUFtQyxHQUFHLEtBQUs7QUFDMUcsTUFBTUssZ0JBQWdCQyxtQkFBT0EsQ0FBQyxrR0FBMkI7QUFDekQsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGtCQUFrQjtBQUN4QixlQUFlSiw0QkFBNEJLLElBQUk7SUFDM0MsTUFBTUMsSUFBSSxNQUFNLENBQUMsR0FBR0wsY0FBY00sV0FBVyxFQUFFSixlQUFlRTtJQUM5RCxNQUFNRyxLQUFLRixFQUFFRyxLQUFLLENBQUMsR0FBRztJQUN0QixNQUFNQyxLQUFLSixFQUFFRyxLQUFLLENBQUM7SUFDbkIsT0FBTztRQUNIRSxLQUFLSDtRQUNMSSxXQUFXRjtJQUNmO0FBQ0o7QUFDQWQsbUNBQW1DLEdBQUdJOztBQUV0QyxlQUFlRCx5QkFBeUJjLE1BQU0sRUFBRUMsS0FBSztJQUNqRCxJQUFJQSxTQUFTVixpQkFBaUI7UUFDMUIsTUFBTVcsTUFBTTtJQUNoQjtJQUNBLDhDQUE4QztJQUM5QyxNQUFNQyxjQUFjQyxPQUFPQyxLQUFLLENBQUM7SUFDakNGLFlBQVlHLGFBQWEsQ0FBQ0wsUUFBUVYsaUJBQWlCO0lBQ25ELE1BQU1nQixPQUFPSCxPQUFPSSxNQUFNLENBQUM7UUFBQ0osT0FBT0MsS0FBSyxDQUFDLEdBQUc7UUFBSUwsT0FBT0YsR0FBRztRQUFFSztLQUFZO0lBQ3hFLGFBQWE7SUFDYixNQUFNVixJQUFJLE1BQU0sQ0FBQyxHQUFHTCxjQUFjTSxXQUFXLEVBQUVNLE9BQU9ELFNBQVMsRUFBRVE7SUFDakUsTUFBTVosS0FBS0YsRUFBRUcsS0FBSyxDQUFDLEdBQUc7SUFDdEIsTUFBTUMsS0FBS0osRUFBRUcsS0FBSyxDQUFDO0lBQ25CLE9BQU87UUFDSEUsS0FBS0g7UUFDTEksV0FBV0Y7SUFDZjtBQUNKO0FBQ0FkLGdDQUFnQyxHQUFHRzs7QUFFbkMsZUFBZUQsa0JBQWtCTyxJQUFJLEVBQUVpQixJQUFJO0lBQ3ZDLElBQUlDLFFBQVEsTUFBTXZCLDRCQUE0Qks7SUFDOUMsSUFBSW1CLFlBQVk7V0FBSUY7S0FBSztJQUN6QixNQUFPRSxVQUFVQyxNQUFNLEdBQUcsRUFBRztRQUN6QixJQUFJWCxRQUFRVSxTQUFTLENBQUMsRUFBRTtRQUN4QkEsWUFBWUEsVUFBVWYsS0FBSyxDQUFDO1FBQzVCYyxRQUFRLE1BQU14Qix5QkFBeUJ3QixPQUFPVDtJQUNsRDtJQUNBLE9BQU9TLE1BQU1aLEdBQUc7QUFDcEI7QUFDQWYseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by9kaXN0L2hkL2VkMjU1MTkuanM/OWQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVyaXZlRWQyNTUxOVBhdGggPSBleHBvcnRzLmRlcml2ZUVEMjU1MTlIYXJkZW5lZEtleSA9IGV4cG9ydHMuZ2V0RUQyNTUxOU1hc3RlcktleUZyb21TZWVkID0gdm9pZCAwO1xuY29uc3QgaG1hY19zaGE1MTJfMSA9IHJlcXVpcmUoXCIuLi9wcmltaXRpdmVzL2htYWNfc2hhNTEyXCIpO1xuY29uc3QgRUQyNTUxOV9DVVJWRSA9ICdlZDI1NTE5IHNlZWQnO1xuY29uc3QgSEFSREVORURfT0ZGU0VUID0gMHg4MDAwMDAwMDtcbmFzeW5jIGZ1bmN0aW9uIGdldEVEMjU1MTlNYXN0ZXJLZXlGcm9tU2VlZChzZWVkKSB7XG4gICAgY29uc3QgSSA9IGF3YWl0ICgwLCBobWFjX3NoYTUxMl8xLmhtYWNfc2hhNTEyKShFRDI1NTE5X0NVUlZFLCBzZWVkKTtcbiAgICBjb25zdCBJTCA9IEkuc2xpY2UoMCwgMzIpO1xuICAgIGNvbnN0IElSID0gSS5zbGljZSgzMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBJTCxcbiAgICAgICAgY2hhaW5Db2RlOiBJUixcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRFRDI1NTE5TWFzdGVyS2V5RnJvbVNlZWQgPSBnZXRFRDI1NTE5TWFzdGVyS2V5RnJvbVNlZWQ7XG47XG5hc3luYyBmdW5jdGlvbiBkZXJpdmVFRDI1NTE5SGFyZGVuZWRLZXkocGFyZW50LCBpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSBIQVJERU5FRF9PRkZTRVQpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0tleSBpbmRleCBtdXN0IGJlIGxlc3MgdGhhbiBvZmZzZXQnKTtcbiAgICB9XG4gICAgLy8gS2V5IERlcml2ZSBQYXRoOiAweDAwICsgcGFyZW50LmtleSArIGluZGV4O1xuICAgIGNvbnN0IGluZGV4QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgIGluZGV4QnVmZmVyLndyaXRlVUludDMyQkUoaW5kZXggKyBIQVJERU5FRF9PRkZTRVQsIDApO1xuICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuY29uY2F0KFtCdWZmZXIuYWxsb2MoMSwgMCksIHBhcmVudC5rZXksIGluZGV4QnVmZmVyXSk7XG4gICAgLy8gRGVyaXZlIGtleVxuICAgIGNvbnN0IEkgPSBhd2FpdCAoMCwgaG1hY19zaGE1MTJfMS5obWFjX3NoYTUxMikocGFyZW50LmNoYWluQ29kZSwgZGF0YSk7XG4gICAgY29uc3QgSUwgPSBJLnNsaWNlKDAsIDMyKTtcbiAgICBjb25zdCBJUiA9IEkuc2xpY2UoMzIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGtleTogSUwsXG4gICAgICAgIGNoYWluQ29kZTogSVIsXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVyaXZlRUQyNTUxOUhhcmRlbmVkS2V5ID0gZGVyaXZlRUQyNTUxOUhhcmRlbmVkS2V5O1xuO1xuYXN5bmMgZnVuY3Rpb24gZGVyaXZlRWQyNTUxOVBhdGgoc2VlZCwgcGF0aCkge1xuICAgIGxldCBzdGF0ZSA9IGF3YWl0IGdldEVEMjU1MTlNYXN0ZXJLZXlGcm9tU2VlZChzZWVkKTtcbiAgICBsZXQgcmVtYWluaW5nID0gWy4uLnBhdGhdO1xuICAgIHdoaWxlIChyZW1haW5pbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgaW5kZXggPSByZW1haW5pbmdbMF07XG4gICAgICAgIHJlbWFpbmluZyA9IHJlbWFpbmluZy5zbGljZSgxKTtcbiAgICAgICAgc3RhdGUgPSBhd2FpdCBkZXJpdmVFRDI1NTE5SGFyZGVuZWRLZXkoc3RhdGUsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmtleTtcbn1cbmV4cG9ydHMuZGVyaXZlRWQyNTUxOVBhdGggPSBkZXJpdmVFZDI1NTE5UGF0aDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlcml2ZUVkMjU1MTlQYXRoIiwiZGVyaXZlRUQyNTUxOUhhcmRlbmVkS2V5IiwiZ2V0RUQyNTUxOU1hc3RlcktleUZyb21TZWVkIiwiaG1hY19zaGE1MTJfMSIsInJlcXVpcmUiLCJFRDI1NTE5X0NVUlZFIiwiSEFSREVORURfT0ZGU0VUIiwic2VlZCIsIkkiLCJobWFjX3NoYTUxMiIsIklMIiwic2xpY2UiLCJJUiIsImtleSIsImNoYWluQ29kZSIsInBhcmVudCIsImluZGV4IiwiRXJyb3IiLCJpbmRleEJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jIiwid3JpdGVVSW50MzJCRSIsImRhdGEiLCJjb25jYXQiLCJwYXRoIiwic3RhdGUiLCJyZW1haW5pbmciLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/hd/ed25519.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/hd/mnemonics.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/mnemonics.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.deriveMnemonicsPath = exports.deriveMnemonicHardenedKey = exports.getMnemonicsMasterKeyFromSeed = void 0;\nconst mnemonic_1 = __webpack_require__(/*! ../mnemonic/mnemonic */ \"(ssr)/./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js\");\nconst hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\");\nconst HARDENED_OFFSET = 0x80000000;\nconst MNEMONICS_SEED = \"TON Mnemonics HD seed\";\nasync function getMnemonicsMasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(MNEMONICS_SEED, seed);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;\n;\nasync function deriveMnemonicHardenedKey(parent, index) {\n    if (index >= HARDENED_OFFSET) {\n        throw Error(\"Key index must be less than offset\");\n    }\n    // Key Derive Path: 0x00 + parent.key + index;\n    const indexBuffer = Buffer.alloc(4);\n    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);\n    const data = Buffer.concat([\n        Buffer.alloc(1, 0),\n        parent.key,\n        indexBuffer\n    ]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;\nasync function deriveMnemonicsPath(seed, path, wordsCount = 24, password) {\n    let state = await getMnemonicsMasterKeyFromSeed(seed);\n    let remaining = [\n        ...path\n    ];\n    while(remaining.length > 0){\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveMnemonicHardenedKey(state, index);\n    }\n    return await (0, mnemonic_1.mnemonicFromRandomSeed)(state.key, wordsCount, password);\n}\nexports.deriveMnemonicsPath = deriveMnemonicsPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9oZC9tbmVtb25pY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSxpQ0FBaUMsR0FBR0EscUNBQXFDLEdBQUcsS0FBSztBQUMvRyxNQUFNSyxhQUFhQyxtQkFBT0EsQ0FBQyx3RkFBc0I7QUFDakQsTUFBTUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyxrR0FBMkI7QUFDekQsTUFBTUUsa0JBQWtCO0FBQ3hCLE1BQU1DLGlCQUFpQjtBQUN2QixlQUFlTCw4QkFBOEJNLElBQUk7SUFDN0MsTUFBTUMsSUFBSSxNQUFNLENBQUMsR0FBR0osY0FBY0ssV0FBVyxFQUFFSCxnQkFBZ0JDO0lBQy9ELE1BQU1HLEtBQUtGLEVBQUVHLEtBQUssQ0FBQyxHQUFHO0lBQ3RCLE1BQU1DLEtBQUtKLEVBQUVHLEtBQUssQ0FBQztJQUNuQixPQUFPO1FBQ0hFLEtBQUtIO1FBQ0xJLFdBQVdGO0lBQ2Y7QUFDSjtBQUNBZixxQ0FBcUMsR0FBR0k7O0FBRXhDLGVBQWVELDBCQUEwQmUsTUFBTSxFQUFFQyxLQUFLO0lBQ2xELElBQUlBLFNBQVNYLGlCQUFpQjtRQUMxQixNQUFNWSxNQUFNO0lBQ2hCO0lBQ0EsOENBQThDO0lBQzlDLE1BQU1DLGNBQWNDLE9BQU9DLEtBQUssQ0FBQztJQUNqQ0YsWUFBWUcsYUFBYSxDQUFDTCxRQUFRWCxpQkFBaUI7SUFDbkQsTUFBTWlCLE9BQU9ILE9BQU9JLE1BQU0sQ0FBQztRQUFDSixPQUFPQyxLQUFLLENBQUMsR0FBRztRQUFJTCxPQUFPRixHQUFHO1FBQUVLO0tBQVk7SUFDeEUsYUFBYTtJQUNiLE1BQU1WLElBQUksTUFBTSxDQUFDLEdBQUdKLGNBQWNLLFdBQVcsRUFBRU0sT0FBT0QsU0FBUyxFQUFFUTtJQUNqRSxNQUFNWixLQUFLRixFQUFFRyxLQUFLLENBQUMsR0FBRztJQUN0QixNQUFNQyxLQUFLSixFQUFFRyxLQUFLLENBQUM7SUFDbkIsT0FBTztRQUNIRSxLQUFLSDtRQUNMSSxXQUFXRjtJQUNmO0FBQ0o7QUFDQWYsaUNBQWlDLEdBQUdHO0FBQ3BDLGVBQWVELG9CQUFvQlEsSUFBSSxFQUFFaUIsSUFBSSxFQUFFQyxhQUFhLEVBQUUsRUFBRUMsUUFBUTtJQUNwRSxJQUFJQyxRQUFRLE1BQU0xQiw4QkFBOEJNO0lBQ2hELElBQUlxQixZQUFZO1dBQUlKO0tBQUs7SUFDekIsTUFBT0ksVUFBVUMsTUFBTSxHQUFHLEVBQUc7UUFDekIsSUFBSWIsUUFBUVksU0FBUyxDQUFDLEVBQUU7UUFDeEJBLFlBQVlBLFVBQVVqQixLQUFLLENBQUM7UUFDNUJnQixRQUFRLE1BQU0zQiwwQkFBMEIyQixPQUFPWDtJQUNuRDtJQUNBLE9BQU8sTUFBTSxDQUFDLEdBQUdkLFdBQVc0QixzQkFBc0IsRUFBRUgsTUFBTWQsR0FBRyxFQUFFWSxZQUFZQztBQUMvRTtBQUNBN0IsMkJBQTJCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by9kaXN0L2hkL21uZW1vbmljcy5qcz81YWZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZXJpdmVNbmVtb25pY3NQYXRoID0gZXhwb3J0cy5kZXJpdmVNbmVtb25pY0hhcmRlbmVkS2V5ID0gZXhwb3J0cy5nZXRNbmVtb25pY3NNYXN0ZXJLZXlGcm9tU2VlZCA9IHZvaWQgMDtcbmNvbnN0IG1uZW1vbmljXzEgPSByZXF1aXJlKFwiLi4vbW5lbW9uaWMvbW5lbW9uaWNcIik7XG5jb25zdCBobWFjX3NoYTUxMl8xID0gcmVxdWlyZShcIi4uL3ByaW1pdGl2ZXMvaG1hY19zaGE1MTJcIik7XG5jb25zdCBIQVJERU5FRF9PRkZTRVQgPSAweDgwMDAwMDAwO1xuY29uc3QgTU5FTU9OSUNTX1NFRUQgPSAnVE9OIE1uZW1vbmljcyBIRCBzZWVkJztcbmFzeW5jIGZ1bmN0aW9uIGdldE1uZW1vbmljc01hc3RlcktleUZyb21TZWVkKHNlZWQpIHtcbiAgICBjb25zdCBJID0gYXdhaXQgKDAsIGhtYWNfc2hhNTEyXzEuaG1hY19zaGE1MTIpKE1ORU1PTklDU19TRUVELCBzZWVkKTtcbiAgICBjb25zdCBJTCA9IEkuc2xpY2UoMCwgMzIpO1xuICAgIGNvbnN0IElSID0gSS5zbGljZSgzMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBJTCxcbiAgICAgICAgY2hhaW5Db2RlOiBJUixcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRNbmVtb25pY3NNYXN0ZXJLZXlGcm9tU2VlZCA9IGdldE1uZW1vbmljc01hc3RlcktleUZyb21TZWVkO1xuO1xuYXN5bmMgZnVuY3Rpb24gZGVyaXZlTW5lbW9uaWNIYXJkZW5lZEtleShwYXJlbnQsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IEhBUkRFTkVEX09GRlNFVCkge1xuICAgICAgICB0aHJvdyBFcnJvcignS2V5IGluZGV4IG11c3QgYmUgbGVzcyB0aGFuIG9mZnNldCcpO1xuICAgIH1cbiAgICAvLyBLZXkgRGVyaXZlIFBhdGg6IDB4MDAgKyBwYXJlbnQua2V5ICsgaW5kZXg7XG4gICAgY29uc3QgaW5kZXhCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgaW5kZXhCdWZmZXIud3JpdGVVSW50MzJCRShpbmRleCArIEhBUkRFTkVEX09GRlNFVCwgMCk7XG4gICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxLCAwKSwgcGFyZW50LmtleSwgaW5kZXhCdWZmZXJdKTtcbiAgICAvLyBEZXJpdmUga2V5XG4gICAgY29uc3QgSSA9IGF3YWl0ICgwLCBobWFjX3NoYTUxMl8xLmhtYWNfc2hhNTEyKShwYXJlbnQuY2hhaW5Db2RlLCBkYXRhKTtcbiAgICBjb25zdCBJTCA9IEkuc2xpY2UoMCwgMzIpO1xuICAgIGNvbnN0IElSID0gSS5zbGljZSgzMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBJTCxcbiAgICAgICAgY2hhaW5Db2RlOiBJUixcbiAgICB9O1xufVxuZXhwb3J0cy5kZXJpdmVNbmVtb25pY0hhcmRlbmVkS2V5ID0gZGVyaXZlTW5lbW9uaWNIYXJkZW5lZEtleTtcbmFzeW5jIGZ1bmN0aW9uIGRlcml2ZU1uZW1vbmljc1BhdGgoc2VlZCwgcGF0aCwgd29yZHNDb3VudCA9IDI0LCBwYXNzd29yZCkge1xuICAgIGxldCBzdGF0ZSA9IGF3YWl0IGdldE1uZW1vbmljc01hc3RlcktleUZyb21TZWVkKHNlZWQpO1xuICAgIGxldCByZW1haW5pbmcgPSBbLi4ucGF0aF07XG4gICAgd2hpbGUgKHJlbWFpbmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHJlbWFpbmluZ1swXTtcbiAgICAgICAgcmVtYWluaW5nID0gcmVtYWluaW5nLnNsaWNlKDEpO1xuICAgICAgICBzdGF0ZSA9IGF3YWl0IGRlcml2ZU1uZW1vbmljSGFyZGVuZWRLZXkoc3RhdGUsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0ICgwLCBtbmVtb25pY18xLm1uZW1vbmljRnJvbVJhbmRvbVNlZWQpKHN0YXRlLmtleSwgd29yZHNDb3VudCwgcGFzc3dvcmQpO1xufVxuZXhwb3J0cy5kZXJpdmVNbmVtb25pY3NQYXRoID0gZGVyaXZlTW5lbW9uaWNzUGF0aDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlcml2ZU1uZW1vbmljc1BhdGgiLCJkZXJpdmVNbmVtb25pY0hhcmRlbmVkS2V5IiwiZ2V0TW5lbW9uaWNzTWFzdGVyS2V5RnJvbVNlZWQiLCJtbmVtb25pY18xIiwicmVxdWlyZSIsImhtYWNfc2hhNTEyXzEiLCJIQVJERU5FRF9PRkZTRVQiLCJNTkVNT05JQ1NfU0VFRCIsInNlZWQiLCJJIiwiaG1hY19zaGE1MTIiLCJJTCIsInNsaWNlIiwiSVIiLCJrZXkiLCJjaGFpbkNvZGUiLCJwYXJlbnQiLCJpbmRleCIsIkVycm9yIiwiaW5kZXhCdWZmZXIiLCJCdWZmZXIiLCJhbGxvYyIsIndyaXRlVUludDMyQkUiLCJkYXRhIiwiY29uY2F0IiwicGF0aCIsIndvcmRzQ291bnQiLCJwYXNzd29yZCIsInN0YXRlIiwicmVtYWluaW5nIiwibGVuZ3RoIiwibW5lbW9uaWNGcm9tUmFuZG9tU2VlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/hd/mnemonics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/hd/symmetric.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/symmetric.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = void 0;\nconst hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\");\nconst SYMMETRIC_SEED = \"Symmetric key seed\";\nasync function getSymmetricMasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(SYMMETRIC_SEED, seed);\n    const IL = I.slice(32);\n    const IR = I.slice(0, 32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;\n;\nasync function deriveSymmetricHardenedKey(parent, offset) {\n    // Prepare data\n    const data = Buffer.concat([\n        Buffer.alloc(1, 0),\n        Buffer.from(offset)\n    ]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(32);\n    const IR = I.slice(0, 32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n}\nexports.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;\nasync function deriveSymmetricPath(seed, path) {\n    let state = await getSymmetricMasterKeyFromSeed(seed);\n    let remaining = [\n        ...path\n    ];\n    while(remaining.length > 0){\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveSymmetricHardenedKey(state, index);\n    }\n    return state.key;\n}\nexports.deriveSymmetricPath = deriveSymmetricPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9oZC9zeW1tZXRyaWMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSxrQ0FBa0MsR0FBR0EscUNBQXFDLEdBQUcsS0FBSztBQUNoSCxNQUFNSyxnQkFBZ0JDLG1CQUFPQSxDQUFDLGtHQUEyQjtBQUN6RCxNQUFNQyxpQkFBaUI7QUFDdkIsZUFBZUgsOEJBQThCSSxJQUFJO0lBQzdDLE1BQU1DLElBQUksTUFBTSxDQUFDLEdBQUdKLGNBQWNLLFdBQVcsRUFBRUgsZ0JBQWdCQztJQUMvRCxNQUFNRyxLQUFLRixFQUFFRyxLQUFLLENBQUM7SUFDbkIsTUFBTUMsS0FBS0osRUFBRUcsS0FBSyxDQUFDLEdBQUc7SUFDdEIsT0FBTztRQUNIRSxLQUFLSDtRQUNMSSxXQUFXRjtJQUNmO0FBQ0o7QUFDQWIscUNBQXFDLEdBQUdJOztBQUV4QyxlQUFlRCwyQkFBMkJhLE1BQU0sRUFBRUMsTUFBTTtJQUNwRCxlQUFlO0lBQ2YsTUFBTUMsT0FBT0MsT0FBT0MsTUFBTSxDQUFDO1FBQUNELE9BQU9FLEtBQUssQ0FBQyxHQUFHO1FBQUlGLE9BQU9HLElBQUksQ0FBQ0w7S0FBUTtJQUNwRSxhQUFhO0lBQ2IsTUFBTVIsSUFBSSxNQUFNLENBQUMsR0FBR0osY0FBY0ssV0FBVyxFQUFFTSxPQUFPRCxTQUFTLEVBQUVHO0lBQ2pFLE1BQU1QLEtBQUtGLEVBQUVHLEtBQUssQ0FBQztJQUNuQixNQUFNQyxLQUFLSixFQUFFRyxLQUFLLENBQUMsR0FBRztJQUN0QixPQUFPO1FBQ0hFLEtBQUtIO1FBQ0xJLFdBQVdGO0lBQ2Y7QUFDSjtBQUNBYixrQ0FBa0MsR0FBR0c7QUFDckMsZUFBZUQsb0JBQW9CTSxJQUFJLEVBQUVlLElBQUk7SUFDekMsSUFBSUMsUUFBUSxNQUFNcEIsOEJBQThCSTtJQUNoRCxJQUFJaUIsWUFBWTtXQUFJRjtLQUFLO0lBQ3pCLE1BQU9FLFVBQVVDLE1BQU0sR0FBRyxFQUFHO1FBQ3pCLElBQUlDLFFBQVFGLFNBQVMsQ0FBQyxFQUFFO1FBQ3hCQSxZQUFZQSxVQUFVYixLQUFLLENBQUM7UUFDNUJZLFFBQVEsTUFBTXJCLDJCQUEyQnFCLE9BQU9HO0lBQ3BEO0lBQ0EsT0FBT0gsTUFBTVYsR0FBRztBQUNwQjtBQUNBZCwyQkFBMkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY3J5cHRvL2Rpc3QvaGQvc3ltbWV0cmljLmpzPzg3ODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlcml2ZVN5bW1ldHJpY1BhdGggPSBleHBvcnRzLmRlcml2ZVN5bW1ldHJpY0hhcmRlbmVkS2V5ID0gZXhwb3J0cy5nZXRTeW1tZXRyaWNNYXN0ZXJLZXlGcm9tU2VlZCA9IHZvaWQgMDtcbmNvbnN0IGhtYWNfc2hhNTEyXzEgPSByZXF1aXJlKFwiLi4vcHJpbWl0aXZlcy9obWFjX3NoYTUxMlwiKTtcbmNvbnN0IFNZTU1FVFJJQ19TRUVEID0gJ1N5bW1ldHJpYyBrZXkgc2VlZCc7XG5hc3luYyBmdW5jdGlvbiBnZXRTeW1tZXRyaWNNYXN0ZXJLZXlGcm9tU2VlZChzZWVkKSB7XG4gICAgY29uc3QgSSA9IGF3YWl0ICgwLCBobWFjX3NoYTUxMl8xLmhtYWNfc2hhNTEyKShTWU1NRVRSSUNfU0VFRCwgc2VlZCk7XG4gICAgY29uc3QgSUwgPSBJLnNsaWNlKDMyKTtcbiAgICBjb25zdCBJUiA9IEkuc2xpY2UoMCwgMzIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGtleTogSUwsXG4gICAgICAgIGNoYWluQ29kZTogSVIsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0U3ltbWV0cmljTWFzdGVyS2V5RnJvbVNlZWQgPSBnZXRTeW1tZXRyaWNNYXN0ZXJLZXlGcm9tU2VlZDtcbjtcbmFzeW5jIGZ1bmN0aW9uIGRlcml2ZVN5bW1ldHJpY0hhcmRlbmVkS2V5KHBhcmVudCwgb2Zmc2V0KSB7XG4gICAgLy8gUHJlcGFyZSBkYXRhXG4gICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxLCAwKSwgQnVmZmVyLmZyb20ob2Zmc2V0KV0pO1xuICAgIC8vIERlcml2ZSBrZXlcbiAgICBjb25zdCBJID0gYXdhaXQgKDAsIGhtYWNfc2hhNTEyXzEuaG1hY19zaGE1MTIpKHBhcmVudC5jaGFpbkNvZGUsIGRhdGEpO1xuICAgIGNvbnN0IElMID0gSS5zbGljZSgzMik7XG4gICAgY29uc3QgSVIgPSBJLnNsaWNlKDAsIDMyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IElMLFxuICAgICAgICBjaGFpbkNvZGU6IElSLFxuICAgIH07XG59XG5leHBvcnRzLmRlcml2ZVN5bW1ldHJpY0hhcmRlbmVkS2V5ID0gZGVyaXZlU3ltbWV0cmljSGFyZGVuZWRLZXk7XG5hc3luYyBmdW5jdGlvbiBkZXJpdmVTeW1tZXRyaWNQYXRoKHNlZWQsIHBhdGgpIHtcbiAgICBsZXQgc3RhdGUgPSBhd2FpdCBnZXRTeW1tZXRyaWNNYXN0ZXJLZXlGcm9tU2VlZChzZWVkKTtcbiAgICBsZXQgcmVtYWluaW5nID0gWy4uLnBhdGhdO1xuICAgIHdoaWxlIChyZW1haW5pbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgaW5kZXggPSByZW1haW5pbmdbMF07XG4gICAgICAgIHJlbWFpbmluZyA9IHJlbWFpbmluZy5zbGljZSgxKTtcbiAgICAgICAgc3RhdGUgPSBhd2FpdCBkZXJpdmVTeW1tZXRyaWNIYXJkZW5lZEtleShzdGF0ZSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUua2V5O1xufVxuZXhwb3J0cy5kZXJpdmVTeW1tZXRyaWNQYXRoID0gZGVyaXZlU3ltbWV0cmljUGF0aDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlcml2ZVN5bW1ldHJpY1BhdGgiLCJkZXJpdmVTeW1tZXRyaWNIYXJkZW5lZEtleSIsImdldFN5bW1ldHJpY01hc3RlcktleUZyb21TZWVkIiwiaG1hY19zaGE1MTJfMSIsInJlcXVpcmUiLCJTWU1NRVRSSUNfU0VFRCIsInNlZWQiLCJJIiwiaG1hY19zaGE1MTIiLCJJTCIsInNsaWNlIiwiSVIiLCJrZXkiLCJjaGFpbkNvZGUiLCJwYXJlbnQiLCJvZmZzZXQiLCJkYXRhIiwiQnVmZmVyIiwiY29uY2F0IiwiYWxsb2MiLCJmcm9tIiwicGF0aCIsInN0YXRlIiwicmVtYWluaW5nIiwibGVuZ3RoIiwiaW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/hd/symmetric.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMnemonicsMasterKeyFromSeed = exports.deriveMnemonicHardenedKey = exports.deriveMnemonicsPath = exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = exports.signVerify = exports.sign = exports.keyPairFromSecretKey = exports.keyPairFromSeed = exports.openBox = exports.sealBox = exports.mnemonicWordList = exports.mnemonicToHDSeed = exports.mnemonicToSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicValidate = exports.mnemonicNew = exports.newSecurePassphrase = exports.newSecureWords = exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = exports.hmac_sha512 = exports.pbkdf2_sha512 = exports.sha512_sync = exports.sha512 = exports.sha256_sync = exports.sha256 = void 0;\nvar sha256_1 = __webpack_require__(/*! ./primitives/sha256 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/sha256.js\");\nObject.defineProperty(exports, \"sha256\", ({\n    enumerable: true,\n    get: function() {\n        return sha256_1.sha256;\n    }\n}));\nObject.defineProperty(exports, \"sha256_sync\", ({\n    enumerable: true,\n    get: function() {\n        return sha256_1.sha256_sync;\n    }\n}));\nvar sha512_1 = __webpack_require__(/*! ./primitives/sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/sha512.js\");\nObject.defineProperty(exports, \"sha512\", ({\n    enumerable: true,\n    get: function() {\n        return sha512_1.sha512;\n    }\n}));\nObject.defineProperty(exports, \"sha512_sync\", ({\n    enumerable: true,\n    get: function() {\n        return sha512_1.sha512_sync;\n    }\n}));\nvar pbkdf2_sha512_1 = __webpack_require__(/*! ./primitives/pbkdf2_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js\");\nObject.defineProperty(exports, \"pbkdf2_sha512\", ({\n    enumerable: true,\n    get: function() {\n        return pbkdf2_sha512_1.pbkdf2_sha512;\n    }\n}));\nvar hmac_sha512_1 = __webpack_require__(/*! ./primitives/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\");\nObject.defineProperty(exports, \"hmac_sha512\", ({\n    enumerable: true,\n    get: function() {\n        return hmac_sha512_1.hmac_sha512;\n    }\n}));\nvar getSecureRandom_1 = __webpack_require__(/*! ./primitives/getSecureRandom */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js\");\nObject.defineProperty(exports, \"getSecureRandomBytes\", ({\n    enumerable: true,\n    get: function() {\n        return getSecureRandom_1.getSecureRandomBytes;\n    }\n}));\nObject.defineProperty(exports, \"getSecureRandomWords\", ({\n    enumerable: true,\n    get: function() {\n        return getSecureRandom_1.getSecureRandomWords;\n    }\n}));\nObject.defineProperty(exports, \"getSecureRandomNumber\", ({\n    enumerable: true,\n    get: function() {\n        return getSecureRandom_1.getSecureRandomNumber;\n    }\n}));\nvar newSecureWords_1 = __webpack_require__(/*! ./passwords/newSecureWords */ \"(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecureWords.js\");\nObject.defineProperty(exports, \"newSecureWords\", ({\n    enumerable: true,\n    get: function() {\n        return newSecureWords_1.newSecureWords;\n    }\n}));\nvar newSecurePassphrase_1 = __webpack_require__(/*! ./passwords/newSecurePassphrase */ \"(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js\");\nObject.defineProperty(exports, \"newSecurePassphrase\", ({\n    enumerable: true,\n    get: function() {\n        return newSecurePassphrase_1.newSecurePassphrase;\n    }\n}));\nvar mnemonic_1 = __webpack_require__(/*! ./mnemonic/mnemonic */ \"(ssr)/./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js\");\nObject.defineProperty(exports, \"mnemonicNew\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicNew;\n    }\n}));\nObject.defineProperty(exports, \"mnemonicValidate\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicValidate;\n    }\n}));\nObject.defineProperty(exports, \"mnemonicToPrivateKey\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicToPrivateKey;\n    }\n}));\nObject.defineProperty(exports, \"mnemonicToWalletKey\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicToWalletKey;\n    }\n}));\nObject.defineProperty(exports, \"mnemonicToSeed\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicToSeed;\n    }\n}));\nObject.defineProperty(exports, \"mnemonicToHDSeed\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_1.mnemonicToHDSeed;\n    }\n}));\nvar wordlist_1 = __webpack_require__(/*! ./mnemonic/wordlist */ \"(ssr)/./node_modules/@ton/crypto/dist/mnemonic/wordlist.js\");\nObject.defineProperty(exports, \"mnemonicWordList\", ({\n    enumerable: true,\n    get: function() {\n        return wordlist_1.wordlist;\n    }\n}));\nvar nacl_1 = __webpack_require__(/*! ./primitives/nacl */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/nacl.js\");\nObject.defineProperty(exports, \"sealBox\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_1.sealBox;\n    }\n}));\nObject.defineProperty(exports, \"openBox\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_1.openBox;\n    }\n}));\nvar nacl_2 = __webpack_require__(/*! ./primitives/nacl */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/nacl.js\");\nObject.defineProperty(exports, \"keyPairFromSeed\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_2.keyPairFromSeed;\n    }\n}));\nObject.defineProperty(exports, \"keyPairFromSecretKey\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_2.keyPairFromSecretKey;\n    }\n}));\nObject.defineProperty(exports, \"sign\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_2.sign;\n    }\n}));\nObject.defineProperty(exports, \"signVerify\", ({\n    enumerable: true,\n    get: function() {\n        return nacl_2.signVerify;\n    }\n}));\nvar ed25519_1 = __webpack_require__(/*! ./hd/ed25519 */ \"(ssr)/./node_modules/@ton/crypto/dist/hd/ed25519.js\");\nObject.defineProperty(exports, \"getED25519MasterKeyFromSeed\", ({\n    enumerable: true,\n    get: function() {\n        return ed25519_1.getED25519MasterKeyFromSeed;\n    }\n}));\nObject.defineProperty(exports, \"deriveED25519HardenedKey\", ({\n    enumerable: true,\n    get: function() {\n        return ed25519_1.deriveED25519HardenedKey;\n    }\n}));\nObject.defineProperty(exports, \"deriveEd25519Path\", ({\n    enumerable: true,\n    get: function() {\n        return ed25519_1.deriveEd25519Path;\n    }\n}));\nvar symmetric_1 = __webpack_require__(/*! ./hd/symmetric */ \"(ssr)/./node_modules/@ton/crypto/dist/hd/symmetric.js\");\nObject.defineProperty(exports, \"getSymmetricMasterKeyFromSeed\", ({\n    enumerable: true,\n    get: function() {\n        return symmetric_1.getSymmetricMasterKeyFromSeed;\n    }\n}));\nObject.defineProperty(exports, \"deriveSymmetricHardenedKey\", ({\n    enumerable: true,\n    get: function() {\n        return symmetric_1.deriveSymmetricHardenedKey;\n    }\n}));\nObject.defineProperty(exports, \"deriveSymmetricPath\", ({\n    enumerable: true,\n    get: function() {\n        return symmetric_1.deriveSymmetricPath;\n    }\n}));\nvar mnemonics_1 = __webpack_require__(/*! ./hd/mnemonics */ \"(ssr)/./node_modules/@ton/crypto/dist/hd/mnemonics.js\");\nObject.defineProperty(exports, \"deriveMnemonicsPath\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonics_1.deriveMnemonicsPath;\n    }\n}));\nObject.defineProperty(exports, \"deriveMnemonicHardenedKey\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonics_1.deriveMnemonicHardenedKey;\n    }\n}));\nObject.defineProperty(exports, \"getMnemonicsMasterKeyFromSeed\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonics_1.getMnemonicsMasterKeyFromSeed;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.mnemonicFromRandomSeed = exports.mnemonicIndexesToBytes = exports.bytesToMnemonics = exports.bytesToMnemonicIndexes = exports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToHDSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;\nconst tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nconst getSecureRandom_1 = __webpack_require__(/*! ../primitives/getSecureRandom */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js\");\nconst hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\");\nconst pbkdf2_sha512_1 = __webpack_require__(/*! ../primitives/pbkdf2_sha512 */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js\");\nconst binary_1 = __webpack_require__(/*! ../utils/binary */ \"(ssr)/./node_modules/@ton/crypto/dist/utils/binary.js\");\nconst wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/@ton/crypto/dist/mnemonic/wordlist.js\");\nconst PBKDF_ITERATIONS = 100000;\nasync function isPasswordNeeded(mnemonicArray) {\n    const passlessEntropy = await mnemonicToEntropy(mnemonicArray);\n    return await isPasswordSeed(passlessEntropy) && !await isBasicSeed(passlessEntropy);\n}\nfunction normalizeMnemonic(src) {\n    return src.map((v)=>v.toLowerCase().trim());\n}\nasync function isBasicSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68\n    // bool Mnemonic::is_basic_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON seed version\", td::max(1, PBKDF_ITERATIONS / 256),\n    //                     hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 0;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, \"TON seed version\", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);\n    return seed[0] == 0;\n}\nasync function isPasswordSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75\n    // bool Mnemonic::is_password_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON fast seed version\", 1, hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 1;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, \"TON fast seed version\", 1, 64);\n    return seed[0] == 1;\n}\nasync function mnemonicToEntropy(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52\n    // td::SecureString Mnemonic::to_entropy() const {\n    //   td::SecureString res(64);\n    //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());\n    //   return res;\n    // }\n    return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(\" \"), password && password.length > 0 ? password : \"\");\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nasync function mnemonicToSeed(mnemonicArray, seed, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58\n    // td::SecureString Mnemonic::to_seed() const {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON default seed\", PBKDF_ITERATIONS, hash.as_mutable_slice());\n    //   return hash;\n    // }\n    const entropy = await mnemonicToEntropy(mnemonicArray, password);\n    return await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Extract private key from mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */ async function mnemonicToPrivateKey(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64\n    // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {\n    //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));\n    // }\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    const seed = await mnemonicToSeed(mnemonicArray, \"TON default seed\", password);\n    let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed.slice(0, 32));\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToPrivateKey = mnemonicToPrivateKey;\n/**\n * Convert mnemonic to wallet key pair\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */ async function mnemonicToWalletKey(mnemonicArray, password) {\n    let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);\n    let seedSecret = seedPk.secretKey.slice(0, 32);\n    const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToWalletKey = mnemonicToWalletKey;\n/**\n * Convert mnemonics to HD seed\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns 64 byte seed\n */ async function mnemonicToHDSeed(mnemonicArray, password) {\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    return await mnemonicToSeed(mnemonicArray, \"TON HD Keys seed\", password);\n}\nexports.mnemonicToHDSeed = mnemonicToHDSeed;\n/**\n * Validate Mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns true for valid mnemonic\n */ async function mnemonicValidate(mnemonicArray, password) {\n    // Normalize\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    // Validate mnemonic words\n    for (let word of mnemonicArray){\n        if (wordlist_1.wordlist.indexOf(word) < 0) {\n            return false;\n        }\n    }\n    // Check password\n    if (password && password.length > 0) {\n        if (!await isPasswordNeeded(mnemonicArray)) {\n            return false;\n        }\n    }\n    // Validate seed\n    return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));\n}\nexports.mnemonicValidate = mnemonicValidate;\n/**\n * Generate new Mnemonic\n * @param wordsCount number of words to generate\n * @param password mnemonic password\n * @returns\n */ async function mnemonicNew(wordsCount = 24, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159\n    let mnemonicArray = [];\n    while(true){\n        // Regenerate new mnemonics\n        mnemonicArray = [];\n        for(let i = 0; i < wordsCount; i++){\n            let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);\n            mnemonicArray.push(wordlist_1.wordlist[ind]);\n        }\n        // Chek password conformance\n        if (password && password.length > 0) {\n            if (!await isPasswordNeeded(mnemonicArray)) {\n                continue;\n            }\n        }\n        // Check if basic seed correct\n        if (!await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password))) {\n            continue;\n        }\n        break;\n    }\n    return mnemonicArray;\n}\nexports.mnemonicNew = mnemonicNew;\n/**\n * Converts bytes to mnemonics array (could be invalid for TON)\n * @param src source buffer\n * @param wordsCount number of words\n */ function bytesToMnemonicIndexes(src, wordsCount) {\n    let bits = (0, binary_1.bytesToBits)(src);\n    let indexes = [];\n    for(let i = 0; i < wordsCount; i++){\n        let sl = bits.slice(i * 11, i * 11 + 11);\n        indexes.push(parseInt(sl, 2));\n    }\n    return indexes;\n}\nexports.bytesToMnemonicIndexes = bytesToMnemonicIndexes;\nfunction bytesToMnemonics(src, wordsCount) {\n    let mnemonics = bytesToMnemonicIndexes(src, wordsCount);\n    let res = [];\n    for (let m of mnemonics){\n        res.push(wordlist_1.wordlist[m]);\n    }\n    return res;\n}\nexports.bytesToMnemonics = bytesToMnemonics;\n/**\n * Converts mnemonics indexes to buffer with zero padding in the end\n * @param src source indexes\n * @returns Buffer\n */ function mnemonicIndexesToBytes(src) {\n    let res = \"\";\n    for (let s of src){\n        if (!Number.isSafeInteger(s)) {\n            throw Error(\"Invalid input\");\n        }\n        if (s < 0 || s >= 2028) {\n            throw Error(\"Invalid input\");\n        }\n        res += (0, binary_1.lpad)(s.toString(2), \"0\", 11);\n    }\n    while(res.length % 8 !== 0){\n        res = res + \"0\";\n    }\n    return (0, binary_1.bitsToBytes)(res);\n}\nexports.mnemonicIndexesToBytes = mnemonicIndexesToBytes;\n/**\n * Generates deterministically mnemonics\n * @param seed\n * @param wordsCount\n * @param password\n */ async function mnemonicFromRandomSeed(seed, wordsCount = 24, password) {\n    const bytesLength = Math.ceil(wordsCount * 11 / 8);\n    let currentSeed = seed;\n    while(true){\n        // Create entropy\n        let entropy = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(currentSeed, \"TON mnemonic seed\", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength);\n        // Create mnemonics\n        let mnemonics = bytesToMnemonics(entropy, wordsCount);\n        // Check if mnemonics are valid\n        if (await mnemonicValidate(mnemonics, password)) {\n            return mnemonics;\n        }\n        currentSeed = entropy;\n    }\n}\nexports.mnemonicFromRandomSeed = mnemonicFromRandomSeed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/mnemonic/wordlist.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/mnemonic/wordlist.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wordlist = void 0;\nconst EN = [\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\"\n];\nexports.wordlist = EN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/mnemonic/wordlist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.newSecurePassphrase = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nasync function newSecurePassphrase(size = 6) {\n    return (await (0, __1.newSecureWords)(size)).join(\"-\");\n}\nexports.newSecurePassphrase = newSecurePassphrase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wYXNzd29yZHMvbmV3U2VjdXJlUGFzc3BocmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxNQUFNRyxNQUFNQyxtQkFBT0EsQ0FBQywwREFBSTtBQUN4QixlQUFlRixvQkFBb0JHLE9BQU8sQ0FBQztJQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUdGLElBQUlHLGNBQWMsRUFBRUQsS0FBSSxFQUFHRSxJQUFJLENBQUM7QUFDdEQ7QUFDQVAsMkJBQTJCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by9kaXN0L3Bhc3N3b3Jkcy9uZXdTZWN1cmVQYXNzcGhyYXNlLmpzPzBmODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5ld1NlY3VyZVBhc3NwaHJhc2UgPSB2b2lkIDA7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG5hc3luYyBmdW5jdGlvbiBuZXdTZWN1cmVQYXNzcGhyYXNlKHNpemUgPSA2KSB7XG4gICAgcmV0dXJuIChhd2FpdCAoMCwgX18xLm5ld1NlY3VyZVdvcmRzKShzaXplKSkuam9pbignLScpO1xufVxuZXhwb3J0cy5uZXdTZWN1cmVQYXNzcGhyYXNlID0gbmV3U2VjdXJlUGFzc3BocmFzZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5ld1NlY3VyZVBhc3NwaHJhc2UiLCJfXzEiLCJyZXF1aXJlIiwic2l6ZSIsIm5ld1NlY3VyZVdvcmRzIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecureWords.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/newSecureWords.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.newSecureWords = void 0;\nconst getSecureRandom_1 = __webpack_require__(/*! ../primitives/getSecureRandom */ \"(ssr)/./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js\");\nconst wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/@ton/crypto/dist/passwords/wordlist.js\");\nasync function newSecureWords(size = 6) {\n    let words = [];\n    for(let i = 0; i < size; i++){\n        words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);\n    }\n    return words;\n}\nexports.newSecureWords = newSecureWords;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wYXNzd29yZHMvbmV3U2VjdXJlV29yZHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsb0JBQW9CQyxtQkFBT0EsQ0FBQywwR0FBK0I7QUFDakUsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsK0VBQVk7QUFDdkMsZUFBZUYsZUFBZUksT0FBTyxDQUFDO0lBQ2xDLElBQUlDLFFBQVEsRUFBRTtJQUNkLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixNQUFNRSxJQUFLO1FBQzNCRCxNQUFNRSxJQUFJLENBQUNKLFdBQVdLLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBR1Asa0JBQWtCUSxxQkFBcUIsRUFBRSxHQUFHTixXQUFXSyxRQUFRLENBQUNFLE1BQU0sRUFBRTtJQUNySDtJQUNBLE9BQU9MO0FBQ1g7QUFDQVAsc0JBQXNCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by9kaXN0L3Bhc3N3b3Jkcy9uZXdTZWN1cmVXb3Jkcy5qcz82YTMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZXdTZWN1cmVXb3JkcyA9IHZvaWQgMDtcbmNvbnN0IGdldFNlY3VyZVJhbmRvbV8xID0gcmVxdWlyZShcIi4uL3ByaW1pdGl2ZXMvZ2V0U2VjdXJlUmFuZG9tXCIpO1xuY29uc3Qgd29yZGxpc3RfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0XCIpO1xuYXN5bmMgZnVuY3Rpb24gbmV3U2VjdXJlV29yZHMoc2l6ZSA9IDYpIHtcbiAgICBsZXQgd29yZHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICB3b3Jkcy5wdXNoKHdvcmRsaXN0XzEud29yZGxpc3RbYXdhaXQgKDAsIGdldFNlY3VyZVJhbmRvbV8xLmdldFNlY3VyZVJhbmRvbU51bWJlcikoMCwgd29yZGxpc3RfMS53b3JkbGlzdC5sZW5ndGgpXSk7XG4gICAgfVxuICAgIHJldHVybiB3b3Jkcztcbn1cbmV4cG9ydHMubmV3U2VjdXJlV29yZHMgPSBuZXdTZWN1cmVXb3JkcztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5ld1NlY3VyZVdvcmRzIiwiZ2V0U2VjdXJlUmFuZG9tXzEiLCJyZXF1aXJlIiwid29yZGxpc3RfMSIsInNpemUiLCJ3b3JkcyIsImkiLCJwdXNoIiwid29yZGxpc3QiLCJnZXRTZWN1cmVSYW5kb21OdW1iZXIiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/passwords/newSecureWords.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/passwords/wordlist.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/wordlist.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wordlist = void 0;\n// Source https://www.eff.org/dice\nexports.wordlist = [\n    \"abacus\",\n    \"abdomen\",\n    \"abdominal\",\n    \"abide\",\n    \"abiding\",\n    \"ability\",\n    \"ablaze\",\n    \"able\",\n    \"abnormal\",\n    \"abrasion\",\n    \"abrasive\",\n    \"abreast\",\n    \"abridge\",\n    \"abroad\",\n    \"abruptly\",\n    \"absence\",\n    \"absentee\",\n    \"absently\",\n    \"absinthe\",\n    \"absolute\",\n    \"absolve\",\n    \"abstain\",\n    \"abstract\",\n    \"absurd\",\n    \"accent\",\n    \"acclaim\",\n    \"acclimate\",\n    \"accompany\",\n    \"account\",\n    \"accuracy\",\n    \"accurate\",\n    \"accustom\",\n    \"acetone\",\n    \"achiness\",\n    \"aching\",\n    \"acid\",\n    \"acorn\",\n    \"acquaint\",\n    \"acquire\",\n    \"acre\",\n    \"acrobat\",\n    \"acronym\",\n    \"acting\",\n    \"action\",\n    \"activate\",\n    \"activator\",\n    \"active\",\n    \"activism\",\n    \"activist\",\n    \"activity\",\n    \"actress\",\n    \"acts\",\n    \"acutely\",\n    \"acuteness\",\n    \"aeration\",\n    \"aerobics\",\n    \"aerosol\",\n    \"aerospace\",\n    \"afar\",\n    \"affair\",\n    \"affected\",\n    \"affecting\",\n    \"affection\",\n    \"affidavit\",\n    \"affiliate\",\n    \"affirm\",\n    \"affix\",\n    \"afflicted\",\n    \"affluent\",\n    \"afford\",\n    \"affront\",\n    \"aflame\",\n    \"afloat\",\n    \"aflutter\",\n    \"afoot\",\n    \"afraid\",\n    \"afterglow\",\n    \"afterlife\",\n    \"aftermath\",\n    \"aftermost\",\n    \"afternoon\",\n    \"aged\",\n    \"ageless\",\n    \"agency\",\n    \"agenda\",\n    \"agent\",\n    \"aggregate\",\n    \"aghast\",\n    \"agile\",\n    \"agility\",\n    \"aging\",\n    \"agnostic\",\n    \"agonize\",\n    \"agonizing\",\n    \"agony\",\n    \"agreeable\",\n    \"agreeably\",\n    \"agreed\",\n    \"agreeing\",\n    \"agreement\",\n    \"aground\",\n    \"ahead\",\n    \"ahoy\",\n    \"aide\",\n    \"aids\",\n    \"aim\",\n    \"ajar\",\n    \"alabaster\",\n    \"alarm\",\n    \"albatross\",\n    \"album\",\n    \"alfalfa\",\n    \"algebra\",\n    \"algorithm\",\n    \"alias\",\n    \"alibi\",\n    \"alienable\",\n    \"alienate\",\n    \"aliens\",\n    \"alike\",\n    \"alive\",\n    \"alkaline\",\n    \"alkalize\",\n    \"almanac\",\n    \"almighty\",\n    \"almost\",\n    \"aloe\",\n    \"aloft\",\n    \"aloha\",\n    \"alone\",\n    \"alongside\",\n    \"aloof\",\n    \"alphabet\",\n    \"alright\",\n    \"although\",\n    \"altitude\",\n    \"alto\",\n    \"aluminum\",\n    \"alumni\",\n    \"always\",\n    \"amaretto\",\n    \"amaze\",\n    \"amazingly\",\n    \"amber\",\n    \"ambiance\",\n    \"ambiguity\",\n    \"ambiguous\",\n    \"ambition\",\n    \"ambitious\",\n    \"ambulance\",\n    \"ambush\",\n    \"amendable\",\n    \"amendment\",\n    \"amends\",\n    \"amenity\",\n    \"amiable\",\n    \"amicably\",\n    \"amid\",\n    \"amigo\",\n    \"amino\",\n    \"amiss\",\n    \"ammonia\",\n    \"ammonium\",\n    \"amnesty\",\n    \"amniotic\",\n    \"among\",\n    \"amount\",\n    \"amperage\",\n    \"ample\",\n    \"amplifier\",\n    \"amplify\",\n    \"amply\",\n    \"amuck\",\n    \"amulet\",\n    \"amusable\",\n    \"amused\",\n    \"amusement\",\n    \"amuser\",\n    \"amusing\",\n    \"anaconda\",\n    \"anaerobic\",\n    \"anagram\",\n    \"anatomist\",\n    \"anatomy\",\n    \"anchor\",\n    \"anchovy\",\n    \"ancient\",\n    \"android\",\n    \"anemia\",\n    \"anemic\",\n    \"aneurism\",\n    \"anew\",\n    \"angelfish\",\n    \"angelic\",\n    \"anger\",\n    \"angled\",\n    \"angler\",\n    \"angles\",\n    \"angling\",\n    \"angrily\",\n    \"angriness\",\n    \"anguished\",\n    \"angular\",\n    \"animal\",\n    \"animate\",\n    \"animating\",\n    \"animation\",\n    \"animator\",\n    \"anime\",\n    \"animosity\",\n    \"ankle\",\n    \"annex\",\n    \"annotate\",\n    \"announcer\",\n    \"annoying\",\n    \"annually\",\n    \"annuity\",\n    \"anointer\",\n    \"another\",\n    \"answering\",\n    \"antacid\",\n    \"antarctic\",\n    \"anteater\",\n    \"antelope\",\n    \"antennae\",\n    \"anthem\",\n    \"anthill\",\n    \"anthology\",\n    \"antibody\",\n    \"antics\",\n    \"antidote\",\n    \"antihero\",\n    \"antiquely\",\n    \"antiques\",\n    \"antiquity\",\n    \"antirust\",\n    \"antitoxic\",\n    \"antitrust\",\n    \"antiviral\",\n    \"antivirus\",\n    \"antler\",\n    \"antonym\",\n    \"antsy\",\n    \"anvil\",\n    \"anybody\",\n    \"anyhow\",\n    \"anymore\",\n    \"anyone\",\n    \"anyplace\",\n    \"anything\",\n    \"anytime\",\n    \"anyway\",\n    \"anywhere\",\n    \"aorta\",\n    \"apache\",\n    \"apostle\",\n    \"appealing\",\n    \"appear\",\n    \"appease\",\n    \"appeasing\",\n    \"appendage\",\n    \"appendix\",\n    \"appetite\",\n    \"appetizer\",\n    \"applaud\",\n    \"applause\",\n    \"apple\",\n    \"appliance\",\n    \"applicant\",\n    \"applied\",\n    \"apply\",\n    \"appointee\",\n    \"appraisal\",\n    \"appraiser\",\n    \"apprehend\",\n    \"approach\",\n    \"approval\",\n    \"approve\",\n    \"apricot\",\n    \"april\",\n    \"apron\",\n    \"aptitude\",\n    \"aptly\",\n    \"aqua\",\n    \"aqueduct\",\n    \"arbitrary\",\n    \"arbitrate\",\n    \"ardently\",\n    \"area\",\n    \"arena\",\n    \"arguable\",\n    \"arguably\",\n    \"argue\",\n    \"arise\",\n    \"armadillo\",\n    \"armband\",\n    \"armchair\",\n    \"armed\",\n    \"armful\",\n    \"armhole\",\n    \"arming\",\n    \"armless\",\n    \"armoire\",\n    \"armored\",\n    \"armory\",\n    \"armrest\",\n    \"army\",\n    \"aroma\",\n    \"arose\",\n    \"around\",\n    \"arousal\",\n    \"arrange\",\n    \"array\",\n    \"arrest\",\n    \"arrival\",\n    \"arrive\",\n    \"arrogance\",\n    \"arrogant\",\n    \"arson\",\n    \"art\",\n    \"ascend\",\n    \"ascension\",\n    \"ascent\",\n    \"ascertain\",\n    \"ashamed\",\n    \"ashen\",\n    \"ashes\",\n    \"ashy\",\n    \"aside\",\n    \"askew\",\n    \"asleep\",\n    \"asparagus\",\n    \"aspect\",\n    \"aspirate\",\n    \"aspire\",\n    \"aspirin\",\n    \"astonish\",\n    \"astound\",\n    \"astride\",\n    \"astrology\",\n    \"astronaut\",\n    \"astronomy\",\n    \"astute\",\n    \"atlantic\",\n    \"atlas\",\n    \"atom\",\n    \"atonable\",\n    \"atop\",\n    \"atrium\",\n    \"atrocious\",\n    \"atrophy\",\n    \"attach\",\n    \"attain\",\n    \"attempt\",\n    \"attendant\",\n    \"attendee\",\n    \"attention\",\n    \"attentive\",\n    \"attest\",\n    \"attic\",\n    \"attire\",\n    \"attitude\",\n    \"attractor\",\n    \"attribute\",\n    \"atypical\",\n    \"auction\",\n    \"audacious\",\n    \"audacity\",\n    \"audible\",\n    \"audibly\",\n    \"audience\",\n    \"audio\",\n    \"audition\",\n    \"augmented\",\n    \"august\",\n    \"authentic\",\n    \"author\",\n    \"autism\",\n    \"autistic\",\n    \"autograph\",\n    \"automaker\",\n    \"automated\",\n    \"automatic\",\n    \"autopilot\",\n    \"available\",\n    \"avalanche\",\n    \"avatar\",\n    \"avenge\",\n    \"avenging\",\n    \"avenue\",\n    \"average\",\n    \"aversion\",\n    \"avert\",\n    \"aviation\",\n    \"aviator\",\n    \"avid\",\n    \"avoid\",\n    \"await\",\n    \"awaken\",\n    \"award\",\n    \"aware\",\n    \"awhile\",\n    \"awkward\",\n    \"awning\",\n    \"awoke\",\n    \"awry\",\n    \"axis\",\n    \"babble\",\n    \"babbling\",\n    \"babied\",\n    \"baboon\",\n    \"backache\",\n    \"backboard\",\n    \"backboned\",\n    \"backdrop\",\n    \"backed\",\n    \"backer\",\n    \"backfield\",\n    \"backfire\",\n    \"backhand\",\n    \"backing\",\n    \"backlands\",\n    \"backlash\",\n    \"backless\",\n    \"backlight\",\n    \"backlit\",\n    \"backlog\",\n    \"backpack\",\n    \"backpedal\",\n    \"backrest\",\n    \"backroom\",\n    \"backshift\",\n    \"backside\",\n    \"backslid\",\n    \"backspace\",\n    \"backspin\",\n    \"backstab\",\n    \"backstage\",\n    \"backtalk\",\n    \"backtrack\",\n    \"backup\",\n    \"backward\",\n    \"backwash\",\n    \"backwater\",\n    \"backyard\",\n    \"bacon\",\n    \"bacteria\",\n    \"bacterium\",\n    \"badass\",\n    \"badge\",\n    \"badland\",\n    \"badly\",\n    \"badness\",\n    \"baffle\",\n    \"baffling\",\n    \"bagel\",\n    \"bagful\",\n    \"baggage\",\n    \"bagged\",\n    \"baggie\",\n    \"bagginess\",\n    \"bagging\",\n    \"baggy\",\n    \"bagpipe\",\n    \"baguette\",\n    \"baked\",\n    \"bakery\",\n    \"bakeshop\",\n    \"baking\",\n    \"balance\",\n    \"balancing\",\n    \"balcony\",\n    \"balmy\",\n    \"balsamic\",\n    \"bamboo\",\n    \"banana\",\n    \"banish\",\n    \"banister\",\n    \"banjo\",\n    \"bankable\",\n    \"bankbook\",\n    \"banked\",\n    \"banker\",\n    \"banking\",\n    \"banknote\",\n    \"bankroll\",\n    \"banner\",\n    \"bannister\",\n    \"banshee\",\n    \"banter\",\n    \"barbecue\",\n    \"barbed\",\n    \"barbell\",\n    \"barber\",\n    \"barcode\",\n    \"barge\",\n    \"bargraph\",\n    \"barista\",\n    \"baritone\",\n    \"barley\",\n    \"barmaid\",\n    \"barman\",\n    \"barn\",\n    \"barometer\",\n    \"barrack\",\n    \"barracuda\",\n    \"barrel\",\n    \"barrette\",\n    \"barricade\",\n    \"barrier\",\n    \"barstool\",\n    \"bartender\",\n    \"barterer\",\n    \"bash\",\n    \"basically\",\n    \"basics\",\n    \"basil\",\n    \"basin\",\n    \"basis\",\n    \"basket\",\n    \"batboy\",\n    \"batch\",\n    \"bath\",\n    \"baton\",\n    \"bats\",\n    \"battalion\",\n    \"battered\",\n    \"battering\",\n    \"battery\",\n    \"batting\",\n    \"battle\",\n    \"bauble\",\n    \"bazooka\",\n    \"blabber\",\n    \"bladder\",\n    \"blade\",\n    \"blah\",\n    \"blame\",\n    \"blaming\",\n    \"blanching\",\n    \"blandness\",\n    \"blank\",\n    \"blaspheme\",\n    \"blasphemy\",\n    \"blast\",\n    \"blatancy\",\n    \"blatantly\",\n    \"blazer\",\n    \"blazing\",\n    \"bleach\",\n    \"bleak\",\n    \"bleep\",\n    \"blemish\",\n    \"blend\",\n    \"bless\",\n    \"blighted\",\n    \"blimp\",\n    \"bling\",\n    \"blinked\",\n    \"blinker\",\n    \"blinking\",\n    \"blinks\",\n    \"blip\",\n    \"blissful\",\n    \"blitz\",\n    \"blizzard\",\n    \"bloated\",\n    \"bloating\",\n    \"blob\",\n    \"blog\",\n    \"bloomers\",\n    \"blooming\",\n    \"blooper\",\n    \"blot\",\n    \"blouse\",\n    \"blubber\",\n    \"bluff\",\n    \"bluish\",\n    \"blunderer\",\n    \"blunt\",\n    \"blurb\",\n    \"blurred\",\n    \"blurry\",\n    \"blurt\",\n    \"blush\",\n    \"blustery\",\n    \"boaster\",\n    \"boastful\",\n    \"boasting\",\n    \"boat\",\n    \"bobbed\",\n    \"bobbing\",\n    \"bobble\",\n    \"bobcat\",\n    \"bobsled\",\n    \"bobtail\",\n    \"bodacious\",\n    \"body\",\n    \"bogged\",\n    \"boggle\",\n    \"bogus\",\n    \"boil\",\n    \"bok\",\n    \"bolster\",\n    \"bolt\",\n    \"bonanza\",\n    \"bonded\",\n    \"bonding\",\n    \"bondless\",\n    \"boned\",\n    \"bonehead\",\n    \"boneless\",\n    \"bonelike\",\n    \"boney\",\n    \"bonfire\",\n    \"bonnet\",\n    \"bonsai\",\n    \"bonus\",\n    \"bony\",\n    \"boogeyman\",\n    \"boogieman\",\n    \"book\",\n    \"boondocks\",\n    \"booted\",\n    \"booth\",\n    \"bootie\",\n    \"booting\",\n    \"bootlace\",\n    \"bootleg\",\n    \"boots\",\n    \"boozy\",\n    \"borax\",\n    \"boring\",\n    \"borough\",\n    \"borrower\",\n    \"borrowing\",\n    \"boss\",\n    \"botanical\",\n    \"botanist\",\n    \"botany\",\n    \"botch\",\n    \"both\",\n    \"bottle\",\n    \"bottling\",\n    \"bottom\",\n    \"bounce\",\n    \"bouncing\",\n    \"bouncy\",\n    \"bounding\",\n    \"boundless\",\n    \"bountiful\",\n    \"bovine\",\n    \"boxcar\",\n    \"boxer\",\n    \"boxing\",\n    \"boxlike\",\n    \"boxy\",\n    \"breach\",\n    \"breath\",\n    \"breeches\",\n    \"breeching\",\n    \"breeder\",\n    \"breeding\",\n    \"breeze\",\n    \"breezy\",\n    \"brethren\",\n    \"brewery\",\n    \"brewing\",\n    \"briar\",\n    \"bribe\",\n    \"brick\",\n    \"bride\",\n    \"bridged\",\n    \"brigade\",\n    \"bright\",\n    \"brilliant\",\n    \"brim\",\n    \"bring\",\n    \"brink\",\n    \"brisket\",\n    \"briskly\",\n    \"briskness\",\n    \"bristle\",\n    \"brittle\",\n    \"broadband\",\n    \"broadcast\",\n    \"broaden\",\n    \"broadly\",\n    \"broadness\",\n    \"broadside\",\n    \"broadways\",\n    \"broiler\",\n    \"broiling\",\n    \"broken\",\n    \"broker\",\n    \"bronchial\",\n    \"bronco\",\n    \"bronze\",\n    \"bronzing\",\n    \"brook\",\n    \"broom\",\n    \"brought\",\n    \"browbeat\",\n    \"brownnose\",\n    \"browse\",\n    \"browsing\",\n    \"bruising\",\n    \"brunch\",\n    \"brunette\",\n    \"brunt\",\n    \"brush\",\n    \"brussels\",\n    \"brute\",\n    \"brutishly\",\n    \"bubble\",\n    \"bubbling\",\n    \"bubbly\",\n    \"buccaneer\",\n    \"bucked\",\n    \"bucket\",\n    \"buckle\",\n    \"buckshot\",\n    \"buckskin\",\n    \"bucktooth\",\n    \"buckwheat\",\n    \"buddhism\",\n    \"buddhist\",\n    \"budding\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"buffed\",\n    \"buffer\",\n    \"buffing\",\n    \"buffoon\",\n    \"buggy\",\n    \"bulb\",\n    \"bulge\",\n    \"bulginess\",\n    \"bulgur\",\n    \"bulk\",\n    \"bulldog\",\n    \"bulldozer\",\n    \"bullfight\",\n    \"bullfrog\",\n    \"bullhorn\",\n    \"bullion\",\n    \"bullish\",\n    \"bullpen\",\n    \"bullring\",\n    \"bullseye\",\n    \"bullwhip\",\n    \"bully\",\n    \"bunch\",\n    \"bundle\",\n    \"bungee\",\n    \"bunion\",\n    \"bunkbed\",\n    \"bunkhouse\",\n    \"bunkmate\",\n    \"bunny\",\n    \"bunt\",\n    \"busboy\",\n    \"bush\",\n    \"busily\",\n    \"busload\",\n    \"bust\",\n    \"busybody\",\n    \"buzz\",\n    \"cabana\",\n    \"cabbage\",\n    \"cabbie\",\n    \"cabdriver\",\n    \"cable\",\n    \"caboose\",\n    \"cache\",\n    \"cackle\",\n    \"cacti\",\n    \"cactus\",\n    \"caddie\",\n    \"caddy\",\n    \"cadet\",\n    \"cadillac\",\n    \"cadmium\",\n    \"cage\",\n    \"cahoots\",\n    \"cake\",\n    \"calamari\",\n    \"calamity\",\n    \"calcium\",\n    \"calculate\",\n    \"calculus\",\n    \"caliber\",\n    \"calibrate\",\n    \"calm\",\n    \"caloric\",\n    \"calorie\",\n    \"calzone\",\n    \"camcorder\",\n    \"cameo\",\n    \"camera\",\n    \"camisole\",\n    \"camper\",\n    \"campfire\",\n    \"camping\",\n    \"campsite\",\n    \"campus\",\n    \"canal\",\n    \"canary\",\n    \"cancel\",\n    \"candied\",\n    \"candle\",\n    \"candy\",\n    \"cane\",\n    \"canine\",\n    \"canister\",\n    \"cannabis\",\n    \"canned\",\n    \"canning\",\n    \"cannon\",\n    \"cannot\",\n    \"canola\",\n    \"canon\",\n    \"canopener\",\n    \"canopy\",\n    \"canteen\",\n    \"canyon\",\n    \"capable\",\n    \"capably\",\n    \"capacity\",\n    \"cape\",\n    \"capillary\",\n    \"capital\",\n    \"capitol\",\n    \"capped\",\n    \"capricorn\",\n    \"capsize\",\n    \"capsule\",\n    \"caption\",\n    \"captivate\",\n    \"captive\",\n    \"captivity\",\n    \"capture\",\n    \"caramel\",\n    \"carat\",\n    \"caravan\",\n    \"carbon\",\n    \"cardboard\",\n    \"carded\",\n    \"cardiac\",\n    \"cardigan\",\n    \"cardinal\",\n    \"cardstock\",\n    \"carefully\",\n    \"caregiver\",\n    \"careless\",\n    \"caress\",\n    \"caretaker\",\n    \"cargo\",\n    \"caring\",\n    \"carless\",\n    \"carload\",\n    \"carmaker\",\n    \"carnage\",\n    \"carnation\",\n    \"carnival\",\n    \"carnivore\",\n    \"carol\",\n    \"carpenter\",\n    \"carpentry\",\n    \"carpool\",\n    \"carport\",\n    \"carried\",\n    \"carrot\",\n    \"carrousel\",\n    \"carry\",\n    \"cartel\",\n    \"cartload\",\n    \"carton\",\n    \"cartoon\",\n    \"cartridge\",\n    \"cartwheel\",\n    \"carve\",\n    \"carving\",\n    \"carwash\",\n    \"cascade\",\n    \"case\",\n    \"cash\",\n    \"casing\",\n    \"casino\",\n    \"casket\",\n    \"cassette\",\n    \"casually\",\n    \"casualty\",\n    \"catacomb\",\n    \"catalog\",\n    \"catalyst\",\n    \"catalyze\",\n    \"catapult\",\n    \"cataract\",\n    \"catatonic\",\n    \"catcall\",\n    \"catchable\",\n    \"catcher\",\n    \"catching\",\n    \"catchy\",\n    \"caterer\",\n    \"catering\",\n    \"catfight\",\n    \"catfish\",\n    \"cathedral\",\n    \"cathouse\",\n    \"catlike\",\n    \"catnap\",\n    \"catnip\",\n    \"catsup\",\n    \"cattail\",\n    \"cattishly\",\n    \"cattle\",\n    \"catty\",\n    \"catwalk\",\n    \"caucasian\",\n    \"caucus\",\n    \"causal\",\n    \"causation\",\n    \"cause\",\n    \"causing\",\n    \"cauterize\",\n    \"caution\",\n    \"cautious\",\n    \"cavalier\",\n    \"cavalry\",\n    \"caviar\",\n    \"cavity\",\n    \"cedar\",\n    \"celery\",\n    \"celestial\",\n    \"celibacy\",\n    \"celibate\",\n    \"celtic\",\n    \"cement\",\n    \"census\",\n    \"ceramics\",\n    \"ceremony\",\n    \"certainly\",\n    \"certainty\",\n    \"certified\",\n    \"certify\",\n    \"cesarean\",\n    \"cesspool\",\n    \"chafe\",\n    \"chaffing\",\n    \"chain\",\n    \"chair\",\n    \"chalice\",\n    \"challenge\",\n    \"chamber\",\n    \"chamomile\",\n    \"champion\",\n    \"chance\",\n    \"change\",\n    \"channel\",\n    \"chant\",\n    \"chaos\",\n    \"chaperone\",\n    \"chaplain\",\n    \"chapped\",\n    \"chaps\",\n    \"chapter\",\n    \"character\",\n    \"charbroil\",\n    \"charcoal\",\n    \"charger\",\n    \"charging\",\n    \"chariot\",\n    \"charity\",\n    \"charm\",\n    \"charred\",\n    \"charter\",\n    \"charting\",\n    \"chase\",\n    \"chasing\",\n    \"chaste\",\n    \"chastise\",\n    \"chastity\",\n    \"chatroom\",\n    \"chatter\",\n    \"chatting\",\n    \"chatty\",\n    \"cheating\",\n    \"cheddar\",\n    \"cheek\",\n    \"cheer\",\n    \"cheese\",\n    \"cheesy\",\n    \"chef\",\n    \"chemicals\",\n    \"chemist\",\n    \"chemo\",\n    \"cherisher\",\n    \"cherub\",\n    \"chess\",\n    \"chest\",\n    \"chevron\",\n    \"chevy\",\n    \"chewable\",\n    \"chewer\",\n    \"chewing\",\n    \"chewy\",\n    \"chief\",\n    \"chihuahua\",\n    \"childcare\",\n    \"childhood\",\n    \"childish\",\n    \"childless\",\n    \"childlike\",\n    \"chili\",\n    \"chill\",\n    \"chimp\",\n    \"chip\",\n    \"chirping\",\n    \"chirpy\",\n    \"chitchat\",\n    \"chivalry\",\n    \"chive\",\n    \"chloride\",\n    \"chlorine\",\n    \"choice\",\n    \"chokehold\",\n    \"choking\",\n    \"chomp\",\n    \"chooser\",\n    \"choosing\",\n    \"choosy\",\n    \"chop\",\n    \"chosen\",\n    \"chowder\",\n    \"chowtime\",\n    \"chrome\",\n    \"chubby\",\n    \"chuck\",\n    \"chug\",\n    \"chummy\",\n    \"chump\",\n    \"chunk\",\n    \"churn\",\n    \"chute\",\n    \"cider\",\n    \"cilantro\",\n    \"cinch\",\n    \"cinema\",\n    \"cinnamon\",\n    \"circle\",\n    \"circling\",\n    \"circular\",\n    \"circulate\",\n    \"circus\",\n    \"citable\",\n    \"citadel\",\n    \"citation\",\n    \"citizen\",\n    \"citric\",\n    \"citrus\",\n    \"city\",\n    \"civic\",\n    \"civil\",\n    \"clad\",\n    \"claim\",\n    \"clambake\",\n    \"clammy\",\n    \"clamor\",\n    \"clamp\",\n    \"clamshell\",\n    \"clang\",\n    \"clanking\",\n    \"clapped\",\n    \"clapper\",\n    \"clapping\",\n    \"clarify\",\n    \"clarinet\",\n    \"clarity\",\n    \"clash\",\n    \"clasp\",\n    \"class\",\n    \"clatter\",\n    \"clause\",\n    \"clavicle\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clear\",\n    \"cleat\",\n    \"cleaver\",\n    \"cleft\",\n    \"clench\",\n    \"clergyman\",\n    \"clerical\",\n    \"clerk\",\n    \"clever\",\n    \"clicker\",\n    \"client\",\n    \"climate\",\n    \"climatic\",\n    \"cling\",\n    \"clinic\",\n    \"clinking\",\n    \"clip\",\n    \"clique\",\n    \"cloak\",\n    \"clobber\",\n    \"clock\",\n    \"clone\",\n    \"cloning\",\n    \"closable\",\n    \"closure\",\n    \"clothes\",\n    \"clothing\",\n    \"cloud\",\n    \"clover\",\n    \"clubbed\",\n    \"clubbing\",\n    \"clubhouse\",\n    \"clump\",\n    \"clumsily\",\n    \"clumsy\",\n    \"clunky\",\n    \"clustered\",\n    \"clutch\",\n    \"clutter\",\n    \"coach\",\n    \"coagulant\",\n    \"coastal\",\n    \"coaster\",\n    \"coasting\",\n    \"coastland\",\n    \"coastline\",\n    \"coat\",\n    \"coauthor\",\n    \"cobalt\",\n    \"cobbler\",\n    \"cobweb\",\n    \"cocoa\",\n    \"coconut\",\n    \"cod\",\n    \"coeditor\",\n    \"coerce\",\n    \"coexist\",\n    \"coffee\",\n    \"cofounder\",\n    \"cognition\",\n    \"cognitive\",\n    \"cogwheel\",\n    \"coherence\",\n    \"coherent\",\n    \"cohesive\",\n    \"coil\",\n    \"coke\",\n    \"cola\",\n    \"cold\",\n    \"coleslaw\",\n    \"coliseum\",\n    \"collage\",\n    \"collapse\",\n    \"collar\",\n    \"collected\",\n    \"collector\",\n    \"collide\",\n    \"collie\",\n    \"collision\",\n    \"colonial\",\n    \"colonist\",\n    \"colonize\",\n    \"colony\",\n    \"colossal\",\n    \"colt\",\n    \"coma\",\n    \"come\",\n    \"comfort\",\n    \"comfy\",\n    \"comic\",\n    \"coming\",\n    \"comma\",\n    \"commence\",\n    \"commend\",\n    \"comment\",\n    \"commerce\",\n    \"commode\",\n    \"commodity\",\n    \"commodore\",\n    \"common\",\n    \"commotion\",\n    \"commute\",\n    \"commuting\",\n    \"compacted\",\n    \"compacter\",\n    \"compactly\",\n    \"compactor\",\n    \"companion\",\n    \"company\",\n    \"compare\",\n    \"compel\",\n    \"compile\",\n    \"comply\",\n    \"component\",\n    \"composed\",\n    \"composer\",\n    \"composite\",\n    \"compost\",\n    \"composure\",\n    \"compound\",\n    \"compress\",\n    \"comprised\",\n    \"computer\",\n    \"computing\",\n    \"comrade\",\n    \"concave\",\n    \"conceal\",\n    \"conceded\",\n    \"concept\",\n    \"concerned\",\n    \"concert\",\n    \"conch\",\n    \"concierge\",\n    \"concise\",\n    \"conclude\",\n    \"concrete\",\n    \"concur\",\n    \"condense\",\n    \"condiment\",\n    \"condition\",\n    \"condone\",\n    \"conducive\",\n    \"conductor\",\n    \"conduit\",\n    \"cone\",\n    \"confess\",\n    \"confetti\",\n    \"confidant\",\n    \"confident\",\n    \"confider\",\n    \"confiding\",\n    \"configure\",\n    \"confined\",\n    \"confining\",\n    \"confirm\",\n    \"conflict\",\n    \"conform\",\n    \"confound\",\n    \"confront\",\n    \"confused\",\n    \"confusing\",\n    \"confusion\",\n    \"congenial\",\n    \"congested\",\n    \"congrats\",\n    \"congress\",\n    \"conical\",\n    \"conjoined\",\n    \"conjure\",\n    \"conjuror\",\n    \"connected\",\n    \"connector\",\n    \"consensus\",\n    \"consent\",\n    \"console\",\n    \"consoling\",\n    \"consonant\",\n    \"constable\",\n    \"constant\",\n    \"constrain\",\n    \"constrict\",\n    \"construct\",\n    \"consult\",\n    \"consumer\",\n    \"consuming\",\n    \"contact\",\n    \"container\",\n    \"contempt\",\n    \"contend\",\n    \"contented\",\n    \"contently\",\n    \"contents\",\n    \"contest\",\n    \"context\",\n    \"contort\",\n    \"contour\",\n    \"contrite\",\n    \"control\",\n    \"contusion\",\n    \"convene\",\n    \"convent\",\n    \"copartner\",\n    \"cope\",\n    \"copied\",\n    \"copier\",\n    \"copilot\",\n    \"coping\",\n    \"copious\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"cork\",\n    \"cornball\",\n    \"cornbread\",\n    \"corncob\",\n    \"cornea\",\n    \"corned\",\n    \"corner\",\n    \"cornfield\",\n    \"cornflake\",\n    \"cornhusk\",\n    \"cornmeal\",\n    \"cornstalk\",\n    \"corny\",\n    \"coronary\",\n    \"coroner\",\n    \"corporal\",\n    \"corporate\",\n    \"corral\",\n    \"correct\",\n    \"corridor\",\n    \"corrode\",\n    \"corroding\",\n    \"corrosive\",\n    \"corsage\",\n    \"corset\",\n    \"cortex\",\n    \"cosigner\",\n    \"cosmetics\",\n    \"cosmic\",\n    \"cosmos\",\n    \"cosponsor\",\n    \"cost\",\n    \"cottage\",\n    \"cotton\",\n    \"couch\",\n    \"cough\",\n    \"could\",\n    \"countable\",\n    \"countdown\",\n    \"counting\",\n    \"countless\",\n    \"country\",\n    \"county\",\n    \"courier\",\n    \"covenant\",\n    \"cover\",\n    \"coveted\",\n    \"coveting\",\n    \"coyness\",\n    \"cozily\",\n    \"coziness\",\n    \"cozy\",\n    \"crabbing\",\n    \"crabgrass\",\n    \"crablike\",\n    \"crabmeat\",\n    \"cradle\",\n    \"cradling\",\n    \"crafter\",\n    \"craftily\",\n    \"craftsman\",\n    \"craftwork\",\n    \"crafty\",\n    \"cramp\",\n    \"cranberry\",\n    \"crane\",\n    \"cranial\",\n    \"cranium\",\n    \"crank\",\n    \"crate\",\n    \"crave\",\n    \"craving\",\n    \"crawfish\",\n    \"crawlers\",\n    \"crawling\",\n    \"crayfish\",\n    \"crayon\",\n    \"crazed\",\n    \"crazily\",\n    \"craziness\",\n    \"crazy\",\n    \"creamed\",\n    \"creamer\",\n    \"creamlike\",\n    \"crease\",\n    \"creasing\",\n    \"creatable\",\n    \"create\",\n    \"creation\",\n    \"creative\",\n    \"creature\",\n    \"credible\",\n    \"credibly\",\n    \"credit\",\n    \"creed\",\n    \"creme\",\n    \"creole\",\n    \"crepe\",\n    \"crept\",\n    \"crescent\",\n    \"crested\",\n    \"cresting\",\n    \"crestless\",\n    \"crevice\",\n    \"crewless\",\n    \"crewman\",\n    \"crewmate\",\n    \"crib\",\n    \"cricket\",\n    \"cried\",\n    \"crier\",\n    \"crimp\",\n    \"crimson\",\n    \"cringe\",\n    \"cringing\",\n    \"crinkle\",\n    \"crinkly\",\n    \"crisped\",\n    \"crisping\",\n    \"crisply\",\n    \"crispness\",\n    \"crispy\",\n    \"criteria\",\n    \"critter\",\n    \"croak\",\n    \"crock\",\n    \"crook\",\n    \"croon\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crouton\",\n    \"crowbar\",\n    \"crowd\",\n    \"crown\",\n    \"crucial\",\n    \"crudely\",\n    \"crudeness\",\n    \"cruelly\",\n    \"cruelness\",\n    \"cruelty\",\n    \"crumb\",\n    \"crummiest\",\n    \"crummy\",\n    \"crumpet\",\n    \"crumpled\",\n    \"cruncher\",\n    \"crunching\",\n    \"crunchy\",\n    \"crusader\",\n    \"crushable\",\n    \"crushed\",\n    \"crusher\",\n    \"crushing\",\n    \"crust\",\n    \"crux\",\n    \"crying\",\n    \"cryptic\",\n    \"crystal\",\n    \"cubbyhole\",\n    \"cube\",\n    \"cubical\",\n    \"cubicle\",\n    \"cucumber\",\n    \"cuddle\",\n    \"cuddly\",\n    \"cufflink\",\n    \"culinary\",\n    \"culminate\",\n    \"culpable\",\n    \"culprit\",\n    \"cultivate\",\n    \"cultural\",\n    \"culture\",\n    \"cupbearer\",\n    \"cupcake\",\n    \"cupid\",\n    \"cupped\",\n    \"cupping\",\n    \"curable\",\n    \"curator\",\n    \"curdle\",\n    \"cure\",\n    \"curfew\",\n    \"curing\",\n    \"curled\",\n    \"curler\",\n    \"curliness\",\n    \"curling\",\n    \"curly\",\n    \"curry\",\n    \"curse\",\n    \"cursive\",\n    \"cursor\",\n    \"curtain\",\n    \"curtly\",\n    \"curtsy\",\n    \"curvature\",\n    \"curve\",\n    \"curvy\",\n    \"cushy\",\n    \"cusp\",\n    \"cussed\",\n    \"custard\",\n    \"custodian\",\n    \"custody\",\n    \"customary\",\n    \"customer\",\n    \"customize\",\n    \"customs\",\n    \"cut\",\n    \"cycle\",\n    \"cyclic\",\n    \"cycling\",\n    \"cyclist\",\n    \"cylinder\",\n    \"cymbal\",\n    \"cytoplasm\",\n    \"cytoplast\",\n    \"dab\",\n    \"dad\",\n    \"daffodil\",\n    \"dagger\",\n    \"daily\",\n    \"daintily\",\n    \"dainty\",\n    \"dairy\",\n    \"daisy\",\n    \"dallying\",\n    \"dance\",\n    \"dancing\",\n    \"dandelion\",\n    \"dander\",\n    \"dandruff\",\n    \"dandy\",\n    \"danger\",\n    \"dangle\",\n    \"dangling\",\n    \"daredevil\",\n    \"dares\",\n    \"daringly\",\n    \"darkened\",\n    \"darkening\",\n    \"darkish\",\n    \"darkness\",\n    \"darkroom\",\n    \"darling\",\n    \"darn\",\n    \"dart\",\n    \"darwinism\",\n    \"dash\",\n    \"dastardly\",\n    \"data\",\n    \"datebook\",\n    \"dating\",\n    \"daughter\",\n    \"daunting\",\n    \"dawdler\",\n    \"dawn\",\n    \"daybed\",\n    \"daybreak\",\n    \"daycare\",\n    \"daydream\",\n    \"daylight\",\n    \"daylong\",\n    \"dayroom\",\n    \"daytime\",\n    \"dazzler\",\n    \"dazzling\",\n    \"deacon\",\n    \"deafening\",\n    \"deafness\",\n    \"dealer\",\n    \"dealing\",\n    \"dealmaker\",\n    \"dealt\",\n    \"dean\",\n    \"debatable\",\n    \"debate\",\n    \"debating\",\n    \"debit\",\n    \"debrief\",\n    \"debtless\",\n    \"debtor\",\n    \"debug\",\n    \"debunk\",\n    \"decade\",\n    \"decaf\",\n    \"decal\",\n    \"decathlon\",\n    \"decay\",\n    \"deceased\",\n    \"deceit\",\n    \"deceiver\",\n    \"deceiving\",\n    \"december\",\n    \"decency\",\n    \"decent\",\n    \"deception\",\n    \"deceptive\",\n    \"decibel\",\n    \"decidable\",\n    \"decimal\",\n    \"decimeter\",\n    \"decipher\",\n    \"deck\",\n    \"declared\",\n    \"decline\",\n    \"decode\",\n    \"decompose\",\n    \"decorated\",\n    \"decorator\",\n    \"decoy\",\n    \"decrease\",\n    \"decree\",\n    \"dedicate\",\n    \"dedicator\",\n    \"deduce\",\n    \"deduct\",\n    \"deed\",\n    \"deem\",\n    \"deepen\",\n    \"deeply\",\n    \"deepness\",\n    \"deface\",\n    \"defacing\",\n    \"defame\",\n    \"default\",\n    \"defeat\",\n    \"defection\",\n    \"defective\",\n    \"defendant\",\n    \"defender\",\n    \"defense\",\n    \"defensive\",\n    \"deferral\",\n    \"deferred\",\n    \"defiance\",\n    \"defiant\",\n    \"defile\",\n    \"defiling\",\n    \"define\",\n    \"definite\",\n    \"deflate\",\n    \"deflation\",\n    \"deflator\",\n    \"deflected\",\n    \"deflector\",\n    \"defog\",\n    \"deforest\",\n    \"defraud\",\n    \"defrost\",\n    \"deftly\",\n    \"defuse\",\n    \"defy\",\n    \"degraded\",\n    \"degrading\",\n    \"degrease\",\n    \"degree\",\n    \"dehydrate\",\n    \"deity\",\n    \"dejected\",\n    \"delay\",\n    \"delegate\",\n    \"delegator\",\n    \"delete\",\n    \"deletion\",\n    \"delicacy\",\n    \"delicate\",\n    \"delicious\",\n    \"delighted\",\n    \"delirious\",\n    \"delirium\",\n    \"deliverer\",\n    \"delivery\",\n    \"delouse\",\n    \"delta\",\n    \"deluge\",\n    \"delusion\",\n    \"deluxe\",\n    \"demanding\",\n    \"demeaning\",\n    \"demeanor\",\n    \"demise\",\n    \"democracy\",\n    \"democrat\",\n    \"demote\",\n    \"demotion\",\n    \"demystify\",\n    \"denatured\",\n    \"deniable\",\n    \"denial\",\n    \"denim\",\n    \"denote\",\n    \"dense\",\n    \"density\",\n    \"dental\",\n    \"dentist\",\n    \"denture\",\n    \"deny\",\n    \"deodorant\",\n    \"deodorize\",\n    \"departed\",\n    \"departure\",\n    \"depict\",\n    \"deplete\",\n    \"depletion\",\n    \"deplored\",\n    \"deploy\",\n    \"deport\",\n    \"depose\",\n    \"depraved\",\n    \"depravity\",\n    \"deprecate\",\n    \"depress\",\n    \"deprive\",\n    \"depth\",\n    \"deputize\",\n    \"deputy\",\n    \"derail\",\n    \"deranged\",\n    \"derby\",\n    \"derived\",\n    \"desecrate\",\n    \"deserve\",\n    \"deserving\",\n    \"designate\",\n    \"designed\",\n    \"designer\",\n    \"designing\",\n    \"deskbound\",\n    \"desktop\",\n    \"deskwork\",\n    \"desolate\",\n    \"despair\",\n    \"despise\",\n    \"despite\",\n    \"destiny\",\n    \"destitute\",\n    \"destruct\",\n    \"detached\",\n    \"detail\",\n    \"detection\",\n    \"detective\",\n    \"detector\",\n    \"detention\",\n    \"detergent\",\n    \"detest\",\n    \"detonate\",\n    \"detonator\",\n    \"detoxify\",\n    \"detract\",\n    \"deuce\",\n    \"devalue\",\n    \"deviancy\",\n    \"deviant\",\n    \"deviate\",\n    \"deviation\",\n    \"deviator\",\n    \"device\",\n    \"devious\",\n    \"devotedly\",\n    \"devotee\",\n    \"devotion\",\n    \"devourer\",\n    \"devouring\",\n    \"devoutly\",\n    \"dexterity\",\n    \"dexterous\",\n    \"diabetes\",\n    \"diabetic\",\n    \"diabolic\",\n    \"diagnoses\",\n    \"diagnosis\",\n    \"diagram\",\n    \"dial\",\n    \"diameter\",\n    \"diaper\",\n    \"diaphragm\",\n    \"diary\",\n    \"dice\",\n    \"dicing\",\n    \"dictate\",\n    \"dictation\",\n    \"dictator\",\n    \"difficult\",\n    \"diffused\",\n    \"diffuser\",\n    \"diffusion\",\n    \"diffusive\",\n    \"dig\",\n    \"dilation\",\n    \"diligence\",\n    \"diligent\",\n    \"dill\",\n    \"dilute\",\n    \"dime\",\n    \"diminish\",\n    \"dimly\",\n    \"dimmed\",\n    \"dimmer\",\n    \"dimness\",\n    \"dimple\",\n    \"diner\",\n    \"dingbat\",\n    \"dinghy\",\n    \"dinginess\",\n    \"dingo\",\n    \"dingy\",\n    \"dining\",\n    \"dinner\",\n    \"diocese\",\n    \"dioxide\",\n    \"diploma\",\n    \"dipped\",\n    \"dipper\",\n    \"dipping\",\n    \"directed\",\n    \"direction\",\n    \"directive\",\n    \"directly\",\n    \"directory\",\n    \"direness\",\n    \"dirtiness\",\n    \"disabled\",\n    \"disagree\",\n    \"disallow\",\n    \"disarm\",\n    \"disarray\",\n    \"disaster\",\n    \"disband\",\n    \"disbelief\",\n    \"disburse\",\n    \"discard\",\n    \"discern\",\n    \"discharge\",\n    \"disclose\",\n    \"discolor\",\n    \"discount\",\n    \"discourse\",\n    \"discover\",\n    \"discuss\",\n    \"disdain\",\n    \"disengage\",\n    \"disfigure\",\n    \"disgrace\",\n    \"dish\",\n    \"disinfect\",\n    \"disjoin\",\n    \"disk\",\n    \"dislike\",\n    \"disliking\",\n    \"dislocate\",\n    \"dislodge\",\n    \"disloyal\",\n    \"dismantle\",\n    \"dismay\",\n    \"dismiss\",\n    \"dismount\",\n    \"disobey\",\n    \"disorder\",\n    \"disown\",\n    \"disparate\",\n    \"disparity\",\n    \"dispatch\",\n    \"dispense\",\n    \"dispersal\",\n    \"dispersed\",\n    \"disperser\",\n    \"displace\",\n    \"display\",\n    \"displease\",\n    \"disposal\",\n    \"dispose\",\n    \"disprove\",\n    \"dispute\",\n    \"disregard\",\n    \"disrupt\",\n    \"dissuade\",\n    \"distance\",\n    \"distant\",\n    \"distaste\",\n    \"distill\",\n    \"distinct\",\n    \"distort\",\n    \"distract\",\n    \"distress\",\n    \"district\",\n    \"distrust\",\n    \"ditch\",\n    \"ditto\",\n    \"ditzy\",\n    \"dividable\",\n    \"divided\",\n    \"dividend\",\n    \"dividers\",\n    \"dividing\",\n    \"divinely\",\n    \"diving\",\n    \"divinity\",\n    \"divisible\",\n    \"divisibly\",\n    \"division\",\n    \"divisive\",\n    \"divorcee\",\n    \"dizziness\",\n    \"dizzy\",\n    \"doable\",\n    \"docile\",\n    \"dock\",\n    \"doctrine\",\n    \"document\",\n    \"dodge\",\n    \"dodgy\",\n    \"doily\",\n    \"doing\",\n    \"dole\",\n    \"dollar\",\n    \"dollhouse\",\n    \"dollop\",\n    \"dolly\",\n    \"dolphin\",\n    \"domain\",\n    \"domelike\",\n    \"domestic\",\n    \"dominion\",\n    \"dominoes\",\n    \"donated\",\n    \"donation\",\n    \"donator\",\n    \"donor\",\n    \"donut\",\n    \"doodle\",\n    \"doorbell\",\n    \"doorframe\",\n    \"doorknob\",\n    \"doorman\",\n    \"doormat\",\n    \"doornail\",\n    \"doorpost\",\n    \"doorstep\",\n    \"doorstop\",\n    \"doorway\",\n    \"doozy\",\n    \"dork\",\n    \"dormitory\",\n    \"dorsal\",\n    \"dosage\",\n    \"dose\",\n    \"dotted\",\n    \"doubling\",\n    \"douche\",\n    \"dove\",\n    \"down\",\n    \"dowry\",\n    \"doze\",\n    \"drab\",\n    \"dragging\",\n    \"dragonfly\",\n    \"dragonish\",\n    \"dragster\",\n    \"drainable\",\n    \"drainage\",\n    \"drained\",\n    \"drainer\",\n    \"drainpipe\",\n    \"dramatic\",\n    \"dramatize\",\n    \"drank\",\n    \"drapery\",\n    \"drastic\",\n    \"draw\",\n    \"dreaded\",\n    \"dreadful\",\n    \"dreadlock\",\n    \"dreamboat\",\n    \"dreamily\",\n    \"dreamland\",\n    \"dreamless\",\n    \"dreamlike\",\n    \"dreamt\",\n    \"dreamy\",\n    \"drearily\",\n    \"dreary\",\n    \"drench\",\n    \"dress\",\n    \"drew\",\n    \"dribble\",\n    \"dried\",\n    \"drier\",\n    \"drift\",\n    \"driller\",\n    \"drilling\",\n    \"drinkable\",\n    \"drinking\",\n    \"dripping\",\n    \"drippy\",\n    \"drivable\",\n    \"driven\",\n    \"driver\",\n    \"driveway\",\n    \"driving\",\n    \"drizzle\",\n    \"drizzly\",\n    \"drone\",\n    \"drool\",\n    \"droop\",\n    \"drop-down\",\n    \"dropbox\",\n    \"dropkick\",\n    \"droplet\",\n    \"dropout\",\n    \"dropper\",\n    \"drove\",\n    \"drown\",\n    \"drowsily\",\n    \"drudge\",\n    \"drum\",\n    \"dry\",\n    \"dubbed\",\n    \"dubiously\",\n    \"duchess\",\n    \"duckbill\",\n    \"ducking\",\n    \"duckling\",\n    \"ducktail\",\n    \"ducky\",\n    \"duct\",\n    \"dude\",\n    \"duffel\",\n    \"dugout\",\n    \"duh\",\n    \"duke\",\n    \"duller\",\n    \"dullness\",\n    \"duly\",\n    \"dumping\",\n    \"dumpling\",\n    \"dumpster\",\n    \"duo\",\n    \"dupe\",\n    \"duplex\",\n    \"duplicate\",\n    \"duplicity\",\n    \"durable\",\n    \"durably\",\n    \"duration\",\n    \"duress\",\n    \"during\",\n    \"dusk\",\n    \"dust\",\n    \"dutiful\",\n    \"duty\",\n    \"duvet\",\n    \"dwarf\",\n    \"dweeb\",\n    \"dwelled\",\n    \"dweller\",\n    \"dwelling\",\n    \"dwindle\",\n    \"dwindling\",\n    \"dynamic\",\n    \"dynamite\",\n    \"dynasty\",\n    \"dyslexia\",\n    \"dyslexic\",\n    \"each\",\n    \"eagle\",\n    \"earache\",\n    \"eardrum\",\n    \"earflap\",\n    \"earful\",\n    \"earlobe\",\n    \"early\",\n    \"earmark\",\n    \"earmuff\",\n    \"earphone\",\n    \"earpiece\",\n    \"earplugs\",\n    \"earring\",\n    \"earshot\",\n    \"earthen\",\n    \"earthlike\",\n    \"earthling\",\n    \"earthly\",\n    \"earthworm\",\n    \"earthy\",\n    \"earwig\",\n    \"easeful\",\n    \"easel\",\n    \"easiest\",\n    \"easily\",\n    \"easiness\",\n    \"easing\",\n    \"eastbound\",\n    \"eastcoast\",\n    \"easter\",\n    \"eastward\",\n    \"eatable\",\n    \"eaten\",\n    \"eatery\",\n    \"eating\",\n    \"eats\",\n    \"ebay\",\n    \"ebony\",\n    \"ebook\",\n    \"ecard\",\n    \"eccentric\",\n    \"echo\",\n    \"eclair\",\n    \"eclipse\",\n    \"ecologist\",\n    \"ecology\",\n    \"economic\",\n    \"economist\",\n    \"economy\",\n    \"ecosphere\",\n    \"ecosystem\",\n    \"edge\",\n    \"edginess\",\n    \"edging\",\n    \"edgy\",\n    \"edition\",\n    \"editor\",\n    \"educated\",\n    \"education\",\n    \"educator\",\n    \"eel\",\n    \"effective\",\n    \"effects\",\n    \"efficient\",\n    \"effort\",\n    \"eggbeater\",\n    \"egging\",\n    \"eggnog\",\n    \"eggplant\",\n    \"eggshell\",\n    \"egomaniac\",\n    \"egotism\",\n    \"egotistic\",\n    \"either\",\n    \"eject\",\n    \"elaborate\",\n    \"elastic\",\n    \"elated\",\n    \"elbow\",\n    \"eldercare\",\n    \"elderly\",\n    \"eldest\",\n    \"electable\",\n    \"election\",\n    \"elective\",\n    \"elephant\",\n    \"elevate\",\n    \"elevating\",\n    \"elevation\",\n    \"elevator\",\n    \"eleven\",\n    \"elf\",\n    \"eligible\",\n    \"eligibly\",\n    \"eliminate\",\n    \"elite\",\n    \"elitism\",\n    \"elixir\",\n    \"elk\",\n    \"ellipse\",\n    \"elliptic\",\n    \"elm\",\n    \"elongated\",\n    \"elope\",\n    \"eloquence\",\n    \"eloquent\",\n    \"elsewhere\",\n    \"elude\",\n    \"elusive\",\n    \"elves\",\n    \"email\",\n    \"embargo\",\n    \"embark\",\n    \"embassy\",\n    \"embattled\",\n    \"embellish\",\n    \"ember\",\n    \"embezzle\",\n    \"emblaze\",\n    \"emblem\",\n    \"embody\",\n    \"embolism\",\n    \"emboss\",\n    \"embroider\",\n    \"emcee\",\n    \"emerald\",\n    \"emergency\",\n    \"emission\",\n    \"emit\",\n    \"emote\",\n    \"emoticon\",\n    \"emotion\",\n    \"empathic\",\n    \"empathy\",\n    \"emperor\",\n    \"emphases\",\n    \"emphasis\",\n    \"emphasize\",\n    \"emphatic\",\n    \"empirical\",\n    \"employed\",\n    \"employee\",\n    \"employer\",\n    \"emporium\",\n    \"empower\",\n    \"emptier\",\n    \"emptiness\",\n    \"empty\",\n    \"emu\",\n    \"enable\",\n    \"enactment\",\n    \"enamel\",\n    \"enchanted\",\n    \"enchilada\",\n    \"encircle\",\n    \"enclose\",\n    \"enclosure\",\n    \"encode\",\n    \"encore\",\n    \"encounter\",\n    \"encourage\",\n    \"encroach\",\n    \"encrust\",\n    \"encrypt\",\n    \"endanger\",\n    \"endeared\",\n    \"endearing\",\n    \"ended\",\n    \"ending\",\n    \"endless\",\n    \"endnote\",\n    \"endocrine\",\n    \"endorphin\",\n    \"endorse\",\n    \"endowment\",\n    \"endpoint\",\n    \"endurable\",\n    \"endurance\",\n    \"enduring\",\n    \"energetic\",\n    \"energize\",\n    \"energy\",\n    \"enforced\",\n    \"enforcer\",\n    \"engaged\",\n    \"engaging\",\n    \"engine\",\n    \"engorge\",\n    \"engraved\",\n    \"engraver\",\n    \"engraving\",\n    \"engross\",\n    \"engulf\",\n    \"enhance\",\n    \"enigmatic\",\n    \"enjoyable\",\n    \"enjoyably\",\n    \"enjoyer\",\n    \"enjoying\",\n    \"enjoyment\",\n    \"enlarged\",\n    \"enlarging\",\n    \"enlighten\",\n    \"enlisted\",\n    \"enquirer\",\n    \"enrage\",\n    \"enrich\",\n    \"enroll\",\n    \"enslave\",\n    \"ensnare\",\n    \"ensure\",\n    \"entail\",\n    \"entangled\",\n    \"entering\",\n    \"entertain\",\n    \"enticing\",\n    \"entire\",\n    \"entitle\",\n    \"entity\",\n    \"entomb\",\n    \"entourage\",\n    \"entrap\",\n    \"entree\",\n    \"entrench\",\n    \"entrust\",\n    \"entryway\",\n    \"entwine\",\n    \"enunciate\",\n    \"envelope\",\n    \"enviable\",\n    \"enviably\",\n    \"envious\",\n    \"envision\",\n    \"envoy\",\n    \"envy\",\n    \"enzyme\",\n    \"epic\",\n    \"epidemic\",\n    \"epidermal\",\n    \"epidermis\",\n    \"epidural\",\n    \"epilepsy\",\n    \"epileptic\",\n    \"epilogue\",\n    \"epiphany\",\n    \"episode\",\n    \"equal\",\n    \"equate\",\n    \"equation\",\n    \"equator\",\n    \"equinox\",\n    \"equipment\",\n    \"equity\",\n    \"equivocal\",\n    \"eradicate\",\n    \"erasable\",\n    \"erased\",\n    \"eraser\",\n    \"erasure\",\n    \"ergonomic\",\n    \"errand\",\n    \"errant\",\n    \"erratic\",\n    \"error\",\n    \"erupt\",\n    \"escalate\",\n    \"escalator\",\n    \"escapable\",\n    \"escapade\",\n    \"escapist\",\n    \"escargot\",\n    \"eskimo\",\n    \"esophagus\",\n    \"espionage\",\n    \"espresso\",\n    \"esquire\",\n    \"essay\",\n    \"essence\",\n    \"essential\",\n    \"establish\",\n    \"estate\",\n    \"esteemed\",\n    \"estimate\",\n    \"estimator\",\n    \"estranged\",\n    \"estrogen\",\n    \"etching\",\n    \"eternal\",\n    \"eternity\",\n    \"ethanol\",\n    \"ether\",\n    \"ethically\",\n    \"ethics\",\n    \"euphemism\",\n    \"evacuate\",\n    \"evacuee\",\n    \"evade\",\n    \"evaluate\",\n    \"evaluator\",\n    \"evaporate\",\n    \"evasion\",\n    \"evasive\",\n    \"even\",\n    \"everglade\",\n    \"evergreen\",\n    \"everybody\",\n    \"everyday\",\n    \"everyone\",\n    \"evict\",\n    \"evidence\",\n    \"evident\",\n    \"evil\",\n    \"evoke\",\n    \"evolution\",\n    \"evolve\",\n    \"exact\",\n    \"exalted\",\n    \"example\",\n    \"excavate\",\n    \"excavator\",\n    \"exceeding\",\n    \"exception\",\n    \"excess\",\n    \"exchange\",\n    \"excitable\",\n    \"exciting\",\n    \"exclaim\",\n    \"exclude\",\n    \"excluding\",\n    \"exclusion\",\n    \"exclusive\",\n    \"excretion\",\n    \"excretory\",\n    \"excursion\",\n    \"excusable\",\n    \"excusably\",\n    \"excuse\",\n    \"exemplary\",\n    \"exemplify\",\n    \"exemption\",\n    \"exerciser\",\n    \"exert\",\n    \"exes\",\n    \"exfoliate\",\n    \"exhale\",\n    \"exhaust\",\n    \"exhume\",\n    \"exile\",\n    \"existing\",\n    \"exit\",\n    \"exodus\",\n    \"exonerate\",\n    \"exorcism\",\n    \"exorcist\",\n    \"expand\",\n    \"expanse\",\n    \"expansion\",\n    \"expansive\",\n    \"expectant\",\n    \"expedited\",\n    \"expediter\",\n    \"expel\",\n    \"expend\",\n    \"expenses\",\n    \"expensive\",\n    \"expert\",\n    \"expire\",\n    \"expiring\",\n    \"explain\",\n    \"expletive\",\n    \"explicit\",\n    \"explode\",\n    \"exploit\",\n    \"explore\",\n    \"exploring\",\n    \"exponent\",\n    \"exporter\",\n    \"exposable\",\n    \"expose\",\n    \"exposure\",\n    \"express\",\n    \"expulsion\",\n    \"exquisite\",\n    \"extended\",\n    \"extending\",\n    \"extent\",\n    \"extenuate\",\n    \"exterior\",\n    \"external\",\n    \"extinct\",\n    \"extortion\",\n    \"extradite\",\n    \"extras\",\n    \"extrovert\",\n    \"extrude\",\n    \"extruding\",\n    \"exuberant\",\n    \"fable\",\n    \"fabric\",\n    \"fabulous\",\n    \"facebook\",\n    \"facecloth\",\n    \"facedown\",\n    \"faceless\",\n    \"facelift\",\n    \"faceplate\",\n    \"faceted\",\n    \"facial\",\n    \"facility\",\n    \"facing\",\n    \"facsimile\",\n    \"faction\",\n    \"factoid\",\n    \"factor\",\n    \"factsheet\",\n    \"factual\",\n    \"faculty\",\n    \"fade\",\n    \"fading\",\n    \"failing\",\n    \"falcon\",\n    \"fall\",\n    \"false\",\n    \"falsify\",\n    \"fame\",\n    \"familiar\",\n    \"family\",\n    \"famine\",\n    \"famished\",\n    \"fanatic\",\n    \"fancied\",\n    \"fanciness\",\n    \"fancy\",\n    \"fanfare\",\n    \"fang\",\n    \"fanning\",\n    \"fantasize\",\n    \"fantastic\",\n    \"fantasy\",\n    \"fascism\",\n    \"fastball\",\n    \"faster\",\n    \"fasting\",\n    \"fastness\",\n    \"faucet\",\n    \"favorable\",\n    \"favorably\",\n    \"favored\",\n    \"favoring\",\n    \"favorite\",\n    \"fax\",\n    \"feast\",\n    \"federal\",\n    \"fedora\",\n    \"feeble\",\n    \"feed\",\n    \"feel\",\n    \"feisty\",\n    \"feline\",\n    \"felt-tip\",\n    \"feminine\",\n    \"feminism\",\n    \"feminist\",\n    \"feminize\",\n    \"femur\",\n    \"fence\",\n    \"fencing\",\n    \"fender\",\n    \"ferment\",\n    \"fernlike\",\n    \"ferocious\",\n    \"ferocity\",\n    \"ferret\",\n    \"ferris\",\n    \"ferry\",\n    \"fervor\",\n    \"fester\",\n    \"festival\",\n    \"festive\",\n    \"festivity\",\n    \"fetal\",\n    \"fetch\",\n    \"fever\",\n    \"fiber\",\n    \"fiction\",\n    \"fiddle\",\n    \"fiddling\",\n    \"fidelity\",\n    \"fidgeting\",\n    \"fidgety\",\n    \"fifteen\",\n    \"fifth\",\n    \"fiftieth\",\n    \"fifty\",\n    \"figment\",\n    \"figure\",\n    \"figurine\",\n    \"filing\",\n    \"filled\",\n    \"filler\",\n    \"filling\",\n    \"film\",\n    \"filter\",\n    \"filth\",\n    \"filtrate\",\n    \"finale\",\n    \"finalist\",\n    \"finalize\",\n    \"finally\",\n    \"finance\",\n    \"financial\",\n    \"finch\",\n    \"fineness\",\n    \"finer\",\n    \"finicky\",\n    \"finished\",\n    \"finisher\",\n    \"finishing\",\n    \"finite\",\n    \"finless\",\n    \"finlike\",\n    \"fiscally\",\n    \"fit\",\n    \"five\",\n    \"flaccid\",\n    \"flagman\",\n    \"flagpole\",\n    \"flagship\",\n    \"flagstick\",\n    \"flagstone\",\n    \"flail\",\n    \"flakily\",\n    \"flaky\",\n    \"flame\",\n    \"flammable\",\n    \"flanked\",\n    \"flanking\",\n    \"flannels\",\n    \"flap\",\n    \"flaring\",\n    \"flashback\",\n    \"flashbulb\",\n    \"flashcard\",\n    \"flashily\",\n    \"flashing\",\n    \"flashy\",\n    \"flask\",\n    \"flatbed\",\n    \"flatfoot\",\n    \"flatly\",\n    \"flatness\",\n    \"flatten\",\n    \"flattered\",\n    \"flatterer\",\n    \"flattery\",\n    \"flattop\",\n    \"flatware\",\n    \"flatworm\",\n    \"flavored\",\n    \"flavorful\",\n    \"flavoring\",\n    \"flaxseed\",\n    \"fled\",\n    \"fleshed\",\n    \"fleshy\",\n    \"flick\",\n    \"flier\",\n    \"flight\",\n    \"flinch\",\n    \"fling\",\n    \"flint\",\n    \"flip\",\n    \"flirt\",\n    \"float\",\n    \"flock\",\n    \"flogging\",\n    \"flop\",\n    \"floral\",\n    \"florist\",\n    \"floss\",\n    \"flounder\",\n    \"flyable\",\n    \"flyaway\",\n    \"flyer\",\n    \"flying\",\n    \"flyover\",\n    \"flypaper\",\n    \"foam\",\n    \"foe\",\n    \"fog\",\n    \"foil\",\n    \"folic\",\n    \"folk\",\n    \"follicle\",\n    \"follow\",\n    \"fondling\",\n    \"fondly\",\n    \"fondness\",\n    \"fondue\",\n    \"font\",\n    \"food\",\n    \"fool\",\n    \"footage\",\n    \"football\",\n    \"footbath\",\n    \"footboard\",\n    \"footer\",\n    \"footgear\",\n    \"foothill\",\n    \"foothold\",\n    \"footing\",\n    \"footless\",\n    \"footman\",\n    \"footnote\",\n    \"footpad\",\n    \"footpath\",\n    \"footprint\",\n    \"footrest\",\n    \"footsie\",\n    \"footsore\",\n    \"footwear\",\n    \"footwork\",\n    \"fossil\",\n    \"foster\",\n    \"founder\",\n    \"founding\",\n    \"fountain\",\n    \"fox\",\n    \"foyer\",\n    \"fraction\",\n    \"fracture\",\n    \"fragile\",\n    \"fragility\",\n    \"fragment\",\n    \"fragrance\",\n    \"fragrant\",\n    \"frail\",\n    \"frame\",\n    \"framing\",\n    \"frantic\",\n    \"fraternal\",\n    \"frayed\",\n    \"fraying\",\n    \"frays\",\n    \"freckled\",\n    \"freckles\",\n    \"freebase\",\n    \"freebee\",\n    \"freebie\",\n    \"freedom\",\n    \"freefall\",\n    \"freehand\",\n    \"freeing\",\n    \"freeload\",\n    \"freely\",\n    \"freemason\",\n    \"freeness\",\n    \"freestyle\",\n    \"freeware\",\n    \"freeway\",\n    \"freewill\",\n    \"freezable\",\n    \"freezing\",\n    \"freight\",\n    \"french\",\n    \"frenzied\",\n    \"frenzy\",\n    \"frequency\",\n    \"frequent\",\n    \"fresh\",\n    \"fretful\",\n    \"fretted\",\n    \"friction\",\n    \"friday\",\n    \"fridge\",\n    \"fried\",\n    \"friend\",\n    \"frighten\",\n    \"frightful\",\n    \"frigidity\",\n    \"frigidly\",\n    \"frill\",\n    \"fringe\",\n    \"frisbee\",\n    \"frisk\",\n    \"fritter\",\n    \"frivolous\",\n    \"frolic\",\n    \"from\",\n    \"front\",\n    \"frostbite\",\n    \"frosted\",\n    \"frostily\",\n    \"frosting\",\n    \"frostlike\",\n    \"frosty\",\n    \"froth\",\n    \"frown\",\n    \"frozen\",\n    \"fructose\",\n    \"frugality\",\n    \"frugally\",\n    \"fruit\",\n    \"frustrate\",\n    \"frying\",\n    \"gab\",\n    \"gaffe\",\n    \"gag\",\n    \"gainfully\",\n    \"gaining\",\n    \"gains\",\n    \"gala\",\n    \"gallantly\",\n    \"galleria\",\n    \"gallery\",\n    \"galley\",\n    \"gallon\",\n    \"gallows\",\n    \"gallstone\",\n    \"galore\",\n    \"galvanize\",\n    \"gambling\",\n    \"game\",\n    \"gaming\",\n    \"gamma\",\n    \"gander\",\n    \"gangly\",\n    \"gangrene\",\n    \"gangway\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"gargle\",\n    \"garland\",\n    \"garlic\",\n    \"garment\",\n    \"garnet\",\n    \"garnish\",\n    \"garter\",\n    \"gas\",\n    \"gatherer\",\n    \"gathering\",\n    \"gating\",\n    \"gauging\",\n    \"gauntlet\",\n    \"gauze\",\n    \"gave\",\n    \"gawk\",\n    \"gazing\",\n    \"gear\",\n    \"gecko\",\n    \"geek\",\n    \"geiger\",\n    \"gem\",\n    \"gender\",\n    \"generic\",\n    \"generous\",\n    \"genetics\",\n    \"genre\",\n    \"gentile\",\n    \"gentleman\",\n    \"gently\",\n    \"gents\",\n    \"geography\",\n    \"geologic\",\n    \"geologist\",\n    \"geology\",\n    \"geometric\",\n    \"geometry\",\n    \"geranium\",\n    \"gerbil\",\n    \"geriatric\",\n    \"germicide\",\n    \"germinate\",\n    \"germless\",\n    \"germproof\",\n    \"gestate\",\n    \"gestation\",\n    \"gesture\",\n    \"getaway\",\n    \"getting\",\n    \"getup\",\n    \"giant\",\n    \"gibberish\",\n    \"giblet\",\n    \"giddily\",\n    \"giddiness\",\n    \"giddy\",\n    \"gift\",\n    \"gigabyte\",\n    \"gigahertz\",\n    \"gigantic\",\n    \"giggle\",\n    \"giggling\",\n    \"giggly\",\n    \"gigolo\",\n    \"gilled\",\n    \"gills\",\n    \"gimmick\",\n    \"girdle\",\n    \"giveaway\",\n    \"given\",\n    \"giver\",\n    \"giving\",\n    \"gizmo\",\n    \"gizzard\",\n    \"glacial\",\n    \"glacier\",\n    \"glade\",\n    \"gladiator\",\n    \"gladly\",\n    \"glamorous\",\n    \"glamour\",\n    \"glance\",\n    \"glancing\",\n    \"glandular\",\n    \"glare\",\n    \"glaring\",\n    \"glass\",\n    \"glaucoma\",\n    \"glazing\",\n    \"gleaming\",\n    \"gleeful\",\n    \"glider\",\n    \"gliding\",\n    \"glimmer\",\n    \"glimpse\",\n    \"glisten\",\n    \"glitch\",\n    \"glitter\",\n    \"glitzy\",\n    \"gloater\",\n    \"gloating\",\n    \"gloomily\",\n    \"gloomy\",\n    \"glorified\",\n    \"glorifier\",\n    \"glorify\",\n    \"glorious\",\n    \"glory\",\n    \"gloss\",\n    \"glove\",\n    \"glowing\",\n    \"glowworm\",\n    \"glucose\",\n    \"glue\",\n    \"gluten\",\n    \"glutinous\",\n    \"glutton\",\n    \"gnarly\",\n    \"gnat\",\n    \"goal\",\n    \"goatskin\",\n    \"goes\",\n    \"goggles\",\n    \"going\",\n    \"goldfish\",\n    \"goldmine\",\n    \"goldsmith\",\n    \"golf\",\n    \"goliath\",\n    \"gonad\",\n    \"gondola\",\n    \"gone\",\n    \"gong\",\n    \"good\",\n    \"gooey\",\n    \"goofball\",\n    \"goofiness\",\n    \"goofy\",\n    \"google\",\n    \"goon\",\n    \"gopher\",\n    \"gore\",\n    \"gorged\",\n    \"gorgeous\",\n    \"gory\",\n    \"gosling\",\n    \"gossip\",\n    \"gothic\",\n    \"gotten\",\n    \"gout\",\n    \"gown\",\n    \"grab\",\n    \"graceful\",\n    \"graceless\",\n    \"gracious\",\n    \"gradation\",\n    \"graded\",\n    \"grader\",\n    \"gradient\",\n    \"grading\",\n    \"gradually\",\n    \"graduate\",\n    \"graffiti\",\n    \"grafted\",\n    \"grafting\",\n    \"grain\",\n    \"granddad\",\n    \"grandkid\",\n    \"grandly\",\n    \"grandma\",\n    \"grandpa\",\n    \"grandson\",\n    \"granite\",\n    \"granny\",\n    \"granola\",\n    \"grant\",\n    \"granular\",\n    \"grape\",\n    \"graph\",\n    \"grapple\",\n    \"grappling\",\n    \"grasp\",\n    \"grass\",\n    \"gratified\",\n    \"gratify\",\n    \"grating\",\n    \"gratitude\",\n    \"gratuity\",\n    \"gravel\",\n    \"graveness\",\n    \"graves\",\n    \"graveyard\",\n    \"gravitate\",\n    \"gravity\",\n    \"gravy\",\n    \"gray\",\n    \"grazing\",\n    \"greasily\",\n    \"greedily\",\n    \"greedless\",\n    \"greedy\",\n    \"green\",\n    \"greeter\",\n    \"greeting\",\n    \"grew\",\n    \"greyhound\",\n    \"grid\",\n    \"grief\",\n    \"grievance\",\n    \"grieving\",\n    \"grievous\",\n    \"grill\",\n    \"grimace\",\n    \"grimacing\",\n    \"grime\",\n    \"griminess\",\n    \"grimy\",\n    \"grinch\",\n    \"grinning\",\n    \"grip\",\n    \"gristle\",\n    \"grit\",\n    \"groggily\",\n    \"groggy\",\n    \"groin\",\n    \"groom\",\n    \"groove\",\n    \"grooving\",\n    \"groovy\",\n    \"grope\",\n    \"ground\",\n    \"grouped\",\n    \"grout\",\n    \"grove\",\n    \"grower\",\n    \"growing\",\n    \"growl\",\n    \"grub\",\n    \"grudge\",\n    \"grudging\",\n    \"grueling\",\n    \"gruffly\",\n    \"grumble\",\n    \"grumbling\",\n    \"grumbly\",\n    \"grumpily\",\n    \"grunge\",\n    \"grunt\",\n    \"guacamole\",\n    \"guidable\",\n    \"guidance\",\n    \"guide\",\n    \"guiding\",\n    \"guileless\",\n    \"guise\",\n    \"gulf\",\n    \"gullible\",\n    \"gully\",\n    \"gulp\",\n    \"gumball\",\n    \"gumdrop\",\n    \"gumminess\",\n    \"gumming\",\n    \"gummy\",\n    \"gurgle\",\n    \"gurgling\",\n    \"guru\",\n    \"gush\",\n    \"gusto\",\n    \"gusty\",\n    \"gutless\",\n    \"guts\",\n    \"gutter\",\n    \"guy\",\n    \"guzzler\",\n    \"gyration\",\n    \"habitable\",\n    \"habitant\",\n    \"habitat\",\n    \"habitual\",\n    \"hacked\",\n    \"hacker\",\n    \"hacking\",\n    \"hacksaw\",\n    \"had\",\n    \"haggler\",\n    \"haiku\",\n    \"half\",\n    \"halogen\",\n    \"halt\",\n    \"halved\",\n    \"halves\",\n    \"hamburger\",\n    \"hamlet\",\n    \"hammock\",\n    \"hamper\",\n    \"hamster\",\n    \"hamstring\",\n    \"handbag\",\n    \"handball\",\n    \"handbook\",\n    \"handbrake\",\n    \"handcart\",\n    \"handclap\",\n    \"handclasp\",\n    \"handcraft\",\n    \"handcuff\",\n    \"handed\",\n    \"handful\",\n    \"handgrip\",\n    \"handgun\",\n    \"handheld\",\n    \"handiness\",\n    \"handiwork\",\n    \"handlebar\",\n    \"handled\",\n    \"handler\",\n    \"handling\",\n    \"handmade\",\n    \"handoff\",\n    \"handpick\",\n    \"handprint\",\n    \"handrail\",\n    \"handsaw\",\n    \"handset\",\n    \"handsfree\",\n    \"handshake\",\n    \"handstand\",\n    \"handwash\",\n    \"handwork\",\n    \"handwoven\",\n    \"handwrite\",\n    \"handyman\",\n    \"hangnail\",\n    \"hangout\",\n    \"hangover\",\n    \"hangup\",\n    \"hankering\",\n    \"hankie\",\n    \"hanky\",\n    \"haphazard\",\n    \"happening\",\n    \"happier\",\n    \"happiest\",\n    \"happily\",\n    \"happiness\",\n    \"happy\",\n    \"harbor\",\n    \"hardcopy\",\n    \"hardcore\",\n    \"hardcover\",\n    \"harddisk\",\n    \"hardened\",\n    \"hardener\",\n    \"hardening\",\n    \"hardhat\",\n    \"hardhead\",\n    \"hardiness\",\n    \"hardly\",\n    \"hardness\",\n    \"hardship\",\n    \"hardware\",\n    \"hardwired\",\n    \"hardwood\",\n    \"hardy\",\n    \"harmful\",\n    \"harmless\",\n    \"harmonica\",\n    \"harmonics\",\n    \"harmonize\",\n    \"harmony\",\n    \"harness\",\n    \"harpist\",\n    \"harsh\",\n    \"harvest\",\n    \"hash\",\n    \"hassle\",\n    \"haste\",\n    \"hastily\",\n    \"hastiness\",\n    \"hasty\",\n    \"hatbox\",\n    \"hatchback\",\n    \"hatchery\",\n    \"hatchet\",\n    \"hatching\",\n    \"hatchling\",\n    \"hate\",\n    \"hatless\",\n    \"hatred\",\n    \"haunt\",\n    \"haven\",\n    \"hazard\",\n    \"hazelnut\",\n    \"hazily\",\n    \"haziness\",\n    \"hazing\",\n    \"hazy\",\n    \"headache\",\n    \"headband\",\n    \"headboard\",\n    \"headcount\",\n    \"headdress\",\n    \"headed\",\n    \"header\",\n    \"headfirst\",\n    \"headgear\",\n    \"heading\",\n    \"headlamp\",\n    \"headless\",\n    \"headlock\",\n    \"headphone\",\n    \"headpiece\",\n    \"headrest\",\n    \"headroom\",\n    \"headscarf\",\n    \"headset\",\n    \"headsman\",\n    \"headstand\",\n    \"headstone\",\n    \"headway\",\n    \"headwear\",\n    \"heap\",\n    \"heat\",\n    \"heave\",\n    \"heavily\",\n    \"heaviness\",\n    \"heaving\",\n    \"hedge\",\n    \"hedging\",\n    \"heftiness\",\n    \"hefty\",\n    \"helium\",\n    \"helmet\",\n    \"helper\",\n    \"helpful\",\n    \"helping\",\n    \"helpless\",\n    \"helpline\",\n    \"hemlock\",\n    \"hemstitch\",\n    \"hence\",\n    \"henchman\",\n    \"henna\",\n    \"herald\",\n    \"herbal\",\n    \"herbicide\",\n    \"herbs\",\n    \"heritage\",\n    \"hermit\",\n    \"heroics\",\n    \"heroism\",\n    \"herring\",\n    \"herself\",\n    \"hertz\",\n    \"hesitancy\",\n    \"hesitant\",\n    \"hesitate\",\n    \"hexagon\",\n    \"hexagram\",\n    \"hubcap\",\n    \"huddle\",\n    \"huddling\",\n    \"huff\",\n    \"hug\",\n    \"hula\",\n    \"hulk\",\n    \"hull\",\n    \"human\",\n    \"humble\",\n    \"humbling\",\n    \"humbly\",\n    \"humid\",\n    \"humiliate\",\n    \"humility\",\n    \"humming\",\n    \"hummus\",\n    \"humongous\",\n    \"humorist\",\n    \"humorless\",\n    \"humorous\",\n    \"humpback\",\n    \"humped\",\n    \"humvee\",\n    \"hunchback\",\n    \"hundredth\",\n    \"hunger\",\n    \"hungrily\",\n    \"hungry\",\n    \"hunk\",\n    \"hunter\",\n    \"hunting\",\n    \"huntress\",\n    \"huntsman\",\n    \"hurdle\",\n    \"hurled\",\n    \"hurler\",\n    \"hurling\",\n    \"hurray\",\n    \"hurricane\",\n    \"hurried\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hush\",\n    \"husked\",\n    \"huskiness\",\n    \"hut\",\n    \"hybrid\",\n    \"hydrant\",\n    \"hydrated\",\n    \"hydration\",\n    \"hydrogen\",\n    \"hydroxide\",\n    \"hyperlink\",\n    \"hypertext\",\n    \"hyphen\",\n    \"hypnoses\",\n    \"hypnosis\",\n    \"hypnotic\",\n    \"hypnotism\",\n    \"hypnotist\",\n    \"hypnotize\",\n    \"hypocrisy\",\n    \"hypocrite\",\n    \"ibuprofen\",\n    \"ice\",\n    \"iciness\",\n    \"icing\",\n    \"icky\",\n    \"icon\",\n    \"icy\",\n    \"idealism\",\n    \"idealist\",\n    \"idealize\",\n    \"ideally\",\n    \"idealness\",\n    \"identical\",\n    \"identify\",\n    \"identity\",\n    \"ideology\",\n    \"idiocy\",\n    \"idiom\",\n    \"idly\",\n    \"igloo\",\n    \"ignition\",\n    \"ignore\",\n    \"iguana\",\n    \"illicitly\",\n    \"illusion\",\n    \"illusive\",\n    \"image\",\n    \"imaginary\",\n    \"imagines\",\n    \"imaging\",\n    \"imbecile\",\n    \"imitate\",\n    \"imitation\",\n    \"immature\",\n    \"immerse\",\n    \"immersion\",\n    \"imminent\",\n    \"immobile\",\n    \"immodest\",\n    \"immorally\",\n    \"immortal\",\n    \"immovable\",\n    \"immovably\",\n    \"immunity\",\n    \"immunize\",\n    \"impaired\",\n    \"impale\",\n    \"impart\",\n    \"impatient\",\n    \"impeach\",\n    \"impeding\",\n    \"impending\",\n    \"imperfect\",\n    \"imperial\",\n    \"impish\",\n    \"implant\",\n    \"implement\",\n    \"implicate\",\n    \"implicit\",\n    \"implode\",\n    \"implosion\",\n    \"implosive\",\n    \"imply\",\n    \"impolite\",\n    \"important\",\n    \"importer\",\n    \"impose\",\n    \"imposing\",\n    \"impotence\",\n    \"impotency\",\n    \"impotent\",\n    \"impound\",\n    \"imprecise\",\n    \"imprint\",\n    \"imprison\",\n    \"impromptu\",\n    \"improper\",\n    \"improve\",\n    \"improving\",\n    \"improvise\",\n    \"imprudent\",\n    \"impulse\",\n    \"impulsive\",\n    \"impure\",\n    \"impurity\",\n    \"iodine\",\n    \"iodize\",\n    \"ion\",\n    \"ipad\",\n    \"iphone\",\n    \"ipod\",\n    \"irate\",\n    \"irk\",\n    \"iron\",\n    \"irregular\",\n    \"irrigate\",\n    \"irritable\",\n    \"irritably\",\n    \"irritant\",\n    \"irritate\",\n    \"islamic\",\n    \"islamist\",\n    \"isolated\",\n    \"isolating\",\n    \"isolation\",\n    \"isotope\",\n    \"issue\",\n    \"issuing\",\n    \"italicize\",\n    \"italics\",\n    \"item\",\n    \"itinerary\",\n    \"itunes\",\n    \"ivory\",\n    \"ivy\",\n    \"jab\",\n    \"jackal\",\n    \"jacket\",\n    \"jackknife\",\n    \"jackpot\",\n    \"jailbird\",\n    \"jailbreak\",\n    \"jailer\",\n    \"jailhouse\",\n    \"jalapeno\",\n    \"jam\",\n    \"janitor\",\n    \"january\",\n    \"jargon\",\n    \"jarring\",\n    \"jasmine\",\n    \"jaundice\",\n    \"jaunt\",\n    \"java\",\n    \"jawed\",\n    \"jawless\",\n    \"jawline\",\n    \"jaws\",\n    \"jaybird\",\n    \"jaywalker\",\n    \"jazz\",\n    \"jeep\",\n    \"jeeringly\",\n    \"jellied\",\n    \"jelly\",\n    \"jersey\",\n    \"jester\",\n    \"jet\",\n    \"jiffy\",\n    \"jigsaw\",\n    \"jimmy\",\n    \"jingle\",\n    \"jingling\",\n    \"jinx\",\n    \"jitters\",\n    \"jittery\",\n    \"job\",\n    \"jockey\",\n    \"jockstrap\",\n    \"jogger\",\n    \"jogging\",\n    \"john\",\n    \"joining\",\n    \"jokester\",\n    \"jokingly\",\n    \"jolliness\",\n    \"jolly\",\n    \"jolt\",\n    \"jot\",\n    \"jovial\",\n    \"joyfully\",\n    \"joylessly\",\n    \"joyous\",\n    \"joyride\",\n    \"joystick\",\n    \"jubilance\",\n    \"jubilant\",\n    \"judge\",\n    \"judgingly\",\n    \"judicial\",\n    \"judiciary\",\n    \"judo\",\n    \"juggle\",\n    \"juggling\",\n    \"jugular\",\n    \"juice\",\n    \"juiciness\",\n    \"juicy\",\n    \"jujitsu\",\n    \"jukebox\",\n    \"july\",\n    \"jumble\",\n    \"jumbo\",\n    \"jump\",\n    \"junction\",\n    \"juncture\",\n    \"june\",\n    \"junior\",\n    \"juniper\",\n    \"junkie\",\n    \"junkman\",\n    \"junkyard\",\n    \"jurist\",\n    \"juror\",\n    \"jury\",\n    \"justice\",\n    \"justifier\",\n    \"justify\",\n    \"justly\",\n    \"justness\",\n    \"juvenile\",\n    \"kabob\",\n    \"kangaroo\",\n    \"karaoke\",\n    \"karate\",\n    \"karma\",\n    \"kebab\",\n    \"keenly\",\n    \"keenness\",\n    \"keep\",\n    \"keg\",\n    \"kelp\",\n    \"kennel\",\n    \"kept\",\n    \"kerchief\",\n    \"kerosene\",\n    \"kettle\",\n    \"kick\",\n    \"kiln\",\n    \"kilobyte\",\n    \"kilogram\",\n    \"kilometer\",\n    \"kilowatt\",\n    \"kilt\",\n    \"kimono\",\n    \"kindle\",\n    \"kindling\",\n    \"kindly\",\n    \"kindness\",\n    \"kindred\",\n    \"kinetic\",\n    \"kinfolk\",\n    \"king\",\n    \"kinship\",\n    \"kinsman\",\n    \"kinswoman\",\n    \"kissable\",\n    \"kisser\",\n    \"kissing\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kitty\",\n    \"kiwi\",\n    \"kleenex\",\n    \"knapsack\",\n    \"knee\",\n    \"knelt\",\n    \"knickers\",\n    \"knoll\",\n    \"koala\",\n    \"kooky\",\n    \"kosher\",\n    \"krypton\",\n    \"kudos\",\n    \"kung\",\n    \"labored\",\n    \"laborer\",\n    \"laboring\",\n    \"laborious\",\n    \"labrador\",\n    \"ladder\",\n    \"ladies\",\n    \"ladle\",\n    \"ladybug\",\n    \"ladylike\",\n    \"lagged\",\n    \"lagging\",\n    \"lagoon\",\n    \"lair\",\n    \"lake\",\n    \"lance\",\n    \"landed\",\n    \"landfall\",\n    \"landfill\",\n    \"landing\",\n    \"landlady\",\n    \"landless\",\n    \"landline\",\n    \"landlord\",\n    \"landmark\",\n    \"landmass\",\n    \"landmine\",\n    \"landowner\",\n    \"landscape\",\n    \"landside\",\n    \"landslide\",\n    \"language\",\n    \"lankiness\",\n    \"lanky\",\n    \"lantern\",\n    \"lapdog\",\n    \"lapel\",\n    \"lapped\",\n    \"lapping\",\n    \"laptop\",\n    \"lard\",\n    \"large\",\n    \"lark\",\n    \"lash\",\n    \"lasso\",\n    \"last\",\n    \"latch\",\n    \"late\",\n    \"lather\",\n    \"latitude\",\n    \"latrine\",\n    \"latter\",\n    \"latticed\",\n    \"launch\",\n    \"launder\",\n    \"laundry\",\n    \"laurel\",\n    \"lavender\",\n    \"lavish\",\n    \"laxative\",\n    \"lazily\",\n    \"laziness\",\n    \"lazy\",\n    \"lecturer\",\n    \"left\",\n    \"legacy\",\n    \"legal\",\n    \"legend\",\n    \"legged\",\n    \"leggings\",\n    \"legible\",\n    \"legibly\",\n    \"legislate\",\n    \"lego\",\n    \"legroom\",\n    \"legume\",\n    \"legwarmer\",\n    \"legwork\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"lent\",\n    \"leotard\",\n    \"lesser\",\n    \"letdown\",\n    \"lethargic\",\n    \"lethargy\",\n    \"letter\",\n    \"lettuce\",\n    \"level\",\n    \"leverage\",\n    \"levers\",\n    \"levitate\",\n    \"levitator\",\n    \"liability\",\n    \"liable\",\n    \"liberty\",\n    \"librarian\",\n    \"library\",\n    \"licking\",\n    \"licorice\",\n    \"lid\",\n    \"life\",\n    \"lifter\",\n    \"lifting\",\n    \"liftoff\",\n    \"ligament\",\n    \"likely\",\n    \"likeness\",\n    \"likewise\",\n    \"liking\",\n    \"lilac\",\n    \"lilly\",\n    \"lily\",\n    \"limb\",\n    \"limeade\",\n    \"limelight\",\n    \"limes\",\n    \"limit\",\n    \"limping\",\n    \"limpness\",\n    \"line\",\n    \"lingo\",\n    \"linguini\",\n    \"linguist\",\n    \"lining\",\n    \"linked\",\n    \"linoleum\",\n    \"linseed\",\n    \"lint\",\n    \"lion\",\n    \"lip\",\n    \"liquefy\",\n    \"liqueur\",\n    \"liquid\",\n    \"lisp\",\n    \"list\",\n    \"litigate\",\n    \"litigator\",\n    \"litmus\",\n    \"litter\",\n    \"little\",\n    \"livable\",\n    \"lived\",\n    \"lively\",\n    \"liver\",\n    \"livestock\",\n    \"lividly\",\n    \"living\",\n    \"lizard\",\n    \"lubricant\",\n    \"lubricate\",\n    \"lucid\",\n    \"luckily\",\n    \"luckiness\",\n    \"luckless\",\n    \"lucrative\",\n    \"ludicrous\",\n    \"lugged\",\n    \"lukewarm\",\n    \"lullaby\",\n    \"lumber\",\n    \"luminance\",\n    \"luminous\",\n    \"lumpiness\",\n    \"lumping\",\n    \"lumpish\",\n    \"lunacy\",\n    \"lunar\",\n    \"lunchbox\",\n    \"luncheon\",\n    \"lunchroom\",\n    \"lunchtime\",\n    \"lung\",\n    \"lurch\",\n    \"lure\",\n    \"luridness\",\n    \"lurk\",\n    \"lushly\",\n    \"lushness\",\n    \"luster\",\n    \"lustfully\",\n    \"lustily\",\n    \"lustiness\",\n    \"lustrous\",\n    \"lusty\",\n    \"luxurious\",\n    \"luxury\",\n    \"lying\",\n    \"lyrically\",\n    \"lyricism\",\n    \"lyricist\",\n    \"lyrics\",\n    \"macarena\",\n    \"macaroni\",\n    \"macaw\",\n    \"mace\",\n    \"machine\",\n    \"machinist\",\n    \"magazine\",\n    \"magenta\",\n    \"maggot\",\n    \"magical\",\n    \"magician\",\n    \"magma\",\n    \"magnesium\",\n    \"magnetic\",\n    \"magnetism\",\n    \"magnetize\",\n    \"magnifier\",\n    \"magnify\",\n    \"magnitude\",\n    \"magnolia\",\n    \"mahogany\",\n    \"maimed\",\n    \"majestic\",\n    \"majesty\",\n    \"majorette\",\n    \"majority\",\n    \"makeover\",\n    \"maker\",\n    \"makeshift\",\n    \"making\",\n    \"malformed\",\n    \"malt\",\n    \"mama\",\n    \"mammal\",\n    \"mammary\",\n    \"mammogram\",\n    \"manager\",\n    \"managing\",\n    \"manatee\",\n    \"mandarin\",\n    \"mandate\",\n    \"mandatory\",\n    \"mandolin\",\n    \"manger\",\n    \"mangle\",\n    \"mango\",\n    \"mangy\",\n    \"manhandle\",\n    \"manhole\",\n    \"manhood\",\n    \"manhunt\",\n    \"manicotti\",\n    \"manicure\",\n    \"manifesto\",\n    \"manila\",\n    \"mankind\",\n    \"manlike\",\n    \"manliness\",\n    \"manly\",\n    \"manmade\",\n    \"manned\",\n    \"mannish\",\n    \"manor\",\n    \"manpower\",\n    \"mantis\",\n    \"mantra\",\n    \"manual\",\n    \"many\",\n    \"map\",\n    \"marathon\",\n    \"marauding\",\n    \"marbled\",\n    \"marbles\",\n    \"marbling\",\n    \"march\",\n    \"mardi\",\n    \"margarine\",\n    \"margarita\",\n    \"margin\",\n    \"marigold\",\n    \"marina\",\n    \"marine\",\n    \"marital\",\n    \"maritime\",\n    \"marlin\",\n    \"marmalade\",\n    \"maroon\",\n    \"married\",\n    \"marrow\",\n    \"marry\",\n    \"marshland\",\n    \"marshy\",\n    \"marsupial\",\n    \"marvelous\",\n    \"marxism\",\n    \"mascot\",\n    \"masculine\",\n    \"mashed\",\n    \"mashing\",\n    \"massager\",\n    \"masses\",\n    \"massive\",\n    \"mastiff\",\n    \"matador\",\n    \"matchbook\",\n    \"matchbox\",\n    \"matcher\",\n    \"matching\",\n    \"matchless\",\n    \"material\",\n    \"maternal\",\n    \"maternity\",\n    \"math\",\n    \"mating\",\n    \"matriarch\",\n    \"matrimony\",\n    \"matrix\",\n    \"matron\",\n    \"matted\",\n    \"matter\",\n    \"maturely\",\n    \"maturing\",\n    \"maturity\",\n    \"mauve\",\n    \"maverick\",\n    \"maximize\",\n    \"maximum\",\n    \"maybe\",\n    \"mayday\",\n    \"mayflower\",\n    \"moaner\",\n    \"moaning\",\n    \"mobile\",\n    \"mobility\",\n    \"mobilize\",\n    \"mobster\",\n    \"mocha\",\n    \"mocker\",\n    \"mockup\",\n    \"modified\",\n    \"modify\",\n    \"modular\",\n    \"modulator\",\n    \"module\",\n    \"moisten\",\n    \"moistness\",\n    \"moisture\",\n    \"molar\",\n    \"molasses\",\n    \"mold\",\n    \"molecular\",\n    \"molecule\",\n    \"molehill\",\n    \"mollusk\",\n    \"mom\",\n    \"monastery\",\n    \"monday\",\n    \"monetary\",\n    \"monetize\",\n    \"moneybags\",\n    \"moneyless\",\n    \"moneywise\",\n    \"mongoose\",\n    \"mongrel\",\n    \"monitor\",\n    \"monkhood\",\n    \"monogamy\",\n    \"monogram\",\n    \"monologue\",\n    \"monopoly\",\n    \"monorail\",\n    \"monotone\",\n    \"monotype\",\n    \"monoxide\",\n    \"monsieur\",\n    \"monsoon\",\n    \"monstrous\",\n    \"monthly\",\n    \"monument\",\n    \"moocher\",\n    \"moodiness\",\n    \"moody\",\n    \"mooing\",\n    \"moonbeam\",\n    \"mooned\",\n    \"moonlight\",\n    \"moonlike\",\n    \"moonlit\",\n    \"moonrise\",\n    \"moonscape\",\n    \"moonshine\",\n    \"moonstone\",\n    \"moonwalk\",\n    \"mop\",\n    \"morale\",\n    \"morality\",\n    \"morally\",\n    \"morbidity\",\n    \"morbidly\",\n    \"morphine\",\n    \"morphing\",\n    \"morse\",\n    \"mortality\",\n    \"mortally\",\n    \"mortician\",\n    \"mortified\",\n    \"mortify\",\n    \"mortuary\",\n    \"mosaic\",\n    \"mossy\",\n    \"most\",\n    \"mothball\",\n    \"mothproof\",\n    \"motion\",\n    \"motivate\",\n    \"motivator\",\n    \"motive\",\n    \"motocross\",\n    \"motor\",\n    \"motto\",\n    \"mountable\",\n    \"mountain\",\n    \"mounted\",\n    \"mounting\",\n    \"mourner\",\n    \"mournful\",\n    \"mouse\",\n    \"mousiness\",\n    \"moustache\",\n    \"mousy\",\n    \"mouth\",\n    \"movable\",\n    \"move\",\n    \"movie\",\n    \"moving\",\n    \"mower\",\n    \"mowing\",\n    \"much\",\n    \"muck\",\n    \"mud\",\n    \"mug\",\n    \"mulberry\",\n    \"mulch\",\n    \"mule\",\n    \"mulled\",\n    \"mullets\",\n    \"multiple\",\n    \"multiply\",\n    \"multitask\",\n    \"multitude\",\n    \"mumble\",\n    \"mumbling\",\n    \"mumbo\",\n    \"mummified\",\n    \"mummify\",\n    \"mummy\",\n    \"mumps\",\n    \"munchkin\",\n    \"mundane\",\n    \"municipal\",\n    \"muppet\",\n    \"mural\",\n    \"murkiness\",\n    \"murky\",\n    \"murmuring\",\n    \"muscular\",\n    \"museum\",\n    \"mushily\",\n    \"mushiness\",\n    \"mushroom\",\n    \"mushy\",\n    \"music\",\n    \"musket\",\n    \"muskiness\",\n    \"musky\",\n    \"mustang\",\n    \"mustard\",\n    \"muster\",\n    \"mustiness\",\n    \"musty\",\n    \"mutable\",\n    \"mutate\",\n    \"mutation\",\n    \"mute\",\n    \"mutilated\",\n    \"mutilator\",\n    \"mutiny\",\n    \"mutt\",\n    \"mutual\",\n    \"muzzle\",\n    \"myself\",\n    \"myspace\",\n    \"mystified\",\n    \"mystify\",\n    \"myth\",\n    \"nacho\",\n    \"nag\",\n    \"nail\",\n    \"name\",\n    \"naming\",\n    \"nanny\",\n    \"nanometer\",\n    \"nape\",\n    \"napkin\",\n    \"napped\",\n    \"napping\",\n    \"nappy\",\n    \"narrow\",\n    \"nastily\",\n    \"nastiness\",\n    \"national\",\n    \"native\",\n    \"nativity\",\n    \"natural\",\n    \"nature\",\n    \"naturist\",\n    \"nautical\",\n    \"navigate\",\n    \"navigator\",\n    \"navy\",\n    \"nearby\",\n    \"nearest\",\n    \"nearly\",\n    \"nearness\",\n    \"neatly\",\n    \"neatness\",\n    \"nebula\",\n    \"nebulizer\",\n    \"nectar\",\n    \"negate\",\n    \"negation\",\n    \"negative\",\n    \"neglector\",\n    \"negligee\",\n    \"negligent\",\n    \"negotiate\",\n    \"nemeses\",\n    \"nemesis\",\n    \"neon\",\n    \"nephew\",\n    \"nerd\",\n    \"nervous\",\n    \"nervy\",\n    \"nest\",\n    \"net\",\n    \"neurology\",\n    \"neuron\",\n    \"neurosis\",\n    \"neurotic\",\n    \"neuter\",\n    \"neutron\",\n    \"never\",\n    \"next\",\n    \"nibble\",\n    \"nickname\",\n    \"nicotine\",\n    \"niece\",\n    \"nifty\",\n    \"nimble\",\n    \"nimbly\",\n    \"nineteen\",\n    \"ninetieth\",\n    \"ninja\",\n    \"nintendo\",\n    \"ninth\",\n    \"nuclear\",\n    \"nuclei\",\n    \"nucleus\",\n    \"nugget\",\n    \"nullify\",\n    \"number\",\n    \"numbing\",\n    \"numbly\",\n    \"numbness\",\n    \"numeral\",\n    \"numerate\",\n    \"numerator\",\n    \"numeric\",\n    \"numerous\",\n    \"nuptials\",\n    \"nursery\",\n    \"nursing\",\n    \"nurture\",\n    \"nutcase\",\n    \"nutlike\",\n    \"nutmeg\",\n    \"nutrient\",\n    \"nutshell\",\n    \"nuttiness\",\n    \"nutty\",\n    \"nuzzle\",\n    \"nylon\",\n    \"oaf\",\n    \"oak\",\n    \"oasis\",\n    \"oat\",\n    \"obedience\",\n    \"obedient\",\n    \"obituary\",\n    \"object\",\n    \"obligate\",\n    \"obliged\",\n    \"oblivion\",\n    \"oblivious\",\n    \"oblong\",\n    \"obnoxious\",\n    \"oboe\",\n    \"obscure\",\n    \"obscurity\",\n    \"observant\",\n    \"observer\",\n    \"observing\",\n    \"obsessed\",\n    \"obsession\",\n    \"obsessive\",\n    \"obsolete\",\n    \"obstacle\",\n    \"obstinate\",\n    \"obstruct\",\n    \"obtain\",\n    \"obtrusive\",\n    \"obtuse\",\n    \"obvious\",\n    \"occultist\",\n    \"occupancy\",\n    \"occupant\",\n    \"occupier\",\n    \"occupy\",\n    \"ocean\",\n    \"ocelot\",\n    \"octagon\",\n    \"octane\",\n    \"october\",\n    \"octopus\",\n    \"ogle\",\n    \"oil\",\n    \"oink\",\n    \"ointment\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympics\",\n    \"omega\",\n    \"omen\",\n    \"ominous\",\n    \"omission\",\n    \"omit\",\n    \"omnivore\",\n    \"onboard\",\n    \"oncoming\",\n    \"ongoing\",\n    \"onion\",\n    \"online\",\n    \"onlooker\",\n    \"only\",\n    \"onscreen\",\n    \"onset\",\n    \"onshore\",\n    \"onslaught\",\n    \"onstage\",\n    \"onto\",\n    \"onward\",\n    \"onyx\",\n    \"oops\",\n    \"ooze\",\n    \"oozy\",\n    \"opacity\",\n    \"opal\",\n    \"open\",\n    \"operable\",\n    \"operate\",\n    \"operating\",\n    \"operation\",\n    \"operative\",\n    \"operator\",\n    \"opium\",\n    \"opossum\",\n    \"opponent\",\n    \"oppose\",\n    \"opposing\",\n    \"opposite\",\n    \"oppressed\",\n    \"oppressor\",\n    \"opt\",\n    \"opulently\",\n    \"osmosis\",\n    \"other\",\n    \"otter\",\n    \"ouch\",\n    \"ought\",\n    \"ounce\",\n    \"outage\",\n    \"outback\",\n    \"outbid\",\n    \"outboard\",\n    \"outbound\",\n    \"outbreak\",\n    \"outburst\",\n    \"outcast\",\n    \"outclass\",\n    \"outcome\",\n    \"outdated\",\n    \"outdoors\",\n    \"outer\",\n    \"outfield\",\n    \"outfit\",\n    \"outflank\",\n    \"outgoing\",\n    \"outgrow\",\n    \"outhouse\",\n    \"outing\",\n    \"outlast\",\n    \"outlet\",\n    \"outline\",\n    \"outlook\",\n    \"outlying\",\n    \"outmatch\",\n    \"outmost\",\n    \"outnumber\",\n    \"outplayed\",\n    \"outpost\",\n    \"outpour\",\n    \"output\",\n    \"outrage\",\n    \"outrank\",\n    \"outreach\",\n    \"outright\",\n    \"outscore\",\n    \"outsell\",\n    \"outshine\",\n    \"outshoot\",\n    \"outsider\",\n    \"outskirts\",\n    \"outsmart\",\n    \"outsource\",\n    \"outspoken\",\n    \"outtakes\",\n    \"outthink\",\n    \"outward\",\n    \"outweigh\",\n    \"outwit\",\n    \"oval\",\n    \"ovary\",\n    \"oven\",\n    \"overact\",\n    \"overall\",\n    \"overarch\",\n    \"overbid\",\n    \"overbill\",\n    \"overbite\",\n    \"overblown\",\n    \"overboard\",\n    \"overbook\",\n    \"overbuilt\",\n    \"overcast\",\n    \"overcoat\",\n    \"overcome\",\n    \"overcook\",\n    \"overcrowd\",\n    \"overdraft\",\n    \"overdrawn\",\n    \"overdress\",\n    \"overdrive\",\n    \"overdue\",\n    \"overeager\",\n    \"overeater\",\n    \"overexert\",\n    \"overfed\",\n    \"overfeed\",\n    \"overfill\",\n    \"overflow\",\n    \"overfull\",\n    \"overgrown\",\n    \"overhand\",\n    \"overhang\",\n    \"overhaul\",\n    \"overhead\",\n    \"overhear\",\n    \"overheat\",\n    \"overhung\",\n    \"overjoyed\",\n    \"overkill\",\n    \"overlabor\",\n    \"overlaid\",\n    \"overlap\",\n    \"overlay\",\n    \"overload\",\n    \"overlook\",\n    \"overlord\",\n    \"overlying\",\n    \"overnight\",\n    \"overpass\",\n    \"overpay\",\n    \"overplant\",\n    \"overplay\",\n    \"overpower\",\n    \"overprice\",\n    \"overrate\",\n    \"overreach\",\n    \"overreact\",\n    \"override\",\n    \"overripe\",\n    \"overrule\",\n    \"overrun\",\n    \"overshoot\",\n    \"overshot\",\n    \"oversight\",\n    \"oversized\",\n    \"oversleep\",\n    \"oversold\",\n    \"overspend\",\n    \"overstate\",\n    \"overstay\",\n    \"overstep\",\n    \"overstock\",\n    \"overstuff\",\n    \"oversweet\",\n    \"overtake\",\n    \"overthrow\",\n    \"overtime\",\n    \"overtly\",\n    \"overtone\",\n    \"overture\",\n    \"overturn\",\n    \"overuse\",\n    \"overvalue\",\n    \"overview\",\n    \"overwrite\",\n    \"owl\",\n    \"oxford\",\n    \"oxidant\",\n    \"oxidation\",\n    \"oxidize\",\n    \"oxidizing\",\n    \"oxygen\",\n    \"oxymoron\",\n    \"oyster\",\n    \"ozone\",\n    \"paced\",\n    \"pacemaker\",\n    \"pacific\",\n    \"pacifier\",\n    \"pacifism\",\n    \"pacifist\",\n    \"pacify\",\n    \"padded\",\n    \"padding\",\n    \"paddle\",\n    \"paddling\",\n    \"padlock\",\n    \"pagan\",\n    \"pager\",\n    \"paging\",\n    \"pajamas\",\n    \"palace\",\n    \"palatable\",\n    \"palm\",\n    \"palpable\",\n    \"palpitate\",\n    \"paltry\",\n    \"pampered\",\n    \"pamperer\",\n    \"pampers\",\n    \"pamphlet\",\n    \"panama\",\n    \"pancake\",\n    \"pancreas\",\n    \"panda\",\n    \"pandemic\",\n    \"pang\",\n    \"panhandle\",\n    \"panic\",\n    \"panning\",\n    \"panorama\",\n    \"panoramic\",\n    \"panther\",\n    \"pantomime\",\n    \"pantry\",\n    \"pants\",\n    \"pantyhose\",\n    \"paparazzi\",\n    \"papaya\",\n    \"paper\",\n    \"paprika\",\n    \"papyrus\",\n    \"parabola\",\n    \"parachute\",\n    \"parade\",\n    \"paradox\",\n    \"paragraph\",\n    \"parakeet\",\n    \"paralegal\",\n    \"paralyses\",\n    \"paralysis\",\n    \"paralyze\",\n    \"paramedic\",\n    \"parameter\",\n    \"paramount\",\n    \"parasail\",\n    \"parasite\",\n    \"parasitic\",\n    \"parcel\",\n    \"parched\",\n    \"parchment\",\n    \"pardon\",\n    \"parish\",\n    \"parka\",\n    \"parking\",\n    \"parkway\",\n    \"parlor\",\n    \"parmesan\",\n    \"parole\",\n    \"parrot\",\n    \"parsley\",\n    \"parsnip\",\n    \"partake\",\n    \"parted\",\n    \"parting\",\n    \"partition\",\n    \"partly\",\n    \"partner\",\n    \"partridge\",\n    \"party\",\n    \"passable\",\n    \"passably\",\n    \"passage\",\n    \"passcode\",\n    \"passenger\",\n    \"passerby\",\n    \"passing\",\n    \"passion\",\n    \"passive\",\n    \"passivism\",\n    \"passover\",\n    \"passport\",\n    \"password\",\n    \"pasta\",\n    \"pasted\",\n    \"pastel\",\n    \"pastime\",\n    \"pastor\",\n    \"pastrami\",\n    \"pasture\",\n    \"pasty\",\n    \"patchwork\",\n    \"patchy\",\n    \"paternal\",\n    \"paternity\",\n    \"path\",\n    \"patience\",\n    \"patient\",\n    \"patio\",\n    \"patriarch\",\n    \"patriot\",\n    \"patrol\",\n    \"patronage\",\n    \"patronize\",\n    \"pauper\",\n    \"pavement\",\n    \"paver\",\n    \"pavestone\",\n    \"pavilion\",\n    \"paving\",\n    \"pawing\",\n    \"payable\",\n    \"payback\",\n    \"paycheck\",\n    \"payday\",\n    \"payee\",\n    \"payer\",\n    \"paying\",\n    \"payment\",\n    \"payphone\",\n    \"payroll\",\n    \"pebble\",\n    \"pebbly\",\n    \"pecan\",\n    \"pectin\",\n    \"peculiar\",\n    \"peddling\",\n    \"pediatric\",\n    \"pedicure\",\n    \"pedigree\",\n    \"pedometer\",\n    \"pegboard\",\n    \"pelican\",\n    \"pellet\",\n    \"pelt\",\n    \"pelvis\",\n    \"penalize\",\n    \"penalty\",\n    \"pencil\",\n    \"pendant\",\n    \"pending\",\n    \"penholder\",\n    \"penknife\",\n    \"pennant\",\n    \"penniless\",\n    \"penny\",\n    \"penpal\",\n    \"pension\",\n    \"pentagon\",\n    \"pentagram\",\n    \"pep\",\n    \"perceive\",\n    \"percent\",\n    \"perch\",\n    \"percolate\",\n    \"perennial\",\n    \"perfected\",\n    \"perfectly\",\n    \"perfume\",\n    \"periscope\",\n    \"perish\",\n    \"perjurer\",\n    \"perjury\",\n    \"perkiness\",\n    \"perky\",\n    \"perm\",\n    \"peroxide\",\n    \"perpetual\",\n    \"perplexed\",\n    \"persecute\",\n    \"persevere\",\n    \"persuaded\",\n    \"persuader\",\n    \"pesky\",\n    \"peso\",\n    \"pessimism\",\n    \"pessimist\",\n    \"pester\",\n    \"pesticide\",\n    \"petal\",\n    \"petite\",\n    \"petition\",\n    \"petri\",\n    \"petroleum\",\n    \"petted\",\n    \"petticoat\",\n    \"pettiness\",\n    \"petty\",\n    \"petunia\",\n    \"phantom\",\n    \"phobia\",\n    \"phoenix\",\n    \"phonebook\",\n    \"phoney\",\n    \"phonics\",\n    \"phoniness\",\n    \"phony\",\n    \"phosphate\",\n    \"photo\",\n    \"phrase\",\n    \"phrasing\",\n    \"placard\",\n    \"placate\",\n    \"placidly\",\n    \"plank\",\n    \"planner\",\n    \"plant\",\n    \"plasma\",\n    \"plaster\",\n    \"plastic\",\n    \"plated\",\n    \"platform\",\n    \"plating\",\n    \"platinum\",\n    \"platonic\",\n    \"platter\",\n    \"platypus\",\n    \"plausible\",\n    \"plausibly\",\n    \"playable\",\n    \"playback\",\n    \"player\",\n    \"playful\",\n    \"playgroup\",\n    \"playhouse\",\n    \"playing\",\n    \"playlist\",\n    \"playmaker\",\n    \"playmate\",\n    \"playoff\",\n    \"playpen\",\n    \"playroom\",\n    \"playset\",\n    \"plaything\",\n    \"playtime\",\n    \"plaza\",\n    \"pleading\",\n    \"pleat\",\n    \"pledge\",\n    \"plentiful\",\n    \"plenty\",\n    \"plethora\",\n    \"plexiglas\",\n    \"pliable\",\n    \"plod\",\n    \"plop\",\n    \"plot\",\n    \"plow\",\n    \"ploy\",\n    \"pluck\",\n    \"plug\",\n    \"plunder\",\n    \"plunging\",\n    \"plural\",\n    \"plus\",\n    \"plutonium\",\n    \"plywood\",\n    \"poach\",\n    \"pod\",\n    \"poem\",\n    \"poet\",\n    \"pogo\",\n    \"pointed\",\n    \"pointer\",\n    \"pointing\",\n    \"pointless\",\n    \"pointy\",\n    \"poise\",\n    \"poison\",\n    \"poker\",\n    \"poking\",\n    \"polar\",\n    \"police\",\n    \"policy\",\n    \"polio\",\n    \"polish\",\n    \"politely\",\n    \"polka\",\n    \"polo\",\n    \"polyester\",\n    \"polygon\",\n    \"polygraph\",\n    \"polymer\",\n    \"poncho\",\n    \"pond\",\n    \"pony\",\n    \"popcorn\",\n    \"pope\",\n    \"poplar\",\n    \"popper\",\n    \"poppy\",\n    \"popsicle\",\n    \"populace\",\n    \"popular\",\n    \"populate\",\n    \"porcupine\",\n    \"pork\",\n    \"porous\",\n    \"porridge\",\n    \"portable\",\n    \"portal\",\n    \"portfolio\",\n    \"porthole\",\n    \"portion\",\n    \"portly\",\n    \"portside\",\n    \"poser\",\n    \"posh\",\n    \"posing\",\n    \"possible\",\n    \"possibly\",\n    \"possum\",\n    \"postage\",\n    \"postal\",\n    \"postbox\",\n    \"postcard\",\n    \"posted\",\n    \"poster\",\n    \"posting\",\n    \"postnasal\",\n    \"posture\",\n    \"postwar\",\n    \"pouch\",\n    \"pounce\",\n    \"pouncing\",\n    \"pound\",\n    \"pouring\",\n    \"pout\",\n    \"powdered\",\n    \"powdering\",\n    \"powdery\",\n    \"power\",\n    \"powwow\",\n    \"pox\",\n    \"praising\",\n    \"prance\",\n    \"prancing\",\n    \"pranker\",\n    \"prankish\",\n    \"prankster\",\n    \"prayer\",\n    \"praying\",\n    \"preacher\",\n    \"preaching\",\n    \"preachy\",\n    \"preamble\",\n    \"precinct\",\n    \"precise\",\n    \"precision\",\n    \"precook\",\n    \"precut\",\n    \"predator\",\n    \"predefine\",\n    \"predict\",\n    \"preface\",\n    \"prefix\",\n    \"preflight\",\n    \"preformed\",\n    \"pregame\",\n    \"pregnancy\",\n    \"pregnant\",\n    \"preheated\",\n    \"prelaunch\",\n    \"prelaw\",\n    \"prelude\",\n    \"premiere\",\n    \"premises\",\n    \"premium\",\n    \"prenatal\",\n    \"preoccupy\",\n    \"preorder\",\n    \"prepaid\",\n    \"prepay\",\n    \"preplan\",\n    \"preppy\",\n    \"preschool\",\n    \"prescribe\",\n    \"preseason\",\n    \"preset\",\n    \"preshow\",\n    \"president\",\n    \"presoak\",\n    \"press\",\n    \"presume\",\n    \"presuming\",\n    \"preteen\",\n    \"pretended\",\n    \"pretender\",\n    \"pretense\",\n    \"pretext\",\n    \"pretty\",\n    \"pretzel\",\n    \"prevail\",\n    \"prevalent\",\n    \"prevent\",\n    \"preview\",\n    \"previous\",\n    \"prewar\",\n    \"prewashed\",\n    \"prideful\",\n    \"pried\",\n    \"primal\",\n    \"primarily\",\n    \"primary\",\n    \"primate\",\n    \"primer\",\n    \"primp\",\n    \"princess\",\n    \"print\",\n    \"prior\",\n    \"prism\",\n    \"prison\",\n    \"prissy\",\n    \"pristine\",\n    \"privacy\",\n    \"private\",\n    \"privatize\",\n    \"prize\",\n    \"proactive\",\n    \"probable\",\n    \"probably\",\n    \"probation\",\n    \"probe\",\n    \"probing\",\n    \"probiotic\",\n    \"problem\",\n    \"procedure\",\n    \"process\",\n    \"proclaim\",\n    \"procreate\",\n    \"procurer\",\n    \"prodigal\",\n    \"prodigy\",\n    \"produce\",\n    \"product\",\n    \"profane\",\n    \"profanity\",\n    \"professed\",\n    \"professor\",\n    \"profile\",\n    \"profound\",\n    \"profusely\",\n    \"progeny\",\n    \"prognosis\",\n    \"program\",\n    \"progress\",\n    \"projector\",\n    \"prologue\",\n    \"prolonged\",\n    \"promenade\",\n    \"prominent\",\n    \"promoter\",\n    \"promotion\",\n    \"prompter\",\n    \"promptly\",\n    \"prone\",\n    \"prong\",\n    \"pronounce\",\n    \"pronto\",\n    \"proofing\",\n    \"proofread\",\n    \"proofs\",\n    \"propeller\",\n    \"properly\",\n    \"property\",\n    \"proponent\",\n    \"proposal\",\n    \"propose\",\n    \"props\",\n    \"prorate\",\n    \"protector\",\n    \"protegee\",\n    \"proton\",\n    \"prototype\",\n    \"protozoan\",\n    \"protract\",\n    \"protrude\",\n    \"proud\",\n    \"provable\",\n    \"proved\",\n    \"proven\",\n    \"provided\",\n    \"provider\",\n    \"providing\",\n    \"province\",\n    \"proving\",\n    \"provoke\",\n    \"provoking\",\n    \"provolone\",\n    \"prowess\",\n    \"prowler\",\n    \"prowling\",\n    \"proximity\",\n    \"proxy\",\n    \"prozac\",\n    \"prude\",\n    \"prudishly\",\n    \"prune\",\n    \"pruning\",\n    \"pry\",\n    \"psychic\",\n    \"public\",\n    \"publisher\",\n    \"pucker\",\n    \"pueblo\",\n    \"pug\",\n    \"pull\",\n    \"pulmonary\",\n    \"pulp\",\n    \"pulsate\",\n    \"pulse\",\n    \"pulverize\",\n    \"puma\",\n    \"pumice\",\n    \"pummel\",\n    \"punch\",\n    \"punctual\",\n    \"punctuate\",\n    \"punctured\",\n    \"pungent\",\n    \"punisher\",\n    \"punk\",\n    \"pupil\",\n    \"puppet\",\n    \"puppy\",\n    \"purchase\",\n    \"pureblood\",\n    \"purebred\",\n    \"purely\",\n    \"pureness\",\n    \"purgatory\",\n    \"purge\",\n    \"purging\",\n    \"purifier\",\n    \"purify\",\n    \"purist\",\n    \"puritan\",\n    \"purity\",\n    \"purple\",\n    \"purplish\",\n    \"purposely\",\n    \"purr\",\n    \"purse\",\n    \"pursuable\",\n    \"pursuant\",\n    \"pursuit\",\n    \"purveyor\",\n    \"pushcart\",\n    \"pushchair\",\n    \"pusher\",\n    \"pushiness\",\n    \"pushing\",\n    \"pushover\",\n    \"pushpin\",\n    \"pushup\",\n    \"pushy\",\n    \"putdown\",\n    \"putt\",\n    \"puzzle\",\n    \"puzzling\",\n    \"pyramid\",\n    \"pyromania\",\n    \"python\",\n    \"quack\",\n    \"quadrant\",\n    \"quail\",\n    \"quaintly\",\n    \"quake\",\n    \"quaking\",\n    \"qualified\",\n    \"qualifier\",\n    \"qualify\",\n    \"quality\",\n    \"qualm\",\n    \"quantum\",\n    \"quarrel\",\n    \"quarry\",\n    \"quartered\",\n    \"quarterly\",\n    \"quarters\",\n    \"quartet\",\n    \"quench\",\n    \"query\",\n    \"quicken\",\n    \"quickly\",\n    \"quickness\",\n    \"quicksand\",\n    \"quickstep\",\n    \"quiet\",\n    \"quill\",\n    \"quilt\",\n    \"quintet\",\n    \"quintuple\",\n    \"quirk\",\n    \"quit\",\n    \"quiver\",\n    \"quizzical\",\n    \"quotable\",\n    \"quotation\",\n    \"quote\",\n    \"rabid\",\n    \"race\",\n    \"racing\",\n    \"racism\",\n    \"rack\",\n    \"racoon\",\n    \"radar\",\n    \"radial\",\n    \"radiance\",\n    \"radiantly\",\n    \"radiated\",\n    \"radiation\",\n    \"radiator\",\n    \"radio\",\n    \"radish\",\n    \"raffle\",\n    \"raft\",\n    \"rage\",\n    \"ragged\",\n    \"raging\",\n    \"ragweed\",\n    \"raider\",\n    \"railcar\",\n    \"railing\",\n    \"railroad\",\n    \"railway\",\n    \"raisin\",\n    \"rake\",\n    \"raking\",\n    \"rally\",\n    \"ramble\",\n    \"rambling\",\n    \"ramp\",\n    \"ramrod\",\n    \"ranch\",\n    \"rancidity\",\n    \"random\",\n    \"ranged\",\n    \"ranger\",\n    \"ranging\",\n    \"ranked\",\n    \"ranking\",\n    \"ransack\",\n    \"ranting\",\n    \"rants\",\n    \"rare\",\n    \"rarity\",\n    \"rascal\",\n    \"rash\",\n    \"rasping\",\n    \"ravage\",\n    \"raven\",\n    \"ravine\",\n    \"raving\",\n    \"ravioli\",\n    \"ravishing\",\n    \"reabsorb\",\n    \"reach\",\n    \"reacquire\",\n    \"reaction\",\n    \"reactive\",\n    \"reactor\",\n    \"reaffirm\",\n    \"ream\",\n    \"reanalyze\",\n    \"reappear\",\n    \"reapply\",\n    \"reappoint\",\n    \"reapprove\",\n    \"rearrange\",\n    \"rearview\",\n    \"reason\",\n    \"reassign\",\n    \"reassure\",\n    \"reattach\",\n    \"reawake\",\n    \"rebalance\",\n    \"rebate\",\n    \"rebel\",\n    \"rebirth\",\n    \"reboot\",\n    \"reborn\",\n    \"rebound\",\n    \"rebuff\",\n    \"rebuild\",\n    \"rebuilt\",\n    \"reburial\",\n    \"rebuttal\",\n    \"recall\",\n    \"recant\",\n    \"recapture\",\n    \"recast\",\n    \"recede\",\n    \"recent\",\n    \"recess\",\n    \"recharger\",\n    \"recipient\",\n    \"recital\",\n    \"recite\",\n    \"reckless\",\n    \"reclaim\",\n    \"recliner\",\n    \"reclining\",\n    \"recluse\",\n    \"reclusive\",\n    \"recognize\",\n    \"recoil\",\n    \"recollect\",\n    \"recolor\",\n    \"reconcile\",\n    \"reconfirm\",\n    \"reconvene\",\n    \"recopy\",\n    \"record\",\n    \"recount\",\n    \"recoup\",\n    \"recovery\",\n    \"recreate\",\n    \"rectal\",\n    \"rectangle\",\n    \"rectified\",\n    \"rectify\",\n    \"recycled\",\n    \"recycler\",\n    \"recycling\",\n    \"reemerge\",\n    \"reenact\",\n    \"reenter\",\n    \"reentry\",\n    \"reexamine\",\n    \"referable\",\n    \"referee\",\n    \"reference\",\n    \"refill\",\n    \"refinance\",\n    \"refined\",\n    \"refinery\",\n    \"refining\",\n    \"refinish\",\n    \"reflected\",\n    \"reflector\",\n    \"reflex\",\n    \"reflux\",\n    \"refocus\",\n    \"refold\",\n    \"reforest\",\n    \"reformat\",\n    \"reformed\",\n    \"reformer\",\n    \"reformist\",\n    \"refract\",\n    \"refrain\",\n    \"refreeze\",\n    \"refresh\",\n    \"refried\",\n    \"refueling\",\n    \"refund\",\n    \"refurbish\",\n    \"refurnish\",\n    \"refusal\",\n    \"refuse\",\n    \"refusing\",\n    \"refutable\",\n    \"refute\",\n    \"regain\",\n    \"regalia\",\n    \"regally\",\n    \"reggae\",\n    \"regime\",\n    \"region\",\n    \"register\",\n    \"registrar\",\n    \"registry\",\n    \"regress\",\n    \"regretful\",\n    \"regroup\",\n    \"regular\",\n    \"regulate\",\n    \"regulator\",\n    \"rehab\",\n    \"reheat\",\n    \"rehire\",\n    \"rehydrate\",\n    \"reimburse\",\n    \"reissue\",\n    \"reiterate\",\n    \"rejoice\",\n    \"rejoicing\",\n    \"rejoin\",\n    \"rekindle\",\n    \"relapse\",\n    \"relapsing\",\n    \"relatable\",\n    \"related\",\n    \"relation\",\n    \"relative\",\n    \"relax\",\n    \"relay\",\n    \"relearn\",\n    \"release\",\n    \"relenting\",\n    \"reliable\",\n    \"reliably\",\n    \"reliance\",\n    \"reliant\",\n    \"relic\",\n    \"relieve\",\n    \"relieving\",\n    \"relight\",\n    \"relish\",\n    \"relive\",\n    \"reload\",\n    \"relocate\",\n    \"relock\",\n    \"reluctant\",\n    \"rely\",\n    \"remake\",\n    \"remark\",\n    \"remarry\",\n    \"rematch\",\n    \"remedial\",\n    \"remedy\",\n    \"remember\",\n    \"reminder\",\n    \"remindful\",\n    \"remission\",\n    \"remix\",\n    \"remnant\",\n    \"remodeler\",\n    \"remold\",\n    \"remorse\",\n    \"remote\",\n    \"removable\",\n    \"removal\",\n    \"removed\",\n    \"remover\",\n    \"removing\",\n    \"rename\",\n    \"renderer\",\n    \"rendering\",\n    \"rendition\",\n    \"renegade\",\n    \"renewable\",\n    \"renewably\",\n    \"renewal\",\n    \"renewed\",\n    \"renounce\",\n    \"renovate\",\n    \"renovator\",\n    \"rentable\",\n    \"rental\",\n    \"rented\",\n    \"renter\",\n    \"reoccupy\",\n    \"reoccur\",\n    \"reopen\",\n    \"reorder\",\n    \"repackage\",\n    \"repacking\",\n    \"repaint\",\n    \"repair\",\n    \"repave\",\n    \"repaying\",\n    \"repayment\",\n    \"repeal\",\n    \"repeated\",\n    \"repeater\",\n    \"repent\",\n    \"rephrase\",\n    \"replace\",\n    \"replay\",\n    \"replica\",\n    \"reply\",\n    \"reporter\",\n    \"repose\",\n    \"repossess\",\n    \"repost\",\n    \"repressed\",\n    \"reprimand\",\n    \"reprint\",\n    \"reprise\",\n    \"reproach\",\n    \"reprocess\",\n    \"reproduce\",\n    \"reprogram\",\n    \"reps\",\n    \"reptile\",\n    \"reptilian\",\n    \"repugnant\",\n    \"repulsion\",\n    \"repulsive\",\n    \"repurpose\",\n    \"reputable\",\n    \"reputably\",\n    \"request\",\n    \"require\",\n    \"requisite\",\n    \"reroute\",\n    \"rerun\",\n    \"resale\",\n    \"resample\",\n    \"rescuer\",\n    \"reseal\",\n    \"research\",\n    \"reselect\",\n    \"reseller\",\n    \"resemble\",\n    \"resend\",\n    \"resent\",\n    \"reset\",\n    \"reshape\",\n    \"reshoot\",\n    \"reshuffle\",\n    \"residence\",\n    \"residency\",\n    \"resident\",\n    \"residual\",\n    \"residue\",\n    \"resigned\",\n    \"resilient\",\n    \"resistant\",\n    \"resisting\",\n    \"resize\",\n    \"resolute\",\n    \"resolved\",\n    \"resonant\",\n    \"resonate\",\n    \"resort\",\n    \"resource\",\n    \"respect\",\n    \"resubmit\",\n    \"result\",\n    \"resume\",\n    \"resupply\",\n    \"resurface\",\n    \"resurrect\",\n    \"retail\",\n    \"retainer\",\n    \"retaining\",\n    \"retake\",\n    \"retaliate\",\n    \"retention\",\n    \"rethink\",\n    \"retinal\",\n    \"retired\",\n    \"retiree\",\n    \"retiring\",\n    \"retold\",\n    \"retool\",\n    \"retorted\",\n    \"retouch\",\n    \"retrace\",\n    \"retract\",\n    \"retrain\",\n    \"retread\",\n    \"retreat\",\n    \"retrial\",\n    \"retrieval\",\n    \"retriever\",\n    \"retry\",\n    \"return\",\n    \"retying\",\n    \"retype\",\n    \"reunion\",\n    \"reunite\",\n    \"reusable\",\n    \"reuse\",\n    \"reveal\",\n    \"reveler\",\n    \"revenge\",\n    \"revenue\",\n    \"reverb\",\n    \"revered\",\n    \"reverence\",\n    \"reverend\",\n    \"reversal\",\n    \"reverse\",\n    \"reversing\",\n    \"reversion\",\n    \"revert\",\n    \"revisable\",\n    \"revise\",\n    \"revision\",\n    \"revisit\",\n    \"revivable\",\n    \"revival\",\n    \"reviver\",\n    \"reviving\",\n    \"revocable\",\n    \"revoke\",\n    \"revolt\",\n    \"revolver\",\n    \"revolving\",\n    \"reward\",\n    \"rewash\",\n    \"rewind\",\n    \"rewire\",\n    \"reword\",\n    \"rework\",\n    \"rewrap\",\n    \"rewrite\",\n    \"rhyme\",\n    \"ribbon\",\n    \"ribcage\",\n    \"rice\",\n    \"riches\",\n    \"richly\",\n    \"richness\",\n    \"rickety\",\n    \"ricotta\",\n    \"riddance\",\n    \"ridden\",\n    \"ride\",\n    \"riding\",\n    \"rifling\",\n    \"rift\",\n    \"rigging\",\n    \"rigid\",\n    \"rigor\",\n    \"rimless\",\n    \"rimmed\",\n    \"rind\",\n    \"rink\",\n    \"rinse\",\n    \"rinsing\",\n    \"riot\",\n    \"ripcord\",\n    \"ripeness\",\n    \"ripening\",\n    \"ripping\",\n    \"ripple\",\n    \"rippling\",\n    \"riptide\",\n    \"rise\",\n    \"rising\",\n    \"risk\",\n    \"risotto\",\n    \"ritalin\",\n    \"ritzy\",\n    \"rival\",\n    \"riverbank\",\n    \"riverbed\",\n    \"riverboat\",\n    \"riverside\",\n    \"riveter\",\n    \"riveting\",\n    \"roamer\",\n    \"roaming\",\n    \"roast\",\n    \"robbing\",\n    \"robe\",\n    \"robin\",\n    \"robotics\",\n    \"robust\",\n    \"rockband\",\n    \"rocker\",\n    \"rocket\",\n    \"rockfish\",\n    \"rockiness\",\n    \"rocking\",\n    \"rocklike\",\n    \"rockslide\",\n    \"rockstar\",\n    \"rocky\",\n    \"rogue\",\n    \"roman\",\n    \"romp\",\n    \"rope\",\n    \"roping\",\n    \"roster\",\n    \"rosy\",\n    \"rotten\",\n    \"rotting\",\n    \"rotunda\",\n    \"roulette\",\n    \"rounding\",\n    \"roundish\",\n    \"roundness\",\n    \"roundup\",\n    \"roundworm\",\n    \"routine\",\n    \"routing\",\n    \"rover\",\n    \"roving\",\n    \"royal\",\n    \"rubbed\",\n    \"rubber\",\n    \"rubbing\",\n    \"rubble\",\n    \"rubdown\",\n    \"ruby\",\n    \"ruckus\",\n    \"rudder\",\n    \"rug\",\n    \"ruined\",\n    \"rule\",\n    \"rumble\",\n    \"rumbling\",\n    \"rummage\",\n    \"rumor\",\n    \"runaround\",\n    \"rundown\",\n    \"runner\",\n    \"running\",\n    \"runny\",\n    \"runt\",\n    \"runway\",\n    \"rupture\",\n    \"rural\",\n    \"ruse\",\n    \"rush\",\n    \"rust\",\n    \"rut\",\n    \"sabbath\",\n    \"sabotage\",\n    \"sacrament\",\n    \"sacred\",\n    \"sacrifice\",\n    \"sadden\",\n    \"saddlebag\",\n    \"saddled\",\n    \"saddling\",\n    \"sadly\",\n    \"sadness\",\n    \"safari\",\n    \"safeguard\",\n    \"safehouse\",\n    \"safely\",\n    \"safeness\",\n    \"saffron\",\n    \"saga\",\n    \"sage\",\n    \"sagging\",\n    \"saggy\",\n    \"said\",\n    \"saint\",\n    \"sake\",\n    \"salad\",\n    \"salami\",\n    \"salaried\",\n    \"salary\",\n    \"saline\",\n    \"salon\",\n    \"saloon\",\n    \"salsa\",\n    \"salt\",\n    \"salutary\",\n    \"salute\",\n    \"salvage\",\n    \"salvaging\",\n    \"salvation\",\n    \"same\",\n    \"sample\",\n    \"sampling\",\n    \"sanction\",\n    \"sanctity\",\n    \"sanctuary\",\n    \"sandal\",\n    \"sandbag\",\n    \"sandbank\",\n    \"sandbar\",\n    \"sandblast\",\n    \"sandbox\",\n    \"sanded\",\n    \"sandfish\",\n    \"sanding\",\n    \"sandlot\",\n    \"sandpaper\",\n    \"sandpit\",\n    \"sandstone\",\n    \"sandstorm\",\n    \"sandworm\",\n    \"sandy\",\n    \"sanitary\",\n    \"sanitizer\",\n    \"sank\",\n    \"santa\",\n    \"sapling\",\n    \"sappiness\",\n    \"sappy\",\n    \"sarcasm\",\n    \"sarcastic\",\n    \"sardine\",\n    \"sash\",\n    \"sasquatch\",\n    \"sassy\",\n    \"satchel\",\n    \"satiable\",\n    \"satin\",\n    \"satirical\",\n    \"satisfied\",\n    \"satisfy\",\n    \"saturate\",\n    \"saturday\",\n    \"sauciness\",\n    \"saucy\",\n    \"sauna\",\n    \"savage\",\n    \"savanna\",\n    \"saved\",\n    \"savings\",\n    \"savior\",\n    \"savor\",\n    \"saxophone\",\n    \"say\",\n    \"scabbed\",\n    \"scabby\",\n    \"scalded\",\n    \"scalding\",\n    \"scale\",\n    \"scaling\",\n    \"scallion\",\n    \"scallop\",\n    \"scalping\",\n    \"scam\",\n    \"scandal\",\n    \"scanner\",\n    \"scanning\",\n    \"scant\",\n    \"scapegoat\",\n    \"scarce\",\n    \"scarcity\",\n    \"scarecrow\",\n    \"scared\",\n    \"scarf\",\n    \"scarily\",\n    \"scariness\",\n    \"scarring\",\n    \"scary\",\n    \"scavenger\",\n    \"scenic\",\n    \"schedule\",\n    \"schematic\",\n    \"scheme\",\n    \"scheming\",\n    \"schilling\",\n    \"schnapps\",\n    \"scholar\",\n    \"science\",\n    \"scientist\",\n    \"scion\",\n    \"scoff\",\n    \"scolding\",\n    \"scone\",\n    \"scoop\",\n    \"scooter\",\n    \"scope\",\n    \"scorch\",\n    \"scorebook\",\n    \"scorecard\",\n    \"scored\",\n    \"scoreless\",\n    \"scorer\",\n    \"scoring\",\n    \"scorn\",\n    \"scorpion\",\n    \"scotch\",\n    \"scoundrel\",\n    \"scoured\",\n    \"scouring\",\n    \"scouting\",\n    \"scouts\",\n    \"scowling\",\n    \"scrabble\",\n    \"scraggly\",\n    \"scrambled\",\n    \"scrambler\",\n    \"scrap\",\n    \"scratch\",\n    \"scrawny\",\n    \"screen\",\n    \"scribble\",\n    \"scribe\",\n    \"scribing\",\n    \"scrimmage\",\n    \"script\",\n    \"scroll\",\n    \"scrooge\",\n    \"scrounger\",\n    \"scrubbed\",\n    \"scrubber\",\n    \"scruffy\",\n    \"scrunch\",\n    \"scrutiny\",\n    \"scuba\",\n    \"scuff\",\n    \"sculptor\",\n    \"sculpture\",\n    \"scurvy\",\n    \"scuttle\",\n    \"secluded\",\n    \"secluding\",\n    \"seclusion\",\n    \"second\",\n    \"secrecy\",\n    \"secret\",\n    \"sectional\",\n    \"sector\",\n    \"secular\",\n    \"securely\",\n    \"security\",\n    \"sedan\",\n    \"sedate\",\n    \"sedation\",\n    \"sedative\",\n    \"sediment\",\n    \"seduce\",\n    \"seducing\",\n    \"segment\",\n    \"seismic\",\n    \"seizing\",\n    \"seldom\",\n    \"selected\",\n    \"selection\",\n    \"selective\",\n    \"selector\",\n    \"self\",\n    \"seltzer\",\n    \"semantic\",\n    \"semester\",\n    \"semicolon\",\n    \"semifinal\",\n    \"seminar\",\n    \"semisoft\",\n    \"semisweet\",\n    \"senate\",\n    \"senator\",\n    \"send\",\n    \"senior\",\n    \"senorita\",\n    \"sensation\",\n    \"sensitive\",\n    \"sensitize\",\n    \"sensually\",\n    \"sensuous\",\n    \"sepia\",\n    \"september\",\n    \"septic\",\n    \"septum\",\n    \"sequel\",\n    \"sequence\",\n    \"sequester\",\n    \"series\",\n    \"sermon\",\n    \"serotonin\",\n    \"serpent\",\n    \"serrated\",\n    \"serve\",\n    \"service\",\n    \"serving\",\n    \"sesame\",\n    \"sessions\",\n    \"setback\",\n    \"setting\",\n    \"settle\",\n    \"settling\",\n    \"setup\",\n    \"sevenfold\",\n    \"seventeen\",\n    \"seventh\",\n    \"seventy\",\n    \"severity\",\n    \"shabby\",\n    \"shack\",\n    \"shaded\",\n    \"shadily\",\n    \"shadiness\",\n    \"shading\",\n    \"shadow\",\n    \"shady\",\n    \"shaft\",\n    \"shakable\",\n    \"shakily\",\n    \"shakiness\",\n    \"shaking\",\n    \"shaky\",\n    \"shale\",\n    \"shallot\",\n    \"shallow\",\n    \"shame\",\n    \"shampoo\",\n    \"shamrock\",\n    \"shank\",\n    \"shanty\",\n    \"shape\",\n    \"shaping\",\n    \"share\",\n    \"sharpener\",\n    \"sharper\",\n    \"sharpie\",\n    \"sharply\",\n    \"sharpness\",\n    \"shawl\",\n    \"sheath\",\n    \"shed\",\n    \"sheep\",\n    \"sheet\",\n    \"shelf\",\n    \"shell\",\n    \"shelter\",\n    \"shelve\",\n    \"shelving\",\n    \"sherry\",\n    \"shield\",\n    \"shifter\",\n    \"shifting\",\n    \"shiftless\",\n    \"shifty\",\n    \"shimmer\",\n    \"shimmy\",\n    \"shindig\",\n    \"shine\",\n    \"shingle\",\n    \"shininess\",\n    \"shining\",\n    \"shiny\",\n    \"ship\",\n    \"shirt\",\n    \"shivering\",\n    \"shock\",\n    \"shone\",\n    \"shoplift\",\n    \"shopper\",\n    \"shopping\",\n    \"shoptalk\",\n    \"shore\",\n    \"shortage\",\n    \"shortcake\",\n    \"shortcut\",\n    \"shorten\",\n    \"shorter\",\n    \"shorthand\",\n    \"shortlist\",\n    \"shortly\",\n    \"shortness\",\n    \"shorts\",\n    \"shortwave\",\n    \"shorty\",\n    \"shout\",\n    \"shove\",\n    \"showbiz\",\n    \"showcase\",\n    \"showdown\",\n    \"shower\",\n    \"showgirl\",\n    \"showing\",\n    \"showman\",\n    \"shown\",\n    \"showoff\",\n    \"showpiece\",\n    \"showplace\",\n    \"showroom\",\n    \"showy\",\n    \"shrank\",\n    \"shrapnel\",\n    \"shredder\",\n    \"shredding\",\n    \"shrewdly\",\n    \"shriek\",\n    \"shrill\",\n    \"shrimp\",\n    \"shrine\",\n    \"shrink\",\n    \"shrivel\",\n    \"shrouded\",\n    \"shrubbery\",\n    \"shrubs\",\n    \"shrug\",\n    \"shrunk\",\n    \"shucking\",\n    \"shudder\",\n    \"shuffle\",\n    \"shuffling\",\n    \"shun\",\n    \"shush\",\n    \"shut\",\n    \"shy\",\n    \"siamese\",\n    \"siberian\",\n    \"sibling\",\n    \"siding\",\n    \"sierra\",\n    \"siesta\",\n    \"sift\",\n    \"sighing\",\n    \"silenced\",\n    \"silencer\",\n    \"silent\",\n    \"silica\",\n    \"silicon\",\n    \"silk\",\n    \"silliness\",\n    \"silly\",\n    \"silo\",\n    \"silt\",\n    \"silver\",\n    \"similarly\",\n    \"simile\",\n    \"simmering\",\n    \"simple\",\n    \"simplify\",\n    \"simply\",\n    \"sincere\",\n    \"sincerity\",\n    \"singer\",\n    \"singing\",\n    \"single\",\n    \"singular\",\n    \"sinister\",\n    \"sinless\",\n    \"sinner\",\n    \"sinuous\",\n    \"sip\",\n    \"siren\",\n    \"sister\",\n    \"sitcom\",\n    \"sitter\",\n    \"sitting\",\n    \"situated\",\n    \"situation\",\n    \"sixfold\",\n    \"sixteen\",\n    \"sixth\",\n    \"sixties\",\n    \"sixtieth\",\n    \"sixtyfold\",\n    \"sizable\",\n    \"sizably\",\n    \"size\",\n    \"sizing\",\n    \"sizzle\",\n    \"sizzling\",\n    \"skater\",\n    \"skating\",\n    \"skedaddle\",\n    \"skeletal\",\n    \"skeleton\",\n    \"skeptic\",\n    \"sketch\",\n    \"skewed\",\n    \"skewer\",\n    \"skid\",\n    \"skied\",\n    \"skier\",\n    \"skies\",\n    \"skiing\",\n    \"skilled\",\n    \"skillet\",\n    \"skillful\",\n    \"skimmed\",\n    \"skimmer\",\n    \"skimming\",\n    \"skimpily\",\n    \"skincare\",\n    \"skinhead\",\n    \"skinless\",\n    \"skinning\",\n    \"skinny\",\n    \"skintight\",\n    \"skipper\",\n    \"skipping\",\n    \"skirmish\",\n    \"skirt\",\n    \"skittle\",\n    \"skydiver\",\n    \"skylight\",\n    \"skyline\",\n    \"skype\",\n    \"skyrocket\",\n    \"skyward\",\n    \"slab\",\n    \"slacked\",\n    \"slacker\",\n    \"slacking\",\n    \"slackness\",\n    \"slacks\",\n    \"slain\",\n    \"slam\",\n    \"slander\",\n    \"slang\",\n    \"slapping\",\n    \"slapstick\",\n    \"slashed\",\n    \"slashing\",\n    \"slate\",\n    \"slather\",\n    \"slaw\",\n    \"sled\",\n    \"sleek\",\n    \"sleep\",\n    \"sleet\",\n    \"sleeve\",\n    \"slept\",\n    \"sliceable\",\n    \"sliced\",\n    \"slicer\",\n    \"slicing\",\n    \"slick\",\n    \"slider\",\n    \"slideshow\",\n    \"sliding\",\n    \"slighted\",\n    \"slighting\",\n    \"slightly\",\n    \"slimness\",\n    \"slimy\",\n    \"slinging\",\n    \"slingshot\",\n    \"slinky\",\n    \"slip\",\n    \"slit\",\n    \"sliver\",\n    \"slobbery\",\n    \"slogan\",\n    \"sloped\",\n    \"sloping\",\n    \"sloppily\",\n    \"sloppy\",\n    \"slot\",\n    \"slouching\",\n    \"slouchy\",\n    \"sludge\",\n    \"slug\",\n    \"slum\",\n    \"slurp\",\n    \"slush\",\n    \"sly\",\n    \"small\",\n    \"smartly\",\n    \"smartness\",\n    \"smasher\",\n    \"smashing\",\n    \"smashup\",\n    \"smell\",\n    \"smelting\",\n    \"smile\",\n    \"smilingly\",\n    \"smirk\",\n    \"smite\",\n    \"smith\",\n    \"smitten\",\n    \"smock\",\n    \"smog\",\n    \"smoked\",\n    \"smokeless\",\n    \"smokiness\",\n    \"smoking\",\n    \"smoky\",\n    \"smolder\",\n    \"smooth\",\n    \"smother\",\n    \"smudge\",\n    \"smudgy\",\n    \"smuggler\",\n    \"smuggling\",\n    \"smugly\",\n    \"smugness\",\n    \"snack\",\n    \"snagged\",\n    \"snaking\",\n    \"snap\",\n    \"snare\",\n    \"snarl\",\n    \"snazzy\",\n    \"sneak\",\n    \"sneer\",\n    \"sneeze\",\n    \"sneezing\",\n    \"snide\",\n    \"sniff\",\n    \"snippet\",\n    \"snipping\",\n    \"snitch\",\n    \"snooper\",\n    \"snooze\",\n    \"snore\",\n    \"snoring\",\n    \"snorkel\",\n    \"snort\",\n    \"snout\",\n    \"snowbird\",\n    \"snowboard\",\n    \"snowbound\",\n    \"snowcap\",\n    \"snowdrift\",\n    \"snowdrop\",\n    \"snowfall\",\n    \"snowfield\",\n    \"snowflake\",\n    \"snowiness\",\n    \"snowless\",\n    \"snowman\",\n    \"snowplow\",\n    \"snowshoe\",\n    \"snowstorm\",\n    \"snowsuit\",\n    \"snowy\",\n    \"snub\",\n    \"snuff\",\n    \"snuggle\",\n    \"snugly\",\n    \"snugness\",\n    \"speak\",\n    \"spearfish\",\n    \"spearhead\",\n    \"spearman\",\n    \"spearmint\",\n    \"species\",\n    \"specimen\",\n    \"specked\",\n    \"speckled\",\n    \"specks\",\n    \"spectacle\",\n    \"spectator\",\n    \"spectrum\",\n    \"speculate\",\n    \"speech\",\n    \"speed\",\n    \"spellbind\",\n    \"speller\",\n    \"spelling\",\n    \"spendable\",\n    \"spender\",\n    \"spending\",\n    \"spent\",\n    \"spew\",\n    \"sphere\",\n    \"spherical\",\n    \"sphinx\",\n    \"spider\",\n    \"spied\",\n    \"spiffy\",\n    \"spill\",\n    \"spilt\",\n    \"spinach\",\n    \"spinal\",\n    \"spindle\",\n    \"spinner\",\n    \"spinning\",\n    \"spinout\",\n    \"spinster\",\n    \"spiny\",\n    \"spiral\",\n    \"spirited\",\n    \"spiritism\",\n    \"spirits\",\n    \"spiritual\",\n    \"splashed\",\n    \"splashing\",\n    \"splashy\",\n    \"splatter\",\n    \"spleen\",\n    \"splendid\",\n    \"splendor\",\n    \"splice\",\n    \"splicing\",\n    \"splinter\",\n    \"splotchy\",\n    \"splurge\",\n    \"spoilage\",\n    \"spoiled\",\n    \"spoiler\",\n    \"spoiling\",\n    \"spoils\",\n    \"spoken\",\n    \"spokesman\",\n    \"sponge\",\n    \"spongy\",\n    \"sponsor\",\n    \"spoof\",\n    \"spookily\",\n    \"spooky\",\n    \"spool\",\n    \"spoon\",\n    \"spore\",\n    \"sporting\",\n    \"sports\",\n    \"sporty\",\n    \"spotless\",\n    \"spotlight\",\n    \"spotted\",\n    \"spotter\",\n    \"spotting\",\n    \"spotty\",\n    \"spousal\",\n    \"spouse\",\n    \"spout\",\n    \"sprain\",\n    \"sprang\",\n    \"sprawl\",\n    \"spray\",\n    \"spree\",\n    \"sprig\",\n    \"spring\",\n    \"sprinkled\",\n    \"sprinkler\",\n    \"sprint\",\n    \"sprite\",\n    \"sprout\",\n    \"spruce\",\n    \"sprung\",\n    \"spry\",\n    \"spud\",\n    \"spur\",\n    \"sputter\",\n    \"spyglass\",\n    \"squabble\",\n    \"squad\",\n    \"squall\",\n    \"squander\",\n    \"squash\",\n    \"squatted\",\n    \"squatter\",\n    \"squatting\",\n    \"squeak\",\n    \"squealer\",\n    \"squealing\",\n    \"squeamish\",\n    \"squeegee\",\n    \"squeeze\",\n    \"squeezing\",\n    \"squid\",\n    \"squiggle\",\n    \"squiggly\",\n    \"squint\",\n    \"squire\",\n    \"squirt\",\n    \"squishier\",\n    \"squishy\",\n    \"stability\",\n    \"stabilize\",\n    \"stable\",\n    \"stack\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"staging\",\n    \"stagnant\",\n    \"stagnate\",\n    \"stainable\",\n    \"stained\",\n    \"staining\",\n    \"stainless\",\n    \"stalemate\",\n    \"staleness\",\n    \"stalling\",\n    \"stallion\",\n    \"stamina\",\n    \"stammer\",\n    \"stamp\",\n    \"stand\",\n    \"stank\",\n    \"staple\",\n    \"stapling\",\n    \"starboard\",\n    \"starch\",\n    \"stardom\",\n    \"stardust\",\n    \"starfish\",\n    \"stargazer\",\n    \"staring\",\n    \"stark\",\n    \"starless\",\n    \"starlet\",\n    \"starlight\",\n    \"starlit\",\n    \"starring\",\n    \"starry\",\n    \"starship\",\n    \"starter\",\n    \"starting\",\n    \"startle\",\n    \"startling\",\n    \"startup\",\n    \"starved\",\n    \"starving\",\n    \"stash\",\n    \"state\",\n    \"static\",\n    \"statistic\",\n    \"statue\",\n    \"stature\",\n    \"status\",\n    \"statute\",\n    \"statutory\",\n    \"staunch\",\n    \"stays\",\n    \"steadfast\",\n    \"steadier\",\n    \"steadily\",\n    \"steadying\",\n    \"steam\",\n    \"steed\",\n    \"steep\",\n    \"steerable\",\n    \"steering\",\n    \"steersman\",\n    \"stegosaur\",\n    \"stellar\",\n    \"stem\",\n    \"stench\",\n    \"stencil\",\n    \"step\",\n    \"stereo\",\n    \"sterile\",\n    \"sterility\",\n    \"sterilize\",\n    \"sterling\",\n    \"sternness\",\n    \"sternum\",\n    \"stew\",\n    \"stick\",\n    \"stiffen\",\n    \"stiffly\",\n    \"stiffness\",\n    \"stifle\",\n    \"stifling\",\n    \"stillness\",\n    \"stilt\",\n    \"stimulant\",\n    \"stimulate\",\n    \"stimuli\",\n    \"stimulus\",\n    \"stinger\",\n    \"stingily\",\n    \"stinging\",\n    \"stingray\",\n    \"stingy\",\n    \"stinking\",\n    \"stinky\",\n    \"stipend\",\n    \"stipulate\",\n    \"stir\",\n    \"stitch\",\n    \"stock\",\n    \"stoic\",\n    \"stoke\",\n    \"stole\",\n    \"stomp\",\n    \"stonewall\",\n    \"stoneware\",\n    \"stonework\",\n    \"stoning\",\n    \"stony\",\n    \"stood\",\n    \"stooge\",\n    \"stool\",\n    \"stoop\",\n    \"stoplight\",\n    \"stoppable\",\n    \"stoppage\",\n    \"stopped\",\n    \"stopper\",\n    \"stopping\",\n    \"stopwatch\",\n    \"storable\",\n    \"storage\",\n    \"storeroom\",\n    \"storewide\",\n    \"storm\",\n    \"stout\",\n    \"stove\",\n    \"stowaway\",\n    \"stowing\",\n    \"straddle\",\n    \"straggler\",\n    \"strained\",\n    \"strainer\",\n    \"straining\",\n    \"strangely\",\n    \"stranger\",\n    \"strangle\",\n    \"strategic\",\n    \"strategy\",\n    \"stratus\",\n    \"straw\",\n    \"stray\",\n    \"streak\",\n    \"stream\",\n    \"street\",\n    \"strength\",\n    \"strenuous\",\n    \"strep\",\n    \"stress\",\n    \"stretch\",\n    \"strewn\",\n    \"stricken\",\n    \"strict\",\n    \"stride\",\n    \"strife\",\n    \"strike\",\n    \"striking\",\n    \"strive\",\n    \"striving\",\n    \"strobe\",\n    \"strode\",\n    \"stroller\",\n    \"strongbox\",\n    \"strongly\",\n    \"strongman\",\n    \"struck\",\n    \"structure\",\n    \"strudel\",\n    \"struggle\",\n    \"strum\",\n    \"strung\",\n    \"strut\",\n    \"stubbed\",\n    \"stubble\",\n    \"stubbly\",\n    \"stubborn\",\n    \"stucco\",\n    \"stuck\",\n    \"student\",\n    \"studied\",\n    \"studio\",\n    \"study\",\n    \"stuffed\",\n    \"stuffing\",\n    \"stuffy\",\n    \"stumble\",\n    \"stumbling\",\n    \"stump\",\n    \"stung\",\n    \"stunned\",\n    \"stunner\",\n    \"stunning\",\n    \"stunt\",\n    \"stupor\",\n    \"sturdily\",\n    \"sturdy\",\n    \"styling\",\n    \"stylishly\",\n    \"stylist\",\n    \"stylized\",\n    \"stylus\",\n    \"suave\",\n    \"subarctic\",\n    \"subatomic\",\n    \"subdivide\",\n    \"subdued\",\n    \"subduing\",\n    \"subfloor\",\n    \"subgroup\",\n    \"subheader\",\n    \"subject\",\n    \"sublease\",\n    \"sublet\",\n    \"sublevel\",\n    \"sublime\",\n    \"submarine\",\n    \"submerge\",\n    \"submersed\",\n    \"submitter\",\n    \"subpanel\",\n    \"subpar\",\n    \"subplot\",\n    \"subprime\",\n    \"subscribe\",\n    \"subscript\",\n    \"subsector\",\n    \"subside\",\n    \"subsiding\",\n    \"subsidize\",\n    \"subsidy\",\n    \"subsoil\",\n    \"subsonic\",\n    \"substance\",\n    \"subsystem\",\n    \"subtext\",\n    \"subtitle\",\n    \"subtly\",\n    \"subtotal\",\n    \"subtract\",\n    \"subtype\",\n    \"suburb\",\n    \"subway\",\n    \"subwoofer\",\n    \"subzero\",\n    \"succulent\",\n    \"such\",\n    \"suction\",\n    \"sudden\",\n    \"sudoku\",\n    \"suds\",\n    \"sufferer\",\n    \"suffering\",\n    \"suffice\",\n    \"suffix\",\n    \"suffocate\",\n    \"suffrage\",\n    \"sugar\",\n    \"suggest\",\n    \"suing\",\n    \"suitable\",\n    \"suitably\",\n    \"suitcase\",\n    \"suitor\",\n    \"sulfate\",\n    \"sulfide\",\n    \"sulfite\",\n    \"sulfur\",\n    \"sulk\",\n    \"sullen\",\n    \"sulphate\",\n    \"sulphuric\",\n    \"sultry\",\n    \"superbowl\",\n    \"superglue\",\n    \"superhero\",\n    \"superior\",\n    \"superjet\",\n    \"superman\",\n    \"supermom\",\n    \"supernova\",\n    \"supervise\",\n    \"supper\",\n    \"supplier\",\n    \"supply\",\n    \"support\",\n    \"supremacy\",\n    \"supreme\",\n    \"surcharge\",\n    \"surely\",\n    \"sureness\",\n    \"surface\",\n    \"surfacing\",\n    \"surfboard\",\n    \"surfer\",\n    \"surgery\",\n    \"surgical\",\n    \"surging\",\n    \"surname\",\n    \"surpass\",\n    \"surplus\",\n    \"surprise\",\n    \"surreal\",\n    \"surrender\",\n    \"surrogate\",\n    \"surround\",\n    \"survey\",\n    \"survival\",\n    \"survive\",\n    \"surviving\",\n    \"survivor\",\n    \"sushi\",\n    \"suspect\",\n    \"suspend\",\n    \"suspense\",\n    \"sustained\",\n    \"sustainer\",\n    \"swab\",\n    \"swaddling\",\n    \"swagger\",\n    \"swampland\",\n    \"swan\",\n    \"swapping\",\n    \"swarm\",\n    \"sway\",\n    \"swear\",\n    \"sweat\",\n    \"sweep\",\n    \"swell\",\n    \"swept\",\n    \"swerve\",\n    \"swifter\",\n    \"swiftly\",\n    \"swiftness\",\n    \"swimmable\",\n    \"swimmer\",\n    \"swimming\",\n    \"swimsuit\",\n    \"swimwear\",\n    \"swinger\",\n    \"swinging\",\n    \"swipe\",\n    \"swirl\",\n    \"switch\",\n    \"swivel\",\n    \"swizzle\",\n    \"swooned\",\n    \"swoop\",\n    \"swoosh\",\n    \"swore\",\n    \"sworn\",\n    \"swung\",\n    \"sycamore\",\n    \"sympathy\",\n    \"symphonic\",\n    \"symphony\",\n    \"symptom\",\n    \"synapse\",\n    \"syndrome\",\n    \"synergy\",\n    \"synopses\",\n    \"synopsis\",\n    \"synthesis\",\n    \"synthetic\",\n    \"syrup\",\n    \"system\",\n    \"t-shirt\",\n    \"tabasco\",\n    \"tabby\",\n    \"tableful\",\n    \"tables\",\n    \"tablet\",\n    \"tableware\",\n    \"tabloid\",\n    \"tackiness\",\n    \"tacking\",\n    \"tackle\",\n    \"tackling\",\n    \"tacky\",\n    \"taco\",\n    \"tactful\",\n    \"tactical\",\n    \"tactics\",\n    \"tactile\",\n    \"tactless\",\n    \"tadpole\",\n    \"taekwondo\",\n    \"tag\",\n    \"tainted\",\n    \"take\",\n    \"taking\",\n    \"talcum\",\n    \"talisman\",\n    \"tall\",\n    \"talon\",\n    \"tamale\",\n    \"tameness\",\n    \"tamer\",\n    \"tamper\",\n    \"tank\",\n    \"tanned\",\n    \"tannery\",\n    \"tanning\",\n    \"tantrum\",\n    \"tapeless\",\n    \"tapered\",\n    \"tapering\",\n    \"tapestry\",\n    \"tapioca\",\n    \"tapping\",\n    \"taps\",\n    \"tarantula\",\n    \"target\",\n    \"tarmac\",\n    \"tarnish\",\n    \"tarot\",\n    \"tartar\",\n    \"tartly\",\n    \"tartness\",\n    \"task\",\n    \"tassel\",\n    \"taste\",\n    \"tastiness\",\n    \"tasting\",\n    \"tasty\",\n    \"tattered\",\n    \"tattle\",\n    \"tattling\",\n    \"tattoo\",\n    \"taunt\",\n    \"tavern\",\n    \"thank\",\n    \"that\",\n    \"thaw\",\n    \"theater\",\n    \"theatrics\",\n    \"thee\",\n    \"theft\",\n    \"theme\",\n    \"theology\",\n    \"theorize\",\n    \"thermal\",\n    \"thermos\",\n    \"thesaurus\",\n    \"these\",\n    \"thesis\",\n    \"thespian\",\n    \"thicken\",\n    \"thicket\",\n    \"thickness\",\n    \"thieving\",\n    \"thievish\",\n    \"thigh\",\n    \"thimble\",\n    \"thing\",\n    \"think\",\n    \"thinly\",\n    \"thinner\",\n    \"thinness\",\n    \"thinning\",\n    \"thirstily\",\n    \"thirsting\",\n    \"thirsty\",\n    \"thirteen\",\n    \"thirty\",\n    \"thong\",\n    \"thorn\",\n    \"those\",\n    \"thousand\",\n    \"thrash\",\n    \"thread\",\n    \"threaten\",\n    \"threefold\",\n    \"thrift\",\n    \"thrill\",\n    \"thrive\",\n    \"thriving\",\n    \"throat\",\n    \"throbbing\",\n    \"throng\",\n    \"throttle\",\n    \"throwaway\",\n    \"throwback\",\n    \"thrower\",\n    \"throwing\",\n    \"thud\",\n    \"thumb\",\n    \"thumping\",\n    \"thursday\",\n    \"thus\",\n    \"thwarting\",\n    \"thyself\",\n    \"tiara\",\n    \"tibia\",\n    \"tidal\",\n    \"tidbit\",\n    \"tidiness\",\n    \"tidings\",\n    \"tidy\",\n    \"tiger\",\n    \"tighten\",\n    \"tightly\",\n    \"tightness\",\n    \"tightrope\",\n    \"tightwad\",\n    \"tigress\",\n    \"tile\",\n    \"tiling\",\n    \"till\",\n    \"tilt\",\n    \"timid\",\n    \"timing\",\n    \"timothy\",\n    \"tinderbox\",\n    \"tinfoil\",\n    \"tingle\",\n    \"tingling\",\n    \"tingly\",\n    \"tinker\",\n    \"tinkling\",\n    \"tinsel\",\n    \"tinsmith\",\n    \"tint\",\n    \"tinwork\",\n    \"tiny\",\n    \"tipoff\",\n    \"tipped\",\n    \"tipper\",\n    \"tipping\",\n    \"tiptoeing\",\n    \"tiptop\",\n    \"tiring\",\n    \"tissue\",\n    \"trace\",\n    \"tracing\",\n    \"track\",\n    \"traction\",\n    \"tractor\",\n    \"trade\",\n    \"trading\",\n    \"tradition\",\n    \"traffic\",\n    \"tragedy\",\n    \"trailing\",\n    \"trailside\",\n    \"train\",\n    \"traitor\",\n    \"trance\",\n    \"tranquil\",\n    \"transfer\",\n    \"transform\",\n    \"translate\",\n    \"transpire\",\n    \"transport\",\n    \"transpose\",\n    \"trapdoor\",\n    \"trapeze\",\n    \"trapezoid\",\n    \"trapped\",\n    \"trapper\",\n    \"trapping\",\n    \"traps\",\n    \"trash\",\n    \"travel\",\n    \"traverse\",\n    \"travesty\",\n    \"tray\",\n    \"treachery\",\n    \"treading\",\n    \"treadmill\",\n    \"treason\",\n    \"treat\",\n    \"treble\",\n    \"tree\",\n    \"trekker\",\n    \"tremble\",\n    \"trembling\",\n    \"tremor\",\n    \"trench\",\n    \"trend\",\n    \"trespass\",\n    \"triage\",\n    \"trial\",\n    \"triangle\",\n    \"tribesman\",\n    \"tribunal\",\n    \"tribune\",\n    \"tributary\",\n    \"tribute\",\n    \"triceps\",\n    \"trickery\",\n    \"trickily\",\n    \"tricking\",\n    \"trickle\",\n    \"trickster\",\n    \"tricky\",\n    \"tricolor\",\n    \"tricycle\",\n    \"trident\",\n    \"tried\",\n    \"trifle\",\n    \"trifocals\",\n    \"trillion\",\n    \"trilogy\",\n    \"trimester\",\n    \"trimmer\",\n    \"trimming\",\n    \"trimness\",\n    \"trinity\",\n    \"trio\",\n    \"tripod\",\n    \"tripping\",\n    \"triumph\",\n    \"trivial\",\n    \"trodden\",\n    \"trolling\",\n    \"trombone\",\n    \"trophy\",\n    \"tropical\",\n    \"tropics\",\n    \"trouble\",\n    \"troubling\",\n    \"trough\",\n    \"trousers\",\n    \"trout\",\n    \"trowel\",\n    \"truce\",\n    \"truck\",\n    \"truffle\",\n    \"trump\",\n    \"trunks\",\n    \"trustable\",\n    \"trustee\",\n    \"trustful\",\n    \"trusting\",\n    \"trustless\",\n    \"truth\",\n    \"try\",\n    \"tubby\",\n    \"tubeless\",\n    \"tubular\",\n    \"tucking\",\n    \"tuesday\",\n    \"tug\",\n    \"tuition\",\n    \"tulip\",\n    \"tumble\",\n    \"tumbling\",\n    \"tummy\",\n    \"turban\",\n    \"turbine\",\n    \"turbofan\",\n    \"turbojet\",\n    \"turbulent\",\n    \"turf\",\n    \"turkey\",\n    \"turmoil\",\n    \"turret\",\n    \"turtle\",\n    \"tusk\",\n    \"tutor\",\n    \"tutu\",\n    \"tux\",\n    \"tweak\",\n    \"tweed\",\n    \"tweet\",\n    \"tweezers\",\n    \"twelve\",\n    \"twentieth\",\n    \"twenty\",\n    \"twerp\",\n    \"twice\",\n    \"twiddle\",\n    \"twiddling\",\n    \"twig\",\n    \"twilight\",\n    \"twine\",\n    \"twins\",\n    \"twirl\",\n    \"twistable\",\n    \"twisted\",\n    \"twister\",\n    \"twisting\",\n    \"twisty\",\n    \"twitch\",\n    \"twitter\",\n    \"tycoon\",\n    \"tying\",\n    \"tyke\",\n    \"udder\",\n    \"ultimate\",\n    \"ultimatum\",\n    \"ultra\",\n    \"umbilical\",\n    \"umbrella\",\n    \"umpire\",\n    \"unabashed\",\n    \"unable\",\n    \"unadorned\",\n    \"unadvised\",\n    \"unafraid\",\n    \"unaired\",\n    \"unaligned\",\n    \"unaltered\",\n    \"unarmored\",\n    \"unashamed\",\n    \"unaudited\",\n    \"unawake\",\n    \"unaware\",\n    \"unbaked\",\n    \"unbalance\",\n    \"unbeaten\",\n    \"unbend\",\n    \"unbent\",\n    \"unbiased\",\n    \"unbitten\",\n    \"unblended\",\n    \"unblessed\",\n    \"unblock\",\n    \"unbolted\",\n    \"unbounded\",\n    \"unboxed\",\n    \"unbraided\",\n    \"unbridle\",\n    \"unbroken\",\n    \"unbuckled\",\n    \"unbundle\",\n    \"unburned\",\n    \"unbutton\",\n    \"uncanny\",\n    \"uncapped\",\n    \"uncaring\",\n    \"uncertain\",\n    \"unchain\",\n    \"unchanged\",\n    \"uncharted\",\n    \"uncheck\",\n    \"uncivil\",\n    \"unclad\",\n    \"unclaimed\",\n    \"unclamped\",\n    \"unclasp\",\n    \"uncle\",\n    \"unclip\",\n    \"uncloak\",\n    \"unclog\",\n    \"unclothed\",\n    \"uncoated\",\n    \"uncoiled\",\n    \"uncolored\",\n    \"uncombed\",\n    \"uncommon\",\n    \"uncooked\",\n    \"uncork\",\n    \"uncorrupt\",\n    \"uncounted\",\n    \"uncouple\",\n    \"uncouth\",\n    \"uncover\",\n    \"uncross\",\n    \"uncrown\",\n    \"uncrushed\",\n    \"uncured\",\n    \"uncurious\",\n    \"uncurled\",\n    \"uncut\",\n    \"undamaged\",\n    \"undated\",\n    \"undaunted\",\n    \"undead\",\n    \"undecided\",\n    \"undefined\",\n    \"underage\",\n    \"underarm\",\n    \"undercoat\",\n    \"undercook\",\n    \"undercut\",\n    \"underdog\",\n    \"underdone\",\n    \"underfed\",\n    \"underfeed\",\n    \"underfoot\",\n    \"undergo\",\n    \"undergrad\",\n    \"underhand\",\n    \"underline\",\n    \"underling\",\n    \"undermine\",\n    \"undermost\",\n    \"underpaid\",\n    \"underpass\",\n    \"underpay\",\n    \"underrate\",\n    \"undertake\",\n    \"undertone\",\n    \"undertook\",\n    \"undertow\",\n    \"underuse\",\n    \"underwear\",\n    \"underwent\",\n    \"underwire\",\n    \"undesired\",\n    \"undiluted\",\n    \"undivided\",\n    \"undocked\",\n    \"undoing\",\n    \"undone\",\n    \"undrafted\",\n    \"undress\",\n    \"undrilled\",\n    \"undusted\",\n    \"undying\",\n    \"unearned\",\n    \"unearth\",\n    \"unease\",\n    \"uneasily\",\n    \"uneasy\",\n    \"uneatable\",\n    \"uneaten\",\n    \"unedited\",\n    \"unelected\",\n    \"unending\",\n    \"unengaged\",\n    \"unenvied\",\n    \"unequal\",\n    \"unethical\",\n    \"uneven\",\n    \"unexpired\",\n    \"unexposed\",\n    \"unfailing\",\n    \"unfair\",\n    \"unfasten\",\n    \"unfazed\",\n    \"unfeeling\",\n    \"unfiled\",\n    \"unfilled\",\n    \"unfitted\",\n    \"unfitting\",\n    \"unfixable\",\n    \"unfixed\",\n    \"unflawed\",\n    \"unfocused\",\n    \"unfold\",\n    \"unfounded\",\n    \"unframed\",\n    \"unfreeze\",\n    \"unfrosted\",\n    \"unfrozen\",\n    \"unfunded\",\n    \"unglazed\",\n    \"ungloved\",\n    \"unglue\",\n    \"ungodly\",\n    \"ungraded\",\n    \"ungreased\",\n    \"unguarded\",\n    \"unguided\",\n    \"unhappily\",\n    \"unhappy\",\n    \"unharmed\",\n    \"unhealthy\",\n    \"unheard\",\n    \"unhearing\",\n    \"unheated\",\n    \"unhelpful\",\n    \"unhidden\",\n    \"unhinge\",\n    \"unhitched\",\n    \"unholy\",\n    \"unhook\",\n    \"unicorn\",\n    \"unicycle\",\n    \"unified\",\n    \"unifier\",\n    \"uniformed\",\n    \"uniformly\",\n    \"unify\",\n    \"unimpeded\",\n    \"uninjured\",\n    \"uninstall\",\n    \"uninsured\",\n    \"uninvited\",\n    \"union\",\n    \"uniquely\",\n    \"unisexual\",\n    \"unison\",\n    \"unissued\",\n    \"unit\",\n    \"universal\",\n    \"universe\",\n    \"unjustly\",\n    \"unkempt\",\n    \"unkind\",\n    \"unknotted\",\n    \"unknowing\",\n    \"unknown\",\n    \"unlaced\",\n    \"unlatch\",\n    \"unlawful\",\n    \"unleaded\",\n    \"unlearned\",\n    \"unleash\",\n    \"unless\",\n    \"unleveled\",\n    \"unlighted\",\n    \"unlikable\",\n    \"unlimited\",\n    \"unlined\",\n    \"unlinked\",\n    \"unlisted\",\n    \"unlit\",\n    \"unlivable\",\n    \"unloaded\",\n    \"unloader\",\n    \"unlocked\",\n    \"unlocking\",\n    \"unlovable\",\n    \"unloved\",\n    \"unlovely\",\n    \"unloving\",\n    \"unluckily\",\n    \"unlucky\",\n    \"unmade\",\n    \"unmanaged\",\n    \"unmanned\",\n    \"unmapped\",\n    \"unmarked\",\n    \"unmasked\",\n    \"unmasking\",\n    \"unmatched\",\n    \"unmindful\",\n    \"unmixable\",\n    \"unmixed\",\n    \"unmolded\",\n    \"unmoral\",\n    \"unmovable\",\n    \"unmoved\",\n    \"unmoving\",\n    \"unnamable\",\n    \"unnamed\",\n    \"unnatural\",\n    \"unneeded\",\n    \"unnerve\",\n    \"unnerving\",\n    \"unnoticed\",\n    \"unopened\",\n    \"unopposed\",\n    \"unpack\",\n    \"unpadded\",\n    \"unpaid\",\n    \"unpainted\",\n    \"unpaired\",\n    \"unpaved\",\n    \"unpeeled\",\n    \"unpicked\",\n    \"unpiloted\",\n    \"unpinned\",\n    \"unplanned\",\n    \"unplanted\",\n    \"unpleased\",\n    \"unpledged\",\n    \"unplowed\",\n    \"unplug\",\n    \"unpopular\",\n    \"unproven\",\n    \"unquote\",\n    \"unranked\",\n    \"unrated\",\n    \"unraveled\",\n    \"unreached\",\n    \"unread\",\n    \"unreal\",\n    \"unreeling\",\n    \"unrefined\",\n    \"unrelated\",\n    \"unrented\",\n    \"unrest\",\n    \"unretired\",\n    \"unrevised\",\n    \"unrigged\",\n    \"unripe\",\n    \"unrivaled\",\n    \"unroasted\",\n    \"unrobed\",\n    \"unroll\",\n    \"unruffled\",\n    \"unruly\",\n    \"unrushed\",\n    \"unsaddle\",\n    \"unsafe\",\n    \"unsaid\",\n    \"unsalted\",\n    \"unsaved\",\n    \"unsavory\",\n    \"unscathed\",\n    \"unscented\",\n    \"unscrew\",\n    \"unsealed\",\n    \"unseated\",\n    \"unsecured\",\n    \"unseeing\",\n    \"unseemly\",\n    \"unseen\",\n    \"unselect\",\n    \"unselfish\",\n    \"unsent\",\n    \"unsettled\",\n    \"unshackle\",\n    \"unshaken\",\n    \"unshaved\",\n    \"unshaven\",\n    \"unsheathe\",\n    \"unshipped\",\n    \"unsightly\",\n    \"unsigned\",\n    \"unskilled\",\n    \"unsliced\",\n    \"unsmooth\",\n    \"unsnap\",\n    \"unsocial\",\n    \"unsoiled\",\n    \"unsold\",\n    \"unsolved\",\n    \"unsorted\",\n    \"unspoiled\",\n    \"unspoken\",\n    \"unstable\",\n    \"unstaffed\",\n    \"unstamped\",\n    \"unsteady\",\n    \"unsterile\",\n    \"unstirred\",\n    \"unstitch\",\n    \"unstopped\",\n    \"unstuck\",\n    \"unstuffed\",\n    \"unstylish\",\n    \"unsubtle\",\n    \"unsubtly\",\n    \"unsuited\",\n    \"unsure\",\n    \"unsworn\",\n    \"untagged\",\n    \"untainted\",\n    \"untaken\",\n    \"untamed\",\n    \"untangled\",\n    \"untapped\",\n    \"untaxed\",\n    \"unthawed\",\n    \"unthread\",\n    \"untidy\",\n    \"untie\",\n    \"until\",\n    \"untimed\",\n    \"untimely\",\n    \"untitled\",\n    \"untoasted\",\n    \"untold\",\n    \"untouched\",\n    \"untracked\",\n    \"untrained\",\n    \"untreated\",\n    \"untried\",\n    \"untrimmed\",\n    \"untrue\",\n    \"untruth\",\n    \"unturned\",\n    \"untwist\",\n    \"untying\",\n    \"unusable\",\n    \"unused\",\n    \"unusual\",\n    \"unvalued\",\n    \"unvaried\",\n    \"unvarying\",\n    \"unveiled\",\n    \"unveiling\",\n    \"unvented\",\n    \"unviable\",\n    \"unvisited\",\n    \"unvocal\",\n    \"unwanted\",\n    \"unwarlike\",\n    \"unwary\",\n    \"unwashed\",\n    \"unwatched\",\n    \"unweave\",\n    \"unwed\",\n    \"unwelcome\",\n    \"unwell\",\n    \"unwieldy\",\n    \"unwilling\",\n    \"unwind\",\n    \"unwired\",\n    \"unwitting\",\n    \"unwomanly\",\n    \"unworldly\",\n    \"unworn\",\n    \"unworried\",\n    \"unworthy\",\n    \"unwound\",\n    \"unwoven\",\n    \"unwrapped\",\n    \"unwritten\",\n    \"unzip\",\n    \"upbeat\",\n    \"upchuck\",\n    \"upcoming\",\n    \"upcountry\",\n    \"update\",\n    \"upfront\",\n    \"upgrade\",\n    \"upheaval\",\n    \"upheld\",\n    \"uphill\",\n    \"uphold\",\n    \"uplifted\",\n    \"uplifting\",\n    \"upload\",\n    \"upon\",\n    \"upper\",\n    \"upright\",\n    \"uprising\",\n    \"upriver\",\n    \"uproar\",\n    \"uproot\",\n    \"upscale\",\n    \"upside\",\n    \"upstage\",\n    \"upstairs\",\n    \"upstart\",\n    \"upstate\",\n    \"upstream\",\n    \"upstroke\",\n    \"upswing\",\n    \"uptake\",\n    \"uptight\",\n    \"uptown\",\n    \"upturned\",\n    \"upward\",\n    \"upwind\",\n    \"uranium\",\n    \"urban\",\n    \"urchin\",\n    \"urethane\",\n    \"urgency\",\n    \"urgent\",\n    \"urging\",\n    \"urologist\",\n    \"urology\",\n    \"usable\",\n    \"usage\",\n    \"useable\",\n    \"used\",\n    \"uselessly\",\n    \"user\",\n    \"usher\",\n    \"usual\",\n    \"utensil\",\n    \"utility\",\n    \"utilize\",\n    \"utmost\",\n    \"utopia\",\n    \"utter\",\n    \"vacancy\",\n    \"vacant\",\n    \"vacate\",\n    \"vacation\",\n    \"vagabond\",\n    \"vagrancy\",\n    \"vagrantly\",\n    \"vaguely\",\n    \"vagueness\",\n    \"valiant\",\n    \"valid\",\n    \"valium\",\n    \"valley\",\n    \"valuables\",\n    \"value\",\n    \"vanilla\",\n    \"vanish\",\n    \"vanity\",\n    \"vanquish\",\n    \"vantage\",\n    \"vaporizer\",\n    \"variable\",\n    \"variably\",\n    \"varied\",\n    \"variety\",\n    \"various\",\n    \"varmint\",\n    \"varnish\",\n    \"varsity\",\n    \"varying\",\n    \"vascular\",\n    \"vaseline\",\n    \"vastly\",\n    \"vastness\",\n    \"veal\",\n    \"vegan\",\n    \"veggie\",\n    \"vehicular\",\n    \"velcro\",\n    \"velocity\",\n    \"velvet\",\n    \"vendetta\",\n    \"vending\",\n    \"vendor\",\n    \"veneering\",\n    \"vengeful\",\n    \"venomous\",\n    \"ventricle\",\n    \"venture\",\n    \"venue\",\n    \"venus\",\n    \"verbalize\",\n    \"verbally\",\n    \"verbose\",\n    \"verdict\",\n    \"verify\",\n    \"verse\",\n    \"version\",\n    \"versus\",\n    \"vertebrae\",\n    \"vertical\",\n    \"vertigo\",\n    \"very\",\n    \"vessel\",\n    \"vest\",\n    \"veteran\",\n    \"veto\",\n    \"vexingly\",\n    \"viability\",\n    \"viable\",\n    \"vibes\",\n    \"vice\",\n    \"vicinity\",\n    \"victory\",\n    \"video\",\n    \"viewable\",\n    \"viewer\",\n    \"viewing\",\n    \"viewless\",\n    \"viewpoint\",\n    \"vigorous\",\n    \"village\",\n    \"villain\",\n    \"vindicate\",\n    \"vineyard\",\n    \"vintage\",\n    \"violate\",\n    \"violation\",\n    \"violator\",\n    \"violet\",\n    \"violin\",\n    \"viper\",\n    \"viral\",\n    \"virtual\",\n    \"virtuous\",\n    \"virus\",\n    \"visa\",\n    \"viscosity\",\n    \"viscous\",\n    \"viselike\",\n    \"visible\",\n    \"visibly\",\n    \"vision\",\n    \"visiting\",\n    \"visitor\",\n    \"visor\",\n    \"vista\",\n    \"vitality\",\n    \"vitalize\",\n    \"vitally\",\n    \"vitamins\",\n    \"vivacious\",\n    \"vividly\",\n    \"vividness\",\n    \"vixen\",\n    \"vocalist\",\n    \"vocalize\",\n    \"vocally\",\n    \"vocation\",\n    \"voice\",\n    \"voicing\",\n    \"void\",\n    \"volatile\",\n    \"volley\",\n    \"voltage\",\n    \"volumes\",\n    \"voter\",\n    \"voting\",\n    \"voucher\",\n    \"vowed\",\n    \"vowel\",\n    \"voyage\",\n    \"wackiness\",\n    \"wad\",\n    \"wafer\",\n    \"waffle\",\n    \"waged\",\n    \"wager\",\n    \"wages\",\n    \"waggle\",\n    \"wagon\",\n    \"wake\",\n    \"waking\",\n    \"walk\",\n    \"walmart\",\n    \"walnut\",\n    \"walrus\",\n    \"waltz\",\n    \"wand\",\n    \"wannabe\",\n    \"wanted\",\n    \"wanting\",\n    \"wasabi\",\n    \"washable\",\n    \"washbasin\",\n    \"washboard\",\n    \"washbowl\",\n    \"washcloth\",\n    \"washday\",\n    \"washed\",\n    \"washer\",\n    \"washhouse\",\n    \"washing\",\n    \"washout\",\n    \"washroom\",\n    \"washstand\",\n    \"washtub\",\n    \"wasp\",\n    \"wasting\",\n    \"watch\",\n    \"water\",\n    \"waviness\",\n    \"waving\",\n    \"wavy\",\n    \"whacking\",\n    \"whacky\",\n    \"wham\",\n    \"wharf\",\n    \"wheat\",\n    \"whenever\",\n    \"whiff\",\n    \"whimsical\",\n    \"whinny\",\n    \"whiny\",\n    \"whisking\",\n    \"whoever\",\n    \"whole\",\n    \"whomever\",\n    \"whoopee\",\n    \"whooping\",\n    \"whoops\",\n    \"why\",\n    \"wick\",\n    \"widely\",\n    \"widen\",\n    \"widget\",\n    \"widow\",\n    \"width\",\n    \"wieldable\",\n    \"wielder\",\n    \"wife\",\n    \"wifi\",\n    \"wikipedia\",\n    \"wildcard\",\n    \"wildcat\",\n    \"wilder\",\n    \"wildfire\",\n    \"wildfowl\",\n    \"wildland\",\n    \"wildlife\",\n    \"wildly\",\n    \"wildness\",\n    \"willed\",\n    \"willfully\",\n    \"willing\",\n    \"willow\",\n    \"willpower\",\n    \"wilt\",\n    \"wimp\",\n    \"wince\",\n    \"wincing\",\n    \"wind\",\n    \"wing\",\n    \"winking\",\n    \"winner\",\n    \"winnings\",\n    \"winter\",\n    \"wipe\",\n    \"wired\",\n    \"wireless\",\n    \"wiring\",\n    \"wiry\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"wisplike\",\n    \"wispy\",\n    \"wistful\",\n    \"wizard\",\n    \"wobble\",\n    \"wobbling\",\n    \"wobbly\",\n    \"wok\",\n    \"wolf\",\n    \"wolverine\",\n    \"womanhood\",\n    \"womankind\",\n    \"womanless\",\n    \"womanlike\",\n    \"womanly\",\n    \"womb\",\n    \"woof\",\n    \"wooing\",\n    \"wool\",\n    \"woozy\",\n    \"word\",\n    \"work\",\n    \"worried\",\n    \"worrier\",\n    \"worrisome\",\n    \"worry\",\n    \"worsening\",\n    \"worshiper\",\n    \"worst\",\n    \"wound\",\n    \"woven\",\n    \"wow\",\n    \"wrangle\",\n    \"wrath\",\n    \"wreath\",\n    \"wreckage\",\n    \"wrecker\",\n    \"wrecking\",\n    \"wrench\",\n    \"wriggle\",\n    \"wriggly\",\n    \"wrinkle\",\n    \"wrinkly\",\n    \"wrist\",\n    \"writing\",\n    \"written\",\n    \"wrongdoer\",\n    \"wronged\",\n    \"wrongful\",\n    \"wrongly\",\n    \"wrongness\",\n    \"wrought\",\n    \"xbox\",\n    \"xerox\",\n    \"yahoo\",\n    \"yam\",\n    \"yanking\",\n    \"yapping\",\n    \"yard\",\n    \"yarn\",\n    \"yeah\",\n    \"yearbook\",\n    \"yearling\",\n    \"yearly\",\n    \"yearning\",\n    \"yeast\",\n    \"yelling\",\n    \"yelp\",\n    \"yen\",\n    \"yesterday\",\n    \"yiddish\",\n    \"yield\",\n    \"yin\",\n    \"yippee\",\n    \"yo-yo\",\n    \"yodel\",\n    \"yoga\",\n    \"yogurt\",\n    \"yonder\",\n    \"yoyo\",\n    \"yummy\",\n    \"zap\",\n    \"zealous\",\n    \"zebra\",\n    \"zen\",\n    \"zeppelin\",\n    \"zero\",\n    \"zestfully\",\n    \"zesty\",\n    \"zigzagged\",\n    \"zipfile\",\n    \"zipping\",\n    \"zippy\",\n    \"zips\",\n    \"zit\",\n    \"zodiac\",\n    \"zombie\",\n    \"zone\",\n    \"zoning\",\n    \"zookeeper\",\n    \"zoologist\",\n    \"zoology\",\n    \"zoom\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/passwords/wordlist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nconst crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\");\nasync function getSecureRandomBytes(size) {\n    return (0, crypto_primitives_1.getSecureRandomBytes)(size);\n}\nexports.getSecureRandomBytes = getSecureRandomBytes;\nasync function getSecureRandomWords(size) {\n    return getSecureRandomWords(size);\n}\nexports.getSecureRandomWords = getSecureRandomWords;\nasync function getSecureRandomNumber(min, max) {\n    let range = max - min;\n    var bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n        throw new Error(\"Range is too large\");\n    }\n    var bytesNeeded = Math.ceil(bitsNeeded / 8);\n    var mask = Math.pow(2, bitsNeeded) - 1;\n    while(true){\n        let res = await getSecureRandomBytes(bitsNeeded);\n        let power = (bytesNeeded - 1) * 8;\n        let numberValue = 0;\n        for(var i = 0; i < bytesNeeded; i++){\n            numberValue += res[i] * Math.pow(2, power);\n            power -= 8;\n        }\n        numberValue = numberValue & mask; // Truncate\n        if (numberValue >= range) {\n            continue;\n        }\n        return min + numberValue;\n    }\n}\nexports.getSecureRandomNumber = getSecureRandomNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL2dldFNlY3VyZVJhbmRvbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLDRCQUE0QixHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ25HLE1BQU1LLHNCQUFzQkMsbUJBQU9BLENBQUMsd0ZBQXdCO0FBQzVELGVBQWVGLHFCQUFxQkcsSUFBSTtJQUNwQyxPQUFPLENBQUMsR0FBR0Ysb0JBQW9CRCxvQkFBb0IsRUFBRUc7QUFDekQ7QUFDQVAsNEJBQTRCLEdBQUdJO0FBQy9CLGVBQWVELHFCQUFxQkksSUFBSTtJQUNwQyxPQUFPSixxQkFBcUJJO0FBQ2hDO0FBQ0FQLDRCQUE0QixHQUFHRztBQUMvQixlQUFlRCxzQkFBc0JNLEdBQUcsRUFBRUMsR0FBRztJQUN6QyxJQUFJQyxRQUFRRCxNQUFNRDtJQUNsQixJQUFJRyxhQUFhQyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLElBQUksQ0FBQ0o7SUFDckMsSUFBSUMsYUFBYSxJQUFJO1FBQ2pCLE1BQU0sSUFBSUksTUFBTTtJQUNwQjtJQUNBLElBQUlDLGNBQWNKLEtBQUtDLElBQUksQ0FBQ0YsYUFBYTtJQUN6QyxJQUFJTSxPQUFPTCxLQUFLTSxHQUFHLENBQUMsR0FBR1AsY0FBYztJQUNyQyxNQUFPLEtBQU07UUFDVCxJQUFJUSxNQUFNLE1BQU1mLHFCQUFxQk87UUFDckMsSUFBSVMsUUFBUSxDQUFDSixjQUFjLEtBQUs7UUFDaEMsSUFBSUssY0FBYztRQUNsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sYUFBYU0sSUFBSztZQUNsQ0QsZUFBZUYsR0FBRyxDQUFDRyxFQUFFLEdBQUdWLEtBQUtNLEdBQUcsQ0FBQyxHQUFHRTtZQUNwQ0EsU0FBUztRQUNiO1FBQ0FDLGNBQWNBLGNBQWNKLE1BQU0sV0FBVztRQUM3QyxJQUFJSSxlQUFlWCxPQUFPO1lBQ3RCO1FBQ0o7UUFDQSxPQUFPRixNQUFNYTtJQUNqQjtBQUNKO0FBQ0FyQiw2QkFBNkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY3J5cHRvL2Rpc3QvcHJpbWl0aXZlcy9nZXRTZWN1cmVSYW5kb20uanM/MWVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tTnVtYmVyID0gZXhwb3J0cy5nZXRTZWN1cmVSYW5kb21Xb3JkcyA9IGV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tQnl0ZXMgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fcHJpbWl0aXZlc18xID0gcmVxdWlyZShcIkB0b24vY3J5cHRvLXByaW1pdGl2ZXNcIik7XG5hc3luYyBmdW5jdGlvbiBnZXRTZWN1cmVSYW5kb21CeXRlcyhzaXplKSB7XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fcHJpbWl0aXZlc18xLmdldFNlY3VyZVJhbmRvbUJ5dGVzKShzaXplKTtcbn1cbmV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tQnl0ZXMgPSBnZXRTZWN1cmVSYW5kb21CeXRlcztcbmFzeW5jIGZ1bmN0aW9uIGdldFNlY3VyZVJhbmRvbVdvcmRzKHNpemUpIHtcbiAgICByZXR1cm4gZ2V0U2VjdXJlUmFuZG9tV29yZHMoc2l6ZSk7XG59XG5leHBvcnRzLmdldFNlY3VyZVJhbmRvbVdvcmRzID0gZ2V0U2VjdXJlUmFuZG9tV29yZHM7XG5hc3luYyBmdW5jdGlvbiBnZXRTZWN1cmVSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcbiAgICBsZXQgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgdmFyIGJpdHNOZWVkZWQgPSBNYXRoLmNlaWwoTWF0aC5sb2cyKHJhbmdlKSk7XG4gICAgaWYgKGJpdHNOZWVkZWQgPiA1Mykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhbmdlIGlzIHRvbyBsYXJnZScpO1xuICAgIH1cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwoYml0c05lZWRlZCAvIDgpO1xuICAgIHZhciBtYXNrID0gTWF0aC5wb3coMiwgYml0c05lZWRlZCkgLSAxO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBnZXRTZWN1cmVSYW5kb21CeXRlcyhiaXRzTmVlZGVkKTtcbiAgICAgICAgbGV0IHBvd2VyID0gKGJ5dGVzTmVlZGVkIC0gMSkgKiA4O1xuICAgICAgICBsZXQgbnVtYmVyVmFsdWUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgICAgICAgIG51bWJlclZhbHVlICs9IHJlc1tpXSAqIE1hdGgucG93KDIsIHBvd2VyKTtcbiAgICAgICAgICAgIHBvd2VyIC09IDg7XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVyVmFsdWUgPSBudW1iZXJWYWx1ZSAmIG1hc2s7IC8vIFRydW5jYXRlXG4gICAgICAgIGlmIChudW1iZXJWYWx1ZSA+PSByYW5nZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbiArIG51bWJlclZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U2VjdXJlUmFuZG9tTnVtYmVyID0gZ2V0U2VjdXJlUmFuZG9tTnVtYmVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0U2VjdXJlUmFuZG9tTnVtYmVyIiwiZ2V0U2VjdXJlUmFuZG9tV29yZHMiLCJnZXRTZWN1cmVSYW5kb21CeXRlcyIsImNyeXB0b19wcmltaXRpdmVzXzEiLCJyZXF1aXJlIiwic2l6ZSIsIm1pbiIsIm1heCIsInJhbmdlIiwiYml0c05lZWRlZCIsIk1hdGgiLCJjZWlsIiwibG9nMiIsIkVycm9yIiwiYnl0ZXNOZWVkZWQiLCJtYXNrIiwicG93IiwicmVzIiwicG93ZXIiLCJudW1iZXJWYWx1ZSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hmac_sha512 = exports.hmac_sha512_fallback = void 0;\nconst jssha_1 = __importDefault(__webpack_require__(/*! jssha */ \"(ssr)/./node_modules/jssha/dist/sha.js\"));\nconst crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\");\nasync function hmac_sha512_fallback(key, data) {\n    let keyBuffer = typeof key === \"string\" ? Buffer.from(key, \"utf-8\") : key;\n    let dataBuffer = typeof data === \"string\" ? Buffer.from(data, \"utf-8\") : data;\n    const shaObj = new jssha_1.default(\"SHA-512\", \"HEX\", {\n        hmacKey: {\n            value: keyBuffer.toString(\"hex\"),\n            format: \"HEX\"\n        }\n    });\n    shaObj.update(dataBuffer.toString(\"hex\"));\n    const hmac = shaObj.getHash(\"HEX\");\n    return Buffer.from(hmac, \"hex\");\n}\nexports.hmac_sha512_fallback = hmac_sha512_fallback;\nfunction hmac_sha512(key, data) {\n    return (0, crypto_primitives_1.hmac_sha512)(key, data);\n}\nexports.hmac_sha512 = hmac_sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL2htYWNfc2hhNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDMUQsTUFBTUksVUFBVVQsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxxREFBTztBQUMvQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLHdGQUF3QjtBQUM1RCxlQUFlRixxQkFBcUJJLEdBQUcsRUFBRUMsSUFBSTtJQUN6QyxJQUFJQyxZQUFZLE9BQU9GLFFBQVEsV0FBV0csT0FBT0MsSUFBSSxDQUFDSixLQUFLLFdBQVdBO0lBQ3RFLElBQUlLLGFBQWEsT0FBT0osU0FBUyxXQUFXRSxPQUFPQyxJQUFJLENBQUNILE1BQU0sV0FBV0E7SUFDekUsTUFBTUssU0FBUyxJQUFJVCxRQUFRVSxPQUFPLENBQUMsV0FBVyxPQUFPO1FBQ2pEQyxTQUFTO1lBQUVkLE9BQU9RLFVBQVVPLFFBQVEsQ0FBQztZQUFRQyxRQUFRO1FBQU07SUFDL0Q7SUFDQUosT0FBT0ssTUFBTSxDQUFDTixXQUFXSSxRQUFRLENBQUM7SUFDbEMsTUFBTUcsT0FBT04sT0FBT08sT0FBTyxDQUFDO0lBQzVCLE9BQU9WLE9BQU9DLElBQUksQ0FBQ1EsTUFBTTtBQUM3QjtBQUNBbkIsNEJBQTRCLEdBQUdHO0FBQy9CLFNBQVNELFlBQVlLLEdBQUcsRUFBRUMsSUFBSTtJQUMxQixPQUFPLENBQUMsR0FBR0Ysb0JBQW9CSixXQUFXLEVBQUVLLEtBQUtDO0FBQ3JEO0FBQ0FSLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL2htYWNfc2hhNTEyLmpzPzExODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhtYWNfc2hhNTEyID0gZXhwb3J0cy5obWFjX3NoYTUxMl9mYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IGpzc2hhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpzc2hhXCIpKTtcbmNvbnN0IGNyeXB0b19wcmltaXRpdmVzXzEgPSByZXF1aXJlKFwiQHRvbi9jcnlwdG8tcHJpbWl0aXZlc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGhtYWNfc2hhNTEyX2ZhbGxiYWNrKGtleSwgZGF0YSkge1xuICAgIGxldCBrZXlCdWZmZXIgPSB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IEJ1ZmZlci5mcm9tKGtleSwgJ3V0Zi04JykgOiBrZXk7XG4gICAgbGV0IGRhdGFCdWZmZXIgPSB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShkYXRhLCAndXRmLTgnKSA6IGRhdGE7XG4gICAgY29uc3Qgc2hhT2JqID0gbmV3IGpzc2hhXzEuZGVmYXVsdChcIlNIQS01MTJcIiwgXCJIRVhcIiwge1xuICAgICAgICBobWFjS2V5OiB7IHZhbHVlOiBrZXlCdWZmZXIudG9TdHJpbmcoJ2hleCcpLCBmb3JtYXQ6IFwiSEVYXCIgfSxcbiAgICB9KTtcbiAgICBzaGFPYmoudXBkYXRlKGRhdGFCdWZmZXIudG9TdHJpbmcoJ2hleCcpKTtcbiAgICBjb25zdCBobWFjID0gc2hhT2JqLmdldEhhc2goXCJIRVhcIik7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhtYWMsICdoZXgnKTtcbn1cbmV4cG9ydHMuaG1hY19zaGE1MTJfZmFsbGJhY2sgPSBobWFjX3NoYTUxMl9mYWxsYmFjaztcbmZ1bmN0aW9uIGhtYWNfc2hhNTEyKGtleSwgZGF0YSkge1xuICAgIHJldHVybiAoMCwgY3J5cHRvX3ByaW1pdGl2ZXNfMS5obWFjX3NoYTUxMikoa2V5LCBkYXRhKTtcbn1cbmV4cG9ydHMuaG1hY19zaGE1MTIgPSBobWFjX3NoYTUxMjtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJobWFjX3NoYTUxMiIsImhtYWNfc2hhNTEyX2ZhbGxiYWNrIiwianNzaGFfMSIsInJlcXVpcmUiLCJjcnlwdG9fcHJpbWl0aXZlc18xIiwia2V5IiwiZGF0YSIsImtleUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJkYXRhQnVmZmVyIiwic2hhT2JqIiwiZGVmYXVsdCIsImhtYWNLZXkiLCJ0b1N0cmluZyIsImZvcm1hdCIsInVwZGF0ZSIsImhtYWMiLCJnZXRIYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/nacl.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/nacl.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.openBox = exports.sealBox = exports.signVerify = exports.sign = exports.keyPairFromSeed = exports.keyPairFromSecretKey = void 0;\nconst tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nfunction keyPairFromSecretKey(secretKey) {\n    let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));\n    return {\n        publicKey: Buffer.from(res.publicKey),\n        secretKey: Buffer.from(res.secretKey)\n    };\n}\nexports.keyPairFromSecretKey = keyPairFromSecretKey;\nfunction keyPairFromSeed(secretKey) {\n    let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));\n    return {\n        publicKey: Buffer.from(res.publicKey),\n        secretKey: Buffer.from(res.secretKey)\n    };\n}\nexports.keyPairFromSeed = keyPairFromSeed;\nfunction sign(data, secretKey) {\n    return Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data), new Uint8Array(secretKey)));\n}\nexports.sign = sign;\nfunction signVerify(data, signature, publicKey) {\n    return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data), new Uint8Array(signature), new Uint8Array(publicKey));\n}\nexports.signVerify = signVerify;\nfunction sealBox(data, nonce, key) {\n    return Buffer.from(tweetnacl_1.default.secretbox(data, nonce, key));\n}\nexports.sealBox = sealBox;\nfunction openBox(data, nonce, key) {\n    let res = tweetnacl_1.default.secretbox.open(data, nonce, key);\n    if (!res) {\n        return null;\n    }\n    return Buffer.from(res);\n}\nexports.openBox = openBox;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL25hY2wuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdBLGVBQWUsR0FBR0Esa0JBQWtCLEdBQUdBLFlBQVksR0FBR0EsdUJBQXVCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDdEksTUFBTVEsY0FBY2IsZ0JBQWdCYyxtQkFBT0EsQ0FBQyw4REFBVztBQUN2RCxTQUFTRixxQkFBcUJHLFNBQVM7SUFDbkMsSUFBSUMsTUFBTUgsWUFBWUksT0FBTyxDQUFDUCxJQUFJLENBQUNRLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDLElBQUlDLFdBQVdMO0lBQ3hFLE9BQU87UUFDSE0sV0FBV0MsT0FBT0MsSUFBSSxDQUFDUCxJQUFJSyxTQUFTO1FBQ3BDTixXQUFXTyxPQUFPQyxJQUFJLENBQUNQLElBQUlELFNBQVM7SUFDeEM7QUFDSjtBQUNBViw0QkFBNEIsR0FBR087QUFDL0IsU0FBU0QsZ0JBQWdCSSxTQUFTO0lBQzlCLElBQUlDLE1BQU1ILFlBQVlJLE9BQU8sQ0FBQ1AsSUFBSSxDQUFDUSxPQUFPLENBQUNNLFFBQVEsQ0FBQyxJQUFJSixXQUFXTDtJQUNuRSxPQUFPO1FBQ0hNLFdBQVdDLE9BQU9DLElBQUksQ0FBQ1AsSUFBSUssU0FBUztRQUNwQ04sV0FBV08sT0FBT0MsSUFBSSxDQUFDUCxJQUFJRCxTQUFTO0lBQ3hDO0FBQ0o7QUFDQVYsdUJBQXVCLEdBQUdNO0FBQzFCLFNBQVNELEtBQUtlLElBQUksRUFBRVYsU0FBUztJQUN6QixPQUFPTyxPQUFPQyxJQUFJLENBQUNWLFlBQVlJLE9BQU8sQ0FBQ1AsSUFBSSxDQUFDZ0IsUUFBUSxDQUFDLElBQUlOLFdBQVdLLE9BQU8sSUFBSUwsV0FBV0w7QUFDOUY7QUFDQVYsWUFBWSxHQUFHSztBQUNmLFNBQVNELFdBQVdnQixJQUFJLEVBQUVFLFNBQVMsRUFBRU4sU0FBUztJQUMxQyxPQUFPUixZQUFZSSxPQUFPLENBQUNQLElBQUksQ0FBQ2dCLFFBQVEsQ0FBQ0UsTUFBTSxDQUFDLElBQUlSLFdBQVdLLE9BQU8sSUFBSUwsV0FBV08sWUFBWSxJQUFJUCxXQUFXQztBQUNwSDtBQUNBaEIsa0JBQWtCLEdBQUdJO0FBQ3JCLFNBQVNELFFBQVFpQixJQUFJLEVBQUVJLEtBQUssRUFBRUMsR0FBRztJQUM3QixPQUFPUixPQUFPQyxJQUFJLENBQUNWLFlBQVlJLE9BQU8sQ0FBQ2MsU0FBUyxDQUFDTixNQUFNSSxPQUFPQztBQUNsRTtBQUNBekIsZUFBZSxHQUFHRztBQUNsQixTQUFTRCxRQUFRa0IsSUFBSSxFQUFFSSxLQUFLLEVBQUVDLEdBQUc7SUFDN0IsSUFBSWQsTUFBTUgsWUFBWUksT0FBTyxDQUFDYyxTQUFTLENBQUNDLElBQUksQ0FBQ1AsTUFBTUksT0FBT0M7SUFDMUQsSUFBSSxDQUFDZCxLQUFLO1FBQ04sT0FBTztJQUNYO0lBQ0EsT0FBT00sT0FBT0MsSUFBSSxDQUFDUDtBQUN2QjtBQUNBWCxlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9uLWFpcmRyb3AtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AdG9uL2NyeXB0by9kaXN0L3ByaW1pdGl2ZXMvbmFjbC5qcz9lNjdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVuQm94ID0gZXhwb3J0cy5zZWFsQm94ID0gZXhwb3J0cy5zaWduVmVyaWZ5ID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5rZXlQYWlyRnJvbVNlZWQgPSBleHBvcnRzLmtleVBhaXJGcm9tU2VjcmV0S2V5ID0gdm9pZCAwO1xuY29uc3QgdHdlZXRuYWNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR3ZWV0bmFjbFwiKSk7XG5mdW5jdGlvbiBrZXlQYWlyRnJvbVNlY3JldEtleShzZWNyZXRLZXkpIHtcbiAgICBsZXQgcmVzID0gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmtleVBhaXIuZnJvbVNlY3JldEtleShuZXcgVWludDhBcnJheShzZWNyZXRLZXkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaWNLZXk6IEJ1ZmZlci5mcm9tKHJlcy5wdWJsaWNLZXkpLFxuICAgICAgICBzZWNyZXRLZXk6IEJ1ZmZlci5mcm9tKHJlcy5zZWNyZXRLZXkpLFxuICAgIH07XG59XG5leHBvcnRzLmtleVBhaXJGcm9tU2VjcmV0S2V5ID0ga2V5UGFpckZyb21TZWNyZXRLZXk7XG5mdW5jdGlvbiBrZXlQYWlyRnJvbVNlZWQoc2VjcmV0S2V5KSB7XG4gICAgbGV0IHJlcyA9IHR3ZWV0bmFjbF8xLmRlZmF1bHQuc2lnbi5rZXlQYWlyLmZyb21TZWVkKG5ldyBVaW50OEFycmF5KHNlY3JldEtleSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleTogQnVmZmVyLmZyb20ocmVzLnB1YmxpY0tleSksXG4gICAgICAgIHNlY3JldEtleTogQnVmZmVyLmZyb20ocmVzLnNlY3JldEtleSksXG4gICAgfTtcbn1cbmV4cG9ydHMua2V5UGFpckZyb21TZWVkID0ga2V5UGFpckZyb21TZWVkO1xuZnVuY3Rpb24gc2lnbihkYXRhLCBzZWNyZXRLZXkpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmRldGFjaGVkKG5ldyBVaW50OEFycmF5KGRhdGEpLCBuZXcgVWludDhBcnJheShzZWNyZXRLZXkpKSk7XG59XG5leHBvcnRzLnNpZ24gPSBzaWduO1xuZnVuY3Rpb24gc2lnblZlcmlmeShkYXRhLCBzaWduYXR1cmUsIHB1YmxpY0tleSkge1xuICAgIHJldHVybiB0d2VldG5hY2xfMS5kZWZhdWx0LnNpZ24uZGV0YWNoZWQudmVyaWZ5KG5ldyBVaW50OEFycmF5KGRhdGEpLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpKTtcbn1cbmV4cG9ydHMuc2lnblZlcmlmeSA9IHNpZ25WZXJpZnk7XG5mdW5jdGlvbiBzZWFsQm94KGRhdGEsIG5vbmNlLCBrZXkpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odHdlZXRuYWNsXzEuZGVmYXVsdC5zZWNyZXRib3goZGF0YSwgbm9uY2UsIGtleSkpO1xufVxuZXhwb3J0cy5zZWFsQm94ID0gc2VhbEJveDtcbmZ1bmN0aW9uIG9wZW5Cb3goZGF0YSwgbm9uY2UsIGtleSkge1xuICAgIGxldCByZXMgPSB0d2VldG5hY2xfMS5kZWZhdWx0LnNlY3JldGJveC5vcGVuKGRhdGEsIG5vbmNlLCBrZXkpO1xuICAgIGlmICghcmVzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKTtcbn1cbmV4cG9ydHMub3BlbkJveCA9IG9wZW5Cb3g7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib3BlbkJveCIsInNlYWxCb3giLCJzaWduVmVyaWZ5Iiwic2lnbiIsImtleVBhaXJGcm9tU2VlZCIsImtleVBhaXJGcm9tU2VjcmV0S2V5IiwidHdlZXRuYWNsXzEiLCJyZXF1aXJlIiwic2VjcmV0S2V5IiwicmVzIiwiZGVmYXVsdCIsImtleVBhaXIiLCJmcm9tU2VjcmV0S2V5IiwiVWludDhBcnJheSIsInB1YmxpY0tleSIsIkJ1ZmZlciIsImZyb20iLCJmcm9tU2VlZCIsImRhdGEiLCJkZXRhY2hlZCIsInNpZ25hdHVyZSIsInZlcmlmeSIsIm5vbmNlIiwia2V5Iiwic2VjcmV0Ym94Iiwib3BlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/nacl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pbkdf2_sha512 = void 0;\nconst crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\");\nfunction pbkdf2_sha512(key, salt, iterations, keyLen) {\n    return (0, crypto_primitives_1.pbkdf2_sha512)(key, salt, iterations, keyLen);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL3Bia2RmMl9zaGE1MTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUcsc0JBQXNCQyxtQkFBT0EsQ0FBQyx3RkFBd0I7QUFDNUQsU0FBU0YsY0FBY0csR0FBRyxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTTtJQUNoRCxPQUFPLENBQUMsR0FBR0wsb0JBQW9CRCxhQUFhLEVBQUVHLEtBQUtDLE1BQU1DLFlBQVlDO0FBQ3pFO0FBQ0FSLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL3Bia2RmMl9zaGE1MTIuanM/YzM3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGJrZGYyX3NoYTUxMiA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b19wcmltaXRpdmVzXzEgPSByZXF1aXJlKFwiQHRvbi9jcnlwdG8tcHJpbWl0aXZlc1wiKTtcbmZ1bmN0aW9uIHBia2RmMl9zaGE1MTIoa2V5LCBzYWx0LCBpdGVyYXRpb25zLCBrZXlMZW4pIHtcbiAgICByZXR1cm4gKDAsIGNyeXB0b19wcmltaXRpdmVzXzEucGJrZGYyX3NoYTUxMikoa2V5LCBzYWx0LCBpdGVyYXRpb25zLCBrZXlMZW4pO1xufVxuZXhwb3J0cy5wYmtkZjJfc2hhNTEyID0gcGJrZGYyX3NoYTUxMjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBia2RmMl9zaGE1MTIiLCJjcnlwdG9fcHJpbWl0aXZlc18xIiwicmVxdWlyZSIsImtleSIsInNhbHQiLCJpdGVyYXRpb25zIiwia2V5TGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/sha256.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/sha256.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha256 = exports.sha256_fallback = exports.sha256_sync = void 0;\nconst jssha_1 = __importDefault(__webpack_require__(/*! jssha */ \"(ssr)/./node_modules/jssha/dist/sha.js\"));\nconst crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\");\nfunction sha256_sync(source) {\n    let src;\n    if (typeof source === \"string\") {\n        src = Buffer.from(source, \"utf-8\").toString(\"hex\");\n    } else {\n        src = source.toString(\"hex\");\n    }\n    let hasher = new jssha_1.default(\"SHA-256\", \"HEX\");\n    hasher.update(src);\n    let res = hasher.getHash(\"HEX\");\n    return Buffer.from(res, \"hex\");\n}\nexports.sha256_sync = sha256_sync;\nasync function sha256_fallback(source) {\n    return sha256_sync(source);\n}\nexports.sha256_fallback = sha256_fallback;\nfunction sha256(source) {\n    return (0, crypto_primitives_1.sha256)(source);\n}\nexports.sha256 = sha256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL3NoYTI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNELElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsdUJBQXVCLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDdEUsTUFBTUssVUFBVVYsZ0JBQWdCVyxtQkFBT0EsQ0FBQyxxREFBTztBQUMvQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLHdGQUF3QjtBQUM1RCxTQUFTRixZQUFZSSxNQUFNO0lBQ3ZCLElBQUlDO0lBQ0osSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUJDLE1BQU1DLE9BQU9DLElBQUksQ0FBQ0gsUUFBUSxTQUFTSSxRQUFRLENBQUM7SUFDaEQsT0FDSztRQUNESCxNQUFNRCxPQUFPSSxRQUFRLENBQUM7SUFDMUI7SUFDQSxJQUFJQyxTQUFTLElBQUlSLFFBQVFTLE9BQU8sQ0FBQyxXQUFXO0lBQzVDRCxPQUFPRSxNQUFNLENBQUNOO0lBQ2QsSUFBSU8sTUFBTUgsT0FBT0ksT0FBTyxDQUFDO0lBQ3pCLE9BQU9QLE9BQU9DLElBQUksQ0FBQ0ssS0FBSztBQUM1QjtBQUNBaEIsbUJBQW1CLEdBQUdJO0FBQ3RCLGVBQWVELGdCQUFnQkssTUFBTTtJQUNqQyxPQUFPSixZQUFZSTtBQUN2QjtBQUNBUix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0QsT0FBT00sTUFBTTtJQUNsQixPQUFPLENBQUMsR0FBR0Qsb0JBQW9CTCxNQUFNLEVBQUVNO0FBQzNDO0FBQ0FSLGNBQWMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY3J5cHRvL2Rpc3QvcHJpbWl0aXZlcy9zaGEyNTYuanM/MzU3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhMjU2ID0gZXhwb3J0cy5zaGEyNTZfZmFsbGJhY2sgPSBleHBvcnRzLnNoYTI1Nl9zeW5jID0gdm9pZCAwO1xuY29uc3QganNzaGFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianNzaGFcIikpO1xuY29uc3QgY3J5cHRvX3ByaW1pdGl2ZXNfMSA9IHJlcXVpcmUoXCJAdG9uL2NyeXB0by1wcmltaXRpdmVzXCIpO1xuZnVuY3Rpb24gc2hhMjU2X3N5bmMoc291cmNlKSB7XG4gICAgbGV0IHNyYztcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3JjID0gQnVmZmVyLmZyb20oc291cmNlLCAndXRmLTgnKS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzcmMgPSBzb3VyY2UudG9TdHJpbmcoJ2hleCcpO1xuICAgIH1cbiAgICBsZXQgaGFzaGVyID0gbmV3IGpzc2hhXzEuZGVmYXVsdCgnU0hBLTI1NicsICdIRVgnKTtcbiAgICBoYXNoZXIudXBkYXRlKHNyYyk7XG4gICAgbGV0IHJlcyA9IGhhc2hlci5nZXRIYXNoKCdIRVgnKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzLCAnaGV4Jyk7XG59XG5leHBvcnRzLnNoYTI1Nl9zeW5jID0gc2hhMjU2X3N5bmM7XG5hc3luYyBmdW5jdGlvbiBzaGEyNTZfZmFsbGJhY2soc291cmNlKSB7XG4gICAgcmV0dXJuIHNoYTI1Nl9zeW5jKHNvdXJjZSk7XG59XG5leHBvcnRzLnNoYTI1Nl9mYWxsYmFjayA9IHNoYTI1Nl9mYWxsYmFjaztcbmZ1bmN0aW9uIHNoYTI1Nihzb3VyY2UpIHtcbiAgICByZXR1cm4gKDAsIGNyeXB0b19wcmltaXRpdmVzXzEuc2hhMjU2KShzb3VyY2UpO1xufVxuZXhwb3J0cy5zaGEyNTYgPSBzaGEyNTY7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2hhMjU2Iiwic2hhMjU2X2ZhbGxiYWNrIiwic2hhMjU2X3N5bmMiLCJqc3NoYV8xIiwicmVxdWlyZSIsImNyeXB0b19wcmltaXRpdmVzXzEiLCJzb3VyY2UiLCJzcmMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJoYXNoZXIiLCJkZWZhdWx0IiwidXBkYXRlIiwicmVzIiwiZ2V0SGFzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/primitives/sha512.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/sha512.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha512 = exports.sha512_fallback = exports.sha512_sync = void 0;\nconst jssha_1 = __importDefault(__webpack_require__(/*! jssha */ \"(ssr)/./node_modules/jssha/dist/sha.js\"));\nconst crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ \"(ssr)/./node_modules/@ton/crypto-primitives/dist/node.js\");\nfunction sha512_sync(source) {\n    let src;\n    if (typeof source === \"string\") {\n        src = Buffer.from(source, \"utf-8\").toString(\"hex\");\n    } else {\n        src = source.toString(\"hex\");\n    }\n    let hasher = new jssha_1.default(\"SHA-512\", \"HEX\");\n    hasher.update(src);\n    let res = hasher.getHash(\"HEX\");\n    return Buffer.from(res, \"hex\");\n}\nexports.sha512_sync = sha512_sync;\nasync function sha512_fallback(source) {\n    return sha512_sync(source);\n}\nexports.sha512_fallback = sha512_fallback;\nasync function sha512(source) {\n    return (0, crypto_primitives_1.sha512)(source);\n}\nexports.sha512 = sha512;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC9wcmltaXRpdmVzL3NoYTUxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNELElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsdUJBQXVCLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDdEUsTUFBTUssVUFBVVYsZ0JBQWdCVyxtQkFBT0EsQ0FBQyxxREFBTztBQUMvQyxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLHdGQUF3QjtBQUM1RCxTQUFTRixZQUFZSSxNQUFNO0lBQ3ZCLElBQUlDO0lBQ0osSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUJDLE1BQU1DLE9BQU9DLElBQUksQ0FBQ0gsUUFBUSxTQUFTSSxRQUFRLENBQUM7SUFDaEQsT0FDSztRQUNESCxNQUFNRCxPQUFPSSxRQUFRLENBQUM7SUFDMUI7SUFDQSxJQUFJQyxTQUFTLElBQUlSLFFBQVFTLE9BQU8sQ0FBQyxXQUFXO0lBQzVDRCxPQUFPRSxNQUFNLENBQUNOO0lBQ2QsSUFBSU8sTUFBTUgsT0FBT0ksT0FBTyxDQUFDO0lBQ3pCLE9BQU9QLE9BQU9DLElBQUksQ0FBQ0ssS0FBSztBQUM1QjtBQUNBaEIsbUJBQW1CLEdBQUdJO0FBQ3RCLGVBQWVELGdCQUFnQkssTUFBTTtJQUNqQyxPQUFPSixZQUFZSTtBQUN2QjtBQUNBUix1QkFBdUIsR0FBR0c7QUFDMUIsZUFBZUQsT0FBT00sTUFBTTtJQUN4QixPQUFPLENBQUMsR0FBR0Qsb0JBQW9CTCxNQUFNLEVBQUVNO0FBQzNDO0FBQ0FSLGNBQWMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY3J5cHRvL2Rpc3QvcHJpbWl0aXZlcy9zaGE1MTIuanM/NjdjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhNTEyID0gZXhwb3J0cy5zaGE1MTJfZmFsbGJhY2sgPSBleHBvcnRzLnNoYTUxMl9zeW5jID0gdm9pZCAwO1xuY29uc3QganNzaGFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianNzaGFcIikpO1xuY29uc3QgY3J5cHRvX3ByaW1pdGl2ZXNfMSA9IHJlcXVpcmUoXCJAdG9uL2NyeXB0by1wcmltaXRpdmVzXCIpO1xuZnVuY3Rpb24gc2hhNTEyX3N5bmMoc291cmNlKSB7XG4gICAgbGV0IHNyYztcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3JjID0gQnVmZmVyLmZyb20oc291cmNlLCAndXRmLTgnKS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzcmMgPSBzb3VyY2UudG9TdHJpbmcoJ2hleCcpO1xuICAgIH1cbiAgICBsZXQgaGFzaGVyID0gbmV3IGpzc2hhXzEuZGVmYXVsdCgnU0hBLTUxMicsICdIRVgnKTtcbiAgICBoYXNoZXIudXBkYXRlKHNyYyk7XG4gICAgbGV0IHJlcyA9IGhhc2hlci5nZXRIYXNoKCdIRVgnKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzLCAnaGV4Jyk7XG59XG5leHBvcnRzLnNoYTUxMl9zeW5jID0gc2hhNTEyX3N5bmM7XG5hc3luYyBmdW5jdGlvbiBzaGE1MTJfZmFsbGJhY2soc291cmNlKSB7XG4gICAgcmV0dXJuIHNoYTUxMl9zeW5jKHNvdXJjZSk7XG59XG5leHBvcnRzLnNoYTUxMl9mYWxsYmFjayA9IHNoYTUxMl9mYWxsYmFjaztcbmFzeW5jIGZ1bmN0aW9uIHNoYTUxMihzb3VyY2UpIHtcbiAgICByZXR1cm4gKDAsIGNyeXB0b19wcmltaXRpdmVzXzEuc2hhNTEyKShzb3VyY2UpO1xufVxuZXhwb3J0cy5zaGE1MTIgPSBzaGE1MTI7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2hhNTEyIiwic2hhNTEyX2ZhbGxiYWNrIiwic2hhNTEyX3N5bmMiLCJqc3NoYV8xIiwicmVxdWlyZSIsImNyeXB0b19wcmltaXRpdmVzXzEiLCJzb3VyY2UiLCJzcmMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJoYXNoZXIiLCJkZWZhdWx0IiwidXBkYXRlIiwicmVzIiwiZ2V0SGFzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/primitives/sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/crypto/dist/utils/binary.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/utils/binary.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;\nfunction lpad(str, padString, length) {\n    while(str.length < length){\n        str = padString + str;\n    }\n    return str;\n}\nexports.lpad = lpad;\nfunction bytesToBits(bytes) {\n    let res = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        let x = bytes.at(i);\n        res += lpad(x.toString(2), \"0\", 8);\n    }\n    return res;\n}\nexports.bytesToBits = bytesToBits;\nfunction bitsToBytes(src) {\n    if (src.length % 8 !== 0) {\n        throw Error(\"Uneven bits\");\n    }\n    let res = [];\n    while(src.length > 0){\n        res.push(parseInt(src.slice(0, 8), 2));\n        src = src.slice(8);\n    }\n    return Buffer.from(res);\n}\nexports.bitsToBytes = bitsToBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi9jcnlwdG8vZGlzdC91dGlscy9iaW5hcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSxtQkFBbUIsR0FBR0EsWUFBWSxHQUFHLEtBQUs7QUFDaEUsU0FBU0ksS0FBS0MsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLE1BQU07SUFDaEMsTUFBT0YsSUFBSUUsTUFBTSxHQUFHQSxPQUFRO1FBQ3hCRixNQUFNQyxZQUFZRDtJQUN0QjtJQUNBLE9BQU9BO0FBQ1g7QUFDQUwsWUFBWSxHQUFHSTtBQUNmLFNBQVNELFlBQVlLLEtBQUs7SUFDdEIsSUFBSUMsTUFBTTtJQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixNQUFNRCxNQUFNLEVBQUVHLElBQUs7UUFDbkMsSUFBSUMsSUFBSUgsTUFBTUksRUFBRSxDQUFDRjtRQUNqQkQsT0FBT0wsS0FBS08sRUFBRUUsUUFBUSxDQUFDLElBQUksS0FBSztJQUNwQztJQUNBLE9BQU9KO0FBQ1g7QUFDQVQsbUJBQW1CLEdBQUdHO0FBQ3RCLFNBQVNELFlBQVlZLEdBQUc7SUFDcEIsSUFBSUEsSUFBSVAsTUFBTSxHQUFHLE1BQU0sR0FBRztRQUN0QixNQUFNUSxNQUFNO0lBQ2hCO0lBQ0EsSUFBSU4sTUFBTSxFQUFFO0lBQ1osTUFBT0ssSUFBSVAsTUFBTSxHQUFHLEVBQUc7UUFDbkJFLElBQUlPLElBQUksQ0FBQ0MsU0FBU0gsSUFBSUksS0FBSyxDQUFDLEdBQUcsSUFBSTtRQUNuQ0osTUFBTUEsSUFBSUksS0FBSyxDQUFDO0lBQ3BCO0lBQ0EsT0FBT0MsT0FBT0MsSUFBSSxDQUFDWDtBQUN2QjtBQUNBVCxtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vY3J5cHRvL2Rpc3QvdXRpbHMvYmluYXJ5LmpzPzM4MDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpdHNUb0J5dGVzID0gZXhwb3J0cy5ieXRlc1RvQml0cyA9IGV4cG9ydHMubHBhZCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGxwYWQoc3RyLCBwYWRTdHJpbmcsIGxlbmd0aCkge1xuICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgIHN0ciA9IHBhZFN0cmluZyArIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydHMubHBhZCA9IGxwYWQ7XG5mdW5jdGlvbiBieXRlc1RvQml0cyhieXRlcykge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB4ID0gYnl0ZXMuYXQoaSk7XG4gICAgICAgIHJlcyArPSBscGFkKHgudG9TdHJpbmcoMiksICcwJywgOCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmJ5dGVzVG9CaXRzID0gYnl0ZXNUb0JpdHM7XG5mdW5jdGlvbiBiaXRzVG9CeXRlcyhzcmMpIHtcbiAgICBpZiAoc3JjLmxlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1VuZXZlbiBiaXRzJyk7XG4gICAgfVxuICAgIGxldCByZXMgPSBbXTtcbiAgICB3aGlsZSAoc3JjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQoc3JjLnNsaWNlKDAsIDgpLCAyKSk7XG4gICAgICAgIHNyYyA9IHNyYy5zbGljZSg4KTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlcyk7XG59XG5leHBvcnRzLmJpdHNUb0J5dGVzID0gYml0c1RvQnl0ZXM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJiaXRzVG9CeXRlcyIsImJ5dGVzVG9CaXRzIiwibHBhZCIsInN0ciIsInBhZFN0cmluZyIsImxlbmd0aCIsImJ5dGVzIiwicmVzIiwiaSIsIngiLCJhdCIsInRvU3RyaW5nIiwic3JjIiwiRXJyb3IiLCJwdXNoIiwicGFyc2VJbnQiLCJzbGljZSIsIkJ1ZmZlciIsImZyb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/crypto/dist/utils/binary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/client/TonClient.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/client/TonClient.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TonClient = void 0;\nconst HttpApi_1 = __webpack_require__(/*! ./api/HttpApi */ \"(ssr)/./node_modules/@ton/ton/dist/client/api/HttpApi.js\");\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nclass TonClient {\n    constructor(parameters){\n        this.parameters = {\n            endpoint: parameters.endpoint\n        };\n        this.api = new HttpApi_1.HttpApi(this.parameters.endpoint, {\n            timeout: parameters.timeout,\n            apiKey: parameters.apiKey,\n            adapter: parameters.httpAdapter\n        });\n    }\n    /**\n     * Get Address Balance\n     * @param address address for balance check\n     * @returns balance\n     */ async getBalance(address) {\n        return (await this.getContractState(address)).balance;\n    }\n    /**\n     * Invoke get method\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     */ async runMethod(address, name, stack = []) {\n        let res = await this.api.callGetMethod(address, name, stack);\n        if (res.exit_code !== 0) {\n            throw Error(\"Unable to execute get method. Got exit_code: \" + res.exit_code);\n        }\n        return {\n            gas_used: res.gas_used,\n            stack: parseStack(res.stack)\n        };\n    }\n    /**\n     * Invoke get method\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     * @deprecated use runMethod instead\n     */ async callGetMethod(address, name, stack = []) {\n        return this.runMethod(address, name, stack);\n    }\n    /**\n     * Invoke get method that returns error code instead of throwing error\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n    */ async runMethodWithError(address, name, params = []) {\n        let res = await this.api.callGetMethod(address, name, params);\n        return {\n            gas_used: res.gas_used,\n            stack: parseStack(res.stack),\n            exit_code: res.exit_code\n        };\n    }\n    /**\n     * Invoke get method that returns error code instead of throwing error\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     * @deprecated use runMethodWithError instead\n     */ async callGetMethodWithError(address, name, stack = []) {\n        return this.runMethodWithError(address, name, stack);\n    }\n    /**\n     * Get transactions\n     * @param address address\n     */ async getTransactions(address, opts) {\n        // Fetch transactions\n        let tx = await this.api.getTransactions(address, opts);\n        let res = [];\n        for (let r of tx){\n            res.push((0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(r.data, \"base64\"))[0].beginParse()));\n        }\n        return res;\n    }\n    /**\n     * Get transaction by it's id\n     * @param address address\n     * @param lt logical time\n     * @param hash transaction hash\n     * @returns transaction or null if not exist\n     */ async getTransaction(address, lt, hash) {\n        let res = await this.api.getTransaction(address, lt, hash);\n        if (res) {\n            return (0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(res.data, \"base64\"))[0].beginParse());\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Locate outcoming transaction of destination address by incoming message\n     * @param source message source address\n     * @param destination message destination address\n     * @param created_lt message's created lt\n     * @returns transaction\n     */ async tryLocateResultTx(source, destination, created_lt) {\n        let res = await this.api.tryLocateResultTx(source, destination, created_lt);\n        return (0, core_1.loadTransaction)(core_1.Cell.fromBase64(res.data).beginParse());\n    }\n    /**\n     * Locate incoming transaction of source address by outcoming message\n     * @param source message source address\n     * @param destination message destination address\n     * @param created_lt message's created lt\n     * @returns transaction\n     */ async tryLocateSourceTx(source, destination, created_lt) {\n        let res = await this.api.tryLocateSourceTx(source, destination, created_lt);\n        return (0, core_1.loadTransaction)(core_1.Cell.fromBase64(res.data).beginParse());\n    }\n    /**\n     * Fetch latest masterchain info\n     * @returns masterchain info\n     */ async getMasterchainInfo() {\n        let r = await this.api.getMasterchainInfo();\n        return {\n            workchain: r.init.workchain,\n            shard: r.last.shard,\n            initSeqno: r.init.seqno,\n            latestSeqno: r.last.seqno\n        };\n    }\n    /**\n     * Fetch latest workchain shards\n     * @param seqno masterchain seqno\n     */ async getWorkchainShards(seqno) {\n        let r = await this.api.getShards(seqno);\n        return r.map((m)=>({\n                workchain: m.workchain,\n                shard: m.shard,\n                seqno: m.seqno\n            }));\n    }\n    /**\n     * Fetch transactions inf shards\n     * @param workchain\n     * @param seqno\n     * @param shard\n     */ async getShardTransactions(workchain, seqno, shard) {\n        let tx = await this.api.getBlockTransactions(workchain, seqno, shard);\n        if (tx.incomplete) {\n            throw Error(\"Unsupported\");\n        }\n        return tx.transactions.map((v)=>({\n                account: core_1.Address.parseRaw(v.account),\n                lt: v.lt,\n                hash: v.hash\n            }));\n    }\n    /**\n     * Send message to a network\n     * @param src source message\n     */ async sendMessage(src) {\n        const boc = (0, core_1.beginCell)().store((0, core_1.storeMessage)(src)).endCell().toBoc();\n        await this.api.sendBoc(boc);\n    }\n    /**\n     * Send file to a network\n     * @param src source file\n     */ async sendFile(src) {\n        await this.api.sendBoc(src);\n    }\n    /**\n     * Estimate fees for external message\n     * @param address target address\n     * @returns\n     */ async estimateExternalMessageFee(address, args) {\n        return await this.api.estimateFee(address, {\n            body: args.body,\n            initCode: args.initCode,\n            initData: args.initData,\n            ignoreSignature: args.ignoreSignature\n        });\n    }\n    /**\n     * Send external message to contract\n     * @param contract contract to send message\n     * @param src message body\n     */ async sendExternalMessage(contract, src) {\n        if (await this.isContractDeployed(contract.address) || !contract.init) {\n            const message = (0, core_1.external)({\n                to: contract.address,\n                body: src\n            });\n            await this.sendMessage(message);\n        } else {\n            const message = (0, core_1.external)({\n                to: contract.address,\n                init: contract.init,\n                body: src\n            });\n            await this.sendMessage(message);\n        }\n    }\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */ async isContractDeployed(address) {\n        return (await this.getContractState(address)).state === \"active\";\n    }\n    /**\n     * Resolves contract state\n     * @param address contract address\n     */ async getContractState(address) {\n        let info = await this.api.getAddressInformation(address);\n        let balance = BigInt(info.balance);\n        let state = info.state;\n        return {\n            balance,\n            state,\n            code: info.code !== \"\" ? Buffer.from(info.code, \"base64\") : null,\n            data: info.data !== \"\" ? Buffer.from(info.data, \"base64\") : null,\n            lastTransaction: info.last_transaction_id.lt !== \"0\" ? {\n                lt: info.last_transaction_id.lt,\n                hash: info.last_transaction_id.hash\n            } : null,\n            blockId: {\n                workchain: info.block_id.workchain,\n                shard: info.block_id.shard,\n                seqno: info.block_id.seqno\n            },\n            timestampt: info.sync_utime\n        };\n    }\n    /**\n     * Open contract\n     * @param src source contract\n     * @returns contract\n     */ open(src) {\n        return (0, core_1.openContract)(src, (args)=>createProvider(this, args.address, args.init));\n    }\n    /**\n     * Create a provider\n     * @param address address\n     * @param init optional init\n     * @returns provider\n     */ provider(address, init) {\n        return createProvider(this, address, init ?? null);\n    }\n}\nexports.TonClient = TonClient;\nfunction parseStackEntry(s) {\n    switch(s[\"@type\"]){\n        case \"tvm.stackEntryNumber\":\n            return {\n                type: \"int\",\n                value: BigInt(s.number.number)\n            };\n        case \"tvm.stackEntryCell\":\n            return {\n                type: \"cell\",\n                cell: core_1.Cell.fromBase64(s.cell)\n            };\n        case \"tvm.stackEntryTuple\":\n            return {\n                type: \"tuple\",\n                items: s.tuple.elements.map(parseStackEntry)\n            };\n        case \"tvm.stackEntryList\":\n            return {\n                type: \"list\",\n                items: s.list.elements.map(parseStackEntry)\n            };\n        default:\n            throw Error(\"Unsupported item type: \" + s[\"@type\"]);\n    }\n}\nfunction parseStackItem(s) {\n    if (s[0] === \"num\") {\n        let val = s[1];\n        if (val.startsWith(\"-\")) {\n            return {\n                type: \"int\",\n                value: -BigInt(val.slice(1))\n            };\n        } else {\n            return {\n                type: \"int\",\n                value: BigInt(val)\n            };\n        }\n    } else if (s[0] === \"null\") {\n        return {\n            type: \"null\"\n        };\n    } else if (s[0] === \"cell\") {\n        return {\n            type: \"cell\",\n            cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, \"base64\"))[0]\n        };\n    } else if (s[0] === \"slice\") {\n        return {\n            type: \"slice\",\n            cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, \"base64\"))[0]\n        };\n    } else if (s[0] === \"builder\") {\n        return {\n            type: \"builder\",\n            cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, \"base64\"))[0]\n        };\n    } else if (s[0] === \"tuple\" || s[0] === \"list\") {\n        // toncenter.com missbehaviour\n        if (s[1].elements.length === 0) {\n            return {\n                type: \"null\"\n            };\n        }\n        return {\n            type: s[0],\n            items: s[1].elements.map(parseStackEntry)\n        };\n    } else {\n        throw Error(\"Unsupported stack item type: \" + s[0]);\n    }\n}\nfunction parseStack(src) {\n    let stack = [];\n    for (let s of src){\n        stack.push(parseStackItem(s));\n    }\n    return new core_1.TupleReader(stack);\n}\nfunction createProvider(client, address, init) {\n    return {\n        async getState () {\n            let state = await client.getContractState(address);\n            let balance = state.balance;\n            let last = state.lastTransaction ? {\n                lt: BigInt(state.lastTransaction.lt),\n                hash: Buffer.from(state.lastTransaction.hash, \"base64\")\n            } : null;\n            let storage;\n            if (state.state === \"active\") {\n                storage = {\n                    type: \"active\",\n                    code: state.code ? state.code : null,\n                    data: state.data ? state.data : null\n                };\n            } else if (state.state === \"uninitialized\") {\n                storage = {\n                    type: \"uninit\"\n                };\n            } else if (state.state === \"frozen\") {\n                storage = {\n                    type: \"frozen\",\n                    stateHash: Buffer.alloc(0)\n                };\n            } else {\n                throw Error(\"Unsupported state\");\n            }\n            return {\n                balance,\n                last,\n                state: storage\n            };\n        },\n        async get (name, args) {\n            let method = await client.callGetMethod(address, name, args);\n            return {\n                stack: method.stack\n            };\n        },\n        async external (message) {\n            //\n            // Resolve init\n            //\n            let neededInit = null;\n            if (init && !await client.isContractDeployed(address)) {\n                neededInit = init;\n            }\n            //\n            // Send package\n            //\n            const ext = (0, core_1.external)({\n                to: address,\n                init: neededInit,\n                body: message\n            });\n            let boc = (0, core_1.beginCell)().store((0, core_1.storeMessage)(ext)).endCell().toBoc();\n            await client.sendFile(boc);\n        },\n        async internal (via, message) {\n            // Resolve init\n            let neededInit = null;\n            if (init && !await client.isContractDeployed(address)) {\n                neededInit = init;\n            }\n            // Resolve bounce\n            let bounce = true;\n            if (message.bounce !== null && message.bounce !== undefined) {\n                bounce = message.bounce;\n            }\n            // Resolve value\n            let value;\n            if (typeof message.value === \"string\") {\n                value = (0, core_1.toNano)(message.value);\n            } else {\n                value = message.value;\n            }\n            // Resolve body\n            let body = null;\n            if (typeof message.body === \"string\") {\n                body = (0, core_1.comment)(message.body);\n            } else if (message.body) {\n                body = message.body;\n            }\n            // Send internal message\n            await via.send({\n                to: address,\n                value,\n                bounce,\n                sendMode: message.sendMode,\n                init: neededInit,\n                body\n            });\n        },\n        open (contract) {\n            return (0, core_1.openContract)(contract, (args)=>createProvider(client, args.address, args.init ?? null));\n        },\n        getTransactions (address, lt, hash, limit) {\n            return client.getTransactions(address, {\n                limit: limit ?? 100,\n                lt: lt.toString(),\n                hash: hash.toString(\"base64\"),\n                inclusive: true\n            });\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/client/TonClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/client/TonClient4.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/client/TonClient4.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter, _TonClient4_axios;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TonClient4 = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/@ton/ton/node_modules/axios/dist/node/axios.cjs\"));\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst toUrlSafe_1 = __webpack_require__(/*! ../utils/toUrlSafe */ \"(ssr)/./node_modules/@ton/ton/dist/utils/toUrlSafe.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.js\");\nclass TonClient4 {\n    constructor(args){\n        _TonClient4_endpoint.set(this, void 0);\n        _TonClient4_timeout.set(this, void 0);\n        _TonClient4_adapter.set(this, void 0);\n        _TonClient4_axios.set(this, void 0);\n        __classPrivateFieldSet(this, _TonClient4_axios, axios_1.default.create(), \"f\");\n        __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, \"f\");\n        __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5000, \"f\");\n        __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, \"f\");\n        if (args.requestInterceptor) {\n            __classPrivateFieldGet(this, _TonClient4_axios, \"f\").interceptors.request.use(args.requestInterceptor);\n        }\n    }\n    /**\n     * Get Last Block\n     * @returns last block info\n     */ async getLastBlock() {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/latest\", {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let lastBlock = lastBlockCodec.safeParse(res.data);\n        if (!lastBlock.success) {\n            throw Error(\"Mailformed response: \" + lastBlock.error.format()._errors.join(\", \"));\n        }\n        return lastBlock.data;\n    }\n    /**\n     * Get block info\n     * @param seqno block sequence number\n     * @returns block info\n     */ async getBlock(seqno) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno, {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let block = blockCodec.safeParse(res.data);\n        if (!block.success) {\n            throw Error(\"Mailformed response\");\n        }\n        if (!block.data.exist) {\n            throw Error(\"Block is out of scope\");\n        }\n        return block.data.block;\n    }\n    /**\n     * Get block info by unix timestamp\n     * @param ts unix timestamp\n     * @returns block info\n     */ async getBlockByUtime(ts) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/utime/\" + ts, {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let block = blockCodec.safeParse(res.data);\n        if (!block.success) {\n            throw Error(\"Mailformed response\");\n        }\n        if (!block.data.exist) {\n            throw Error(\"Block is out of scope\");\n        }\n        return block.data.block;\n    }\n    /**\n     * Get block info by unix timestamp\n     * @param seqno block sequence number\n     * @param address account address\n     * @returns account info\n     */ async getAccount(seqno, address) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno + \"/\" + address.toString({\n            urlSafe: true\n        }), {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let account = accountCodec.safeParse(res.data);\n        if (!account.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return account.data;\n    }\n    /**\n     * Get account lite info (without code and data)\n     * @param seqno block sequence number\n     * @param address account address\n     * @returns account lite info\n     */ async getAccountLite(seqno, address) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno + \"/\" + address.toString({\n            urlSafe: true\n        }) + \"/lite\", {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let account = accountLiteCodec.safeParse(res.data);\n        if (!account.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return account.data;\n    }\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */ async isContractDeployed(seqno, address) {\n        let account = await this.getAccountLite(seqno, address);\n        return account.account.state.type === \"active\";\n    }\n    /**\n     * Check if account was updated since\n     * @param seqno block sequence number\n     * @param address account address\n     * @param lt account last transaction lt\n     * @returns account change info\n     */ async isAccountChanged(seqno, address, lt) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno + \"/\" + address.toString({\n            urlSafe: true\n        }) + \"/changed/\" + lt.toString(10), {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let changed = changedCodec.safeParse(res.data);\n        if (!changed.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return changed.data;\n    }\n    /**\n     * Load unparsed account transactions\n     * @param address address\n     * @param lt last transaction lt\n     * @param hash last transaction hash\n     * @returns unparsed transactions\n     */ async getAccountTransactions(address, lt, hash) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/account/\" + address.toString({\n            urlSafe: true\n        }) + \"/tx/\" + lt.toString(10) + \"/\" + (0, toUrlSafe_1.toUrlSafe)(hash.toString(\"base64\")), {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let transactions = transactionsCodec.safeParse(res.data);\n        if (!transactions.success) {\n            throw Error(\"Mailformed response\");\n        }\n        let data = transactions.data;\n        let tx = [];\n        let cells = core_1.Cell.fromBoc(Buffer.from(data.boc, \"base64\"));\n        for(let i = 0; i < data.blocks.length; i++){\n            tx.push({\n                block: data.blocks[i],\n                tx: (0, core_1.loadTransaction)(cells[i].beginParse())\n            });\n        }\n        return tx;\n    }\n    /**\n     * Load parsed account transactions\n     * @param address address\n     * @param lt last transaction lt\n     * @param hash last transaction hash\n     * @param count number of transactions to load\n     * @returns parsed transactions\n     */ async getAccountTransactionsParsed(address, lt, hash, count = 20) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/account/\" + address.toString({\n            urlSafe: true\n        }) + \"/tx/parsed/\" + lt.toString(10) + \"/\" + (0, toUrlSafe_1.toUrlSafe)(hash.toString(\"base64\")), {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\"),\n            params: {\n                count\n            }\n        });\n        let parsedTransactionsRes = parsedTransactionsCodec.safeParse(res.data);\n        if (!parsedTransactionsRes.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return parsedTransactionsRes.data;\n    }\n    /**\n     * Get network config\n     * @param seqno block sequence number\n     * @param ids optional config ids\n     * @returns network config\n     */ async getConfig(seqno, ids) {\n        let tail = \"\";\n        if (ids && ids.length > 0) {\n            tail = \"/\" + [\n                ...ids\n            ].sort().join(\",\");\n        }\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno + \"/config\" + tail, {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let config = configCodec.safeParse(res.data);\n        if (!config.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return config.data;\n    }\n    /**\n     * Execute run method\n     * @param seqno block sequence number\n     * @param address account address\n     * @param name method name\n     * @param args method arguments\n     * @returns method result\n     */ async runMethod(seqno, address, name, args) {\n        let tail = args && args.length > 0 ? \"/\" + (0, toUrlSafe_1.toUrlSafe)((0, core_1.serializeTuple)(args).toBoc({\n            idx: false,\n            crc32: false\n        }).toString(\"base64\")) : \"\";\n        let url = __classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/block/\" + seqno + \"/\" + address.toString({\n            urlSafe: true\n        }) + \"/run/\" + encodeURIComponent(name) + tail;\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(url, {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let runMethod = runMethodCodec.safeParse(res.data);\n        if (!runMethod.success) {\n            throw Error(\"Mailformed response\");\n        }\n        let resultTuple = runMethod.data.resultRaw ? (0, core_1.parseTuple)(core_1.Cell.fromBoc(Buffer.from(runMethod.data.resultRaw, \"base64\"))[0]) : [];\n        return {\n            exitCode: runMethod.data.exitCode,\n            result: resultTuple,\n            resultRaw: runMethod.data.resultRaw,\n            block: runMethod.data.block,\n            shardBlock: runMethod.data.shardBlock,\n            reader: new core_1.TupleReader(resultTuple)\n        };\n    }\n    /**\n     * Send external message\n     * @param message message boc\n     * @returns message status\n     */ async sendMessage(message) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").post(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + \"/send\", {\n            boc: message.toString(\"base64\")\n        }, {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n        });\n        let send = sendCodec.safeParse(res.data);\n        if (!send.success) {\n            throw Error(\"Mailformed response\");\n        }\n        return {\n            status: res.data.status\n        };\n    }\n    /**\n     * Open smart contract\n     * @param contract contract\n     * @returns opened contract\n     */ open(contract) {\n        return (0, core_1.openContract)(contract, (args)=>createProvider(this, null, args.address, args.init));\n    }\n    /**\n     * Open smart contract\n     * @param block block number\n     * @param contract contract\n     * @returns opened contract\n     */ openAt(block, contract) {\n        return (0, core_1.openContract)(contract, (args)=>createProvider(this, block, args.address, args.init));\n    }\n    /**\n     * Create provider\n     * @param address address\n     * @param init optional init data\n     * @returns provider\n     */ provider(address, init) {\n        return createProvider(this, null, address, init ?? null);\n    }\n    /**\n     * Create provider at specified block number\n     * @param block block number\n     * @param address address\n     * @param init optional init data\n     * @returns provider\n     */ providerAt(block, address, init) {\n        return createProvider(this, block, address, init ?? null);\n    }\n}\nexports.TonClient4 = TonClient4;\n_TonClient4_endpoint = new WeakMap(), _TonClient4_timeout = new WeakMap(), _TonClient4_adapter = new WeakMap(), _TonClient4_axios = new WeakMap();\nfunction createProvider(client, block, address, init) {\n    return {\n        async getState () {\n            // Resolve block\n            let sq = block;\n            if (sq === null) {\n                let res = await client.getLastBlock();\n                sq = res.last.seqno;\n            }\n            // Load state\n            let state = await client.getAccount(sq, address);\n            // Convert state\n            let last = state.account.last ? {\n                lt: BigInt(state.account.last.lt),\n                hash: Buffer.from(state.account.last.hash, \"base64\")\n            } : null;\n            let storage;\n            if (state.account.state.type === \"active\") {\n                storage = {\n                    type: \"active\",\n                    code: state.account.state.code ? Buffer.from(state.account.state.code, \"base64\") : null,\n                    data: state.account.state.data ? Buffer.from(state.account.state.data, \"base64\") : null\n                };\n            } else if (state.account.state.type === \"uninit\") {\n                storage = {\n                    type: \"uninit\"\n                };\n            } else if (state.account.state.type === \"frozen\") {\n                storage = {\n                    type: \"frozen\",\n                    stateHash: Buffer.from(state.account.state.stateHash, \"base64\")\n                };\n            } else {\n                throw Error(\"Unsupported state\");\n            }\n            return {\n                balance: BigInt(state.account.balance.coins),\n                last: last,\n                state: storage\n            };\n        },\n        async get (name, args) {\n            let sq = block;\n            if (sq === null) {\n                let res = await client.getLastBlock();\n                sq = res.last.seqno;\n            }\n            let method = await client.runMethod(sq, address, name, args);\n            if (method.exitCode !== 0 && method.exitCode !== 1) {\n                throw Error(\"Exit code: \" + method.exitCode);\n            }\n            return {\n                stack: new core_1.TupleReader(method.result)\n            };\n        },\n        async external (message) {\n            // Resolve last\n            let last = await client.getLastBlock();\n            // Resolve init\n            let neededInit = null;\n            if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== \"active\") {\n                neededInit = init;\n            }\n            // Send with state init\n            const ext = (0, core_1.external)({\n                to: address,\n                init: neededInit,\n                body: message\n            });\n            let pkg = (0, core_1.beginCell)().store((0, core_1.storeMessage)(ext)).endCell().toBoc();\n            await client.sendMessage(pkg);\n        },\n        async internal (via, message) {\n            // Resolve last\n            let last = await client.getLastBlock();\n            // Resolve init\n            let neededInit = null;\n            if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== \"active\") {\n                neededInit = init;\n            }\n            // Resolve bounce\n            let bounce = true;\n            if (message.bounce !== null && message.bounce !== undefined) {\n                bounce = message.bounce;\n            }\n            // Resolve value\n            let value;\n            if (typeof message.value === \"string\") {\n                value = (0, core_1.toNano)(message.value);\n            } else {\n                value = message.value;\n            }\n            // Resolve body\n            let body = null;\n            if (typeof message.body === \"string\") {\n                body = (0, core_1.comment)(message.body);\n            } else if (message.body) {\n                body = message.body;\n            }\n            // Send internal message\n            await via.send({\n                to: address,\n                value,\n                bounce,\n                sendMode: message.sendMode,\n                init: neededInit,\n                body\n            });\n        },\n        open (contract) {\n            return (0, core_1.openContract)(contract, (args)=>createProvider(client, block, args.address, args.init ?? null));\n        },\n        async getTransactions (address, lt, hash, limit) {\n            // Resolve last\n            const useLimit = typeof limit === \"number\";\n            if (useLimit && limit <= 0) {\n                return [];\n            }\n            // Load transactions\n            let transactions = [];\n            do {\n                const txs = await client.getAccountTransactions(address, lt, hash);\n                const firstTx = txs[0].tx;\n                const [firstLt, firstHash] = [\n                    firstTx.lt,\n                    firstTx.hash()\n                ];\n                const needSkipFirst = transactions.length > 0 && firstLt === lt && firstHash.equals(hash);\n                if (needSkipFirst) {\n                    txs.shift();\n                }\n                if (txs.length === 0) {\n                    break;\n                }\n                const lastTx = txs[txs.length - 1].tx;\n                const [lastLt, lastHash] = [\n                    lastTx.lt,\n                    lastTx.hash()\n                ];\n                if (lastLt === lt && lastHash.equals(hash)) {\n                    break;\n                }\n                transactions.push(...txs.map((tx)=>tx.tx));\n                lt = lastLt;\n                hash = lastHash;\n            }while (useLimit && transactions.length < limit);\n            // Apply limit\n            if (useLimit) {\n                transactions = transactions.slice(0, limit);\n            }\n            // Return transactions\n            return transactions;\n        }\n    };\n}\n//\n// Codecs\n//\nconst lastBlockCodec = zod_1.z.object({\n    last: zod_1.z.object({\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        workchain: zod_1.z.number(),\n        fileHash: zod_1.z.string(),\n        rootHash: zod_1.z.string()\n    }),\n    init: zod_1.z.object({\n        fileHash: zod_1.z.string(),\n        rootHash: zod_1.z.string()\n    }),\n    stateRootHash: zod_1.z.string(),\n    now: zod_1.z.number()\n});\nconst blockCodec = zod_1.z.union([\n    zod_1.z.object({\n        exist: zod_1.z.literal(false)\n    }),\n    zod_1.z.object({\n        exist: zod_1.z.literal(true),\n        block: zod_1.z.object({\n            shards: zod_1.z.array(zod_1.z.object({\n                workchain: zod_1.z.number(),\n                seqno: zod_1.z.number(),\n                shard: zod_1.z.string(),\n                rootHash: zod_1.z.string(),\n                fileHash: zod_1.z.string(),\n                transactions: zod_1.z.array(zod_1.z.object({\n                    account: zod_1.z.string(),\n                    hash: zod_1.z.string(),\n                    lt: zod_1.z.string()\n                }))\n            }))\n        })\n    })\n]);\n// {\"lastPaid\":1653099243,\"duePayment\":null,\"used\":{\"bits\":119,\"cells\":1,\"publicCells\":0}}\nconst storageStatCodec = zod_1.z.object({\n    lastPaid: zod_1.z.number(),\n    duePayment: zod_1.z.union([\n        zod_1.z.null(),\n        zod_1.z.string()\n    ]),\n    used: zod_1.z.object({\n        bits: zod_1.z.number(),\n        cells: zod_1.z.number(),\n        publicCells: zod_1.z.number()\n    })\n});\nconst accountCodec = zod_1.z.object({\n    account: zod_1.z.object({\n        state: zod_1.z.union([\n            zod_1.z.object({\n                type: zod_1.z.literal(\"uninit\")\n            }),\n            zod_1.z.object({\n                type: zod_1.z.literal(\"active\"),\n                code: zod_1.z.union([\n                    zod_1.z.string(),\n                    zod_1.z.null()\n                ]),\n                data: zod_1.z.union([\n                    zod_1.z.string(),\n                    zod_1.z.null()\n                ])\n            }),\n            zod_1.z.object({\n                type: zod_1.z.literal(\"frozen\"),\n                stateHash: zod_1.z.string()\n            })\n        ]),\n        balance: zod_1.z.object({\n            coins: zod_1.z.string()\n        }),\n        last: zod_1.z.union([\n            zod_1.z.null(),\n            zod_1.z.object({\n                lt: zod_1.z.string(),\n                hash: zod_1.z.string()\n            })\n        ]),\n        storageStat: zod_1.z.union([\n            zod_1.z.null(),\n            storageStatCodec\n        ])\n    }),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst accountLiteCodec = zod_1.z.object({\n    account: zod_1.z.object({\n        state: zod_1.z.union([\n            zod_1.z.object({\n                type: zod_1.z.literal(\"uninit\")\n            }),\n            zod_1.z.object({\n                type: zod_1.z.literal(\"active\"),\n                codeHash: zod_1.z.string(),\n                dataHash: zod_1.z.string()\n            }),\n            zod_1.z.object({\n                type: zod_1.z.literal(\"frozen\"),\n                stateHash: zod_1.z.string()\n            })\n        ]),\n        balance: zod_1.z.object({\n            coins: zod_1.z.string()\n        }),\n        last: zod_1.z.union([\n            zod_1.z.null(),\n            zod_1.z.object({\n                lt: zod_1.z.string(),\n                hash: zod_1.z.string()\n            })\n        ]),\n        storageStat: zod_1.z.union([\n            zod_1.z.null(),\n            storageStatCodec\n        ])\n    })\n});\nconst changedCodec = zod_1.z.object({\n    changed: zod_1.z.boolean(),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst runMethodCodec = zod_1.z.object({\n    exitCode: zod_1.z.number(),\n    resultRaw: zod_1.z.union([\n        zod_1.z.string(),\n        zod_1.z.null()\n    ]),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    }),\n    shardBlock: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst configCodec = zod_1.z.object({\n    config: zod_1.z.object({\n        cell: zod_1.z.string(),\n        address: zod_1.z.string(),\n        globalBalance: zod_1.z.object({\n            coins: zod_1.z.string()\n        })\n    })\n});\nconst sendCodec = zod_1.z.object({\n    status: zod_1.z.number()\n});\nconst blocksCodec = zod_1.z.array(zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n}));\nconst transactionsCodec = zod_1.z.object({\n    blocks: blocksCodec,\n    boc: zod_1.z.string()\n});\nconst parsedAddressExternalCodec = zod_1.z.object({\n    bits: zod_1.z.number(),\n    data: zod_1.z.string()\n});\nconst parsedMessageInfoCodec = zod_1.z.union([\n    zod_1.z.object({\n        type: zod_1.z.literal(\"internal\"),\n        value: zod_1.z.string(),\n        dest: zod_1.z.string(),\n        src: zod_1.z.string(),\n        bounced: zod_1.z.boolean(),\n        bounce: zod_1.z.boolean(),\n        ihrDisabled: zod_1.z.boolean(),\n        createdAt: zod_1.z.number(),\n        createdLt: zod_1.z.string(),\n        fwdFee: zod_1.z.string(),\n        ihrFee: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        type: zod_1.z.literal(\"external-in\"),\n        dest: zod_1.z.string(),\n        src: zod_1.z.union([\n            parsedAddressExternalCodec,\n            zod_1.z.null()\n        ]),\n        importFee: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        type: zod_1.z.literal(\"external-out\"),\n        dest: zod_1.z.union([\n            parsedAddressExternalCodec,\n            zod_1.z.null()\n        ])\n    })\n]);\nconst parsedStateInitCodec = zod_1.z.object({\n    splitDepth: zod_1.z.union([\n        zod_1.z.number(),\n        zod_1.z.null()\n    ]),\n    code: zod_1.z.union([\n        zod_1.z.string(),\n        zod_1.z.null()\n    ]),\n    data: zod_1.z.union([\n        zod_1.z.string(),\n        zod_1.z.null()\n    ]),\n    special: zod_1.z.union([\n        zod_1.z.object({\n            tick: zod_1.z.boolean(),\n            tock: zod_1.z.boolean()\n        }),\n        zod_1.z.null()\n    ])\n});\nconst parsedMessageCodec = zod_1.z.object({\n    body: zod_1.z.string(),\n    info: parsedMessageInfoCodec,\n    init: zod_1.z.union([\n        parsedStateInitCodec,\n        zod_1.z.null()\n    ])\n});\nconst accountStatusCodec = zod_1.z.union([\n    zod_1.z.literal(\"uninitialized\"),\n    zod_1.z.literal(\"frozen\"),\n    zod_1.z.literal(\"active\"),\n    zod_1.z.literal(\"non-existing\")\n]);\nconst txBodyCodec = zod_1.z.union([\n    zod_1.z.object({\n        type: zod_1.z.literal(\"comment\"),\n        comment: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        type: zod_1.z.literal(\"payload\"),\n        cell: zod_1.z.string()\n    })\n]);\nconst parsedOperationItemCodec = zod_1.z.union([\n    zod_1.z.object({\n        kind: zod_1.z.literal(\"ton\"),\n        amount: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        kind: zod_1.z.literal(\"token\"),\n        amount: zod_1.z.string()\n    })\n]);\nconst supportedMessageTypeCodec = zod_1.z.union([\n    zod_1.z.literal(\"jetton::excesses\"),\n    zod_1.z.literal(\"jetton::transfer\"),\n    zod_1.z.literal(\"jetton::transfer_notification\"),\n    zod_1.z.literal(\"deposit\"),\n    zod_1.z.literal(\"deposit::ok\"),\n    zod_1.z.literal(\"withdraw\"),\n    zod_1.z.literal(\"withdraw::all\"),\n    zod_1.z.literal(\"withdraw::delayed\"),\n    zod_1.z.literal(\"withdraw::ok\"),\n    zod_1.z.literal(\"airdrop\")\n]);\nconst opCodec = zod_1.z.object({\n    type: supportedMessageTypeCodec,\n    options: zod_1.z.optional(zod_1.z.record(zod_1.z.string()))\n});\nconst parsedOperationCodec = zod_1.z.object({\n    address: zod_1.z.string(),\n    comment: zod_1.z.optional(zod_1.z.string()),\n    items: zod_1.z.array(parsedOperationItemCodec),\n    op: zod_1.z.optional(opCodec)\n});\nconst parsedTransactionCodec = zod_1.z.object({\n    address: zod_1.z.string(),\n    lt: zod_1.z.string(),\n    hash: zod_1.z.string(),\n    prevTransaction: zod_1.z.object({\n        lt: zod_1.z.string(),\n        hash: zod_1.z.string()\n    }),\n    time: zod_1.z.number(),\n    outMessagesCount: zod_1.z.number(),\n    oldStatus: accountStatusCodec,\n    newStatus: accountStatusCodec,\n    fees: zod_1.z.string(),\n    update: zod_1.z.object({\n        oldHash: zod_1.z.string(),\n        newHash: zod_1.z.string()\n    }),\n    inMessage: zod_1.z.union([\n        parsedMessageCodec,\n        zod_1.z.null()\n    ]),\n    outMessages: zod_1.z.array(parsedMessageCodec),\n    parsed: zod_1.z.object({\n        seqno: zod_1.z.union([\n            zod_1.z.number(),\n            zod_1.z.null()\n        ]),\n        body: zod_1.z.union([\n            txBodyCodec,\n            zod_1.z.null()\n        ]),\n        status: zod_1.z.union([\n            zod_1.z.literal(\"success\"),\n            zod_1.z.literal(\"failed\"),\n            zod_1.z.literal(\"pending\")\n        ]),\n        dest: zod_1.z.union([\n            zod_1.z.string(),\n            zod_1.z.null()\n        ]),\n        kind: zod_1.z.union([\n            zod_1.z.literal(\"out\"),\n            zod_1.z.literal(\"in\")\n        ]),\n        amount: zod_1.z.string(),\n        resolvedAddress: zod_1.z.string(),\n        bounced: zod_1.z.boolean(),\n        mentioned: zod_1.z.array(zod_1.z.string())\n    }),\n    operation: parsedOperationCodec\n});\nconst parsedTransactionsCodec = zod_1.z.object({\n    blocks: blocksCodec,\n    transactions: zod_1.z.array(parsedTransactionCodec)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9jbGllbnQvVG9uQ2xpZW50NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Q0FNQyxHQUNELElBQUlBLHlCQUF5QixJQUFLLElBQUksSUFBSSxDQUFDQSxzQkFBc0IsSUFBSyxTQUFVQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLENBQUM7SUFDM0csSUFBSUQsU0FBUyxLQUFLLE1BQU0sSUFBSUUsVUFBVTtJQUN0QyxJQUFJRixTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU8sU0FBVSxNQUFNRCxFQUFFRyxJQUFJLENBQUNQLFVBQVVFLFNBQVNFLElBQUlBLEVBQUVGLEtBQUssR0FBR0EsUUFBUUQsTUFBTU8sR0FBRyxDQUFDUixVQUFVRSxRQUFTQTtBQUN4RztBQUNBLElBQUlPLHlCQUF5QixJQUFLLElBQUksSUFBSSxDQUFDQSxzQkFBc0IsSUFBSyxTQUFVVCxRQUFRLEVBQUVDLEtBQUssRUFBRUUsSUFBSSxFQUFFQyxDQUFDO0lBQ3BHLElBQUlELFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBT0YsU0FBUyxNQUFNQyxJQUFJRCxTQUFTLE1BQU1DLEVBQUVHLElBQUksQ0FBQ1AsWUFBWUksSUFBSUEsRUFBRUYsS0FBSyxHQUFHRCxNQUFNUyxHQUFHLENBQUNWO0FBQ3hGO0FBQ0EsSUFBSVcsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBLElBQUlFLHNCQUFzQkMscUJBQXFCQyxxQkFBcUJDO0FBQ3BFQyw4Q0FBNkM7SUFBRWhCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RrQixrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1FLFVBQVVYLGdCQUFnQlksbUJBQU9BLENBQUMsbUZBQU87QUFDL0MsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsK0RBQVc7QUFDbEMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsaUZBQW9CO0FBQ2hELE1BQU1HLFFBQVFILG1CQUFPQSxDQUFDLGtEQUFLO0FBQzNCLE1BQU1GO0lBQ0ZNLFlBQVlDLElBQUksQ0FBRTtRQUNkZCxxQkFBcUJOLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNwQ08sb0JBQW9CUCxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDbkNRLG9CQUFvQlIsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLO1FBQ25DUyxrQkFBa0JULEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNqQ1QsdUJBQXVCLElBQUksRUFBRWtCLG1CQUFtQkssUUFBUU8sT0FBTyxDQUFDQyxNQUFNLElBQUk7UUFDMUUvQix1QkFBdUIsSUFBSSxFQUFFZSxzQkFBc0JjLEtBQUtHLFFBQVEsRUFBRTtRQUNsRWhDLHVCQUF1QixJQUFJLEVBQUVnQixxQkFBcUJhLEtBQUtJLE9BQU8sSUFBSSxNQUFNO1FBQ3hFakMsdUJBQXVCLElBQUksRUFBRWlCLHFCQUFxQlksS0FBS0ssV0FBVyxFQUFFO1FBQ3BFLElBQUlMLEtBQUtNLGtCQUFrQixFQUFFO1lBQ3pCekIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtrQixZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDVCxLQUFLTSxrQkFBa0I7UUFDekc7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE1BQU1JLGVBQWU7UUFDakIsSUFBSUMsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8saUJBQWlCO1lBQUUwQixTQUFTL0IsdUJBQXVCLElBQUksRUFBRU8scUJBQXFCO1lBQU1nQixTQUFTdkIsdUJBQXVCLElBQUksRUFBRU0scUJBQXFCO1FBQUs7UUFDdlIsSUFBSTBCLFlBQVlDLGVBQWVDLFNBQVMsQ0FBQ0osSUFBSUssSUFBSTtRQUNqRCxJQUFJLENBQUNILFVBQVVJLE9BQU8sRUFBRTtZQUNwQixNQUFNQyxNQUFNLDBCQUEwQkwsVUFBVU0sS0FBSyxDQUFDQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO1FBQ2hGO1FBQ0EsT0FBT1QsVUFBVUcsSUFBSTtJQUN6QjtJQUNBOzs7O0tBSUMsR0FDRCxNQUFNTyxTQUFTQyxLQUFLLEVBQUU7UUFDbEIsSUFBSWIsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8sWUFBWXNDLE9BQU87WUFBRVosU0FBUy9CLHVCQUF1QixJQUFJLEVBQUVPLHFCQUFxQjtZQUFNZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtRQUFLO1FBQ3pSLElBQUlzQyxRQUFRQyxXQUFXWCxTQUFTLENBQUNKLElBQUlLLElBQUk7UUFDekMsSUFBSSxDQUFDUyxNQUFNUixPQUFPLEVBQUU7WUFDaEIsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLElBQUksQ0FBQ08sTUFBTVQsSUFBSSxDQUFDVyxLQUFLLEVBQUU7WUFDbkIsTUFBTVQsTUFBTTtRQUNoQjtRQUNBLE9BQU9PLE1BQU1ULElBQUksQ0FBQ1MsS0FBSztJQUMzQjtJQUNBOzs7O0tBSUMsR0FDRCxNQUFNRyxnQkFBZ0JDLEVBQUUsRUFBRTtRQUN0QixJQUFJbEIsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8sa0JBQWtCMkMsSUFBSTtZQUFFakIsU0FBUy9CLHVCQUF1QixJQUFJLEVBQUVPLHFCQUFxQjtZQUFNZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtRQUFLO1FBQzVSLElBQUlzQyxRQUFRQyxXQUFXWCxTQUFTLENBQUNKLElBQUlLLElBQUk7UUFDekMsSUFBSSxDQUFDUyxNQUFNUixPQUFPLEVBQUU7WUFDaEIsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLElBQUksQ0FBQ08sTUFBTVQsSUFBSSxDQUFDVyxLQUFLLEVBQUU7WUFDbkIsTUFBTVQsTUFBTTtRQUNoQjtRQUNBLE9BQU9PLE1BQU1ULElBQUksQ0FBQ1MsS0FBSztJQUMzQjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUssV0FBV04sS0FBSyxFQUFFTyxPQUFPLEVBQUU7UUFDN0IsSUFBSXBCLE1BQU0sTUFBTTlCLHVCQUF1QixJQUFJLEVBQUVRLG1CQUFtQixLQUFLUCxHQUFHLENBQUNELHVCQUF1QixJQUFJLEVBQUVLLHNCQUFzQixPQUFPLFlBQVlzQyxRQUFRLE1BQU1PLFFBQVFDLFFBQVEsQ0FBQztZQUFFQyxTQUFTO1FBQUssSUFBSTtZQUFFckIsU0FBUy9CLHVCQUF1QixJQUFJLEVBQUVPLHFCQUFxQjtZQUFNZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtRQUFLO1FBQ3JVLElBQUkrQyxVQUFVQyxhQUFhcEIsU0FBUyxDQUFDSixJQUFJSyxJQUFJO1FBQzdDLElBQUksQ0FBQ2tCLFFBQVFqQixPQUFPLEVBQUU7WUFDbEIsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLE9BQU9nQixRQUFRbEIsSUFBSTtJQUN2QjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTW9CLGVBQWVaLEtBQUssRUFBRU8sT0FBTyxFQUFFO1FBQ2pDLElBQUlwQixNQUFNLE1BQU05Qix1QkFBdUIsSUFBSSxFQUFFUSxtQkFBbUIsS0FBS1AsR0FBRyxDQUFDRCx1QkFBdUIsSUFBSSxFQUFFSyxzQkFBc0IsT0FBTyxZQUFZc0MsUUFBUSxNQUFNTyxRQUFRQyxRQUFRLENBQUM7WUFBRUMsU0FBUztRQUFLLEtBQUssU0FBUztZQUFFckIsU0FBUy9CLHVCQUF1QixJQUFJLEVBQUVPLHFCQUFxQjtZQUFNZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtRQUFLO1FBQy9VLElBQUkrQyxVQUFVRyxpQkFBaUJ0QixTQUFTLENBQUNKLElBQUlLLElBQUk7UUFDakQsSUFBSSxDQUFDa0IsUUFBUWpCLE9BQU8sRUFBRTtZQUNsQixNQUFNQyxNQUFNO1FBQ2hCO1FBQ0EsT0FBT2dCLFFBQVFsQixJQUFJO0lBQ3ZCO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1zQixtQkFBbUJkLEtBQUssRUFBRU8sT0FBTyxFQUFFO1FBQ3JDLElBQUlHLFVBQVUsTUFBTSxJQUFJLENBQUNFLGNBQWMsQ0FBQ1osT0FBT087UUFDL0MsT0FBT0csUUFBUUEsT0FBTyxDQUFDN0QsS0FBSyxDQUFDa0UsSUFBSSxLQUFLO0lBQzFDO0lBQ0E7Ozs7OztLQU1DLEdBQ0QsTUFBTUMsaUJBQWlCaEIsS0FBSyxFQUFFTyxPQUFPLEVBQUVVLEVBQUUsRUFBRTtRQUN2QyxJQUFJOUIsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8sWUFBWXNDLFFBQVEsTUFBTU8sUUFBUUMsUUFBUSxDQUFDO1lBQUVDLFNBQVM7UUFBSyxLQUFLLGNBQWNRLEdBQUdULFFBQVEsQ0FBQyxLQUFLO1lBQUVwQixTQUFTL0IsdUJBQXVCLElBQUksRUFBRU8scUJBQXFCO1lBQU1nQixTQUFTdkIsdUJBQXVCLElBQUksRUFBRU0scUJBQXFCO1FBQUs7UUFDclcsSUFBSXVELFVBQVVDLGFBQWE1QixTQUFTLENBQUNKLElBQUlLLElBQUk7UUFDN0MsSUFBSSxDQUFDMEIsUUFBUXpCLE9BQU8sRUFBRTtZQUNsQixNQUFNQyxNQUFNO1FBQ2hCO1FBQ0EsT0FBT3dCLFFBQVExQixJQUFJO0lBQ3ZCO0lBQ0E7Ozs7OztLQU1DLEdBQ0QsTUFBTTRCLHVCQUF1QmIsT0FBTyxFQUFFVSxFQUFFLEVBQUVJLElBQUksRUFBRTtRQUM1QyxJQUFJbEMsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8sY0FBYzZDLFFBQVFDLFFBQVEsQ0FBQztZQUFFQyxTQUFTO1FBQUssS0FBSyxTQUFTUSxHQUFHVCxRQUFRLENBQUMsTUFBTSxNQUFNLENBQUMsR0FBR25DLFlBQVlpRCxTQUFTLEVBQUVELEtBQUtiLFFBQVEsQ0FBQyxZQUFZO1lBQUVwQixTQUFTL0IsdUJBQXVCLElBQUksRUFBRU8scUJBQXFCO1lBQU1nQixTQUFTdkIsdUJBQXVCLElBQUksRUFBRU0scUJBQXFCO1FBQUs7UUFDaFosSUFBSTRELGVBQWVDLGtCQUFrQmpDLFNBQVMsQ0FBQ0osSUFBSUssSUFBSTtRQUN2RCxJQUFJLENBQUMrQixhQUFhOUIsT0FBTyxFQUFFO1lBQ3ZCLE1BQU1DLE1BQU07UUFDaEI7UUFDQSxJQUFJRixPQUFPK0IsYUFBYS9CLElBQUk7UUFDNUIsSUFBSWlDLEtBQUssRUFBRTtRQUNYLElBQUlDLFFBQVF0RCxPQUFPdUQsSUFBSSxDQUFDQyxPQUFPLENBQUNDLE9BQU9DLElBQUksQ0FBQ3RDLEtBQUt1QyxHQUFHLEVBQUU7UUFDdEQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUl4QyxLQUFLeUMsTUFBTSxDQUFDQyxNQUFNLEVBQUVGLElBQUs7WUFDekNQLEdBQUdVLElBQUksQ0FBQztnQkFDSmxDLE9BQU9ULEtBQUt5QyxNQUFNLENBQUNELEVBQUU7Z0JBQ3JCUCxJQUFJLENBQUMsR0FBR3JELE9BQU9nRSxlQUFlLEVBQUVWLEtBQUssQ0FBQ00sRUFBRSxDQUFDSyxVQUFVO1lBQ3ZEO1FBQ0o7UUFDQSxPQUFPWjtJQUNYO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU1hLDZCQUE2Qi9CLE9BQU8sRUFBRVUsRUFBRSxFQUFFSSxJQUFJLEVBQUVrQixRQUFRLEVBQUUsRUFBRTtRQUM5RCxJQUFJcEQsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ0QsdUJBQXVCLElBQUksRUFBRUssc0JBQXNCLE9BQU8sY0FBYzZDLFFBQVFDLFFBQVEsQ0FBQztZQUFFQyxTQUFTO1FBQUssS0FBSyxnQkFBZ0JRLEdBQUdULFFBQVEsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxHQUFHbkMsWUFBWWlELFNBQVMsRUFBRUQsS0FBS2IsUUFBUSxDQUFDLFlBQVk7WUFDaFJwQixTQUFTL0IsdUJBQXVCLElBQUksRUFBRU8scUJBQXFCO1lBQzNEZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtZQUMzRDZFLFFBQVE7Z0JBQ0pEO1lBQ0o7UUFDSjtRQUNBLElBQUlFLHdCQUF3QkMsd0JBQXdCbkQsU0FBUyxDQUFDSixJQUFJSyxJQUFJO1FBQ3RFLElBQUksQ0FBQ2lELHNCQUFzQmhELE9BQU8sRUFBRTtZQUNoQyxNQUFNQyxNQUFNO1FBQ2hCO1FBQ0EsT0FBTytDLHNCQUFzQmpELElBQUk7SUFDckM7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1tRCxVQUFVM0MsS0FBSyxFQUFFNEMsR0FBRyxFQUFFO1FBQ3hCLElBQUlDLE9BQU87UUFDWCxJQUFJRCxPQUFPQSxJQUFJVixNQUFNLEdBQUcsR0FBRztZQUN2QlcsT0FBTyxNQUFNO21CQUFJRDthQUFJLENBQUNFLElBQUksR0FBR2hELElBQUksQ0FBQztRQUN0QztRQUNBLElBQUlYLE1BQU0sTUFBTTlCLHVCQUF1QixJQUFJLEVBQUVRLG1CQUFtQixLQUFLUCxHQUFHLENBQUNELHVCQUF1QixJQUFJLEVBQUVLLHNCQUFzQixPQUFPLFlBQVlzQyxRQUFRLFlBQVk2QyxNQUFNO1lBQUV6RCxTQUFTL0IsdUJBQXVCLElBQUksRUFBRU8scUJBQXFCO1lBQU1nQixTQUFTdkIsdUJBQXVCLElBQUksRUFBRU0scUJBQXFCO1FBQUs7UUFDNVMsSUFBSW9GLFNBQVNDLFlBQVl6RCxTQUFTLENBQUNKLElBQUlLLElBQUk7UUFDM0MsSUFBSSxDQUFDdUQsT0FBT3RELE9BQU8sRUFBRTtZQUNqQixNQUFNQyxNQUFNO1FBQ2hCO1FBQ0EsT0FBT3FELE9BQU92RCxJQUFJO0lBQ3RCO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU15RCxVQUFVakQsS0FBSyxFQUFFTyxPQUFPLEVBQUUyQyxJQUFJLEVBQUUxRSxJQUFJLEVBQUU7UUFDeEMsSUFBSXFFLE9BQU9yRSxRQUFRQSxLQUFLMEQsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUc3RCxZQUFZaUQsU0FBUyxFQUFFLENBQUMsR0FBR2xELE9BQU8rRSxjQUFjLEVBQUUzRSxNQUFNNEUsS0FBSyxDQUFDO1lBQUVDLEtBQUs7WUFBT0MsT0FBTztRQUFNLEdBQUc5QyxRQUFRLENBQUMsYUFBYTtRQUNqSyxJQUFJK0MsTUFBTWxHLHVCQUF1QixJQUFJLEVBQUVLLHNCQUFzQixPQUFPLFlBQVlzQyxRQUFRLE1BQU1PLFFBQVFDLFFBQVEsQ0FBQztZQUFFQyxTQUFTO1FBQUssS0FBSyxVQUFVK0MsbUJBQW1CTixRQUFRTDtRQUN6SyxJQUFJMUQsTUFBTSxNQUFNOUIsdUJBQXVCLElBQUksRUFBRVEsbUJBQW1CLEtBQUtQLEdBQUcsQ0FBQ2lHLEtBQUs7WUFBRW5FLFNBQVMvQix1QkFBdUIsSUFBSSxFQUFFTyxxQkFBcUI7WUFBTWdCLFNBQVN2Qix1QkFBdUIsSUFBSSxFQUFFTSxxQkFBcUI7UUFBSztRQUNqTixJQUFJc0YsWUFBWVEsZUFBZWxFLFNBQVMsQ0FBQ0osSUFBSUssSUFBSTtRQUNqRCxJQUFJLENBQUN5RCxVQUFVeEQsT0FBTyxFQUFFO1lBQ3BCLE1BQU1DLE1BQU07UUFDaEI7UUFDQSxJQUFJZ0UsY0FBY1QsVUFBVXpELElBQUksQ0FBQ21FLFNBQVMsR0FBRyxDQUFDLEdBQUd2RixPQUFPd0YsVUFBVSxFQUFFeEYsT0FBT3VELElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPQyxJQUFJLENBQUNtQixVQUFVekQsSUFBSSxDQUFDbUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRTtRQUNqSixPQUFPO1lBQ0hFLFVBQVVaLFVBQVV6RCxJQUFJLENBQUNxRSxRQUFRO1lBQ2pDQyxRQUFRSjtZQUNSQyxXQUFXVixVQUFVekQsSUFBSSxDQUFDbUUsU0FBUztZQUNuQzFELE9BQU9nRCxVQUFVekQsSUFBSSxDQUFDUyxLQUFLO1lBQzNCOEQsWUFBWWQsVUFBVXpELElBQUksQ0FBQ3VFLFVBQVU7WUFDckNDLFFBQVEsSUFBSTVGLE9BQU82RixXQUFXLENBQUNQO1FBQ25DO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTVEsWUFBWUMsT0FBTyxFQUFFO1FBQ3ZCLElBQUloRixNQUFNLE1BQU05Qix1QkFBdUIsSUFBSSxFQUFFUSxtQkFBbUIsS0FBS3VHLElBQUksQ0FBQy9HLHVCQUF1QixJQUFJLEVBQUVLLHNCQUFzQixPQUFPLFNBQVM7WUFBRXFFLEtBQUtvQyxRQUFRM0QsUUFBUSxDQUFDO1FBQVUsR0FBRztZQUFFcEIsU0FBUy9CLHVCQUF1QixJQUFJLEVBQUVPLHFCQUFxQjtZQUFNZ0IsU0FBU3ZCLHVCQUF1QixJQUFJLEVBQUVNLHFCQUFxQjtRQUFLO1FBQ3JULElBQUkwRyxPQUFPQyxVQUFVL0UsU0FBUyxDQUFDSixJQUFJSyxJQUFJO1FBQ3ZDLElBQUksQ0FBQzZFLEtBQUs1RSxPQUFPLEVBQUU7WUFDZixNQUFNQyxNQUFNO1FBQ2hCO1FBQ0EsT0FBTztZQUFFNkUsUUFBUXBGLElBQUlLLElBQUksQ0FBQytFLE1BQU07UUFBQztJQUNyQztJQUNBOzs7O0tBSUMsR0FDREMsS0FBS0MsUUFBUSxFQUFFO1FBQ1gsT0FBTyxDQUFDLEdBQUdyRyxPQUFPc0csWUFBWSxFQUFFRCxVQUFVLENBQUNqRyxPQUFTbUcsZUFBZSxJQUFJLEVBQUUsTUFBTW5HLEtBQUsrQixPQUFPLEVBQUUvQixLQUFLb0csSUFBSTtJQUMxRztJQUNBOzs7OztLQUtDLEdBQ0RDLE9BQU81RSxLQUFLLEVBQUV3RSxRQUFRLEVBQUU7UUFDcEIsT0FBTyxDQUFDLEdBQUdyRyxPQUFPc0csWUFBWSxFQUFFRCxVQUFVLENBQUNqRyxPQUFTbUcsZUFBZSxJQUFJLEVBQUUxRSxPQUFPekIsS0FBSytCLE9BQU8sRUFBRS9CLEtBQUtvRyxJQUFJO0lBQzNHO0lBQ0E7Ozs7O0tBS0MsR0FDREUsU0FBU3ZFLE9BQU8sRUFBRXFFLElBQUksRUFBRTtRQUNwQixPQUFPRCxlQUFlLElBQUksRUFBRSxNQUFNcEUsU0FBU3FFLFFBQVE7SUFDdkQ7SUFDQTs7Ozs7O0tBTUMsR0FDREcsV0FBVzlFLEtBQUssRUFBRU0sT0FBTyxFQUFFcUUsSUFBSSxFQUFFO1FBQzdCLE9BQU9ELGVBQWUsSUFBSSxFQUFFMUUsT0FBT00sU0FBU3FFLFFBQVE7SUFDeEQ7QUFDSjtBQUNBNUcsa0JBQWtCLEdBQUdDO0FBQ3JCUCx1QkFBdUIsSUFBSXNILFdBQVdySCxzQkFBc0IsSUFBSXFILFdBQVdwSCxzQkFBc0IsSUFBSW9ILFdBQVduSCxvQkFBb0IsSUFBSW1IO0FBQ3hJLFNBQVNMLGVBQWVNLE1BQU0sRUFBRWhGLEtBQUssRUFBRU0sT0FBTyxFQUFFcUUsSUFBSTtJQUNoRCxPQUFPO1FBQ0gsTUFBTU07WUFDRixnQkFBZ0I7WUFDaEIsSUFBSUMsS0FBS2xGO1lBQ1QsSUFBSWtGLE9BQU8sTUFBTTtnQkFDYixJQUFJaEcsTUFBTSxNQUFNOEYsT0FBTy9GLFlBQVk7Z0JBQ25DaUcsS0FBS2hHLElBQUlpRyxJQUFJLENBQUNwRixLQUFLO1lBQ3ZCO1lBQ0EsYUFBYTtZQUNiLElBQUluRCxRQUFRLE1BQU1vSSxPQUFPM0UsVUFBVSxDQUFDNkUsSUFBSTVFO1lBQ3hDLGdCQUFnQjtZQUNoQixJQUFJNkUsT0FBT3ZJLE1BQU02RCxPQUFPLENBQUMwRSxJQUFJLEdBQUc7Z0JBQUVuRSxJQUFJb0UsT0FBT3hJLE1BQU02RCxPQUFPLENBQUMwRSxJQUFJLENBQUNuRSxFQUFFO2dCQUFHSSxNQUFNUSxPQUFPQyxJQUFJLENBQUNqRixNQUFNNkQsT0FBTyxDQUFDMEUsSUFBSSxDQUFDL0QsSUFBSSxFQUFFO1lBQVUsSUFBSTtZQUM5SCxJQUFJaUU7WUFDSixJQUFJekksTUFBTTZELE9BQU8sQ0FBQzdELEtBQUssQ0FBQ2tFLElBQUksS0FBSyxVQUFVO2dCQUN2Q3VFLFVBQVU7b0JBQ052RSxNQUFNO29CQUNOd0UsTUFBTTFJLE1BQU02RCxPQUFPLENBQUM3RCxLQUFLLENBQUMwSSxJQUFJLEdBQUcxRCxPQUFPQyxJQUFJLENBQUNqRixNQUFNNkQsT0FBTyxDQUFDN0QsS0FBSyxDQUFDMEksSUFBSSxFQUFFLFlBQVk7b0JBQ25GL0YsTUFBTTNDLE1BQU02RCxPQUFPLENBQUM3RCxLQUFLLENBQUMyQyxJQUFJLEdBQUdxQyxPQUFPQyxJQUFJLENBQUNqRixNQUFNNkQsT0FBTyxDQUFDN0QsS0FBSyxDQUFDMkMsSUFBSSxFQUFFLFlBQVk7Z0JBQ3ZGO1lBQ0osT0FDSyxJQUFJM0MsTUFBTTZELE9BQU8sQ0FBQzdELEtBQUssQ0FBQ2tFLElBQUksS0FBSyxVQUFVO2dCQUM1Q3VFLFVBQVU7b0JBQ052RSxNQUFNO2dCQUNWO1lBQ0osT0FDSyxJQUFJbEUsTUFBTTZELE9BQU8sQ0FBQzdELEtBQUssQ0FBQ2tFLElBQUksS0FBSyxVQUFVO2dCQUM1Q3VFLFVBQVU7b0JBQ052RSxNQUFNO29CQUNOeUUsV0FBVzNELE9BQU9DLElBQUksQ0FBQ2pGLE1BQU02RCxPQUFPLENBQUM3RCxLQUFLLENBQUMySSxTQUFTLEVBQUU7Z0JBQzFEO1lBQ0osT0FDSztnQkFDRCxNQUFNOUYsTUFBTTtZQUNoQjtZQUNBLE9BQU87Z0JBQ0grRixTQUFTSixPQUFPeEksTUFBTTZELE9BQU8sQ0FBQytFLE9BQU8sQ0FBQ0MsS0FBSztnQkFDM0NOLE1BQU1BO2dCQUNOdkksT0FBT3lJO1lBQ1g7UUFDSjtRQUNBLE1BQU1oSSxLQUFJNEYsSUFBSSxFQUFFMUUsSUFBSTtZQUNoQixJQUFJMkcsS0FBS2xGO1lBQ1QsSUFBSWtGLE9BQU8sTUFBTTtnQkFDYixJQUFJaEcsTUFBTSxNQUFNOEYsT0FBTy9GLFlBQVk7Z0JBQ25DaUcsS0FBS2hHLElBQUlpRyxJQUFJLENBQUNwRixLQUFLO1lBQ3ZCO1lBQ0EsSUFBSTJGLFNBQVMsTUFBTVYsT0FBT2hDLFNBQVMsQ0FBQ2tDLElBQUk1RSxTQUFTMkMsTUFBTTFFO1lBQ3ZELElBQUltSCxPQUFPOUIsUUFBUSxLQUFLLEtBQUs4QixPQUFPOUIsUUFBUSxLQUFLLEdBQUc7Z0JBQ2hELE1BQU1uRSxNQUFNLGdCQUFnQmlHLE9BQU85QixRQUFRO1lBQy9DO1lBQ0EsT0FBTztnQkFDSCtCLE9BQU8sSUFBSXhILE9BQU82RixXQUFXLENBQUMwQixPQUFPN0IsTUFBTTtZQUMvQztRQUNKO1FBQ0EsTUFBTStCLFVBQVMxQixPQUFPO1lBQ2xCLGVBQWU7WUFDZixJQUFJaUIsT0FBTyxNQUFNSCxPQUFPL0YsWUFBWTtZQUNwQyxlQUFlO1lBQ2YsSUFBSTRHLGFBQWE7WUFDakIsSUFBSWxCLFFBQVEsQ0FBQyxNQUFNSyxPQUFPckUsY0FBYyxDQUFDd0UsS0FBS0EsSUFBSSxDQUFDcEYsS0FBSyxFQUFFTyxRQUFPLEVBQUdHLE9BQU8sQ0FBQzdELEtBQUssQ0FBQ2tFLElBQUksS0FBSyxVQUFVO2dCQUNqRytFLGFBQWFsQjtZQUNqQjtZQUNBLHVCQUF1QjtZQUN2QixNQUFNbUIsTUFBTSxDQUFDLEdBQUczSCxPQUFPeUgsUUFBUSxFQUFFO2dCQUM3QkcsSUFBSXpGO2dCQUNKcUUsTUFBTWtCO2dCQUNORyxNQUFNOUI7WUFDVjtZQUNBLElBQUkrQixNQUFNLENBQUMsR0FBRzlILE9BQU8rSCxTQUFTLElBQ3pCQyxLQUFLLENBQUMsQ0FBQyxHQUFHaEksT0FBT2lJLFlBQVksRUFBRU4sTUFDL0JPLE9BQU8sR0FDUGxELEtBQUs7WUFDVixNQUFNNkIsT0FBT2YsV0FBVyxDQUFDZ0M7UUFDN0I7UUFDQSxNQUFNSyxVQUFTQyxHQUFHLEVBQUVyQyxPQUFPO1lBQ3ZCLGVBQWU7WUFDZixJQUFJaUIsT0FBTyxNQUFNSCxPQUFPL0YsWUFBWTtZQUNwQyxlQUFlO1lBQ2YsSUFBSTRHLGFBQWE7WUFDakIsSUFBSWxCLFFBQVEsQ0FBQyxNQUFNSyxPQUFPckUsY0FBYyxDQUFDd0UsS0FBS0EsSUFBSSxDQUFDcEYsS0FBSyxFQUFFTyxRQUFPLEVBQUdHLE9BQU8sQ0FBQzdELEtBQUssQ0FBQ2tFLElBQUksS0FBSyxVQUFVO2dCQUNqRytFLGFBQWFsQjtZQUNqQjtZQUNBLGlCQUFpQjtZQUNqQixJQUFJNkIsU0FBUztZQUNiLElBQUl0QyxRQUFRc0MsTUFBTSxLQUFLLFFBQVF0QyxRQUFRc0MsTUFBTSxLQUFLQyxXQUFXO2dCQUN6REQsU0FBU3RDLFFBQVFzQyxNQUFNO1lBQzNCO1lBQ0EsZ0JBQWdCO1lBQ2hCLElBQUkzSjtZQUNKLElBQUksT0FBT3FILFFBQVFySCxLQUFLLEtBQUssVUFBVTtnQkFDbkNBLFFBQVEsQ0FBQyxHQUFHc0IsT0FBT3VJLE1BQU0sRUFBRXhDLFFBQVFySCxLQUFLO1lBQzVDLE9BQ0s7Z0JBQ0RBLFFBQVFxSCxRQUFRckgsS0FBSztZQUN6QjtZQUNBLGVBQWU7WUFDZixJQUFJbUosT0FBTztZQUNYLElBQUksT0FBTzlCLFFBQVE4QixJQUFJLEtBQUssVUFBVTtnQkFDbENBLE9BQU8sQ0FBQyxHQUFHN0gsT0FBT3dJLE9BQU8sRUFBRXpDLFFBQVE4QixJQUFJO1lBQzNDLE9BQ0ssSUFBSTlCLFFBQVE4QixJQUFJLEVBQUU7Z0JBQ25CQSxPQUFPOUIsUUFBUThCLElBQUk7WUFDdkI7WUFDQSx3QkFBd0I7WUFDeEIsTUFBTU8sSUFBSW5DLElBQUksQ0FBQztnQkFDWDJCLElBQUl6RjtnQkFDSnpEO2dCQUNBMko7Z0JBQ0FJLFVBQVUxQyxRQUFRMEMsUUFBUTtnQkFDMUJqQyxNQUFNa0I7Z0JBQ05HO1lBQ0o7UUFDSjtRQUNBekIsTUFBS0MsUUFBUTtZQUNULE9BQU8sQ0FBQyxHQUFHckcsT0FBT3NHLFlBQVksRUFBRUQsVUFBVSxDQUFDakcsT0FBU21HLGVBQWVNLFFBQVFoRixPQUFPekIsS0FBSytCLE9BQU8sRUFBRS9CLEtBQUtvRyxJQUFJLElBQUk7UUFDakg7UUFDQSxNQUFNa0MsaUJBQWdCdkcsT0FBTyxFQUFFVSxFQUFFLEVBQUVJLElBQUksRUFBRTBGLEtBQUs7WUFDMUMsZUFBZTtZQUNmLE1BQU1DLFdBQVcsT0FBT0QsVUFBVTtZQUNsQyxJQUFJQyxZQUFZRCxTQUFTLEdBQUc7Z0JBQ3hCLE9BQU8sRUFBRTtZQUNiO1lBQ0Esb0JBQW9CO1lBQ3BCLElBQUl4RixlQUFlLEVBQUU7WUFDckIsR0FBRztnQkFDQyxNQUFNMEYsTUFBTSxNQUFNaEMsT0FBTzdELHNCQUFzQixDQUFDYixTQUFTVSxJQUFJSTtnQkFDN0QsTUFBTTZGLFVBQVVELEdBQUcsQ0FBQyxFQUFFLENBQUN4RixFQUFFO2dCQUN6QixNQUFNLENBQUMwRixTQUFTQyxVQUFVLEdBQUc7b0JBQUNGLFFBQVFqRyxFQUFFO29CQUFFaUcsUUFBUTdGLElBQUk7aUJBQUc7Z0JBQ3pELE1BQU1nRyxnQkFBZ0I5RixhQUFhVyxNQUFNLEdBQUcsS0FBS2lGLFlBQVlsRyxNQUFNbUcsVUFBVUUsTUFBTSxDQUFDakc7Z0JBQ3BGLElBQUlnRyxlQUFlO29CQUNmSixJQUFJTSxLQUFLO2dCQUNiO2dCQUNBLElBQUlOLElBQUkvRSxNQUFNLEtBQUssR0FBRztvQkFDbEI7Z0JBQ0o7Z0JBQ0EsTUFBTXNGLFNBQVNQLEdBQUcsQ0FBQ0EsSUFBSS9FLE1BQU0sR0FBRyxFQUFFLENBQUNULEVBQUU7Z0JBQ3JDLE1BQU0sQ0FBQ2dHLFFBQVFDLFNBQVMsR0FBRztvQkFBQ0YsT0FBT3ZHLEVBQUU7b0JBQUV1RyxPQUFPbkcsSUFBSTtpQkFBRztnQkFDckQsSUFBSW9HLFdBQVd4RyxNQUFNeUcsU0FBU0osTUFBTSxDQUFDakcsT0FBTztvQkFDeEM7Z0JBQ0o7Z0JBQ0FFLGFBQWFZLElBQUksSUFBSThFLElBQUlVLEdBQUcsQ0FBQ2xHLENBQUFBLEtBQU1BLEdBQUdBLEVBQUU7Z0JBQ3hDUixLQUFLd0c7Z0JBQ0xwRyxPQUFPcUc7WUFDWCxRQUFTVixZQUFZekYsYUFBYVcsTUFBTSxHQUFHNkUsT0FBTztZQUNsRCxjQUFjO1lBQ2QsSUFBSUMsVUFBVTtnQkFDVnpGLGVBQWVBLGFBQWFxRyxLQUFLLENBQUMsR0FBR2I7WUFDekM7WUFDQSxzQkFBc0I7WUFDdEIsT0FBT3hGO1FBQ1g7SUFDSjtBQUNKO0FBQ0EsRUFBRTtBQUNGLFNBQVM7QUFDVCxFQUFFO0FBQ0YsTUFBTWpDLGlCQUFpQmhCLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztJQUNsQzFDLE1BQU05RyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7UUFDakI5SCxPQUFPMUIsTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUNyQkMsT0FBTzFKLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDckJDLFdBQVc1SixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO1FBQ3pCSSxVQUFVN0osTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN4QkcsVUFBVTlKLE1BQU11SixDQUFDLENBQUNJLE1BQU07SUFDNUI7SUFDQXJELE1BQU10RyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7UUFDakJLLFVBQVU3SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3hCRyxVQUFVOUosTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM1QjtJQUNBSSxlQUFlL0osTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM3QkssS0FBS2hLLE1BQU11SixDQUFDLENBQUNFLE1BQU07QUFDdkI7QUFDQSxNQUFNN0gsYUFBYTVCLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztJQUFDakssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ3pDM0gsT0FBTzdCLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUMzQjtJQUFJbEssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ2YzSCxPQUFPN0IsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQ3ZCdkksT0FBTzNCLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztZQUNsQlcsUUFBUW5LLE1BQU11SixDQUFDLENBQUNhLEtBQUssQ0FBQ3BLLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztnQkFDakNJLFdBQVc1SixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO2dCQUN6Qi9ILE9BQU8xQixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO2dCQUNyQkMsT0FBTzFKLE1BQU11SixDQUFDLENBQUNJLE1BQU07Z0JBQ3JCRyxVQUFVOUosTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtnQkFDeEJFLFVBQVU3SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO2dCQUN4QjFHLGNBQWNqRCxNQUFNdUosQ0FBQyxDQUFDYSxLQUFLLENBQUNwSyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7b0JBQ3ZDcEgsU0FBU3BDLE1BQU11SixDQUFDLENBQUNJLE1BQU07b0JBQ3ZCNUcsTUFBTS9DLE1BQU11SixDQUFDLENBQUNJLE1BQU07b0JBQ3BCaEgsSUFBSTNDLE1BQU11SixDQUFDLENBQUNJLE1BQU07Z0JBQ3RCO1lBQ0o7UUFDSjtJQUNKO0NBQUc7QUFDUCwwRkFBMEY7QUFDMUYsTUFBTVUsbUJBQW1CckssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3BDYyxVQUFVdEssTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtJQUN4QmMsWUFBWXZLLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDakssTUFBTXVKLENBQUMsQ0FBQ2lCLElBQUk7UUFBSXhLLE1BQU11SixDQUFDLENBQUNJLE1BQU07S0FBRztJQUM1RGMsTUFBTXpLLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUNqQmtCLE1BQU0xSyxNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO1FBQ3BCckcsT0FBT3BELE1BQU11SixDQUFDLENBQUNFLE1BQU07UUFDckJrQixhQUFhM0ssTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtJQUMvQjtBQUNKO0FBQ0EsTUFBTXBILGVBQWVyQyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7SUFDaENwSCxTQUFTcEMsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ3BCakwsT0FBT3lCLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUNqQmpLLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztnQkFBRS9HLE1BQU16QyxNQUFNdUosQ0FBQyxDQUFDVyxPQUFPLENBQUM7WUFBVTtZQUNqRGxLLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztnQkFBRS9HLE1BQU16QyxNQUFNdUosQ0FBQyxDQUFDVyxPQUFPLENBQUM7Z0JBQVdqRCxNQUFNakgsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO29CQUFDakssTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtvQkFBSTNKLE1BQU11SixDQUFDLENBQUNpQixJQUFJO2lCQUFHO2dCQUFHdEosTUFBTWxCLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztvQkFBQ2pLLE1BQU11SixDQUFDLENBQUNJLE1BQU07b0JBQUkzSixNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtpQkFBRztZQUFFO1lBQ25LeEssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO2dCQUFFL0csTUFBTXpDLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztnQkFBV2hELFdBQVdsSCxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1lBQUc7U0FDakY7UUFDRHhDLFNBQVNuSCxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7WUFDcEJwQyxPQUFPcEgsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN6QjtRQUNBN0MsTUFBTTlHLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUNoQmpLLE1BQU11SixDQUFDLENBQUNpQixJQUFJO1lBQ1p4SyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7Z0JBQ1g3RyxJQUFJM0MsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtnQkFDbEI1RyxNQUFNL0MsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtZQUN4QjtTQUNIO1FBQ0RpQixhQUFhNUssTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1lBQUNqSyxNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtZQUFJSDtTQUFpQjtJQUNqRTtJQUNBMUksT0FBTzNCLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUNsQkksV0FBVzVKLE1BQU11SixDQUFDLENBQUNFLE1BQU07UUFDekIvSCxPQUFPMUIsTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUNyQkMsT0FBTzFKLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDckJHLFVBQVU5SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3hCRSxVQUFVN0osTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM1QjtBQUNKO0FBQ0EsTUFBTXBILG1CQUFtQnZDLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztJQUNwQ3BILFNBQVNwQyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7UUFDcEJqTCxPQUFPeUIsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1lBQ2pCakssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO2dCQUFFL0csTUFBTXpDLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztZQUFVO1lBQ2pEbEssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO2dCQUFFL0csTUFBTXpDLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztnQkFBV1csVUFBVTdLLE1BQU11SixDQUFDLENBQUNJLE1BQU07Z0JBQUltQixVQUFVOUssTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtZQUFHO1lBQ3pHM0osTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO2dCQUFFL0csTUFBTXpDLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztnQkFBV2hELFdBQVdsSCxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1lBQUc7U0FDakY7UUFDRHhDLFNBQVNuSCxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7WUFDcEJwQyxPQUFPcEgsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN6QjtRQUNBN0MsTUFBTTlHLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUNoQmpLLE1BQU11SixDQUFDLENBQUNpQixJQUFJO1lBQ1p4SyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7Z0JBQ1g3RyxJQUFJM0MsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtnQkFDbEI1RyxNQUFNL0MsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtZQUN4QjtTQUNIO1FBQ0RpQixhQUFhNUssTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1lBQUNqSyxNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtZQUFJSDtTQUFpQjtJQUNqRTtBQUNKO0FBQ0EsTUFBTXhILGVBQWU3QyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7SUFDaEM1RyxTQUFTNUMsTUFBTXVKLENBQUMsQ0FBQ3dCLE9BQU87SUFDeEJwSixPQUFPM0IsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ2xCSSxXQUFXNUosTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUN6Qi9ILE9BQU8xQixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO1FBQ3JCQyxPQUFPMUosTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUNyQkcsVUFBVTlKLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDeEJFLFVBQVU3SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQzVCO0FBQ0o7QUFDQSxNQUFNeEUsaUJBQWlCbkYsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ2xDakUsVUFBVXZGLE1BQU11SixDQUFDLENBQUNFLE1BQU07SUFDeEJwRSxXQUFXckYsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNqSyxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQUkzSixNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtLQUFHO0lBQzNEN0ksT0FBTzNCLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUNsQkksV0FBVzVKLE1BQU11SixDQUFDLENBQUNFLE1BQU07UUFDekIvSCxPQUFPMUIsTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUNyQkMsT0FBTzFKLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDckJHLFVBQVU5SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3hCRSxVQUFVN0osTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM1QjtJQUNBbEUsWUFBWXpGLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUN2QkksV0FBVzVKLE1BQU11SixDQUFDLENBQUNFLE1BQU07UUFDekIvSCxPQUFPMUIsTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUNyQkMsT0FBTzFKLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDckJHLFVBQVU5SixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3hCRSxVQUFVN0osTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM1QjtBQUNKO0FBQ0EsTUFBTWpGLGNBQWMxRSxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7SUFDL0IvRSxRQUFRekUsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ25Cd0IsTUFBTWhMLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDcEIxSCxTQUFTakMsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN2QnNCLGVBQWVqTCxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7WUFDMUJwQyxPQUFPcEgsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN6QjtJQUNKO0FBQ0o7QUFDQSxNQUFNM0QsWUFBWWhHLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztJQUM3QnZELFFBQVFqRyxNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO0FBQzFCO0FBQ0EsTUFBTXlCLGNBQWNsTCxNQUFNdUosQ0FBQyxDQUFDYSxLQUFLLENBQUNwSyxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7SUFDN0NJLFdBQVc1SixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO0lBQ3pCL0gsT0FBTzFCLE1BQU11SixDQUFDLENBQUNFLE1BQU07SUFDckJDLE9BQU8xSixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQ3JCRyxVQUFVOUosTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUN4QkUsVUFBVTdKLE1BQU11SixDQUFDLENBQUNJLE1BQU07QUFDNUI7QUFDQSxNQUFNekcsb0JBQW9CbEQsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3JDN0YsUUFBUXVIO0lBQ1J6SCxLQUFLekQsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtBQUN2QjtBQUNBLE1BQU13Qiw2QkFBNkJuTCxNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7SUFDOUNrQixNQUFNMUssTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtJQUNwQnZJLE1BQU1sQixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0FBQ3hCO0FBQ0EsTUFBTXlCLHlCQUF5QnBMLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztJQUN6Q2pLLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUNYL0csTUFBTXpDLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztRQUN0QjFMLE9BQU93QixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3JCMEIsTUFBTXJMLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDcEIyQixLQUFLdEwsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUNuQjRCLFNBQVN2TCxNQUFNdUosQ0FBQyxDQUFDd0IsT0FBTztRQUN4QjVDLFFBQVFuSSxNQUFNdUosQ0FBQyxDQUFDd0IsT0FBTztRQUN2QlMsYUFBYXhMLE1BQU11SixDQUFDLENBQUN3QixPQUFPO1FBQzVCVSxXQUFXekwsTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUN6QmlDLFdBQVcxTCxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ3pCZ0MsUUFBUTNMLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDdEJpQyxRQUFRNUwsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUMxQjtJQUNBM0osTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ1gvRyxNQUFNekMsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQ3RCbUIsTUFBTXJMLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDcEIyQixLQUFLdEwsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1lBQUNrQjtZQUE0Qm5MLE1BQU11SixDQUFDLENBQUNpQixJQUFJO1NBQUc7UUFDL0RxQixXQUFXN0wsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUM3QjtJQUNBM0osTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ1gvRyxNQUFNekMsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQ3RCbUIsTUFBTXJMLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUFDa0I7WUFBNEJuTCxNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtTQUFHO0lBQ3BFO0NBQ0g7QUFDRCxNQUFNc0IsdUJBQXVCOUwsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3hDdUMsWUFBWS9MLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDakssTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtRQUFJekosTUFBTXVKLENBQUMsQ0FBQ2lCLElBQUk7S0FBRztJQUM1RHZELE1BQU1qSCxNQUFNdUosQ0FBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ2pLLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFBSTNKLE1BQU11SixDQUFDLENBQUNpQixJQUFJO0tBQUc7SUFDdER0SixNQUFNbEIsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNqSyxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQUkzSixNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtLQUFHO0lBQ3REd0IsU0FBU2hNLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDakssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1lBQUV5QyxNQUFNak0sTUFBTXVKLENBQUMsQ0FBQ3dCLE9BQU87WUFBSW1CLE1BQU1sTSxNQUFNdUosQ0FBQyxDQUFDd0IsT0FBTztRQUFHO1FBQUkvSyxNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtLQUFHO0FBQ2pIO0FBQ0EsTUFBTTJCLHFCQUFxQm5NLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztJQUN0QzdCLE1BQU0zSCxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQ3BCeUMsTUFBTWhCO0lBQ045RSxNQUFNdEcsTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUM2QjtRQUFzQjlMLE1BQU11SixDQUFDLENBQUNpQixJQUFJO0tBQUc7QUFDOUQ7QUFDQSxNQUFNNkIscUJBQXFCck0sTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO0lBQUNqSyxNQUFNdUosQ0FBQyxDQUFDVyxPQUFPLENBQUM7SUFBa0JsSyxNQUFNdUosQ0FBQyxDQUFDVyxPQUFPLENBQUM7SUFBV2xLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUFXbEssTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO0NBQWdCO0FBQ2xLLE1BQU1vQyxjQUFjdE0sTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO0lBQzlCakssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQUUvRyxNQUFNekMsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQVk1QixTQUFTdEksTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUFHO0lBQzdFM0osTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQUUvRyxNQUFNekMsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQVljLE1BQU1oTCxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQUc7Q0FDN0U7QUFDRCxNQUFNNEMsMkJBQTJCdk0sTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO0lBQzNDakssTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQUUvSyxNQUFNdUIsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQVFzQyxRQUFReE0sTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUFHO0lBQ3hFM0osTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQUUvSyxNQUFNdUIsTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1FBQVVzQyxRQUFReE0sTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUFHO0NBQzdFO0FBQ0QsTUFBTThDLDRCQUE0QnpNLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztJQUM1Q2pLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztJQUNoQmxLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztDQUNuQjtBQUNELE1BQU13QyxVQUFVMU0sTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQzNCL0csTUFBTWdLO0lBQ05FLFNBQVMzTSxNQUFNdUosQ0FBQyxDQUFDcUQsUUFBUSxDQUFDNU0sTUFBTXVKLENBQUMsQ0FBQ3NELE1BQU0sQ0FBQzdNLE1BQU11SixDQUFDLENBQUNJLE1BQU07QUFDM0Q7QUFDQSxNQUFNbUQsdUJBQXVCOU0sTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3hDdkgsU0FBU2pDLE1BQU11SixDQUFDLENBQUNJLE1BQU07SUFDdkJyQixTQUFTdEksTUFBTXVKLENBQUMsQ0FBQ3FELFFBQVEsQ0FBQzVNLE1BQU11SixDQUFDLENBQUNJLE1BQU07SUFDeENvRCxPQUFPL00sTUFBTXVKLENBQUMsQ0FBQ2EsS0FBSyxDQUFDbUM7SUFDckJTLElBQUloTixNQUFNdUosQ0FBQyxDQUFDcUQsUUFBUSxDQUFDRjtBQUN6QjtBQUNBLE1BQU1PLHlCQUF5QmpOLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztJQUMxQ3ZILFNBQVNqQyxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQ3ZCaEgsSUFBSTNDLE1BQU11SixDQUFDLENBQUNJLE1BQU07SUFDbEI1RyxNQUFNL0MsTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUNwQnVELGlCQUFpQmxOLE1BQU11SixDQUFDLENBQUNDLE1BQU0sQ0FBQztRQUM1QjdHLElBQUkzQyxNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO1FBQ2xCNUcsTUFBTS9DLE1BQU11SixDQUFDLENBQUNJLE1BQU07SUFDeEI7SUFDQXdELE1BQU1uTixNQUFNdUosQ0FBQyxDQUFDRSxNQUFNO0lBQ3BCMkQsa0JBQWtCcE4sTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtJQUNoQzRELFdBQVdoQjtJQUNYaUIsV0FBV2pCO0lBQ1hrQixNQUFNdk4sTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUNwQjZELFFBQVF4TixNQUFNdUosQ0FBQyxDQUFDQyxNQUFNLENBQUM7UUFDbkJpRSxTQUFTek4sTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN2QitELFNBQVMxTixNQUFNdUosQ0FBQyxDQUFDSSxNQUFNO0lBQzNCO0lBQ0FnRSxXQUFXM04sTUFBTXVKLENBQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNrQztRQUFvQm5NLE1BQU11SixDQUFDLENBQUNpQixJQUFJO0tBQUc7SUFDN0RvRCxhQUFhNU4sTUFBTXVKLENBQUMsQ0FBQ2EsS0FBSyxDQUFDK0I7SUFDM0IwQixRQUFRN04sTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO1FBQ25COUgsT0FBTzFCLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUFDakssTUFBTXVKLENBQUMsQ0FBQ0UsTUFBTTtZQUFJekosTUFBTXVKLENBQUMsQ0FBQ2lCLElBQUk7U0FBRztRQUN2RDdDLE1BQU0zSCxNQUFNdUosQ0FBQyxDQUFDVSxLQUFLLENBQUM7WUFBQ3FDO1lBQWF0TSxNQUFNdUosQ0FBQyxDQUFDaUIsSUFBSTtTQUFHO1FBQ2pEdkUsUUFBUWpHLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUFDakssTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1lBQVlsSyxNQUFNdUosQ0FBQyxDQUFDVyxPQUFPLENBQUM7WUFBV2xLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztTQUFXO1FBQ3pHbUIsTUFBTXJMLE1BQU11SixDQUFDLENBQUNVLEtBQUssQ0FBQztZQUFDakssTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtZQUFJM0osTUFBTXVKLENBQUMsQ0FBQ2lCLElBQUk7U0FBRztRQUN0RC9MLE1BQU11QixNQUFNdUosQ0FBQyxDQUFDVSxLQUFLLENBQUM7WUFBQ2pLLE1BQU11SixDQUFDLENBQUNXLE9BQU8sQ0FBQztZQUFRbEssTUFBTXVKLENBQUMsQ0FBQ1csT0FBTyxDQUFDO1NBQU07UUFDbkVzQyxRQUFReE0sTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtRQUN0Qm1FLGlCQUFpQjlOLE1BQU11SixDQUFDLENBQUNJLE1BQU07UUFDL0I0QixTQUFTdkwsTUFBTXVKLENBQUMsQ0FBQ3dCLE9BQU87UUFDeEJnRCxXQUFXL04sTUFBTXVKLENBQUMsQ0FBQ2EsS0FBSyxDQUFDcEssTUFBTXVKLENBQUMsQ0FBQ0ksTUFBTTtJQUMzQztJQUNBcUUsV0FBV2xCO0FBQ2Y7QUFDQSxNQUFNMUksMEJBQTBCcEUsTUFBTXVKLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQzNDN0YsUUFBUXVIO0lBQ1JqSSxjQUFjakQsTUFBTXVKLENBQUMsQ0FBQ2EsS0FBSyxDQUFDNkM7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vdG9uL2Rpc3QvY2xpZW50L1RvbkNsaWVudDQuanM/N2I2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbnZhciBfVG9uQ2xpZW50NF9lbmRwb2ludCwgX1RvbkNsaWVudDRfdGltZW91dCwgX1RvbkNsaWVudDRfYWRhcHRlciwgX1RvbkNsaWVudDRfYXhpb3M7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRvbkNsaWVudDQgPSB2b2lkIDA7XG5jb25zdCBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQHRvbi9jb3JlXCIpO1xuY29uc3QgdG9VcmxTYWZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9VcmxTYWZlXCIpO1xuY29uc3Qgem9kXzEgPSByZXF1aXJlKFwiem9kXCIpO1xuY2xhc3MgVG9uQ2xpZW50NCB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBfVG9uQ2xpZW50NF9lbmRwb2ludC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1RvbkNsaWVudDRfdGltZW91dC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1RvbkNsaWVudDRfYWRhcHRlci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1RvbkNsaWVudDRfYXhpb3Muc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1RvbkNsaWVudDRfYXhpb3MsIGF4aW9zXzEuZGVmYXVsdC5jcmVhdGUoKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBhcmdzLmVuZHBvaW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1RvbkNsaWVudDRfdGltZW91dCwgYXJncy50aW1lb3V0IHx8IDUwMDAsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVG9uQ2xpZW50NF9hZGFwdGVyLCBhcmdzLmh0dHBBZGFwdGVyLCBcImZcIik7XG4gICAgICAgIGlmIChhcmdzLnJlcXVlc3RJbnRlcmNlcHRvcikge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShhcmdzLnJlcXVlc3RJbnRlcmNlcHRvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IExhc3QgQmxvY2tcbiAgICAgKiBAcmV0dXJucyBsYXN0IGJsb2NrIGluZm9cbiAgICAgKi9cbiAgICBhc3luYyBnZXRMYXN0QmxvY2soKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2F4aW9zLCBcImZcIikuZ2V0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfZW5kcG9pbnQsIFwiZlwiKSArICcvYmxvY2svbGF0ZXN0JywgeyBhZGFwdGVyOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2FkYXB0ZXIsIFwiZlwiKSwgdGltZW91dDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF90aW1lb3V0LCBcImZcIikgfSk7XG4gICAgICAgIGxldCBsYXN0QmxvY2sgPSBsYXN0QmxvY2tDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIWxhc3RCbG9jay5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTWFpbGZvcm1lZCByZXNwb25zZTogJyArIGxhc3RCbG9jay5lcnJvci5mb3JtYXQoKS5fZXJyb3JzLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYXN0QmxvY2suZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGJsb2NrIGluZm9cbiAgICAgKiBAcGFyYW0gc2Vxbm8gYmxvY2sgc2VxdWVuY2UgbnVtYmVyXG4gICAgICogQHJldHVybnMgYmxvY2sgaW5mb1xuICAgICAqL1xuICAgIGFzeW5jIGdldEJsb2NrKHNlcW5vKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2F4aW9zLCBcImZcIikuZ2V0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfZW5kcG9pbnQsIFwiZlwiKSArICcvYmxvY2svJyArIHNlcW5vLCB7IGFkYXB0ZXI6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYWRhcHRlciwgXCJmXCIpLCB0aW1lb3V0OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X3RpbWVvdXQsIFwiZlwiKSB9KTtcbiAgICAgICAgbGV0IGJsb2NrID0gYmxvY2tDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIWJsb2NrLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNYWlsZm9ybWVkIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFibG9jay5kYXRhLmV4aXN0KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQmxvY2sgaXMgb3V0IG9mIHNjb3BlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsb2NrLmRhdGEuYmxvY2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBibG9jayBpbmZvIGJ5IHVuaXggdGltZXN0YW1wXG4gICAgICogQHBhcmFtIHRzIHVuaXggdGltZXN0YW1wXG4gICAgICogQHJldHVybnMgYmxvY2sgaW5mb1xuICAgICAqL1xuICAgIGFzeW5jIGdldEJsb2NrQnlVdGltZSh0cykge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmdldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2Jsb2NrL3V0aW1lLycgKyB0cywgeyBhZGFwdGVyOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2FkYXB0ZXIsIFwiZlwiKSwgdGltZW91dDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF90aW1lb3V0LCBcImZcIikgfSk7XG4gICAgICAgIGxldCBibG9jayA9IGJsb2NrQ29kZWMuc2FmZVBhcnNlKHJlcy5kYXRhKTtcbiAgICAgICAgaWYgKCFibG9jay5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTWFpbGZvcm1lZCByZXNwb25zZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYmxvY2suZGF0YS5leGlzdCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0Jsb2NrIGlzIG91dCBvZiBzY29wZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9jay5kYXRhLmJsb2NrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYmxvY2sgaW5mbyBieSB1bml4IHRpbWVzdGFtcFxuICAgICAqIEBwYXJhbSBzZXFubyBibG9jayBzZXF1ZW5jZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBhY2NvdW50IGFkZHJlc3NcbiAgICAgKiBAcmV0dXJucyBhY2NvdW50IGluZm9cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY2NvdW50KHNlcW5vLCBhZGRyZXNzKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2F4aW9zLCBcImZcIikuZ2V0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfZW5kcG9pbnQsIFwiZlwiKSArICcvYmxvY2svJyArIHNlcW5vICsgJy8nICsgYWRkcmVzcy50b1N0cmluZyh7IHVybFNhZmU6IHRydWUgfSksIHsgYWRhcHRlcjogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9hZGFwdGVyLCBcImZcIiksIHRpbWVvdXQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfdGltZW91dCwgXCJmXCIpIH0pO1xuICAgICAgICBsZXQgYWNjb3VudCA9IGFjY291bnRDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIWFjY291bnQuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01haWxmb3JtZWQgcmVzcG9uc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjb3VudC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWNjb3VudCBsaXRlIGluZm8gKHdpdGhvdXQgY29kZSBhbmQgZGF0YSlcbiAgICAgKiBAcGFyYW0gc2Vxbm8gYmxvY2sgc2VxdWVuY2UgbnVtYmVyXG4gICAgICogQHBhcmFtIGFkZHJlc3MgYWNjb3VudCBhZGRyZXNzXG4gICAgICogQHJldHVybnMgYWNjb3VudCBsaXRlIGluZm9cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY2NvdW50TGl0ZShzZXFubywgYWRkcmVzcykge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmdldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2Jsb2NrLycgKyBzZXFubyArICcvJyArIGFkZHJlc3MudG9TdHJpbmcoeyB1cmxTYWZlOiB0cnVlIH0pICsgJy9saXRlJywgeyBhZGFwdGVyOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2FkYXB0ZXIsIFwiZlwiKSwgdGltZW91dDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF90aW1lb3V0LCBcImZcIikgfSk7XG4gICAgICAgIGxldCBhY2NvdW50ID0gYWNjb3VudExpdGVDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIWFjY291bnQuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01haWxmb3JtZWQgcmVzcG9uc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjb3VudC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBjb250cmFjdCBpcyBkZXBsb3llZFxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGFkZHJlcyB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgY29udHJhY3QgaXMgaW4gYWN0aXZlIHN0YXRlXG4gICAgICovXG4gICAgYXN5bmMgaXNDb250cmFjdERlcGxveWVkKHNlcW5vLCBhZGRyZXNzKSB7XG4gICAgICAgIGxldCBhY2NvdW50ID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50TGl0ZShzZXFubywgYWRkcmVzcyk7XG4gICAgICAgIHJldHVybiBhY2NvdW50LmFjY291bnQuc3RhdGUudHlwZSA9PT0gJ2FjdGl2ZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFjY291bnQgd2FzIHVwZGF0ZWQgc2luY2VcbiAgICAgKiBAcGFyYW0gc2Vxbm8gYmxvY2sgc2VxdWVuY2UgbnVtYmVyXG4gICAgICogQHBhcmFtIGFkZHJlc3MgYWNjb3VudCBhZGRyZXNzXG4gICAgICogQHBhcmFtIGx0IGFjY291bnQgbGFzdCB0cmFuc2FjdGlvbiBsdFxuICAgICAqIEByZXR1cm5zIGFjY291bnQgY2hhbmdlIGluZm9cbiAgICAgKi9cbiAgICBhc3luYyBpc0FjY291bnRDaGFuZ2VkKHNlcW5vLCBhZGRyZXNzLCBsdCkge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmdldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2Jsb2NrLycgKyBzZXFubyArICcvJyArIGFkZHJlc3MudG9TdHJpbmcoeyB1cmxTYWZlOiB0cnVlIH0pICsgJy9jaGFuZ2VkLycgKyBsdC50b1N0cmluZygxMCksIHsgYWRhcHRlcjogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9hZGFwdGVyLCBcImZcIiksIHRpbWVvdXQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfdGltZW91dCwgXCJmXCIpIH0pO1xuICAgICAgICBsZXQgY2hhbmdlZCA9IGNoYW5nZWRDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIWNoYW5nZWQuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01haWxmb3JtZWQgcmVzcG9uc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkIHVucGFyc2VkIGFjY291bnQgdHJhbnNhY3Rpb25zXG4gICAgICogQHBhcmFtIGFkZHJlc3MgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBsdCBsYXN0IHRyYW5zYWN0aW9uIGx0XG4gICAgICogQHBhcmFtIGhhc2ggbGFzdCB0cmFuc2FjdGlvbiBoYXNoXG4gICAgICogQHJldHVybnMgdW5wYXJzZWQgdHJhbnNhY3Rpb25zXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWNjb3VudFRyYW5zYWN0aW9ucyhhZGRyZXNzLCBsdCwgaGFzaCkge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmdldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2FjY291bnQvJyArIGFkZHJlc3MudG9TdHJpbmcoeyB1cmxTYWZlOiB0cnVlIH0pICsgJy90eC8nICsgbHQudG9TdHJpbmcoMTApICsgJy8nICsgKDAsIHRvVXJsU2FmZV8xLnRvVXJsU2FmZSkoaGFzaC50b1N0cmluZygnYmFzZTY0JykpLCB7IGFkYXB0ZXI6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYWRhcHRlciwgXCJmXCIpLCB0aW1lb3V0OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X3RpbWVvdXQsIFwiZlwiKSB9KTtcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9uc0NvZGVjLnNhZmVQYXJzZShyZXMuZGF0YSk7XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNYWlsZm9ybWVkIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSB0cmFuc2FjdGlvbnMuZGF0YTtcbiAgICAgICAgbGV0IHR4ID0gW107XG4gICAgICAgIGxldCBjZWxscyA9IGNvcmVfMS5DZWxsLmZyb21Cb2MoQnVmZmVyLmZyb20oZGF0YS5ib2MsICdiYXNlNjQnKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5ibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHR4LnB1c2goe1xuICAgICAgICAgICAgICAgIGJsb2NrOiBkYXRhLmJsb2Nrc1tpXSxcbiAgICAgICAgICAgICAgICB0eDogKDAsIGNvcmVfMS5sb2FkVHJhbnNhY3Rpb24pKGNlbGxzW2ldLmJlZ2luUGFyc2UoKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9hZCBwYXJzZWQgYWNjb3VudCB0cmFuc2FjdGlvbnNcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBhZGRyZXNzXG4gICAgICogQHBhcmFtIGx0IGxhc3QgdHJhbnNhY3Rpb24gbHRcbiAgICAgKiBAcGFyYW0gaGFzaCBsYXN0IHRyYW5zYWN0aW9uIGhhc2hcbiAgICAgKiBAcGFyYW0gY291bnQgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyB0byBsb2FkXG4gICAgICogQHJldHVybnMgcGFyc2VkIHRyYW5zYWN0aW9uc1xuICAgICAqL1xuICAgIGFzeW5jIGdldEFjY291bnRUcmFuc2FjdGlvbnNQYXJzZWQoYWRkcmVzcywgbHQsIGhhc2gsIGNvdW50ID0gMjApIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYXhpb3MsIFwiZlwiKS5nZXQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9lbmRwb2ludCwgXCJmXCIpICsgJy9hY2NvdW50LycgKyBhZGRyZXNzLnRvU3RyaW5nKHsgdXJsU2FmZTogdHJ1ZSB9KSArICcvdHgvcGFyc2VkLycgKyBsdC50b1N0cmluZygxMCkgKyAnLycgKyAoMCwgdG9VcmxTYWZlXzEudG9VcmxTYWZlKShoYXNoLnRvU3RyaW5nKCdiYXNlNjQnKSksIHtcbiAgICAgICAgICAgIGFkYXB0ZXI6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYWRhcHRlciwgXCJmXCIpLFxuICAgICAgICAgICAgdGltZW91dDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF90aW1lb3V0LCBcImZcIiksXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBjb3VudFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHBhcnNlZFRyYW5zYWN0aW9uc1JlcyA9IHBhcnNlZFRyYW5zYWN0aW9uc0NvZGVjLnNhZmVQYXJzZShyZXMuZGF0YSk7XG4gICAgICAgIGlmICghcGFyc2VkVHJhbnNhY3Rpb25zUmVzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNYWlsZm9ybWVkIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZFRyYW5zYWN0aW9uc1Jlcy5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgbmV0d29yayBjb25maWdcbiAgICAgKiBAcGFyYW0gc2Vxbm8gYmxvY2sgc2VxdWVuY2UgbnVtYmVyXG4gICAgICogQHBhcmFtIGlkcyBvcHRpb25hbCBjb25maWcgaWRzXG4gICAgICogQHJldHVybnMgbmV0d29yayBjb25maWdcbiAgICAgKi9cbiAgICBhc3luYyBnZXRDb25maWcoc2Vxbm8sIGlkcykge1xuICAgICAgICBsZXQgdGFpbCA9ICcnO1xuICAgICAgICBpZiAoaWRzICYmIGlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0YWlsID0gJy8nICsgWy4uLmlkc10uc29ydCgpLmpvaW4oJywnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9heGlvcywgXCJmXCIpLmdldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2Jsb2NrLycgKyBzZXFubyArICcvY29uZmlnJyArIHRhaWwsIHsgYWRhcHRlcjogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF9hZGFwdGVyLCBcImZcIiksIHRpbWVvdXQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfdGltZW91dCwgXCJmXCIpIH0pO1xuICAgICAgICBsZXQgY29uZmlnID0gY29uZmlnQ29kZWMuc2FmZVBhcnNlKHJlcy5kYXRhKTtcbiAgICAgICAgaWYgKCFjb25maWcuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01haWxmb3JtZWQgcmVzcG9uc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgcnVuIG1ldGhvZFxuICAgICAqIEBwYXJhbSBzZXFubyBibG9jayBzZXF1ZW5jZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBhY2NvdW50IGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gbmFtZSBtZXRob2QgbmFtZVxuICAgICAqIEBwYXJhbSBhcmdzIG1ldGhvZCBhcmd1bWVudHNcbiAgICAgKiBAcmV0dXJucyBtZXRob2QgcmVzdWx0XG4gICAgICovXG4gICAgYXN5bmMgcnVuTWV0aG9kKHNlcW5vLCBhZGRyZXNzLCBuYW1lLCBhcmdzKSB7XG4gICAgICAgIGxldCB0YWlsID0gYXJncyAmJiBhcmdzLmxlbmd0aCA+IDAgPyAnLycgKyAoMCwgdG9VcmxTYWZlXzEudG9VcmxTYWZlKSgoMCwgY29yZV8xLnNlcmlhbGl6ZVR1cGxlKShhcmdzKS50b0JvYyh7IGlkeDogZmFsc2UsIGNyYzMyOiBmYWxzZSB9KS50b1N0cmluZygnYmFzZTY0JykpIDogJyc7XG4gICAgICAgIGxldCB1cmwgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2VuZHBvaW50LCBcImZcIikgKyAnL2Jsb2NrLycgKyBzZXFubyArICcvJyArIGFkZHJlc3MudG9TdHJpbmcoeyB1cmxTYWZlOiB0cnVlIH0pICsgJy9ydW4vJyArIGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArIHRhaWw7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2F4aW9zLCBcImZcIikuZ2V0KHVybCwgeyBhZGFwdGVyOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X2FkYXB0ZXIsIFwiZlwiKSwgdGltZW91dDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG9uQ2xpZW50NF90aW1lb3V0LCBcImZcIikgfSk7XG4gICAgICAgIGxldCBydW5NZXRob2QgPSBydW5NZXRob2RDb2RlYy5zYWZlUGFyc2UocmVzLmRhdGEpO1xuICAgICAgICBpZiAoIXJ1bk1ldGhvZC5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTWFpbGZvcm1lZCByZXNwb25zZScpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHRUdXBsZSA9IHJ1bk1ldGhvZC5kYXRhLnJlc3VsdFJhdyA/ICgwLCBjb3JlXzEucGFyc2VUdXBsZSkoY29yZV8xLkNlbGwuZnJvbUJvYyhCdWZmZXIuZnJvbShydW5NZXRob2QuZGF0YS5yZXN1bHRSYXcsICdiYXNlNjQnKSlbMF0pIDogW107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleGl0Q29kZTogcnVuTWV0aG9kLmRhdGEuZXhpdENvZGUsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFR1cGxlLFxuICAgICAgICAgICAgcmVzdWx0UmF3OiBydW5NZXRob2QuZGF0YS5yZXN1bHRSYXcsXG4gICAgICAgICAgICBibG9jazogcnVuTWV0aG9kLmRhdGEuYmxvY2ssXG4gICAgICAgICAgICBzaGFyZEJsb2NrOiBydW5NZXRob2QuZGF0YS5zaGFyZEJsb2NrLFxuICAgICAgICAgICAgcmVhZGVyOiBuZXcgY29yZV8xLlR1cGxlUmVhZGVyKHJlc3VsdFR1cGxlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBleHRlcm5hbCBtZXNzYWdlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgbWVzc2FnZSBib2NcbiAgICAgKiBAcmV0dXJucyBtZXNzYWdlIHN0YXR1c1xuICAgICAqL1xuICAgIGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYXhpb3MsIFwiZlwiKS5wb3N0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfZW5kcG9pbnQsIFwiZlwiKSArICcvc2VuZCcsIHsgYm9jOiBtZXNzYWdlLnRvU3RyaW5nKCdiYXNlNjQnKSB9LCB7IGFkYXB0ZXI6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RvbkNsaWVudDRfYWRhcHRlciwgXCJmXCIpLCB0aW1lb3V0OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub25DbGllbnQ0X3RpbWVvdXQsIFwiZlwiKSB9KTtcbiAgICAgICAgbGV0IHNlbmQgPSBzZW5kQ29kZWMuc2FmZVBhcnNlKHJlcy5kYXRhKTtcbiAgICAgICAgaWYgKCFzZW5kLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNYWlsZm9ybWVkIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiByZXMuZGF0YS5zdGF0dXMgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbiBzbWFydCBjb250cmFjdFxuICAgICAqIEBwYXJhbSBjb250cmFjdCBjb250cmFjdFxuICAgICAqIEByZXR1cm5zIG9wZW5lZCBjb250cmFjdFxuICAgICAqL1xuICAgIG9wZW4oY29udHJhY3QpIHtcbiAgICAgICAgcmV0dXJuICgwLCBjb3JlXzEub3BlbkNvbnRyYWN0KShjb250cmFjdCwgKGFyZ3MpID0+IGNyZWF0ZVByb3ZpZGVyKHRoaXMsIG51bGwsIGFyZ3MuYWRkcmVzcywgYXJncy5pbml0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW4gc21hcnQgY29udHJhY3RcbiAgICAgKiBAcGFyYW0gYmxvY2sgYmxvY2sgbnVtYmVyXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGNvbnRyYWN0XG4gICAgICogQHJldHVybnMgb3BlbmVkIGNvbnRyYWN0XG4gICAgICovXG4gICAgb3BlbkF0KGJsb2NrLCBjb250cmFjdCkge1xuICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5vcGVuQ29udHJhY3QpKGNvbnRyYWN0LCAoYXJncykgPT4gY3JlYXRlUHJvdmlkZXIodGhpcywgYmxvY2ssIGFyZ3MuYWRkcmVzcywgYXJncy5pbml0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwcm92aWRlclxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gaW5pdCBvcHRpb25hbCBpbml0IGRhdGFcbiAgICAgKiBAcmV0dXJucyBwcm92aWRlclxuICAgICAqL1xuICAgIHByb3ZpZGVyKGFkZHJlc3MsIGluaXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3ZpZGVyKHRoaXMsIG51bGwsIGFkZHJlc3MsIGluaXQgPz8gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwcm92aWRlciBhdCBzcGVjaWZpZWQgYmxvY2sgbnVtYmVyXG4gICAgICogQHBhcmFtIGJsb2NrIGJsb2NrIG51bWJlclxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gaW5pdCBvcHRpb25hbCBpbml0IGRhdGFcbiAgICAgKiBAcmV0dXJucyBwcm92aWRlclxuICAgICAqL1xuICAgIHByb3ZpZGVyQXQoYmxvY2ssIGFkZHJlc3MsIGluaXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3ZpZGVyKHRoaXMsIGJsb2NrLCBhZGRyZXNzLCBpbml0ID8/IG51bGwpO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uQ2xpZW50NCA9IFRvbkNsaWVudDQ7XG5fVG9uQ2xpZW50NF9lbmRwb2ludCA9IG5ldyBXZWFrTWFwKCksIF9Ub25DbGllbnQ0X3RpbWVvdXQgPSBuZXcgV2Vha01hcCgpLCBfVG9uQ2xpZW50NF9hZGFwdGVyID0gbmV3IFdlYWtNYXAoKSwgX1RvbkNsaWVudDRfYXhpb3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoY2xpZW50LCBibG9jaywgYWRkcmVzcywgaW5pdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIGdldFN0YXRlKCkge1xuICAgICAgICAgICAgLy8gUmVzb2x2ZSBibG9ja1xuICAgICAgICAgICAgbGV0IHNxID0gYmxvY2s7XG4gICAgICAgICAgICBpZiAoc3EgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgY2xpZW50LmdldExhc3RCbG9jaygpO1xuICAgICAgICAgICAgICAgIHNxID0gcmVzLmxhc3Quc2Vxbm87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMb2FkIHN0YXRlXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSBhd2FpdCBjbGllbnQuZ2V0QWNjb3VudChzcSwgYWRkcmVzcyk7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHN0YXRlXG4gICAgICAgICAgICBsZXQgbGFzdCA9IHN0YXRlLmFjY291bnQubGFzdCA/IHsgbHQ6IEJpZ0ludChzdGF0ZS5hY2NvdW50Lmxhc3QubHQpLCBoYXNoOiBCdWZmZXIuZnJvbShzdGF0ZS5hY2NvdW50Lmxhc3QuaGFzaCwgJ2Jhc2U2NCcpIH0gOiBudWxsO1xuICAgICAgICAgICAgbGV0IHN0b3JhZ2U7XG4gICAgICAgICAgICBpZiAoc3RhdGUuYWNjb3VudC5zdGF0ZS50eXBlID09PSAnYWN0aXZlJykge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBzdGF0ZS5hY2NvdW50LnN0YXRlLmNvZGUgPyBCdWZmZXIuZnJvbShzdGF0ZS5hY2NvdW50LnN0YXRlLmNvZGUsICdiYXNlNjQnKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHN0YXRlLmFjY291bnQuc3RhdGUuZGF0YSA/IEJ1ZmZlci5mcm9tKHN0YXRlLmFjY291bnQuc3RhdGUuZGF0YSwgJ2Jhc2U2NCcpIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuYWNjb3VudC5zdGF0ZS50eXBlID09PSAndW5pbml0Jykge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1bmluaXQnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5hY2NvdW50LnN0YXRlLnR5cGUgPT09ICdmcm96ZW4nKSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Zyb3plbicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlSGFzaDogQnVmZmVyLmZyb20oc3RhdGUuYWNjb3VudC5zdGF0ZS5zdGF0ZUhhc2gsICdiYXNlNjQnKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJhbGFuY2U6IEJpZ0ludChzdGF0ZS5hY2NvdW50LmJhbGFuY2UuY29pbnMpLFxuICAgICAgICAgICAgICAgIGxhc3Q6IGxhc3QsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHN0b3JhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGdldChuYW1lLCBhcmdzKSB7XG4gICAgICAgICAgICBsZXQgc3EgPSBibG9jaztcbiAgICAgICAgICAgIGlmIChzcSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0TGFzdEJsb2NrKCk7XG4gICAgICAgICAgICAgICAgc3EgPSByZXMubGFzdC5zZXFubztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtZXRob2QgPSBhd2FpdCBjbGllbnQucnVuTWV0aG9kKHNxLCBhZGRyZXNzLCBuYW1lLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChtZXRob2QuZXhpdENvZGUgIT09IDAgJiYgbWV0aG9kLmV4aXRDb2RlICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0V4aXQgY29kZTogJyArIG1ldGhvZC5leGl0Q29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YWNrOiBuZXcgY29yZV8xLlR1cGxlUmVhZGVyKG1ldGhvZC5yZXN1bHQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZXh0ZXJuYWwobWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gUmVzb2x2ZSBsYXN0XG4gICAgICAgICAgICBsZXQgbGFzdCA9IGF3YWl0IGNsaWVudC5nZXRMYXN0QmxvY2soKTtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgaW5pdFxuICAgICAgICAgICAgbGV0IG5lZWRlZEluaXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGluaXQgJiYgKGF3YWl0IGNsaWVudC5nZXRBY2NvdW50TGl0ZShsYXN0Lmxhc3Quc2Vxbm8sIGFkZHJlc3MpKS5hY2NvdW50LnN0YXRlLnR5cGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICAgICAgbmVlZGVkSW5pdCA9IGluaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZW5kIHdpdGggc3RhdGUgaW5pdFxuICAgICAgICAgICAgY29uc3QgZXh0ID0gKDAsIGNvcmVfMS5leHRlcm5hbCkoe1xuICAgICAgICAgICAgICAgIHRvOiBhZGRyZXNzLFxuICAgICAgICAgICAgICAgIGluaXQ6IG5lZWRlZEluaXQsXG4gICAgICAgICAgICAgICAgYm9keTogbWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgcGtnID0gKDAsIGNvcmVfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgICAgICAgICAuc3RvcmUoKDAsIGNvcmVfMS5zdG9yZU1lc3NhZ2UpKGV4dCkpXG4gICAgICAgICAgICAgICAgLmVuZENlbGwoKVxuICAgICAgICAgICAgICAgIC50b0JvYygpO1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50LnNlbmRNZXNzYWdlKHBrZyk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGludGVybmFsKHZpYSwgbWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gUmVzb2x2ZSBsYXN0XG4gICAgICAgICAgICBsZXQgbGFzdCA9IGF3YWl0IGNsaWVudC5nZXRMYXN0QmxvY2soKTtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgaW5pdFxuICAgICAgICAgICAgbGV0IG5lZWRlZEluaXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGluaXQgJiYgKGF3YWl0IGNsaWVudC5nZXRBY2NvdW50TGl0ZShsYXN0Lmxhc3Quc2Vxbm8sIGFkZHJlc3MpKS5hY2NvdW50LnN0YXRlLnR5cGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICAgICAgbmVlZGVkSW5pdCA9IGluaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGJvdW5jZVxuICAgICAgICAgICAgbGV0IGJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5ib3VuY2UgIT09IG51bGwgJiYgbWVzc2FnZS5ib3VuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJvdW5jZSA9IG1lc3NhZ2UuYm91bmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzb2x2ZSB2YWx1ZVxuICAgICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gKDAsIGNvcmVfMS50b05hbm8pKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtZXNzYWdlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzb2x2ZSBib2R5XG4gICAgICAgICAgICBsZXQgYm9keSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gKDAsIGNvcmVfMS5jb21tZW50KShtZXNzYWdlLmJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZS5ib2R5KSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IG1lc3NhZ2UuYm9keTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlbmQgaW50ZXJuYWwgbWVzc2FnZVxuICAgICAgICAgICAgYXdhaXQgdmlhLnNlbmQoe1xuICAgICAgICAgICAgICAgIHRvOiBhZGRyZXNzLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGJvdW5jZSxcbiAgICAgICAgICAgICAgICBzZW5kTW9kZTogbWVzc2FnZS5zZW5kTW9kZSxcbiAgICAgICAgICAgICAgICBpbml0OiBuZWVkZWRJbml0LFxuICAgICAgICAgICAgICAgIGJvZHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvcGVuKGNvbnRyYWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5vcGVuQ29udHJhY3QpKGNvbnRyYWN0LCAoYXJncykgPT4gY3JlYXRlUHJvdmlkZXIoY2xpZW50LCBibG9jaywgYXJncy5hZGRyZXNzLCBhcmdzLmluaXQgPz8gbnVsbCkpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBnZXRUcmFuc2FjdGlvbnMoYWRkcmVzcywgbHQsIGhhc2gsIGxpbWl0KSB7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGxhc3RcbiAgICAgICAgICAgIGNvbnN0IHVzZUxpbWl0ID0gdHlwZW9mIGxpbWl0ID09PSAnbnVtYmVyJztcbiAgICAgICAgICAgIGlmICh1c2VMaW1pdCAmJiBsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTG9hZCB0cmFuc2FjdGlvbnNcbiAgICAgICAgICAgIGxldCB0cmFuc2FjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eHMgPSBhd2FpdCBjbGllbnQuZ2V0QWNjb3VudFRyYW5zYWN0aW9ucyhhZGRyZXNzLCBsdCwgaGFzaCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RUeCA9IHR4c1swXS50eDtcbiAgICAgICAgICAgICAgICBjb25zdCBbZmlyc3RMdCwgZmlyc3RIYXNoXSA9IFtmaXJzdFR4Lmx0LCBmaXJzdFR4Lmhhc2goKV07XG4gICAgICAgICAgICAgICAgY29uc3QgbmVlZFNraXBGaXJzdCA9IHRyYW5zYWN0aW9ucy5sZW5ndGggPiAwICYmIGZpcnN0THQgPT09IGx0ICYmIGZpcnN0SGFzaC5lcXVhbHMoaGFzaCk7XG4gICAgICAgICAgICAgICAgaWYgKG5lZWRTa2lwRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdHhzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0VHggPSB0eHNbdHhzLmxlbmd0aCAtIDFdLnR4O1xuICAgICAgICAgICAgICAgIGNvbnN0IFtsYXN0THQsIGxhc3RIYXNoXSA9IFtsYXN0VHgubHQsIGxhc3RUeC5oYXNoKCldO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0THQgPT09IGx0ICYmIGxhc3RIYXNoLmVxdWFscyhoYXNoKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zLnB1c2goLi4udHhzLm1hcCh0eCA9PiB0eC50eCkpO1xuICAgICAgICAgICAgICAgIGx0ID0gbGFzdEx0O1xuICAgICAgICAgICAgICAgIGhhc2ggPSBsYXN0SGFzaDtcbiAgICAgICAgICAgIH0gd2hpbGUgKHVzZUxpbWl0ICYmIHRyYW5zYWN0aW9ucy5sZW5ndGggPCBsaW1pdCk7XG4gICAgICAgICAgICAvLyBBcHBseSBsaW1pdFxuICAgICAgICAgICAgaWYgKHVzZUxpbWl0KSB7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zID0gdHJhbnNhY3Rpb25zLnNsaWNlKDAsIGxpbWl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJldHVybiB0cmFuc2FjdGlvbnNcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnM7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy9cbi8vIENvZGVjc1xuLy9cbmNvbnN0IGxhc3RCbG9ja0NvZGVjID0gem9kXzEuei5vYmplY3Qoe1xuICAgIGxhc3Q6IHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgc2Vxbm86IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIHNoYXJkOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICB3b3JrY2hhaW46IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIGZpbGVIYXNoOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICByb290SGFzaDogem9kXzEuei5zdHJpbmcoKVxuICAgIH0pLFxuICAgIGluaXQ6IHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgZmlsZUhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgIHJvb3RIYXNoOiB6b2RfMS56LnN0cmluZygpXG4gICAgfSksXG4gICAgc3RhdGVSb290SGFzaDogem9kXzEuei5zdHJpbmcoKSxcbiAgICBub3c6IHpvZF8xLnoubnVtYmVyKClcbn0pO1xuY29uc3QgYmxvY2tDb2RlYyA9IHpvZF8xLnoudW5pb24oW3pvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgZXhpc3Q6IHpvZF8xLnoubGl0ZXJhbChmYWxzZSlcbiAgICB9KSwgem9kXzEuei5vYmplY3Qoe1xuICAgICAgICBleGlzdDogem9kXzEuei5saXRlcmFsKHRydWUpLFxuICAgICAgICBibG9jazogem9kXzEuei5vYmplY3Qoe1xuICAgICAgICAgICAgc2hhcmRzOiB6b2RfMS56LmFycmF5KHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB3b3JrY2hhaW46IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgc2Vxbm86IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgc2hhcmQ6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgcm9vdEhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZmlsZUhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiB6b2RfMS56LmFycmF5KHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbHQ6IHpvZF8xLnouc3RyaW5nKClcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9KVxuICAgIH0pXSk7XG4vLyB7XCJsYXN0UGFpZFwiOjE2NTMwOTkyNDMsXCJkdWVQYXltZW50XCI6bnVsbCxcInVzZWRcIjp7XCJiaXRzXCI6MTE5LFwiY2VsbHNcIjoxLFwicHVibGljQ2VsbHNcIjowfX1cbmNvbnN0IHN0b3JhZ2VTdGF0Q29kZWMgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgbGFzdFBhaWQ6IHpvZF8xLnoubnVtYmVyKCksXG4gICAgZHVlUGF5bWVudDogem9kXzEuei51bmlvbihbem9kXzEuei5udWxsKCksIHpvZF8xLnouc3RyaW5nKCldKSxcbiAgICB1c2VkOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIGJpdHM6IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIGNlbGxzOiB6b2RfMS56Lm51bWJlcigpLFxuICAgICAgICBwdWJsaWNDZWxsczogem9kXzEuei5udW1iZXIoKVxuICAgIH0pXG59KTtcbmNvbnN0IGFjY291bnRDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBhY2NvdW50OiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIHN0YXRlOiB6b2RfMS56LnVuaW9uKFtcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHsgdHlwZTogem9kXzEuei5saXRlcmFsKCd1bmluaXQnKSB9KSxcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHsgdHlwZTogem9kXzEuei5saXRlcmFsKCdhY3RpdmUnKSwgY29kZTogem9kXzEuei51bmlvbihbem9kXzEuei5zdHJpbmcoKSwgem9kXzEuei5udWxsKCldKSwgZGF0YTogem9kXzEuei51bmlvbihbem9kXzEuei5zdHJpbmcoKSwgem9kXzEuei5udWxsKCldKSB9KSxcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHsgdHlwZTogem9kXzEuei5saXRlcmFsKCdmcm96ZW4nKSwgc3RhdGVIYXNoOiB6b2RfMS56LnN0cmluZygpIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBiYWxhbmNlOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgICAgICBjb2luczogem9kXzEuei5zdHJpbmcoKVxuICAgICAgICB9KSxcbiAgICAgICAgbGFzdDogem9kXzEuei51bmlvbihbXG4gICAgICAgICAgICB6b2RfMS56Lm51bGwoKSxcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgICAgICAgICBsdDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBoYXNoOiB6b2RfMS56LnN0cmluZygpXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgc3RvcmFnZVN0YXQ6IHpvZF8xLnoudW5pb24oW3pvZF8xLnoubnVsbCgpLCBzdG9yYWdlU3RhdENvZGVjXSlcbiAgICB9KSxcbiAgICBibG9jazogem9kXzEuei5vYmplY3Qoe1xuICAgICAgICB3b3JrY2hhaW46IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIHNlcW5vOiB6b2RfMS56Lm51bWJlcigpLFxuICAgICAgICBzaGFyZDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgcm9vdEhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgIGZpbGVIYXNoOiB6b2RfMS56LnN0cmluZygpXG4gICAgfSlcbn0pO1xuY29uc3QgYWNjb3VudExpdGVDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBhY2NvdW50OiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIHN0YXRlOiB6b2RfMS56LnVuaW9uKFtcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHsgdHlwZTogem9kXzEuei5saXRlcmFsKCd1bmluaXQnKSB9KSxcbiAgICAgICAgICAgIHpvZF8xLnoub2JqZWN0KHsgdHlwZTogem9kXzEuei5saXRlcmFsKCdhY3RpdmUnKSwgY29kZUhhc2g6IHpvZF8xLnouc3RyaW5nKCksIGRhdGFIYXNoOiB6b2RfMS56LnN0cmluZygpIH0pLFxuICAgICAgICAgICAgem9kXzEuei5vYmplY3QoeyB0eXBlOiB6b2RfMS56LmxpdGVyYWwoJ2Zyb3plbicpLCBzdGF0ZUhhc2g6IHpvZF8xLnouc3RyaW5nKCkgfSlcbiAgICAgICAgXSksXG4gICAgICAgIGJhbGFuY2U6IHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgICAgIGNvaW5zOiB6b2RfMS56LnN0cmluZygpXG4gICAgICAgIH0pLFxuICAgICAgICBsYXN0OiB6b2RfMS56LnVuaW9uKFtcbiAgICAgICAgICAgIHpvZF8xLnoubnVsbCgpLFxuICAgICAgICAgICAgem9kXzEuei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGx0OiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIGhhc2g6IHpvZF8xLnouc3RyaW5nKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBzdG9yYWdlU3RhdDogem9kXzEuei51bmlvbihbem9kXzEuei5udWxsKCksIHN0b3JhZ2VTdGF0Q29kZWNdKVxuICAgIH0pXG59KTtcbmNvbnN0IGNoYW5nZWRDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBjaGFuZ2VkOiB6b2RfMS56LmJvb2xlYW4oKSxcbiAgICBibG9jazogem9kXzEuei5vYmplY3Qoe1xuICAgICAgICB3b3JrY2hhaW46IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIHNlcW5vOiB6b2RfMS56Lm51bWJlcigpLFxuICAgICAgICBzaGFyZDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgcm9vdEhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgIGZpbGVIYXNoOiB6b2RfMS56LnN0cmluZygpXG4gICAgfSlcbn0pO1xuY29uc3QgcnVuTWV0aG9kQ29kZWMgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgZXhpdENvZGU6IHpvZF8xLnoubnVtYmVyKCksXG4gICAgcmVzdWx0UmF3OiB6b2RfMS56LnVuaW9uKFt6b2RfMS56LnN0cmluZygpLCB6b2RfMS56Lm51bGwoKV0pLFxuICAgIGJsb2NrOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIHdvcmtjaGFpbjogem9kXzEuei5udW1iZXIoKSxcbiAgICAgICAgc2Vxbm86IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIHNoYXJkOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICByb290SGFzaDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgZmlsZUhhc2g6IHpvZF8xLnouc3RyaW5nKClcbiAgICB9KSxcbiAgICBzaGFyZEJsb2NrOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIHdvcmtjaGFpbjogem9kXzEuei5udW1iZXIoKSxcbiAgICAgICAgc2Vxbm86IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIHNoYXJkOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICByb290SGFzaDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgZmlsZUhhc2g6IHpvZF8xLnouc3RyaW5nKClcbiAgICB9KVxufSk7XG5jb25zdCBjb25maWdDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBjb25maWc6IHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgY2VsbDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgZ2xvYmFsQmFsYW5jZTogem9kXzEuei5vYmplY3Qoe1xuICAgICAgICAgICAgY29pbnM6IHpvZF8xLnouc3RyaW5nKClcbiAgICAgICAgfSlcbiAgICB9KVxufSk7XG5jb25zdCBzZW5kQ29kZWMgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgc3RhdHVzOiB6b2RfMS56Lm51bWJlcigpXG59KTtcbmNvbnN0IGJsb2Nrc0NvZGVjID0gem9kXzEuei5hcnJheSh6b2RfMS56Lm9iamVjdCh7XG4gICAgd29ya2NoYWluOiB6b2RfMS56Lm51bWJlcigpLFxuICAgIHNlcW5vOiB6b2RfMS56Lm51bWJlcigpLFxuICAgIHNoYXJkOiB6b2RfMS56LnN0cmluZygpLFxuICAgIHJvb3RIYXNoOiB6b2RfMS56LnN0cmluZygpLFxuICAgIGZpbGVIYXNoOiB6b2RfMS56LnN0cmluZygpXG59KSk7XG5jb25zdCB0cmFuc2FjdGlvbnNDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBibG9ja3M6IGJsb2Nrc0NvZGVjLFxuICAgIGJvYzogem9kXzEuei5zdHJpbmcoKVxufSk7XG5jb25zdCBwYXJzZWRBZGRyZXNzRXh0ZXJuYWxDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBiaXRzOiB6b2RfMS56Lm51bWJlcigpLFxuICAgIGRhdGE6IHpvZF8xLnouc3RyaW5nKClcbn0pO1xuY29uc3QgcGFyc2VkTWVzc2FnZUluZm9Db2RlYyA9IHpvZF8xLnoudW5pb24oW1xuICAgIHpvZF8xLnoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogem9kXzEuei5saXRlcmFsKCdpbnRlcm5hbCcpLFxuICAgICAgICB2YWx1ZTogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgZGVzdDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgc3JjOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICBib3VuY2VkOiB6b2RfMS56LmJvb2xlYW4oKSxcbiAgICAgICAgYm91bmNlOiB6b2RfMS56LmJvb2xlYW4oKSxcbiAgICAgICAgaWhyRGlzYWJsZWQ6IHpvZF8xLnouYm9vbGVhbigpLFxuICAgICAgICBjcmVhdGVkQXQ6IHpvZF8xLnoubnVtYmVyKCksXG4gICAgICAgIGNyZWF0ZWRMdDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgZndkRmVlOiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICBpaHJGZWU6IHpvZF8xLnouc3RyaW5nKClcbiAgICB9KSxcbiAgICB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHpvZF8xLnoubGl0ZXJhbCgnZXh0ZXJuYWwtaW4nKSxcbiAgICAgICAgZGVzdDogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgc3JjOiB6b2RfMS56LnVuaW9uKFtwYXJzZWRBZGRyZXNzRXh0ZXJuYWxDb2RlYywgem9kXzEuei5udWxsKCldKSxcbiAgICAgICAgaW1wb3J0RmVlOiB6b2RfMS56LnN0cmluZygpXG4gICAgfSksXG4gICAgem9kXzEuei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6b2RfMS56LmxpdGVyYWwoJ2V4dGVybmFsLW91dCcpLFxuICAgICAgICBkZXN0OiB6b2RfMS56LnVuaW9uKFtwYXJzZWRBZGRyZXNzRXh0ZXJuYWxDb2RlYywgem9kXzEuei5udWxsKCldKVxuICAgIH0pXG5dKTtcbmNvbnN0IHBhcnNlZFN0YXRlSW5pdENvZGVjID0gem9kXzEuei5vYmplY3Qoe1xuICAgIHNwbGl0RGVwdGg6IHpvZF8xLnoudW5pb24oW3pvZF8xLnoubnVtYmVyKCksIHpvZF8xLnoubnVsbCgpXSksXG4gICAgY29kZTogem9kXzEuei51bmlvbihbem9kXzEuei5zdHJpbmcoKSwgem9kXzEuei5udWxsKCldKSxcbiAgICBkYXRhOiB6b2RfMS56LnVuaW9uKFt6b2RfMS56LnN0cmluZygpLCB6b2RfMS56Lm51bGwoKV0pLFxuICAgIHNwZWNpYWw6IHpvZF8xLnoudW5pb24oW3pvZF8xLnoub2JqZWN0KHsgdGljazogem9kXzEuei5ib29sZWFuKCksIHRvY2s6IHpvZF8xLnouYm9vbGVhbigpIH0pLCB6b2RfMS56Lm51bGwoKV0pXG59KTtcbmNvbnN0IHBhcnNlZE1lc3NhZ2VDb2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBib2R5OiB6b2RfMS56LnN0cmluZygpLFxuICAgIGluZm86IHBhcnNlZE1lc3NhZ2VJbmZvQ29kZWMsXG4gICAgaW5pdDogem9kXzEuei51bmlvbihbcGFyc2VkU3RhdGVJbml0Q29kZWMsIHpvZF8xLnoubnVsbCgpXSlcbn0pO1xuY29uc3QgYWNjb3VudFN0YXR1c0NvZGVjID0gem9kXzEuei51bmlvbihbem9kXzEuei5saXRlcmFsKCd1bmluaXRpYWxpemVkJyksIHpvZF8xLnoubGl0ZXJhbCgnZnJvemVuJyksIHpvZF8xLnoubGl0ZXJhbCgnYWN0aXZlJyksIHpvZF8xLnoubGl0ZXJhbCgnbm9uLWV4aXN0aW5nJyldKTtcbmNvbnN0IHR4Qm9keUNvZGVjID0gem9kXzEuei51bmlvbihbXG4gICAgem9kXzEuei5vYmplY3QoeyB0eXBlOiB6b2RfMS56LmxpdGVyYWwoJ2NvbW1lbnQnKSwgY29tbWVudDogem9kXzEuei5zdHJpbmcoKSB9KSxcbiAgICB6b2RfMS56Lm9iamVjdCh7IHR5cGU6IHpvZF8xLnoubGl0ZXJhbCgncGF5bG9hZCcpLCBjZWxsOiB6b2RfMS56LnN0cmluZygpIH0pLFxuXSk7XG5jb25zdCBwYXJzZWRPcGVyYXRpb25JdGVtQ29kZWMgPSB6b2RfMS56LnVuaW9uKFtcbiAgICB6b2RfMS56Lm9iamVjdCh7IGtpbmQ6IHpvZF8xLnoubGl0ZXJhbCgndG9uJyksIGFtb3VudDogem9kXzEuei5zdHJpbmcoKSB9KSxcbiAgICB6b2RfMS56Lm9iamVjdCh7IGtpbmQ6IHpvZF8xLnoubGl0ZXJhbCgndG9rZW4nKSwgYW1vdW50OiB6b2RfMS56LnN0cmluZygpIH0pXG5dKTtcbmNvbnN0IHN1cHBvcnRlZE1lc3NhZ2VUeXBlQ29kZWMgPSB6b2RfMS56LnVuaW9uKFtcbiAgICB6b2RfMS56LmxpdGVyYWwoJ2pldHRvbjo6ZXhjZXNzZXMnKSxcbiAgICB6b2RfMS56LmxpdGVyYWwoJ2pldHRvbjo6dHJhbnNmZXInKSxcbiAgICB6b2RfMS56LmxpdGVyYWwoJ2pldHRvbjo6dHJhbnNmZXJfbm90aWZpY2F0aW9uJyksXG4gICAgem9kXzEuei5saXRlcmFsKCdkZXBvc2l0JyksXG4gICAgem9kXzEuei5saXRlcmFsKCdkZXBvc2l0OjpvaycpLFxuICAgIHpvZF8xLnoubGl0ZXJhbCgnd2l0aGRyYXcnKSxcbiAgICB6b2RfMS56LmxpdGVyYWwoJ3dpdGhkcmF3OjphbGwnKSxcbiAgICB6b2RfMS56LmxpdGVyYWwoJ3dpdGhkcmF3OjpkZWxheWVkJyksXG4gICAgem9kXzEuei5saXRlcmFsKCd3aXRoZHJhdzo6b2snKSxcbiAgICB6b2RfMS56LmxpdGVyYWwoJ2FpcmRyb3AnKVxuXSk7XG5jb25zdCBvcENvZGVjID0gem9kXzEuei5vYmplY3Qoe1xuICAgIHR5cGU6IHN1cHBvcnRlZE1lc3NhZ2VUeXBlQ29kZWMsXG4gICAgb3B0aW9uczogem9kXzEuei5vcHRpb25hbCh6b2RfMS56LnJlY29yZCh6b2RfMS56LnN0cmluZygpKSlcbn0pO1xuY29uc3QgcGFyc2VkT3BlcmF0aW9uQ29kZWMgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgYWRkcmVzczogem9kXzEuei5zdHJpbmcoKSxcbiAgICBjb21tZW50OiB6b2RfMS56Lm9wdGlvbmFsKHpvZF8xLnouc3RyaW5nKCkpLFxuICAgIGl0ZW1zOiB6b2RfMS56LmFycmF5KHBhcnNlZE9wZXJhdGlvbkl0ZW1Db2RlYyksXG4gICAgb3A6IHpvZF8xLnoub3B0aW9uYWwob3BDb2RlYylcbn0pO1xuY29uc3QgcGFyc2VkVHJhbnNhY3Rpb25Db2RlYyA9IHpvZF8xLnoub2JqZWN0KHtcbiAgICBhZGRyZXNzOiB6b2RfMS56LnN0cmluZygpLFxuICAgIGx0OiB6b2RfMS56LnN0cmluZygpLFxuICAgIGhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgcHJldlRyYW5zYWN0aW9uOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIGx0OiB6b2RfMS56LnN0cmluZygpLFxuICAgICAgICBoYXNoOiB6b2RfMS56LnN0cmluZygpXG4gICAgfSksXG4gICAgdGltZTogem9kXzEuei5udW1iZXIoKSxcbiAgICBvdXRNZXNzYWdlc0NvdW50OiB6b2RfMS56Lm51bWJlcigpLFxuICAgIG9sZFN0YXR1czogYWNjb3VudFN0YXR1c0NvZGVjLFxuICAgIG5ld1N0YXR1czogYWNjb3VudFN0YXR1c0NvZGVjLFxuICAgIGZlZXM6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgdXBkYXRlOiB6b2RfMS56Lm9iamVjdCh7XG4gICAgICAgIG9sZEhhc2g6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgIG5ld0hhc2g6IHpvZF8xLnouc3RyaW5nKClcbiAgICB9KSxcbiAgICBpbk1lc3NhZ2U6IHpvZF8xLnoudW5pb24oW3BhcnNlZE1lc3NhZ2VDb2RlYywgem9kXzEuei5udWxsKCldKSxcbiAgICBvdXRNZXNzYWdlczogem9kXzEuei5hcnJheShwYXJzZWRNZXNzYWdlQ29kZWMpLFxuICAgIHBhcnNlZDogem9kXzEuei5vYmplY3Qoe1xuICAgICAgICBzZXFubzogem9kXzEuei51bmlvbihbem9kXzEuei5udW1iZXIoKSwgem9kXzEuei5udWxsKCldKSxcbiAgICAgICAgYm9keTogem9kXzEuei51bmlvbihbdHhCb2R5Q29kZWMsIHpvZF8xLnoubnVsbCgpXSksXG4gICAgICAgIHN0YXR1czogem9kXzEuei51bmlvbihbem9kXzEuei5saXRlcmFsKCdzdWNjZXNzJyksIHpvZF8xLnoubGl0ZXJhbCgnZmFpbGVkJyksIHpvZF8xLnoubGl0ZXJhbCgncGVuZGluZycpXSksXG4gICAgICAgIGRlc3Q6IHpvZF8xLnoudW5pb24oW3pvZF8xLnouc3RyaW5nKCksIHpvZF8xLnoubnVsbCgpXSksXG4gICAgICAgIGtpbmQ6IHpvZF8xLnoudW5pb24oW3pvZF8xLnoubGl0ZXJhbCgnb3V0JyksIHpvZF8xLnoubGl0ZXJhbCgnaW4nKV0pLFxuICAgICAgICBhbW91bnQ6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgICAgIHJlc29sdmVkQWRkcmVzczogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgYm91bmNlZDogem9kXzEuei5ib29sZWFuKCksXG4gICAgICAgIG1lbnRpb25lZDogem9kXzEuei5hcnJheSh6b2RfMS56LnN0cmluZygpKVxuICAgIH0pLFxuICAgIG9wZXJhdGlvbjogcGFyc2VkT3BlcmF0aW9uQ29kZWNcbn0pO1xuY29uc3QgcGFyc2VkVHJhbnNhY3Rpb25zQ29kZWMgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgYmxvY2tzOiBibG9ja3NDb2RlYyxcbiAgICB0cmFuc2FjdGlvbnM6IHpvZF8xLnouYXJyYXkocGFyc2VkVHJhbnNhY3Rpb25Db2RlYylcbn0pO1xuIl0sIm5hbWVzIjpbIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiZ2V0IiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIl9Ub25DbGllbnQ0X2VuZHBvaW50IiwiX1RvbkNsaWVudDRfdGltZW91dCIsIl9Ub25DbGllbnQ0X2FkYXB0ZXIiLCJfVG9uQ2xpZW50NF9heGlvcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlRvbkNsaWVudDQiLCJheGlvc18xIiwicmVxdWlyZSIsImNvcmVfMSIsInRvVXJsU2FmZV8xIiwiem9kXzEiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJkZWZhdWx0IiwiY3JlYXRlIiwiZW5kcG9pbnQiLCJ0aW1lb3V0IiwiaHR0cEFkYXB0ZXIiLCJyZXF1ZXN0SW50ZXJjZXB0b3IiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwiZ2V0TGFzdEJsb2NrIiwicmVzIiwiYWRhcHRlciIsImxhc3RCbG9jayIsImxhc3RCbG9ja0NvZGVjIiwic2FmZVBhcnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJFcnJvciIsImVycm9yIiwiZm9ybWF0IiwiX2Vycm9ycyIsImpvaW4iLCJnZXRCbG9jayIsInNlcW5vIiwiYmxvY2siLCJibG9ja0NvZGVjIiwiZXhpc3QiLCJnZXRCbG9ja0J5VXRpbWUiLCJ0cyIsImdldEFjY291bnQiLCJhZGRyZXNzIiwidG9TdHJpbmciLCJ1cmxTYWZlIiwiYWNjb3VudCIsImFjY291bnRDb2RlYyIsImdldEFjY291bnRMaXRlIiwiYWNjb3VudExpdGVDb2RlYyIsImlzQ29udHJhY3REZXBsb3llZCIsInR5cGUiLCJpc0FjY291bnRDaGFuZ2VkIiwibHQiLCJjaGFuZ2VkIiwiY2hhbmdlZENvZGVjIiwiZ2V0QWNjb3VudFRyYW5zYWN0aW9ucyIsImhhc2giLCJ0b1VybFNhZmUiLCJ0cmFuc2FjdGlvbnMiLCJ0cmFuc2FjdGlvbnNDb2RlYyIsInR4IiwiY2VsbHMiLCJDZWxsIiwiZnJvbUJvYyIsIkJ1ZmZlciIsImZyb20iLCJib2MiLCJpIiwiYmxvY2tzIiwibGVuZ3RoIiwicHVzaCIsImxvYWRUcmFuc2FjdGlvbiIsImJlZ2luUGFyc2UiLCJnZXRBY2NvdW50VHJhbnNhY3Rpb25zUGFyc2VkIiwiY291bnQiLCJwYXJhbXMiLCJwYXJzZWRUcmFuc2FjdGlvbnNSZXMiLCJwYXJzZWRUcmFuc2FjdGlvbnNDb2RlYyIsImdldENvbmZpZyIsImlkcyIsInRhaWwiLCJzb3J0IiwiY29uZmlnIiwiY29uZmlnQ29kZWMiLCJydW5NZXRob2QiLCJuYW1lIiwic2VyaWFsaXplVHVwbGUiLCJ0b0JvYyIsImlkeCIsImNyYzMyIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicnVuTWV0aG9kQ29kZWMiLCJyZXN1bHRUdXBsZSIsInJlc3VsdFJhdyIsInBhcnNlVHVwbGUiLCJleGl0Q29kZSIsInJlc3VsdCIsInNoYXJkQmxvY2siLCJyZWFkZXIiLCJUdXBsZVJlYWRlciIsInNlbmRNZXNzYWdlIiwibWVzc2FnZSIsInBvc3QiLCJzZW5kIiwic2VuZENvZGVjIiwic3RhdHVzIiwib3BlbiIsImNvbnRyYWN0Iiwib3BlbkNvbnRyYWN0IiwiY3JlYXRlUHJvdmlkZXIiLCJpbml0Iiwib3BlbkF0IiwicHJvdmlkZXIiLCJwcm92aWRlckF0IiwiV2Vha01hcCIsImNsaWVudCIsImdldFN0YXRlIiwic3EiLCJsYXN0IiwiQmlnSW50Iiwic3RvcmFnZSIsImNvZGUiLCJzdGF0ZUhhc2giLCJiYWxhbmNlIiwiY29pbnMiLCJtZXRob2QiLCJzdGFjayIsImV4dGVybmFsIiwibmVlZGVkSW5pdCIsImV4dCIsInRvIiwiYm9keSIsInBrZyIsImJlZ2luQ2VsbCIsInN0b3JlIiwic3RvcmVNZXNzYWdlIiwiZW5kQ2VsbCIsImludGVybmFsIiwidmlhIiwiYm91bmNlIiwidW5kZWZpbmVkIiwidG9OYW5vIiwiY29tbWVudCIsInNlbmRNb2RlIiwiZ2V0VHJhbnNhY3Rpb25zIiwibGltaXQiLCJ1c2VMaW1pdCIsInR4cyIsImZpcnN0VHgiLCJmaXJzdEx0IiwiZmlyc3RIYXNoIiwibmVlZFNraXBGaXJzdCIsImVxdWFscyIsInNoaWZ0IiwibGFzdFR4IiwibGFzdEx0IiwibGFzdEhhc2giLCJtYXAiLCJzbGljZSIsInoiLCJvYmplY3QiLCJudW1iZXIiLCJzaGFyZCIsInN0cmluZyIsIndvcmtjaGFpbiIsImZpbGVIYXNoIiwicm9vdEhhc2giLCJzdGF0ZVJvb3RIYXNoIiwibm93IiwidW5pb24iLCJsaXRlcmFsIiwic2hhcmRzIiwiYXJyYXkiLCJzdG9yYWdlU3RhdENvZGVjIiwibGFzdFBhaWQiLCJkdWVQYXltZW50IiwibnVsbCIsInVzZWQiLCJiaXRzIiwicHVibGljQ2VsbHMiLCJzdG9yYWdlU3RhdCIsImNvZGVIYXNoIiwiZGF0YUhhc2giLCJib29sZWFuIiwiY2VsbCIsImdsb2JhbEJhbGFuY2UiLCJibG9ja3NDb2RlYyIsInBhcnNlZEFkZHJlc3NFeHRlcm5hbENvZGVjIiwicGFyc2VkTWVzc2FnZUluZm9Db2RlYyIsImRlc3QiLCJzcmMiLCJib3VuY2VkIiwiaWhyRGlzYWJsZWQiLCJjcmVhdGVkQXQiLCJjcmVhdGVkTHQiLCJmd2RGZWUiLCJpaHJGZWUiLCJpbXBvcnRGZWUiLCJwYXJzZWRTdGF0ZUluaXRDb2RlYyIsInNwbGl0RGVwdGgiLCJzcGVjaWFsIiwidGljayIsInRvY2siLCJwYXJzZWRNZXNzYWdlQ29kZWMiLCJpbmZvIiwiYWNjb3VudFN0YXR1c0NvZGVjIiwidHhCb2R5Q29kZWMiLCJwYXJzZWRPcGVyYXRpb25JdGVtQ29kZWMiLCJhbW91bnQiLCJzdXBwb3J0ZWRNZXNzYWdlVHlwZUNvZGVjIiwib3BDb2RlYyIsIm9wdGlvbnMiLCJvcHRpb25hbCIsInJlY29yZCIsInBhcnNlZE9wZXJhdGlvbkNvZGVjIiwiaXRlbXMiLCJvcCIsInBhcnNlZFRyYW5zYWN0aW9uQ29kZWMiLCJwcmV2VHJhbnNhY3Rpb24iLCJ0aW1lIiwib3V0TWVzc2FnZXNDb3VudCIsIm9sZFN0YXR1cyIsIm5ld1N0YXR1cyIsImZlZXMiLCJ1cGRhdGUiLCJvbGRIYXNoIiwibmV3SGFzaCIsImluTWVzc2FnZSIsIm91dE1lc3NhZ2VzIiwicGFyc2VkIiwicmVzb2x2ZWRBZGRyZXNzIiwibWVudGlvbmVkIiwib3BlcmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/client/TonClient4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/client/api/HttpApi.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/client/api/HttpApi.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HttpApi = void 0;\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ const TonCache_1 = __webpack_require__(/*! ./TonCache */ \"(ssr)/./node_modules/@ton/ton/dist/client/api/TonCache.js\");\nconst dataloader_1 = __importDefault(__webpack_require__(/*! dataloader */ \"(ssr)/./node_modules/dataloader/index.js\"));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/@ton/ton/node_modules/axios/dist/node/axios.cjs\"));\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.js\");\nconst version = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/@ton/ton/package.json\").version);\nconst blockIdExt = zod_1.z.object({\n    \"@type\": zod_1.z.literal(\"ton.blockIdExt\"),\n    workchain: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    seqno: zod_1.z.number(),\n    root_hash: zod_1.z.string(),\n    file_hash: zod_1.z.string()\n});\nconst addressInformation = zod_1.z.object({\n    balance: zod_1.z.union([\n        zod_1.z.number(),\n        zod_1.z.string()\n    ]),\n    state: zod_1.z.union([\n        zod_1.z.literal(\"active\"),\n        zod_1.z.literal(\"uninitialized\"),\n        zod_1.z.literal(\"frozen\")\n    ]),\n    data: zod_1.z.string(),\n    code: zod_1.z.string(),\n    last_transaction_id: zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"internal.transactionId\"),\n        lt: zod_1.z.string(),\n        hash: zod_1.z.string()\n    }),\n    block_id: blockIdExt,\n    sync_utime: zod_1.z.number()\n});\nconst bocResponse = zod_1.z.object({\n    \"@type\": zod_1.z.literal(\"ok\")\n});\nconst feeResponse = zod_1.z.object({\n    \"@type\": zod_1.z.literal(\"query.fees\"),\n    source_fees: zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"fees\"),\n        in_fwd_fee: zod_1.z.number(),\n        storage_fee: zod_1.z.number(),\n        gas_fee: zod_1.z.number(),\n        fwd_fee: zod_1.z.number()\n    })\n});\nconst callGetMethod = zod_1.z.object({\n    gas_used: zod_1.z.number(),\n    exit_code: zod_1.z.number(),\n    stack: zod_1.z.array(zod_1.z.unknown())\n});\nconst messageData = zod_1.z.union([\n    zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"msg.dataRaw\"),\n        \"body\": zod_1.z.string()\n    }),\n    zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"msg.dataText\"),\n        \"text\": zod_1.z.string()\n    }),\n    zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"msg.dataDecryptedText\"),\n        \"text\": zod_1.z.string()\n    }),\n    zod_1.z.object({\n        \"@type\": zod_1.z.literal(\"msg.dataEncryptedText\"),\n        \"text\": zod_1.z.string()\n    })\n]);\nconst message = zod_1.z.object({\n    source: zod_1.z.string(),\n    destination: zod_1.z.string(),\n    value: zod_1.z.string(),\n    fwd_fee: zod_1.z.string(),\n    ihr_fee: zod_1.z.string(),\n    created_lt: zod_1.z.string(),\n    body_hash: zod_1.z.string(),\n    msg_data: messageData,\n    message: zod_1.z.string().optional()\n});\nconst transaction = zod_1.z.object({\n    data: zod_1.z.string(),\n    utime: zod_1.z.number(),\n    transaction_id: zod_1.z.object({\n        lt: zod_1.z.string(),\n        hash: zod_1.z.string()\n    }),\n    fee: zod_1.z.string(),\n    storage_fee: zod_1.z.string(),\n    other_fee: zod_1.z.string(),\n    in_msg: zod_1.z.union([\n        zod_1.z.undefined(),\n        message\n    ]),\n    out_msgs: zod_1.z.array(message)\n});\nconst getTransactions = zod_1.z.array(transaction);\nconst getMasterchain = zod_1.z.object({\n    state_root_hash: zod_1.z.string(),\n    last: blockIdExt,\n    init: blockIdExt\n});\nconst getShards = zod_1.z.object({\n    shards: zod_1.z.array(blockIdExt)\n});\nconst blockShortTxt = zod_1.z.object({\n    \"@type\": zod_1.z.literal(\"blocks.shortTxId\"),\n    mode: zod_1.z.number(),\n    account: zod_1.z.string(),\n    lt: zod_1.z.string(),\n    hash: zod_1.z.string()\n});\nconst getBlockTransactions = zod_1.z.object({\n    id: blockIdExt,\n    req_count: zod_1.z.number(),\n    incomplete: zod_1.z.boolean(),\n    transactions: zod_1.z.array(blockShortTxt)\n});\nclass TypedCache {\n    constructor(namespace, cache, codec, keyEncoder){\n        this.namespace = namespace;\n        this.cache = cache;\n        this.codec = codec;\n        this.keyEncoder = keyEncoder;\n    }\n    async get(key) {\n        let ex = await this.cache.get(this.namespace, this.keyEncoder(key));\n        if (ex) {\n            let decoded = this.codec.safeParse(JSON.parse(ex));\n            if (decoded.success) {\n                return decoded.data;\n            }\n        }\n        return null;\n    }\n    async set(key, value) {\n        if (value !== null) {\n            await this.cache.set(this.namespace, this.keyEncoder(key), JSON.stringify(value));\n        } else {\n            await this.cache.set(this.namespace, this.keyEncoder(key), null);\n        }\n    }\n}\nclass HttpApi {\n    constructor(endpoint, parameters){\n        this.endpoint = endpoint;\n        this.cache = new TonCache_1.InMemoryCache();\n        this.parameters = {\n            timeout: parameters?.timeout || 30000,\n            apiKey: parameters?.apiKey,\n            adapter: parameters?.adapter\n        };\n        // Shard\n        this.shardCache = new TypedCache(\"ton-shard\", this.cache, zod_1.z.array(blockIdExt), (src)=>src + \"\");\n        this.shardLoader = new dataloader_1.default(async (src)=>{\n            return await Promise.all(src.map(async (v)=>{\n                const cached = await this.shardCache.get(v);\n                if (cached) {\n                    return cached;\n                }\n                let loaded = (await this.doCall(\"shards\", {\n                    seqno: v\n                }, getShards)).shards;\n                await this.shardCache.set(v, loaded);\n                return loaded;\n            }));\n        });\n        // Shard Transactions\n        this.shardTransactionsCache = new TypedCache(\"ton-shard-tx\", this.cache, getBlockTransactions, (src)=>src.workchain + \":\" + src.shard + \":\" + src.seqno);\n        this.shardTransactionsLoader = new dataloader_1.default(async (src)=>{\n            return await Promise.all(src.map(async (v)=>{\n                const cached = await this.shardTransactionsCache.get(v);\n                if (cached) {\n                    return cached;\n                }\n                let loaded = await this.doCall(\"getBlockTransactions\", {\n                    workchain: v.workchain,\n                    seqno: v.seqno,\n                    shard: v.shard\n                }, getBlockTransactions);\n                await this.shardTransactionsCache.set(v, loaded);\n                return loaded;\n            }));\n        }, {\n            cacheKeyFn: (src)=>src.workchain + \":\" + src.shard + \":\" + src.seqno\n        });\n    }\n    getAddressInformation(address) {\n        return this.doCall(\"getAddressInformation\", {\n            address: address.toString()\n        }, addressInformation);\n    }\n    async getTransactions(address, opts) {\n        const inclusive = opts.inclusive;\n        delete opts.inclusive;\n        // Convert hash\n        let hash = undefined;\n        if (opts.hash) {\n            hash = Buffer.from(opts.hash, \"base64\").toString(\"hex\");\n        }\n        // Adjust limit\n        let limit = opts.limit;\n        if (opts.hash && opts.lt && inclusive !== true) {\n            limit++;\n        }\n        // Do request\n        let res = await this.doCall(\"getTransactions\", {\n            address: address.toString(),\n            ...opts,\n            limit,\n            hash\n        }, getTransactions);\n        if (res.length > limit) {\n            res = res.slice(0, limit);\n        }\n        // Adjust result\n        if (opts.hash && opts.lt && inclusive !== true) {\n            res.shift();\n            return res;\n        } else {\n            return res;\n        }\n    }\n    async getMasterchainInfo() {\n        return await this.doCall(\"getMasterchainInfo\", {}, getMasterchain);\n    }\n    async getShards(seqno) {\n        return await this.shardLoader.load(seqno);\n    }\n    async getBlockTransactions(workchain, seqno, shard) {\n        return await this.shardTransactionsLoader.load({\n            workchain,\n            seqno,\n            shard\n        });\n    }\n    async getTransaction(address, lt, hash) {\n        let convHash = Buffer.from(hash, \"base64\").toString(\"hex\");\n        let res = await this.doCall(\"getTransactions\", {\n            address: address.toString(),\n            lt,\n            hash: convHash,\n            limit: 1\n        }, getTransactions);\n        let ex = res.find((v)=>v.transaction_id.lt === lt && v.transaction_id.hash === hash);\n        if (ex) {\n            return ex;\n        } else {\n            return null;\n        }\n    }\n    async callGetMethod(address, method, stack) {\n        return await this.doCall(\"runGetMethod\", {\n            address: address.toString(),\n            method,\n            stack: serializeStack(stack)\n        }, callGetMethod);\n    }\n    async sendBoc(body) {\n        await this.doCall(\"sendBoc\", {\n            boc: body.toString(\"base64\")\n        }, bocResponse);\n    }\n    async estimateFee(address, args) {\n        return await this.doCall(\"estimateFee\", {\n            address: address.toString(),\n            body: args.body.toBoc().toString(\"base64\"),\n            \"init_data\": args.initData ? args.initData.toBoc().toString(\"base64\") : \"\",\n            \"init_code\": args.initCode ? args.initCode.toBoc().toString(\"base64\") : \"\",\n            ignore_chksig: args.ignoreSignature\n        }, feeResponse);\n    }\n    async tryLocateResultTx(source, destination, created_lt) {\n        return await this.doCall(\"tryLocateResultTx\", {\n            source: source.toString(),\n            destination: destination.toString(),\n            created_lt\n        }, transaction);\n    }\n    async tryLocateSourceTx(source, destination, created_lt) {\n        return await this.doCall(\"tryLocateSourceTx\", {\n            source: source.toString(),\n            destination: destination.toString(),\n            created_lt\n        }, transaction);\n    }\n    async doCall(method, body, codec) {\n        let headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Ton-Client-Version\": version\n        };\n        if (this.parameters.apiKey) {\n            headers[\"X-API-Key\"] = this.parameters.apiKey;\n        }\n        let res = await axios_1.default.post(this.endpoint, JSON.stringify({\n            id: \"1\",\n            jsonrpc: \"2.0\",\n            method: method,\n            params: body\n        }), {\n            headers,\n            timeout: this.parameters.timeout,\n            adapter: this.parameters.adapter\n        });\n        if (res.status !== 200 || !res.data.ok) {\n            throw Error(\"Received error: \" + JSON.stringify(res.data));\n        }\n        let decoded = codec.safeParse(res.data.result);\n        if (decoded.success) {\n            return decoded.data;\n        } else {\n            throw Error(\"Malformed response: \" + decoded.error.format()._errors.join(\", \"));\n        }\n    }\n}\nexports.HttpApi = HttpApi;\nfunction serializeStack(src) {\n    let stack = [];\n    for (let s of src){\n        if (s.type === \"int\") {\n            stack.push([\n                \"num\",\n                s.value.toString()\n            ]);\n        } else if (s.type === \"cell\") {\n            stack.push([\n                \"tvm.Cell\",\n                s.cell.toBoc().toString(\"base64\")\n            ]);\n        } else if (s.type === \"slice\") {\n            stack.push([\n                \"tvm.Slice\",\n                s.cell.toBoc().toString(\"base64\")\n            ]);\n        } else if (s.type === \"builder\") {\n            stack.push([\n                \"tvm.Builder\",\n                s.cell.toBoc().toString(\"base64\")\n            ]);\n        } else {\n            throw Error(\"Unsupported stack item type: \" + s.type);\n        }\n    }\n    return stack;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/client/api/HttpApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/client/api/TonCache.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/client/api/TonCache.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InMemoryCache = void 0;\nclass InMemoryCache {\n    constructor(){\n        this.cache = new Map();\n        this.set = async (namespace, key, value)=>{\n            if (value !== null) {\n                this.cache.set(namespace + \"$$\" + key, value);\n            } else {\n                this.cache.delete(namespace + \"$$\" + key);\n            }\n        };\n        this.get = async (namespace, key)=>{\n            let res = this.cache.get(namespace + \"$$\" + key);\n            if (res !== undefined) {\n                return res;\n            } else {\n                return null;\n            }\n        };\n    }\n}\nexports.InMemoryCache = InMemoryCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9jbGllbnQvYXBpL1RvbkNhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1FO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQztRQUNqQixJQUFJLENBQUNDLEdBQUcsR0FBRyxPQUFPQyxXQUFXQyxLQUFLUDtZQUM5QixJQUFJQSxVQUFVLE1BQU07Z0JBQ2hCLElBQUksQ0FBQ0csS0FBSyxDQUFDRSxHQUFHLENBQUNDLFlBQVksT0FBT0MsS0FBS1A7WUFDM0MsT0FDSztnQkFDRCxJQUFJLENBQUNHLEtBQUssQ0FBQ0ssTUFBTSxDQUFDRixZQUFZLE9BQU9DO1lBQ3pDO1FBQ0o7UUFDQSxJQUFJLENBQUNFLEdBQUcsR0FBRyxPQUFPSCxXQUFXQztZQUN6QixJQUFJRyxNQUFNLElBQUksQ0FBQ1AsS0FBSyxDQUFDTSxHQUFHLENBQUNILFlBQVksT0FBT0M7WUFDNUMsSUFBSUcsUUFBUUMsV0FBVztnQkFDbkIsT0FBT0Q7WUFDWCxPQUNLO2dCQUNELE9BQU87WUFDWDtRQUNKO0lBQ0o7QUFDSjtBQUNBWCxxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vdG9uL2Rpc3QvY2xpZW50L2FwaS9Ub25DYWNoZS5qcz8yYzUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFdoYWxlcyBDb3JwLlxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Jbk1lbW9yeUNhY2hlID0gdm9pZCAwO1xuY2xhc3MgSW5NZW1vcnlDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc2V0ID0gYXN5bmMgKG5hbWVzcGFjZSwga2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQobmFtZXNwYWNlICsgJyQkJyArIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUobmFtZXNwYWNlICsgJyQkJyArIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0ID0gYXN5bmMgKG5hbWVzcGFjZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gdGhpcy5jYWNoZS5nZXQobmFtZXNwYWNlICsgJyQkJyArIGtleSk7XG4gICAgICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Jbk1lbW9yeUNhY2hlID0gSW5NZW1vcnlDYWNoZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkluTWVtb3J5Q2FjaGUiLCJjb25zdHJ1Y3RvciIsImNhY2hlIiwiTWFwIiwic2V0IiwibmFtZXNwYWNlIiwia2V5IiwiZGVsZXRlIiwiZ2V0IiwicmVzIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/client/api/TonCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/config/ConfigParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/config/ConfigParser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseFullConfig = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseVotingSetup = exports.parseProposalSetup = exports.configParse29 = exports.configParse28 = exports.configParseMsgPrices = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParseValidatorSet = exports.configParse12 = exports.configParseWorkchainDescriptor = exports.configParse40 = exports.configParse8 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse5 = exports.configParseMasterAddressRequired = exports.parseBridge = exports.parseValidatorSet = exports.configParseMasterAddress = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nfunction configParseMasterAddress(slice) {\n    if (slice) {\n        return new core_1.Address(-1, slice.loadBuffer(32));\n    } else {\n        return null;\n    }\n}\nexports.configParseMasterAddress = configParseMasterAddress;\nfunction readPublicKey(slice) {\n    // 8e81278a\n    if (slice.loadUint(32) !== 0x8e81278a) {\n        throw Error(\"Invalid config\");\n    }\n    return slice.loadBuffer(32);\n}\nconst ValidatorDescriptionDictValue = {\n    serialize (src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse (src) {\n        const header = src.loadUint(8);\n        if (header === 0x53) {\n            return {\n                publicKey: readPublicKey(src),\n                weight: src.loadUintBig(64),\n                adnlAddress: null\n            };\n        } else if (header === 0x73) {\n            return {\n                publicKey: readPublicKey(src),\n                weight: src.loadUintBig(64),\n                adnlAddress: src.loadBuffer(32)\n            };\n        } else {\n            throw Error(\"Invalid config\");\n        }\n    }\n};\nfunction parseValidatorSet(slice) {\n    const header = slice.loadUint(8);\n    if (header === 0x11) {\n        const timeSince = slice.loadUint(32);\n        const timeUntil = slice.loadUint(32);\n        const total = slice.loadUint(16);\n        const main = slice.loadUint(16);\n        const list = slice.loadDictDirect(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n        return {\n            timeSince,\n            timeUntil,\n            total,\n            main,\n            totalWeight: null,\n            list\n        };\n    } else if (header === 0x12) {\n        const timeSince = slice.loadUint(32);\n        const timeUntil = slice.loadUint(32);\n        const total = slice.loadUint(16);\n        const main = slice.loadUint(16);\n        const totalWeight = slice.loadUintBig(64);\n        const list = slice.loadDict(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n        return {\n            timeSince,\n            timeUntil,\n            total,\n            main,\n            totalWeight,\n            list\n        };\n    }\n}\nexports.parseValidatorSet = parseValidatorSet;\nfunction parseBridge(slice) {\n    const bridgeAddress = new core_1.Address(-1, slice.loadBuffer(32));\n    const oracleMultisigAddress = new core_1.Address(-1, slice.loadBuffer(32));\n    const oraclesDict = slice.loadDict(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Buffer(32));\n    const oracles = new Map();\n    for (const [local, remote] of oraclesDict){\n        oracles.set(new core_1.Address(-1, local).toString(), remote);\n    }\n    const externalChainAddress = slice.loadBuffer(32);\n    return {\n        bridgeAddress,\n        oracleMultisigAddress,\n        oracles,\n        externalChainAddress\n    };\n}\nexports.parseBridge = parseBridge;\nfunction configParseMasterAddressRequired(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    return configParseMasterAddress(slice);\n}\nexports.configParseMasterAddressRequired = configParseMasterAddressRequired;\nfunction configParse5(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0x01) {\n        const blackholeAddr = slice.loadBit() ? new core_1.Address(-1, slice.loadBuffer(32)) : null;\n        const feeBurnNominator = slice.loadUint(32);\n        const feeBurnDenominator = slice.loadUint(32);\n        return {\n            blackholeAddr,\n            feeBurnNominator,\n            feeBurnDenominator\n        };\n    }\n    throw new Error(\"Invalid config\");\n}\nexports.configParse5 = configParse5;\nfunction configParse13(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0x1a) {\n        const deposit = slice.loadCoins();\n        const bitPrice = slice.loadCoins();\n        const cellPrice = slice.loadCoins();\n        return {\n            deposit,\n            bitPrice,\n            cellPrice\n        };\n    }\n    throw new Error(\"Invalid config\");\n}\nexports.configParse13 = configParse13;\nfunction configParse15(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const validatorsElectedFor = slice.loadUint(32);\n    const electorsStartBefore = slice.loadUint(32);\n    const electorsEndBefore = slice.loadUint(32);\n    const stakeHeldFor = slice.loadUint(32);\n    return {\n        validatorsElectedFor,\n        electorsStartBefore,\n        electorsEndBefore,\n        stakeHeldFor\n    };\n}\nexports.configParse15 = configParse15;\nfunction configParse16(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const maxValidators = slice.loadUint(16);\n    const maxMainValidators = slice.loadUint(16);\n    const minValidators = slice.loadUint(16);\n    return {\n        maxValidators,\n        maxMainValidators,\n        minValidators\n    };\n}\nexports.configParse16 = configParse16;\nfunction configParse17(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const minStake = slice.loadCoins();\n    const maxStake = slice.loadCoins();\n    const minTotalStake = slice.loadCoins();\n    const maxStakeFactor = slice.loadUint(32);\n    return {\n        minStake,\n        maxStake,\n        minTotalStake,\n        maxStakeFactor\n    };\n}\nexports.configParse17 = configParse17;\nconst StoragePricesDictValue = {\n    serialize (src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse (src) {\n        const header = src.loadUint(8);\n        if (header !== 0xcc) {\n            throw Error(\"Invalid config\");\n        }\n        const utime_since = src.loadUint(32);\n        const bit_price_ps = src.loadUintBig(64);\n        const cell_price_ps = src.loadUintBig(64);\n        const mc_bit_price_ps = src.loadUintBig(64);\n        const mc_cell_price_ps = src.loadUintBig(64);\n        return {\n            utime_since,\n            bit_price_ps,\n            cell_price_ps,\n            mc_bit_price_ps,\n            mc_cell_price_ps\n        };\n    }\n};\nfunction configParse18(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    return slice.loadDictDirect(core_1.Dictionary.Keys.Buffer(4), StoragePricesDictValue).values();\n}\nexports.configParse18 = configParse18;\nfunction configParse8(slice) {\n    if (!slice) {\n        return {\n            version: 0,\n            capabilities: 0n\n        };\n    }\n    const version = slice.loadUint(32);\n    const capabilities = slice.loadUintBig(64);\n    return {\n        version,\n        capabilities\n    };\n}\nexports.configParse8 = configParse8;\nfunction configParse40(slice) {\n    if (!slice) {\n        return null;\n    }\n    const header = slice.loadUint(8);\n    if (header !== 1) {\n        throw Error(\"Invalid config\");\n    }\n    const defaultFlatFine = slice.loadCoins();\n    const defaultProportionaFine = slice.loadCoins();\n    const severityFlatMult = slice.loadUint(16);\n    const severityProportionalMult = slice.loadUint(16);\n    const unfunishableInterval = slice.loadUint(16);\n    const longInterval = slice.loadUint(16);\n    const longFlatMult = slice.loadUint(16);\n    const longProportionalMult = slice.loadUint(16);\n    const mediumInterval = slice.loadUint(16);\n    const mediumFlatMult = slice.loadUint(16);\n    const mediumProportionalMult = slice.loadUint(16);\n    return {\n        defaultFlatFine,\n        defaultProportionaFine,\n        severityFlatMult,\n        severityProportionalMult,\n        unfunishableInterval,\n        longInterval,\n        longFlatMult,\n        longProportionalMult,\n        mediumInterval,\n        mediumFlatMult,\n        mediumProportionalMult\n    };\n}\nexports.configParse40 = configParse40;\nfunction configParseWorkchainDescriptor(slice) {\n    if (slice.loadUint(8) !== 0xA6) {\n        throw Error(\"Invalid config\");\n    }\n    const enabledSince = slice.loadUint(32);\n    const actialMinSplit = slice.loadUint(8);\n    const min_split = slice.loadUint(8);\n    const max_split = slice.loadUint(8);\n    const basic = slice.loadBit();\n    const active = slice.loadBit();\n    const accept_msgs = slice.loadBit();\n    const flags = slice.loadUint(13);\n    const zerostateRootHash = slice.loadBuffer(32);\n    const zerostateFileHash = slice.loadBuffer(32);\n    const version = slice.loadUint(32);\n    // Only basic format supported\n    if (slice.loadBit()) {\n        throw Error(\"Invalid config\");\n    }\n    const vmVersion = slice.loadUint(32);\n    const vmMode = slice.loadUintBig(64);\n    return {\n        enabledSince,\n        actialMinSplit,\n        min_split,\n        max_split,\n        basic,\n        active,\n        accept_msgs,\n        flags,\n        zerostateRootHash,\n        zerostateFileHash,\n        version,\n        format: {\n            vmVersion,\n            vmMode\n        }\n    };\n}\nexports.configParseWorkchainDescriptor = configParseWorkchainDescriptor;\nconst WorkchainDescriptorDictValue = {\n    serialize (src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse (src) {\n        if (src.loadUint(8) !== 0xA6) {\n            throw Error(\"Invalid config\");\n        }\n        const enabledSince = src.loadUint(32);\n        const actialMinSplit = src.loadUint(8);\n        const min_split = src.loadUint(8);\n        const max_split = src.loadUint(8);\n        const basic = src.loadBit();\n        const active = src.loadBit();\n        const accept_msgs = src.loadBit();\n        const flags = src.loadUint(13);\n        const zerostateRootHash = src.loadBuffer(32);\n        const zerostateFileHash = src.loadBuffer(32);\n        const version = src.loadUint(32);\n        // Only basic format supported\n        if (src.loadBit()) {\n            throw Error(\"Invalid config\");\n        }\n        const vmVersion = src.loadUint(32);\n        const vmMode = src.loadUintBig(64);\n        return {\n            enabledSince,\n            actialMinSplit,\n            min_split,\n            max_split,\n            basic,\n            active,\n            accept_msgs,\n            flags,\n            zerostateRootHash,\n            zerostateFileHash,\n            version,\n            format: {\n                vmVersion,\n                vmMode\n            }\n        };\n    }\n};\nfunction configParse12(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const wd = slice.loadDict(core_1.Dictionary.Keys.Uint(32), WorkchainDescriptorDictValue);\n    if (wd) {\n        return wd;\n    }\n    throw Error(\"No workchains exist\");\n}\nexports.configParse12 = configParse12;\nfunction configParseValidatorSet(slice) {\n    if (!slice) {\n        return null;\n    }\n    return parseValidatorSet(slice);\n}\nexports.configParseValidatorSet = configParseValidatorSet;\nfunction configParseBridge(slice) {\n    if (!slice) {\n        return null;\n    }\n    return parseBridge(slice);\n}\nexports.configParseBridge = configParseBridge;\nfunction parseGasLimitsInternal(slice) {\n    const tag = slice.loadUint(8);\n    if (tag === 0xde) {\n        const gasPrice = slice.loadUintBig(64);\n        const gasLimit = slice.loadUintBig(64);\n        const specialGasLimit = slice.loadUintBig(64);\n        const gasCredit = slice.loadUintBig(64);\n        const blockGasLimit = slice.loadUintBig(64);\n        const freezeDueLimit = slice.loadUintBig(64);\n        const deleteDueLimit = slice.loadUintBig(64);\n        return {\n            gasPrice,\n            gasLimit,\n            specialGasLimit,\n            gasCredit,\n            blockGasLimit,\n            freezeDueLimit,\n            deleteDueLimit\n        };\n    } else if (tag === 0xdd) {\n        const gasPrice = slice.loadUintBig(64);\n        const gasLimit = slice.loadUintBig(64);\n        const gasCredit = slice.loadUintBig(64);\n        const blockGasLimit = slice.loadUintBig(64);\n        const freezeDueLimit = slice.loadUintBig(64);\n        const deleteDueLimit = slice.loadUintBig(64);\n        return {\n            gasPrice,\n            gasLimit,\n            gasCredit,\n            blockGasLimit,\n            freezeDueLimit,\n            deleteDueLimit\n        };\n    } else {\n        throw Error(\"Invalid config\");\n    }\n}\nfunction configParseGasLimitsPrices(slice) {\n    if (!slice) {\n        throw Error(\"Invalid config\");\n    }\n    const tag = slice.loadUint(8);\n    if (tag === 0xd1) {\n        const flatLimit = slice.loadUintBig(64);\n        const flatGasPrice = slice.loadUintBig(64);\n        const other = parseGasLimitsInternal(slice);\n        return {\n            flatLimit,\n            flatGasPrice,\n            other\n        };\n    } else {\n        throw Error(\"Invalid config\");\n    }\n}\nexports.configParseGasLimitsPrices = configParseGasLimitsPrices;\nfunction configParseMsgPrices(slice) {\n    if (!slice) {\n        throw new Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic !== 0xea) {\n        throw new Error(\"Invalid msg prices param\");\n    }\n    return {\n        lumpPrice: slice.loadUintBig(64),\n        bitPrice: slice.loadUintBig(64),\n        cellPrice: slice.loadUintBig(64),\n        ihrPriceFactor: slice.loadUint(32),\n        firstFrac: slice.loadUint(16),\n        nextFrac: slice.loadUint(16)\n    };\n}\nexports.configParseMsgPrices = configParseMsgPrices;\n// catchain_config#c1 mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32 \n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\n// catchain_config_new#c2 flags:(## 7) { flags = 0 } shuffle_mc_validators:Bool\n//   mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32\n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\nfunction configParse28(slice) {\n    if (!slice) {\n        throw new Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0xc1) {\n        const masterCatchainLifetime = slice.loadUint(32);\n        const shardCatchainLifetime = slice.loadUint(32);\n        const shardValidatorsLifetime = slice.loadUint(32);\n        const shardValidatorsCount = slice.loadUint(32);\n        return {\n            masterCatchainLifetime,\n            shardCatchainLifetime,\n            shardValidatorsLifetime,\n            shardValidatorsCount\n        };\n    }\n    if (magic === 0xc2) {\n        const flags = slice.loadUint(7);\n        const suffleMasterValidators = slice.loadBit();\n        const masterCatchainLifetime = slice.loadUint(32);\n        const shardCatchainLifetime = slice.loadUint(32);\n        const shardValidatorsLifetime = slice.loadUint(32);\n        const shardValidatorsCount = slice.loadUint(32);\n        return {\n            flags,\n            suffleMasterValidators,\n            masterCatchainLifetime,\n            shardCatchainLifetime,\n            shardValidatorsLifetime,\n            shardValidatorsCount\n        };\n    }\n    throw new Error(\"Invalid config\");\n}\nexports.configParse28 = configParse28;\n// consensus_config#d6 round_candidates:# { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_new#d7 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_v3#d8 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 \n//   proto_version:uint16 = ConsensusConfig;\nfunction configParse29(slice) {\n    if (!slice) {\n        throw new Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0xd6) {\n        const roundCandidates = slice.loadUint(32);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        return {\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes\n        };\n    } else if (magic === 0xd7) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes\n        };\n    } else if (magic === 0xd8) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        const protoVersion = slice.loadUint(16);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes,\n            protoVersion\n        };\n    } else if (magic === 0xd9) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        const protoVersion = slice.loadUint(16);\n        const catchainMaxBlocksCoeff = slice.loadUint(32);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes,\n            protoVersion,\n            catchainMaxBlocksCoeff\n        };\n    }\n    throw new Error(\"Invalid config\");\n}\nexports.configParse29 = configParse29;\n// cfg_vote_cfg#36 min_tot_rounds:uint8 max_tot_rounds:uint8 min_wins:uint8 max_losses:uint8 min_store_sec:uint32 max_store_sec:uint32 bit_price:uint32 cell_price:uint32 = ConfigProposalSetup;\nfunction parseProposalSetup(slice) {\n    const magic = slice.loadUint(8);\n    if (magic !== 0x36) {\n        throw new Error(\"Invalid config\");\n    }\n    const minTotalRounds = slice.loadUint(8);\n    const maxTotalRounds = slice.loadUint(8);\n    const minWins = slice.loadUint(8);\n    const maxLoses = slice.loadUint(8);\n    const minStoreSec = slice.loadUint(32);\n    const maxStoreSec = slice.loadUint(32);\n    const bitPrice = slice.loadUint(32);\n    const cellPrice = slice.loadUint(32);\n    return {\n        minTotalRounds,\n        maxTotalRounds,\n        minWins,\n        maxLoses,\n        minStoreSec,\n        maxStoreSec,\n        bitPrice,\n        cellPrice\n    };\n}\nexports.parseProposalSetup = parseProposalSetup;\n// cfg_vote_setup#91 normal_params:^ConfigProposalSetup critical_params:^ConfigProposalSetup = ConfigVotingSetup;\nfunction parseVotingSetup(slice) {\n    if (!slice) {\n        throw new Error(\"Invalid config\");\n    }\n    const magic = slice.loadUint(8);\n    if (magic !== 0x91) {\n        throw new Error(\"Invalid config\");\n    }\n    const normalParams = parseProposalSetup(slice.loadRef().beginParse());\n    const criticalParams = parseProposalSetup(slice.loadRef().beginParse());\n    return {\n        normalParams,\n        criticalParams\n    };\n}\nexports.parseVotingSetup = parseVotingSetup;\nfunction loadConfigParams(configBase64) {\n    const comfigMap = core_1.Cell.fromBase64(configBase64).beginParse().loadDictDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell());\n    return comfigMap;\n}\nfunction loadConfigParamById(configBase64, id) {\n    return loadConfigParams(configBase64).get(id);\n}\nexports.loadConfigParamById = loadConfigParamById;\nfunction loadConfigParamsAsSlice(configBase64) {\n    const pramsAsCells = loadConfigParams(configBase64);\n    const params = new Map();\n    for (const [key, value] of pramsAsCells){\n        params.set(key, value.beginParse());\n    }\n    return params;\n}\nexports.loadConfigParamsAsSlice = loadConfigParamsAsSlice;\nfunction parseFullConfig(configs) {\n    return {\n        configAddress: configParseMasterAddressRequired(configs.get(0)),\n        electorAddress: configParseMasterAddressRequired(configs.get(1)),\n        minterAddress: configParseMasterAddress(configs.get(2)),\n        feeCollectorAddress: configParseMasterAddress(configs.get(3)),\n        dnsRootAddress: configParseMasterAddress(configs.get(4)),\n        burningConfig: configParse5(configs.get(5)),\n        globalVersion: configParse8(configs.get(8)),\n        workchains: configParse12(configs.get(12)),\n        voting: parseVotingSetup(configs.get(11)),\n        validators: {\n            ...configParse15(configs.get(15)),\n            ...configParse16(configs.get(16)),\n            ...configParse17(configs.get(17))\n        },\n        storagePrices: configParse18(configs.get(18)),\n        gasPrices: {\n            masterchain: configParseGasLimitsPrices(configs.get(20)),\n            workchain: configParseGasLimitsPrices(configs.get(21))\n        },\n        msgPrices: {\n            masterchain: configParseMsgPrices(configs.get(24)),\n            workchain: configParseMsgPrices(configs.get(25))\n        },\n        validatorSets: {\n            prevValidators: configParseValidatorSet(configs.get(32)),\n            prevTempValidators: configParseValidatorSet(configs.get(33)),\n            currentValidators: configParseValidatorSet(configs.get(34)),\n            currentTempValidators: configParseValidatorSet(configs.get(35)),\n            nextValidators: configParseValidatorSet(configs.get(36)),\n            nextTempValidators: configParseValidatorSet(configs.get(37))\n        },\n        validatorsPunish: configParse40(configs.get(40)),\n        bridges: {\n            ethereum: configParseBridge(configs.get(71)),\n            binance: configParseBridge(configs.get(72)),\n            polygon: configParseBridge(configs.get(73))\n        },\n        catchain: configParse28(configs.get(28)),\n        consensus: configParse29(configs.get(29))\n    };\n}\nexports.parseFullConfig = parseFullConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/config/ConfigParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/elector/ElectorContract.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/elector/ElectorContract.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ElectorContract = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst FrozenDictValue = {\n    serialize (src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse (src) {\n        const address = new core_1.Address(-1, src.loadBuffer(32));\n        const weight = src.loadUintBig(64);\n        const stake = src.loadCoins();\n        return {\n            address,\n            weight,\n            stake\n        };\n    }\n};\nconst EntitiesDictValue = {\n    serialize (src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse (src) {\n        const stake = src.loadCoins();\n        // skip time and maxFactor\n        src.skip(64);\n        const address = new core_1.Address(-1, src.loadBuffer(32));\n        const adnl = src.loadBuffer(32);\n        return {\n            stake,\n            address,\n            adnl\n        };\n    }\n};\nclass ElectorContract {\n    //readonly source: ContractSource = new UnknownContractSource('org.ton.elector', -1, 'Elector Contract');\n    static create() {\n        return new ElectorContract();\n    }\n    constructor(){\n        // Please note that we are NOT loading address from config to avoid mistake and send validator money to a wrong contract\n        this.address = core_1.Address.parseRaw(\"-1:3333333333333333333333333333333333333333333333333333333333333333\");\n    }\n    async getReturnedStake(provider, address) {\n        if (address.workChain !== -1) {\n            throw Error(\"Only masterchain addresses could have stake\");\n        }\n        const res = await provider.get(\"compute_returned_stake\", [\n            {\n                type: \"int\",\n                value: BigInt(\"0x\" + address.hash.toString(\"hex\"))\n            }\n        ]);\n        return res.stack.readBigNumber();\n    }\n    async getPastElectionsList(provider) {\n        const res = await provider.get(\"past_elections_list\", []);\n        const electionsListRaw = new core_1.TupleReader(res.stack.readLispList());\n        const elections = [];\n        while(electionsListRaw.remaining > 0){\n            const electionsListEntry = electionsListRaw.readTuple();\n            const id = electionsListEntry.readNumber();\n            const unfreezeAt = electionsListEntry.readNumber();\n            electionsListEntry.pop(); // Ignore vset_hash\n            const stakeHeld = electionsListEntry.readNumber();\n            elections.push({\n                id,\n                unfreezeAt,\n                stakeHeld\n            });\n        }\n        return elections;\n    }\n    async getPastElections(provider) {\n        const res = await provider.get(\"past_elections\", []);\n        const electionsRaw = new core_1.TupleReader(res.stack.readLispList());\n        const elections = [];\n        while(electionsRaw.remaining > 0){\n            const electionsEntry = electionsRaw.readTuple();\n            const id = electionsEntry.readNumber();\n            const unfreezeAt = electionsEntry.readNumber();\n            const stakeHeld = electionsEntry.readNumber();\n            electionsEntry.pop(); // Ignore vset_hash\n            const frozenDict = electionsEntry.readCell();\n            const totalStake = electionsEntry.readBigNumber();\n            const bonuses = electionsEntry.readBigNumber();\n            let frozen = new Map();\n            const frozenData = frozenDict.beginParse().loadDictDirect(core_1.Dictionary.Keys.Buffer(32), FrozenDictValue);\n            for (const [key, value] of frozenData){\n                frozen.set(BigInt(\"0x\" + key.toString(\"hex\")).toString(10), {\n                    address: value[\"address\"],\n                    weight: value[\"weight\"],\n                    stake: value[\"stake\"]\n                });\n            }\n            elections.push({\n                id,\n                unfreezeAt,\n                stakeHeld,\n                totalStake,\n                bonuses,\n                frozen\n            });\n        }\n        return elections;\n    }\n    async getElectionEntities(provider) {\n        //\n        // NOTE: this method doesn't call get method since for some reason it doesn't work\n        //\n        const account = await provider.getState();\n        if (account.state.type !== \"active\") {\n            throw Error(\"Unexpected error\");\n        }\n        const cell = core_1.Cell.fromBoc(account.state.data)[0];\n        const cs = cell.beginParse();\n        if (!cs.loadBit()) {\n            return null;\n        }\n        // (es~load_uint(32), es~load_uint(32), es~load_grams(), es~load_grams(), es~load_dict(), es~load_int(1), es~load_int(1));\n        const sc = cs.loadRef().beginParse();\n        const startWorkTime = sc.loadUint(32);\n        const endElectionsTime = sc.loadUint(32);\n        const minStake = sc.loadCoins();\n        const allStakes = sc.loadCoins();\n        // var (stake, time, max_factor, addr, adnl_addr) = (cs~load_grams(), cs~load_uint(32), cs~load_uint(32), cs~load_uint(256), cs~load_uint(256));\n        const entitiesData = sc.loadDict(core_1.Dictionary.Keys.Buffer(32), EntitiesDictValue);\n        let entities = [];\n        // const failed = sc.loadBit();\n        // const finished = sc.loadBit();\n        if (entitiesData) {\n            for (const [key, value] of entitiesData){\n                entities.push({\n                    pubkey: key,\n                    stake: value[\"stake\"],\n                    address: value[\"address\"],\n                    adnl: value[\"adnl\"]\n                });\n            }\n        }\n        return {\n            minStake,\n            allStakes,\n            endElectionsTime,\n            startWorkTime,\n            entities\n        };\n    }\n    // possible code for fetching data via get method if it is possible to set gas limit by request\n    // async getElectionEntities(block: number) {\n    //     const res = await this.client.runMethod(block, this.address, 'participant_list_extended');\n    //     if (res.exitCode !== 0 && res.exitCode !== 1) {\n    //         throw Error('Exit code: ' + res.exitCode);\n    //     }\n    //     let tuple = new TupleReader(res.result);\n    //     const startWorkTime = tuple.readNumber();\n    //     const endElectionsTime = tuple.readNumber();\n    //     const minStake = tuple.readBigNumber();\n    //     const allStakes = tuple.readBigNumber();\n    //     let entriesTuple = tuple.readTuple();\n    //     const entriesRaw = new TupleReader(entriesTuple.readLispList());\n    //     let entities: { pubkey: Buffer, stake: bigint, address: Address, adnl: Buffer }[] = [];\n    //     while (entriesRaw.remaining > 0) {\n    //         const electionsEntry = entriesRaw.readTuple();\n    //         const pubkey = electionsEntry.readBuffer();\n    //         const stake = electionsEntry.readBigNumber();\n    //         const address = electionsEntry.readAddress();\n    //         const adnl = electionsEntry.readBuffer();\n    //         entities.push({ pubkey, stake, address, adnl });\n    //     }\n    //     return { minStake, allStakes, endElectionsTime, startWorkTime, entities };\n    // }\n    async getActiveElectionId(provider) {\n        const res = await provider.get(\"active_election_id\", []);\n        const electionId = res.stack.readNumber();\n        return electionId > 0 ? electionId : null;\n    }\n    async getComplaints(provider, electionId) {\n        const b = new core_1.TupleBuilder();\n        b.writeNumber(electionId);\n        const res = await provider.get(\"list_complaints\", b.build());\n        if (res.stack.peek().type === \"null\") {\n            return [];\n        }\n        //let tuple = new TupleReader(res.result);\n        const complaintsRaw = new core_1.TupleReader(res.stack.readLispList());\n        const results = [];\n        while(complaintsRaw.remaining > 0){\n            const complaintsEntry = complaintsRaw.readTuple();\n            const id = complaintsEntry.readBigNumber();\n            const completeUnpackedComplaint = complaintsEntry.readTuple();\n            const unpackedComplaints = completeUnpackedComplaint.readTuple();\n            const publicKey = Buffer.from(unpackedComplaints.readBigNumber().toString(16), \"hex\");\n            // prod_info#34 utime:uint32 mc_blk_ref:ExtBlkRef state_proof:^(MERKLE_PROOF Block)\n            // prod_proof:^(MERKLE_PROOF ShardState) = ProducerInfo;\n            // no_blk_gen from_utime:uint32 prod_info:^ProducerInfo = ComplaintDescr;\n            // no_blk_gen_diff prod_info_old:^ProducerInfo prod_info_new:^ProducerInfo = ComplaintDescr;\n            const description = unpackedComplaints.readCell();\n            const createdAt = unpackedComplaints.readNumber();\n            const severity = unpackedComplaints.readNumber();\n            const rewardAddress = new core_1.Address(-1, Buffer.from(unpackedComplaints.readBigNumber().toString(16), \"hex\"));\n            const paid = unpackedComplaints.readBigNumber();\n            const suggestedFine = unpackedComplaints.readBigNumber();\n            const suggestedFinePart = unpackedComplaints.readBigNumber();\n            const votes = [];\n            const votersListRaw = new core_1.TupleReader(completeUnpackedComplaint.readLispList());\n            while(votersListRaw.remaining > 0){\n                votes.push(votersListRaw.readNumber());\n            }\n            const vsetId = completeUnpackedComplaint.readBigNumber();\n            const remainingWeight = completeUnpackedComplaint.readBigNumber();\n            results.push({\n                id,\n                publicKey,\n                createdAt,\n                severity,\n                paid,\n                suggestedFine,\n                suggestedFinePart,\n                rewardAddress,\n                votes,\n                remainingWeight,\n                vsetId\n            });\n        }\n        return results;\n    }\n}\nexports.ElectorContract = ElectorContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/elector/ElectorContract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@ton/ton/dist/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.computeStorageFees = exports.computeMessageForwardFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeExternalMessageFees = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseFullConfig = exports.parseVotingSetup = exports.parseValidatorSet = exports.parseProposalSetup = exports.parseBridge = exports.configParseWorkchainDescriptor = exports.configParseValidatorSet = exports.configParseMsgPrices = exports.configParseMasterAddressRequired = exports.configParseMasterAddress = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParse40 = exports.configParse29 = exports.configParse28 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse12 = exports.configParse8 = exports.configParse5 = exports.ElectorContract = exports.MultisigWallet = exports.MultisigOrderBuilder = exports.MultisigOrder = exports.JettonWallet = exports.JettonMaster = exports.WalletContractV4 = exports.WalletContractV3R2 = exports.WalletContractV3R1 = exports.WalletContractV2R2 = exports.WalletContractV2R1 = exports.WalletContractV1R3 = exports.WalletContractV1R2 = exports.WalletContractV1R1 = exports.TonClient4 = exports.TonClient = exports.HttpApi = void 0;\n__exportStar(__webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\"), exports);\n//\n// toncenter Client\n//\nvar HttpApi_1 = __webpack_require__(/*! ./client/api/HttpApi */ \"(ssr)/./node_modules/@ton/ton/dist/client/api/HttpApi.js\");\nObject.defineProperty(exports, \"HttpApi\", ({\n    enumerable: true,\n    get: function() {\n        return HttpApi_1.HttpApi;\n    }\n}));\nvar TonClient_1 = __webpack_require__(/*! ./client/TonClient */ \"(ssr)/./node_modules/@ton/ton/dist/client/TonClient.js\");\nObject.defineProperty(exports, \"TonClient\", ({\n    enumerable: true,\n    get: function() {\n        return TonClient_1.TonClient;\n    }\n}));\n//\n// API V4 Client\n//\nvar TonClient4_1 = __webpack_require__(/*! ./client/TonClient4 */ \"(ssr)/./node_modules/@ton/ton/dist/client/TonClient4.js\");\nObject.defineProperty(exports, \"TonClient4\", ({\n    enumerable: true,\n    get: function() {\n        return TonClient4_1.TonClient4;\n    }\n}));\n//\n// Wallets\n//\nvar WalletContractV1R1_1 = __webpack_require__(/*! ./wallets/WalletContractV1R1 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R1.js\");\nObject.defineProperty(exports, \"WalletContractV1R1\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV1R1_1.WalletContractV1R1;\n    }\n}));\nvar WalletContractV1R2_1 = __webpack_require__(/*! ./wallets/WalletContractV1R2 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R2.js\");\nObject.defineProperty(exports, \"WalletContractV1R2\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV1R2_1.WalletContractV1R2;\n    }\n}));\nvar WalletContractV1R3_1 = __webpack_require__(/*! ./wallets/WalletContractV1R3 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R3.js\");\nObject.defineProperty(exports, \"WalletContractV1R3\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV1R3_1.WalletContractV1R3;\n    }\n}));\nvar WalletContractV2R1_1 = __webpack_require__(/*! ./wallets/WalletContractV2R1 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R1.js\");\nObject.defineProperty(exports, \"WalletContractV2R1\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV2R1_1.WalletContractV2R1;\n    }\n}));\nvar WalletContractV2R2_1 = __webpack_require__(/*! ./wallets/WalletContractV2R2 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R2.js\");\nObject.defineProperty(exports, \"WalletContractV2R2\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV2R2_1.WalletContractV2R2;\n    }\n}));\nvar WalletContractV3R1_1 = __webpack_require__(/*! ./wallets/WalletContractV3R1 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R1.js\");\nObject.defineProperty(exports, \"WalletContractV3R1\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV3R1_1.WalletContractV3R1;\n    }\n}));\nvar WalletContractV3R2_1 = __webpack_require__(/*! ./wallets/WalletContractV3R2 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R2.js\");\nObject.defineProperty(exports, \"WalletContractV3R2\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV3R2_1.WalletContractV3R2;\n    }\n}));\nvar WalletContractV4_1 = __webpack_require__(/*! ./wallets/WalletContractV4 */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV4.js\");\nObject.defineProperty(exports, \"WalletContractV4\", ({\n    enumerable: true,\n    get: function() {\n        return WalletContractV4_1.WalletContractV4;\n    }\n}));\n//\n// Jettons\n//\nvar JettonMaster_1 = __webpack_require__(/*! ./jetton/JettonMaster */ \"(ssr)/./node_modules/@ton/ton/dist/jetton/JettonMaster.js\");\nObject.defineProperty(exports, \"JettonMaster\", ({\n    enumerable: true,\n    get: function() {\n        return JettonMaster_1.JettonMaster;\n    }\n}));\nvar JettonWallet_1 = __webpack_require__(/*! ./jetton/JettonWallet */ \"(ssr)/./node_modules/@ton/ton/dist/jetton/JettonWallet.js\");\nObject.defineProperty(exports, \"JettonWallet\", ({\n    enumerable: true,\n    get: function() {\n        return JettonWallet_1.JettonWallet;\n    }\n}));\n//\n// Multisig\n//\nvar MultisigOrder_1 = __webpack_require__(/*! ./multisig/MultisigOrder */ \"(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrder.js\");\nObject.defineProperty(exports, \"MultisigOrder\", ({\n    enumerable: true,\n    get: function() {\n        return MultisigOrder_1.MultisigOrder;\n    }\n}));\nvar MultisigOrderBuilder_1 = __webpack_require__(/*! ./multisig/MultisigOrderBuilder */ \"(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrderBuilder.js\");\nObject.defineProperty(exports, \"MultisigOrderBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return MultisigOrderBuilder_1.MultisigOrderBuilder;\n    }\n}));\nvar MultisigWallet_1 = __webpack_require__(/*! ./multisig/MultisigWallet */ \"(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigWallet.js\");\nObject.defineProperty(exports, \"MultisigWallet\", ({\n    enumerable: true,\n    get: function() {\n        return MultisigWallet_1.MultisigWallet;\n    }\n}));\n//\n// Elector\n//\nvar ElectorContract_1 = __webpack_require__(/*! ./elector/ElectorContract */ \"(ssr)/./node_modules/@ton/ton/dist/elector/ElectorContract.js\");\nObject.defineProperty(exports, \"ElectorContract\", ({\n    enumerable: true,\n    get: function() {\n        return ElectorContract_1.ElectorContract;\n    }\n}));\n//\n// Config\n//\nvar ConfigParser_1 = __webpack_require__(/*! ./config/ConfigParser */ \"(ssr)/./node_modules/@ton/ton/dist/config/ConfigParser.js\");\nObject.defineProperty(exports, \"configParse5\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse5;\n    }\n}));\nObject.defineProperty(exports, \"configParse8\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse8;\n    }\n}));\nObject.defineProperty(exports, \"configParse12\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse12;\n    }\n}));\nObject.defineProperty(exports, \"configParse13\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse13;\n    }\n}));\nObject.defineProperty(exports, \"configParse15\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse15;\n    }\n}));\nObject.defineProperty(exports, \"configParse16\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse16;\n    }\n}));\nObject.defineProperty(exports, \"configParse17\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse17;\n    }\n}));\nObject.defineProperty(exports, \"configParse18\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse18;\n    }\n}));\nObject.defineProperty(exports, \"configParse28\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse28;\n    }\n}));\nObject.defineProperty(exports, \"configParse29\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse29;\n    }\n}));\nObject.defineProperty(exports, \"configParse40\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParse40;\n    }\n}));\nObject.defineProperty(exports, \"configParseBridge\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseBridge;\n    }\n}));\nObject.defineProperty(exports, \"configParseGasLimitsPrices\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseGasLimitsPrices;\n    }\n}));\nObject.defineProperty(exports, \"configParseMasterAddress\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseMasterAddress;\n    }\n}));\nObject.defineProperty(exports, \"configParseMasterAddressRequired\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseMasterAddressRequired;\n    }\n}));\nObject.defineProperty(exports, \"configParseMsgPrices\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseMsgPrices;\n    }\n}));\nObject.defineProperty(exports, \"configParseValidatorSet\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseValidatorSet;\n    }\n}));\nObject.defineProperty(exports, \"configParseWorkchainDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.configParseWorkchainDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"parseBridge\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.parseBridge;\n    }\n}));\nObject.defineProperty(exports, \"parseProposalSetup\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.parseProposalSetup;\n    }\n}));\nObject.defineProperty(exports, \"parseValidatorSet\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.parseValidatorSet;\n    }\n}));\nObject.defineProperty(exports, \"parseVotingSetup\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.parseVotingSetup;\n    }\n}));\nObject.defineProperty(exports, \"parseFullConfig\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.parseFullConfig;\n    }\n}));\nObject.defineProperty(exports, \"loadConfigParamById\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.loadConfigParamById;\n    }\n}));\nObject.defineProperty(exports, \"loadConfigParamsAsSlice\", ({\n    enumerable: true,\n    get: function() {\n        return ConfigParser_1.loadConfigParamsAsSlice;\n    }\n}));\n//\n// Fees\n//\nvar fees_1 = __webpack_require__(/*! ./utils/fees */ \"(ssr)/./node_modules/@ton/ton/dist/utils/fees.js\");\nObject.defineProperty(exports, \"computeExternalMessageFees\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.computeExternalMessageFees;\n    }\n}));\nObject.defineProperty(exports, \"computeFwdFees\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.computeFwdFees;\n    }\n}));\nObject.defineProperty(exports, \"computeGasPrices\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.computeGasPrices;\n    }\n}));\nObject.defineProperty(exports, \"computeMessageForwardFees\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.computeMessageForwardFees;\n    }\n}));\nObject.defineProperty(exports, \"computeStorageFees\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.computeStorageFees;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/jetton/JettonMaster.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/jetton/JettonMaster.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JettonMaster = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nclass JettonMaster {\n    static create(address) {\n        return new JettonMaster(address);\n    }\n    constructor(address){\n        this.address = address;\n    }\n    async getWalletAddress(provider, owner) {\n        let res = await provider.get(\"get_wallet_address\", [\n            {\n                type: \"slice\",\n                cell: (0, core_1.beginCell)().storeAddress(owner).endCell()\n            }\n        ]);\n        return res.stack.readAddress();\n    }\n    async getJettonData(provider) {\n        let res = await provider.get(\"get_jetton_data\", []);\n        let totalSupply = res.stack.readBigNumber();\n        let mintable = res.stack.readBoolean();\n        let adminAddress = res.stack.readAddress();\n        let content = res.stack.readCell();\n        let walletCode = res.stack.readCell();\n        return {\n            totalSupply,\n            mintable,\n            adminAddress,\n            content,\n            walletCode\n        };\n    }\n}\nexports.JettonMaster = JettonMaster;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9qZXR0b24vSmV0dG9uTWFzdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLCtEQUFXO0FBQ2xDLE1BQU1GO0lBQ0YsT0FBT0csT0FBT0MsT0FBTyxFQUFFO1FBQ25CLE9BQU8sSUFBSUosYUFBYUk7SUFDNUI7SUFDQUMsWUFBWUQsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBLE1BQU1FLGlCQUFpQkMsUUFBUSxFQUFFQyxLQUFLLEVBQUU7UUFDcEMsSUFBSUMsTUFBTSxNQUFNRixTQUFTRyxHQUFHLENBQUMsc0JBQXNCO1lBQUM7Z0JBQUVDLE1BQU07Z0JBQVNDLE1BQU0sQ0FBQyxHQUFHWCxPQUFPWSxTQUFTLElBQUlDLFlBQVksQ0FBQ04sT0FBT08sT0FBTztZQUFHO1NBQUU7UUFDbkksT0FBT04sSUFBSU8sS0FBSyxDQUFDQyxXQUFXO0lBQ2hDO0lBQ0EsTUFBTUMsY0FBY1gsUUFBUSxFQUFFO1FBQzFCLElBQUlFLE1BQU0sTUFBTUYsU0FBU0csR0FBRyxDQUFDLG1CQUFtQixFQUFFO1FBQ2xELElBQUlTLGNBQWNWLElBQUlPLEtBQUssQ0FBQ0ksYUFBYTtRQUN6QyxJQUFJQyxXQUFXWixJQUFJTyxLQUFLLENBQUNNLFdBQVc7UUFDcEMsSUFBSUMsZUFBZWQsSUFBSU8sS0FBSyxDQUFDQyxXQUFXO1FBQ3hDLElBQUlPLFVBQVVmLElBQUlPLEtBQUssQ0FBQ1MsUUFBUTtRQUNoQyxJQUFJQyxhQUFhakIsSUFBSU8sS0FBSyxDQUFDUyxRQUFRO1FBQ25DLE9BQU87WUFDSE47WUFDQUU7WUFDQUU7WUFDQUM7WUFDQUU7UUFDSjtJQUNKO0FBQ0o7QUFDQTVCLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9qZXR0b24vSmV0dG9uTWFzdGVyLmpzPzYzZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkpldHRvbk1hc3RlciA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJAdG9uL2NvcmVcIik7XG5jbGFzcyBKZXR0b25NYXN0ZXIge1xuICAgIHN0YXRpYyBjcmVhdGUoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gbmV3IEpldHRvbk1hc3RlcihhZGRyZXNzKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWRkcmVzcykge1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbiAgICBhc3luYyBnZXRXYWxsZXRBZGRyZXNzKHByb3ZpZGVyLCBvd25lcikge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcHJvdmlkZXIuZ2V0KCdnZXRfd2FsbGV0X2FkZHJlc3MnLCBbeyB0eXBlOiAnc2xpY2UnLCBjZWxsOiAoMCwgY29yZV8xLmJlZ2luQ2VsbCkoKS5zdG9yZUFkZHJlc3Mob3duZXIpLmVuZENlbGwoKSB9XSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhY2sucmVhZEFkZHJlc3MoKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0SmV0dG9uRGF0YShwcm92aWRlcikge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcHJvdmlkZXIuZ2V0KCdnZXRfamV0dG9uX2RhdGEnLCBbXSk7XG4gICAgICAgIGxldCB0b3RhbFN1cHBseSA9IHJlcy5zdGFjay5yZWFkQmlnTnVtYmVyKCk7XG4gICAgICAgIGxldCBtaW50YWJsZSA9IHJlcy5zdGFjay5yZWFkQm9vbGVhbigpO1xuICAgICAgICBsZXQgYWRtaW5BZGRyZXNzID0gcmVzLnN0YWNrLnJlYWRBZGRyZXNzKCk7XG4gICAgICAgIGxldCBjb250ZW50ID0gcmVzLnN0YWNrLnJlYWRDZWxsKCk7XG4gICAgICAgIGxldCB3YWxsZXRDb2RlID0gcmVzLnN0YWNrLnJlYWRDZWxsKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3RhbFN1cHBseSxcbiAgICAgICAgICAgIG1pbnRhYmxlLFxuICAgICAgICAgICAgYWRtaW5BZGRyZXNzLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHdhbGxldENvZGVcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkpldHRvbk1hc3RlciA9IEpldHRvbk1hc3RlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkpldHRvbk1hc3RlciIsImNvcmVfMSIsInJlcXVpcmUiLCJjcmVhdGUiLCJhZGRyZXNzIiwiY29uc3RydWN0b3IiLCJnZXRXYWxsZXRBZGRyZXNzIiwicHJvdmlkZXIiLCJvd25lciIsInJlcyIsImdldCIsInR5cGUiLCJjZWxsIiwiYmVnaW5DZWxsIiwic3RvcmVBZGRyZXNzIiwiZW5kQ2VsbCIsInN0YWNrIiwicmVhZEFkZHJlc3MiLCJnZXRKZXR0b25EYXRhIiwidG90YWxTdXBwbHkiLCJyZWFkQmlnTnVtYmVyIiwibWludGFibGUiLCJyZWFkQm9vbGVhbiIsImFkbWluQWRkcmVzcyIsImNvbnRlbnQiLCJyZWFkQ2VsbCIsIndhbGxldENvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/jetton/JettonMaster.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/jetton/JettonWallet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/ton/dist/jetton/JettonWallet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JettonWallet = void 0;\nclass JettonWallet {\n    static create(address) {\n        return new JettonWallet(address);\n    }\n    constructor(address){\n        this.address = address;\n    }\n    async getBalance(provider) {\n        let state = await provider.getState();\n        if (state.state.type !== \"active\") {\n            return 0n;\n        }\n        let res = await provider.get(\"get_wallet_data\", []);\n        return res.stack.readBigNumber();\n    }\n}\nexports.JettonWallet = JettonWallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9qZXR0b24vSmV0dG9uV2FsbGV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1FO0lBQ0YsT0FBT0MsT0FBT0MsT0FBTyxFQUFFO1FBQ25CLE9BQU8sSUFBSUYsYUFBYUU7SUFDNUI7SUFDQUMsWUFBWUQsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBLE1BQU1FLFdBQVdDLFFBQVEsRUFBRTtRQUN2QixJQUFJQyxRQUFRLE1BQU1ELFNBQVNFLFFBQVE7UUFDbkMsSUFBSUQsTUFBTUEsS0FBSyxDQUFDRSxJQUFJLEtBQUssVUFBVTtZQUMvQixPQUFPLEVBQUU7UUFDYjtRQUNBLElBQUlDLE1BQU0sTUFBTUosU0FBU0ssR0FBRyxDQUFDLG1CQUFtQixFQUFFO1FBQ2xELE9BQU9ELElBQUlFLEtBQUssQ0FBQ0MsYUFBYTtJQUNsQztBQUNKO0FBQ0FkLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9qZXR0b24vSmV0dG9uV2FsbGV0LmpzPzYzYTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgV2hhbGVzIENvcnAuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkpldHRvbldhbGxldCA9IHZvaWQgMDtcbmNsYXNzIEpldHRvbldhbGxldCB7XG4gICAgc3RhdGljIGNyZWF0ZShhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcgSmV0dG9uV2FsbGV0KGFkZHJlc3MpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzKSB7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxuICAgIGFzeW5jIGdldEJhbGFuY2UocHJvdmlkZXIpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gYXdhaXQgcHJvdmlkZXIuZ2V0U3RhdGUoKTtcbiAgICAgICAgaWYgKHN0YXRlLnN0YXRlLnR5cGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gMG47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHByb3ZpZGVyLmdldCgnZ2V0X3dhbGxldF9kYXRhJywgW10pO1xuICAgICAgICByZXR1cm4gcmVzLnN0YWNrLnJlYWRCaWdOdW1iZXIoKTtcbiAgICB9XG59XG5leHBvcnRzLkpldHRvbldhbGxldCA9IEpldHRvbldhbGxldDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkpldHRvbldhbGxldCIsImNyZWF0ZSIsImFkZHJlc3MiLCJjb25zdHJ1Y3RvciIsImdldEJhbGFuY2UiLCJwcm92aWRlciIsInN0YXRlIiwiZ2V0U3RhdGUiLCJ0eXBlIiwicmVzIiwiZ2V0Iiwic3RhY2siLCJyZWFkQmlnTnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/jetton/JettonWallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrder.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/multisig/MultisigOrder.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Made by @Gusarich and @Miandic */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MultisigOrder = void 0;\nconst crypto_1 = __webpack_require__(/*! @ton/crypto */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nclass MultisigOrder {\n    constructor(payload){\n        this.signatures = {};\n        this.payload = payload;\n    }\n    static fromCell(cell) {\n        let s = cell.beginParse();\n        let signatures = s.loadMaybeRef()?.beginParse();\n        const messagesCell = s.asCell();\n        let order = new MultisigOrder(messagesCell);\n        if (signatures) {\n            while(signatures.remainingBits > 0){\n                const signature = signatures.loadBuffer(64);\n                const ownerId = signatures.loadUint(8);\n                order.signatures[ownerId] = signature;\n                if (signatures.remainingRefs > 0) {\n                    signatures = signatures.loadRef().asSlice();\n                } else {\n                    signatures.skip(1);\n                }\n            }\n            signatures.endParse();\n        }\n        return order;\n    }\n    static fromPayload(payload) {\n        return new MultisigOrder(payload);\n    }\n    addSignature(ownerId, signature, multisig) {\n        const signingHash = this.payload.hash();\n        if (!(0, crypto_1.signVerify)(signingHash, signature, multisig.owners.get(ownerId).slice(0, -1))) {\n            throw Error(\"invalid signature\");\n        }\n        this.signatures[ownerId] = signature;\n    }\n    sign(ownerId, secretKey) {\n        const signingHash = this.payload.hash();\n        this.signatures[ownerId] = (0, crypto_1.sign)(signingHash, secretKey);\n        return signingHash;\n    }\n    unionSignatures(other) {\n        this.signatures = Object.assign({}, this.signatures, other.signatures);\n    }\n    clearSignatures() {\n        this.signatures = {};\n    }\n    toCell(ownerId) {\n        let b = (0, core_1.beginCell)().storeBit(0);\n        for(const ownerId in this.signatures){\n            const signature = this.signatures[ownerId];\n            b = (0, core_1.beginCell)().storeBit(1).storeRef((0, core_1.beginCell)().storeBuffer(signature).storeUint(parseInt(ownerId), 8).storeBuilder(b).endCell());\n        }\n        return (0, core_1.beginCell)().storeUint(ownerId, 8).storeBuilder(b).storeBuilder(this.payload.asBuilder()).endCell();\n    }\n}\nexports.MultisigOrder = MultisigOrder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9tdWx0aXNpZy9NdWx0aXNpZ09yZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0NBQWtDLEdBQ2xDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxXQUFXQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUN0QyxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQywrREFBVztBQUNsQyxNQUFNRjtJQUNGSSxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNELE9BQU8sR0FBR0E7SUFDbkI7SUFDQSxPQUFPRSxTQUFTQyxJQUFJLEVBQUU7UUFDbEIsSUFBSUMsSUFBSUQsS0FBS0UsVUFBVTtRQUN2QixJQUFJSixhQUFhRyxFQUFFRSxZQUFZLElBQUlEO1FBQ25DLE1BQU1FLGVBQWVILEVBQUVJLE1BQU07UUFDN0IsSUFBSUMsUUFBUSxJQUFJZCxjQUFjWTtRQUM5QixJQUFJTixZQUFZO1lBQ1osTUFBT0EsV0FBV1MsYUFBYSxHQUFHLEVBQUc7Z0JBQ2pDLE1BQU1DLFlBQVlWLFdBQVdXLFVBQVUsQ0FBQztnQkFDeEMsTUFBTUMsVUFBVVosV0FBV2EsUUFBUSxDQUFDO2dCQUNwQ0wsTUFBTVIsVUFBVSxDQUFDWSxRQUFRLEdBQUdGO2dCQUM1QixJQUFJVixXQUFXYyxhQUFhLEdBQUcsR0FBRztvQkFDOUJkLGFBQWFBLFdBQVdlLE9BQU8sR0FBR0MsT0FBTztnQkFDN0MsT0FDSztvQkFDRGhCLFdBQVdpQixJQUFJLENBQUM7Z0JBQ3BCO1lBQ0o7WUFDQWpCLFdBQVdrQixRQUFRO1FBQ3ZCO1FBQ0EsT0FBT1Y7SUFDWDtJQUNBLE9BQU9XLFlBQVlwQixPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJTCxjQUFjSztJQUM3QjtJQUNBcUIsYUFBYVIsT0FBTyxFQUFFRixTQUFTLEVBQUVXLFFBQVEsRUFBRTtRQUN2QyxNQUFNQyxjQUFjLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQ3dCLElBQUk7UUFDckMsSUFBSSxDQUFDLENBQUMsR0FBRzVCLFNBQVM2QixVQUFVLEVBQUVGLGFBQWFaLFdBQVdXLFNBQVNJLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDZCxTQUFTZSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDOUYsTUFBTUMsTUFBTTtRQUNoQjtRQUNBLElBQUksQ0FBQzVCLFVBQVUsQ0FBQ1ksUUFBUSxHQUFHRjtJQUMvQjtJQUNBbUIsS0FBS2pCLE9BQU8sRUFBRWtCLFNBQVMsRUFBRTtRQUNyQixNQUFNUixjQUFjLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQ3dCLElBQUk7UUFDckMsSUFBSSxDQUFDdkIsVUFBVSxDQUFDWSxRQUFRLEdBQUcsQ0FBQyxHQUFHakIsU0FBU2tDLElBQUksRUFBRVAsYUFBYVE7UUFDM0QsT0FBT1I7SUFDWDtJQUNBUyxnQkFBZ0JDLEtBQUssRUFBRTtRQUNuQixJQUFJLENBQUNoQyxVQUFVLEdBQUdWLE9BQU8yQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2pDLFVBQVUsRUFBRWdDLE1BQU1oQyxVQUFVO0lBQ3pFO0lBQ0FrQyxrQkFBa0I7UUFDZCxJQUFJLENBQUNsQyxVQUFVLEdBQUcsQ0FBQztJQUN2QjtJQUNBbUMsT0FBT3ZCLE9BQU8sRUFBRTtRQUNaLElBQUl3QixJQUFJLENBQUMsR0FBR3ZDLE9BQU93QyxTQUFTLElBQUlDLFFBQVEsQ0FBQztRQUN6QyxJQUFLLE1BQU0xQixXQUFXLElBQUksQ0FBQ1osVUFBVSxDQUFFO1lBQ25DLE1BQU1VLFlBQVksSUFBSSxDQUFDVixVQUFVLENBQUNZLFFBQVE7WUFDMUN3QixJQUFJLENBQUMsR0FBR3ZDLE9BQU93QyxTQUFTLElBQ25CQyxRQUFRLENBQUMsR0FDVEMsUUFBUSxDQUFDLENBQUMsR0FBRzFDLE9BQU93QyxTQUFTLElBQzdCRyxXQUFXLENBQUM5QixXQUNaK0IsU0FBUyxDQUFDQyxTQUFTOUIsVUFBVSxHQUM3QitCLFlBQVksQ0FBQ1AsR0FDYlEsT0FBTztRQUNoQjtRQUNBLE9BQU8sQ0FBQyxHQUFHL0MsT0FBT3dDLFNBQVMsSUFDdEJJLFNBQVMsQ0FBQzdCLFNBQVMsR0FDbkIrQixZQUFZLENBQUNQLEdBQ2JPLFlBQVksQ0FBQyxJQUFJLENBQUM1QyxPQUFPLENBQUM4QyxTQUFTLElBQ25DRCxPQUFPO0lBQ2hCO0FBQ0o7QUFDQXBELHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9tdWx0aXNpZy9NdWx0aXNpZ09yZGVyLmpzP2QwZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBNYWRlIGJ5IEBHdXNhcmljaCBhbmQgQE1pYW5kaWMgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXVsdGlzaWdPcmRlciA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkB0b24vY3J5cHRvXCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIkB0b24vY29yZVwiKTtcbmNsYXNzIE11bHRpc2lnT3JkZXIge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5zaWduYXR1cmVzID0ge307XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQ2VsbChjZWxsKSB7XG4gICAgICAgIGxldCBzID0gY2VsbC5iZWdpblBhcnNlKCk7XG4gICAgICAgIGxldCBzaWduYXR1cmVzID0gcy5sb2FkTWF5YmVSZWYoKT8uYmVnaW5QYXJzZSgpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NlbGwgPSBzLmFzQ2VsbCgpO1xuICAgICAgICBsZXQgb3JkZXIgPSBuZXcgTXVsdGlzaWdPcmRlcihtZXNzYWdlc0NlbGwpO1xuICAgICAgICBpZiAoc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgd2hpbGUgKHNpZ25hdHVyZXMucmVtYWluaW5nQml0cyA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBzaWduYXR1cmVzLmxvYWRCdWZmZXIoNjQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG93bmVySWQgPSBzaWduYXR1cmVzLmxvYWRVaW50KDgpO1xuICAgICAgICAgICAgICAgIG9yZGVyLnNpZ25hdHVyZXNbb3duZXJJZF0gPSBzaWduYXR1cmU7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25hdHVyZXMucmVtYWluaW5nUmVmcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlcyA9IHNpZ25hdHVyZXMubG9hZFJlZigpLmFzU2xpY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZXMuc2tpcCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWduYXR1cmVzLmVuZFBhcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yZGVyO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVBheWxvYWQocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gbmV3IE11bHRpc2lnT3JkZXIocGF5bG9hZCk7XG4gICAgfVxuICAgIGFkZFNpZ25hdHVyZShvd25lcklkLCBzaWduYXR1cmUsIG11bHRpc2lnKSB7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdIYXNoID0gdGhpcy5wYXlsb2FkLmhhc2goKTtcbiAgICAgICAgaWYgKCEoMCwgY3J5cHRvXzEuc2lnblZlcmlmeSkoc2lnbmluZ0hhc2gsIHNpZ25hdHVyZSwgbXVsdGlzaWcub3duZXJzLmdldChvd25lcklkKS5zbGljZSgwLCAtMSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignaW52YWxpZCBzaWduYXR1cmUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNpZ25hdHVyZXNbb3duZXJJZF0gPSBzaWduYXR1cmU7XG4gICAgfVxuICAgIHNpZ24ob3duZXJJZCwgc2VjcmV0S2V5KSB7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdIYXNoID0gdGhpcy5wYXlsb2FkLmhhc2goKTtcbiAgICAgICAgdGhpcy5zaWduYXR1cmVzW293bmVySWRdID0gKDAsIGNyeXB0b18xLnNpZ24pKHNpZ25pbmdIYXNoLCBzZWNyZXRLZXkpO1xuICAgICAgICByZXR1cm4gc2lnbmluZ0hhc2g7XG4gICAgfVxuICAgIHVuaW9uU2lnbmF0dXJlcyhvdGhlcikge1xuICAgICAgICB0aGlzLnNpZ25hdHVyZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnNpZ25hdHVyZXMsIG90aGVyLnNpZ25hdHVyZXMpO1xuICAgIH1cbiAgICBjbGVhclNpZ25hdHVyZXMoKSB7XG4gICAgICAgIHRoaXMuc2lnbmF0dXJlcyA9IHt9O1xuICAgIH1cbiAgICB0b0NlbGwob3duZXJJZCkge1xuICAgICAgICBsZXQgYiA9ICgwLCBjb3JlXzEuYmVnaW5DZWxsKSgpLnN0b3JlQml0KDApO1xuICAgICAgICBmb3IgKGNvbnN0IG93bmVySWQgaW4gdGhpcy5zaWduYXR1cmVzKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0aGlzLnNpZ25hdHVyZXNbb3duZXJJZF07XG4gICAgICAgICAgICBiID0gKDAsIGNvcmVfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgICAgICAgICAuc3RvcmVCaXQoMSlcbiAgICAgICAgICAgICAgICAuc3RvcmVSZWYoKDAsIGNvcmVfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgICAgICAgICAuc3RvcmVCdWZmZXIoc2lnbmF0dXJlKVxuICAgICAgICAgICAgICAgIC5zdG9yZVVpbnQocGFyc2VJbnQob3duZXJJZCksIDgpXG4gICAgICAgICAgICAgICAgLnN0b3JlQnVpbGRlcihiKVxuICAgICAgICAgICAgICAgIC5lbmRDZWxsKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgY29yZV8xLmJlZ2luQ2VsbCkoKVxuICAgICAgICAgICAgLnN0b3JlVWludChvd25lcklkLCA4KVxuICAgICAgICAgICAgLnN0b3JlQnVpbGRlcihiKVxuICAgICAgICAgICAgLnN0b3JlQnVpbGRlcih0aGlzLnBheWxvYWQuYXNCdWlsZGVyKCkpXG4gICAgICAgICAgICAuZW5kQ2VsbCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTXVsdGlzaWdPcmRlciA9IE11bHRpc2lnT3JkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNdWx0aXNpZ09yZGVyIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiY29yZV8xIiwiY29uc3RydWN0b3IiLCJwYXlsb2FkIiwic2lnbmF0dXJlcyIsImZyb21DZWxsIiwiY2VsbCIsInMiLCJiZWdpblBhcnNlIiwibG9hZE1heWJlUmVmIiwibWVzc2FnZXNDZWxsIiwiYXNDZWxsIiwib3JkZXIiLCJyZW1haW5pbmdCaXRzIiwic2lnbmF0dXJlIiwibG9hZEJ1ZmZlciIsIm93bmVySWQiLCJsb2FkVWludCIsInJlbWFpbmluZ1JlZnMiLCJsb2FkUmVmIiwiYXNTbGljZSIsInNraXAiLCJlbmRQYXJzZSIsImZyb21QYXlsb2FkIiwiYWRkU2lnbmF0dXJlIiwibXVsdGlzaWciLCJzaWduaW5nSGFzaCIsImhhc2giLCJzaWduVmVyaWZ5Iiwib3duZXJzIiwiZ2V0Iiwic2xpY2UiLCJFcnJvciIsInNpZ24iLCJzZWNyZXRLZXkiLCJ1bmlvblNpZ25hdHVyZXMiLCJvdGhlciIsImFzc2lnbiIsImNsZWFyU2lnbmF0dXJlcyIsInRvQ2VsbCIsImIiLCJiZWdpbkNlbGwiLCJzdG9yZUJpdCIsInN0b3JlUmVmIiwic3RvcmVCdWZmZXIiLCJzdG9yZVVpbnQiLCJwYXJzZUludCIsInN0b3JlQnVpbGRlciIsImVuZENlbGwiLCJhc0J1aWxkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrderBuilder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/multisig/MultisigOrderBuilder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Made by @Gusarich and @Miandic */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MultisigOrderBuilder = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst MultisigOrder_1 = __webpack_require__(/*! ./MultisigOrder */ \"(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrder.js\");\nclass MultisigOrderBuilder {\n    constructor(walletId, offset){\n        this.messages = (0, core_1.beginCell)();\n        this.queryId = 0n;\n        this.walletId = walletId;\n        this.queryOffset = offset || 7200;\n    }\n    addMessage(message, mode) {\n        if (this.messages.refs >= 4) {\n            throw Error(\"only 4 refs are allowed\");\n        }\n        this.updateQueryId();\n        this.messages.storeUint(mode, 8);\n        this.messages.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(message)).endCell());\n    }\n    clearMessages() {\n        this.messages = (0, core_1.beginCell)();\n    }\n    build() {\n        return MultisigOrder_1.MultisigOrder.fromPayload((0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(this.queryId, 64).storeBuilder(this.messages).endCell());\n    }\n    updateQueryId() {\n        const time = BigInt(Math.floor(Date.now() / 1000 + this.queryOffset));\n        this.queryId = time << 32n;\n    }\n}\nexports.MultisigOrderBuilder = MultisigOrderBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC9tdWx0aXNpZy9NdWx0aXNpZ09yZGVyQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtDQUFrQyxHQUNsQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsK0RBQVc7QUFDbEMsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxxRkFBaUI7QUFDakQsTUFBTUY7SUFDRkksWUFBWUMsUUFBUSxFQUFFQyxNQUFNLENBQUU7UUFDMUIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQyxHQUFHTixPQUFPTyxTQUFTO1FBQ3BDLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDSixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0ssV0FBVyxHQUFHSixVQUFVO0lBQ2pDO0lBQ0FLLFdBQVdDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1FBQ3RCLElBQUksSUFBSSxDQUFDTixRQUFRLENBQUNPLElBQUksSUFBSSxHQUFHO1lBQ3pCLE1BQU1DLE1BQU07UUFDaEI7UUFDQSxJQUFJLENBQUNDLGFBQWE7UUFDbEIsSUFBSSxDQUFDVCxRQUFRLENBQUNVLFNBQVMsQ0FBQ0osTUFBTTtRQUM5QixJQUFJLENBQUNOLFFBQVEsQ0FBQ1csUUFBUSxDQUFDLENBQUMsR0FBR2pCLE9BQU9PLFNBQVMsSUFBSVcsS0FBSyxDQUFDLENBQUMsR0FBR2xCLE9BQU9tQixtQkFBbUIsRUFBRVIsVUFBVVMsT0FBTztJQUMxRztJQUNBQyxnQkFBZ0I7UUFDWixJQUFJLENBQUNmLFFBQVEsR0FBRyxDQUFDLEdBQUdOLE9BQU9PLFNBQVM7SUFDeEM7SUFDQWUsUUFBUTtRQUNKLE9BQU9wQixnQkFBZ0JxQixhQUFhLENBQUNDLFdBQVcsQ0FBQyxDQUFDLEdBQUd4QixPQUFPTyxTQUFTLElBQ2hFUyxTQUFTLENBQUMsSUFBSSxDQUFDWixRQUFRLEVBQUUsSUFDekJZLFNBQVMsQ0FBQyxJQUFJLENBQUNSLE9BQU8sRUFBRSxJQUN4QmlCLFlBQVksQ0FBQyxJQUFJLENBQUNuQixRQUFRLEVBQzFCYyxPQUFPO0lBQ2hCO0lBQ0FMLGdCQUFnQjtRQUNaLE1BQU1XLE9BQU9DLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0MsS0FBS0MsR0FBRyxLQUFLLE9BQU8sSUFBSSxDQUFDdEIsV0FBVztRQUNuRSxJQUFJLENBQUNELE9BQU8sR0FBR2tCLFFBQVEsR0FBRztJQUM5QjtBQUNKO0FBQ0E3Qiw0QkFBNEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b24tYWlyZHJvcC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0B0b24vdG9uL2Rpc3QvbXVsdGlzaWcvTXVsdGlzaWdPcmRlckJ1aWxkZXIuanM/ZWE0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIE1hZGUgYnkgQEd1c2FyaWNoIGFuZCBATWlhbmRpYyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NdWx0aXNpZ09yZGVyQnVpbGRlciA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJAdG9uL2NvcmVcIik7XG5jb25zdCBNdWx0aXNpZ09yZGVyXzEgPSByZXF1aXJlKFwiLi9NdWx0aXNpZ09yZGVyXCIpO1xuY2xhc3MgTXVsdGlzaWdPcmRlckJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKHdhbGxldElkLCBvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9ICgwLCBjb3JlXzEuYmVnaW5DZWxsKSgpO1xuICAgICAgICB0aGlzLnF1ZXJ5SWQgPSAwbjtcbiAgICAgICAgdGhpcy53YWxsZXRJZCA9IHdhbGxldElkO1xuICAgICAgICB0aGlzLnF1ZXJ5T2Zmc2V0ID0gb2Zmc2V0IHx8IDcyMDA7XG4gICAgfVxuICAgIGFkZE1lc3NhZ2UobWVzc2FnZSwgbW9kZSkge1xuICAgICAgICBpZiAodGhpcy5tZXNzYWdlcy5yZWZzID49IDQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdvbmx5IDQgcmVmcyBhcmUgYWxsb3dlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUXVlcnlJZCgpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLnN0b3JlVWludChtb2RlLCA4KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5zdG9yZVJlZigoMCwgY29yZV8xLmJlZ2luQ2VsbCkoKS5zdG9yZSgoMCwgY29yZV8xLnN0b3JlTWVzc2FnZVJlbGF4ZWQpKG1lc3NhZ2UpKS5lbmRDZWxsKCkpO1xuICAgIH1cbiAgICBjbGVhck1lc3NhZ2VzKCkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gKDAsIGNvcmVfMS5iZWdpbkNlbGwpKCk7XG4gICAgfVxuICAgIGJ1aWxkKCkge1xuICAgICAgICByZXR1cm4gTXVsdGlzaWdPcmRlcl8xLk11bHRpc2lnT3JkZXIuZnJvbVBheWxvYWQoKDAsIGNvcmVfMS5iZWdpbkNlbGwpKClcbiAgICAgICAgICAgIC5zdG9yZVVpbnQodGhpcy53YWxsZXRJZCwgMzIpXG4gICAgICAgICAgICAuc3RvcmVVaW50KHRoaXMucXVlcnlJZCwgNjQpXG4gICAgICAgICAgICAuc3RvcmVCdWlsZGVyKHRoaXMubWVzc2FnZXMpXG4gICAgICAgICAgICAuZW5kQ2VsbCgpKTtcbiAgICB9XG4gICAgdXBkYXRlUXVlcnlJZCgpIHtcbiAgICAgICAgY29uc3QgdGltZSA9IEJpZ0ludChNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwICsgdGhpcy5xdWVyeU9mZnNldCkpO1xuICAgICAgICB0aGlzLnF1ZXJ5SWQgPSB0aW1lIDw8IDMybjtcbiAgICB9XG59XG5leHBvcnRzLk11bHRpc2lnT3JkZXJCdWlsZGVyID0gTXVsdGlzaWdPcmRlckJ1aWxkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNdWx0aXNpZ09yZGVyQnVpbGRlciIsImNvcmVfMSIsInJlcXVpcmUiLCJNdWx0aXNpZ09yZGVyXzEiLCJjb25zdHJ1Y3RvciIsIndhbGxldElkIiwib2Zmc2V0IiwibWVzc2FnZXMiLCJiZWdpbkNlbGwiLCJxdWVyeUlkIiwicXVlcnlPZmZzZXQiLCJhZGRNZXNzYWdlIiwibWVzc2FnZSIsIm1vZGUiLCJyZWZzIiwiRXJyb3IiLCJ1cGRhdGVRdWVyeUlkIiwic3RvcmVVaW50Iiwic3RvcmVSZWYiLCJzdG9yZSIsInN0b3JlTWVzc2FnZVJlbGF4ZWQiLCJlbmRDZWxsIiwiY2xlYXJNZXNzYWdlcyIsImJ1aWxkIiwiTXVsdGlzaWdPcmRlciIsImZyb21QYXlsb2FkIiwic3RvcmVCdWlsZGVyIiwidGltZSIsIkJpZ0ludCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigOrderBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigWallet.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/multisig/MultisigWallet.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Made by @Gusarich and @Miandic */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MultisigWallet = void 0;\nconst crypto_1 = __webpack_require__(/*! @ton/crypto */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst MULTISIG_CODE = core_1.Cell.fromBase64(\"te6ccgECKwEABBgAART/APSkE/S88sgLAQIBIAIDAgFIBAUE2vIgxwCOgzDbPOCDCNcYIPkBAdMH2zwiwAAToVNxePQOb6Hyn9s8VBq6+RDyoAb0BCD5AQHTH1EYuvKq0z9wUwHwCgHCCAGDCryx8mhTFYBA9A5voSCYDqQgwgryZw7f+COqH1NAufJhVCOjU04gIyEiAgLMBgcCASAMDQIBIAgJAgFmCgsAA9GEAiPymAvHoHN9CYbZ5S7Z4BPHohwhJQAtAKkItdJEqCTItdKlwLUAdAT8ArobBKAATwhbpEx4CBukTDgAdAg10rDAJrUAvALyFjPFszJ4HHXI8gBzxb0AMmACASAODwIBIBQVARW77ZbVA0cFUg2zyCoCAUgQEQIBIBITAXOxHXQgwjXGCD5AQHTB4IB1MTtQ9hTIHj0Dm+h8p/XC/9eMfkQ8qCuAfQEIW6TW3Ey4PkBWNs8AaQBgJwA9rtqA6ADoAPoCAXoCEfyAgPyA3XlP+AXkegAA54tkwAAXrhlXP8EA1WZ2oexAAgEgFhcCASAYGQFRtyVbZ4YmRmpGEAgegc30McJNhFpAADMaYeYuAFrgJhwLb+4cC3d0bhAjAYm1WZtnhqvgb+2xxsoicAgej430pBHEoFpAADHDhBACGuQkuuBk9kUWE5kAOeLKhACQCB6IYFImHFImHFImXEA2YlzNijAjAgEgGhsAF7UGtc4QQDVZnah7EAIBIBwdAgOZOB4fARGsGm2eL4G2CUAjABWt+UEAzJV2oewYQAENqTbPBVfBYCMAFa3f3CCAarM7UPYgAiDbPALyZfgAUENxQxPbPO1UIyoACtP/0wcwBKDbPC+uUyCw8mISsQKkJbNTHLmwJYEA4aojoCi8sPJpggGGoPgBBZcCERACPj4wjo0REB/bPEDXePRDEL0F4lQWW1Rz51YQU9zbPFRxClR6vCQlKCYAIO1E0NMf0wfTB9M/9AT0BNEAXgGOGjDSAAHyo9MH0wdQA9cBIPkBBfkBFbrypFAD4GwhIddKqgIi10m68qtwVCATAAwByMv/ywcE1ts87VT4D3AlblOJvrGYEG4QLVDHXwePGzBUJANQTds8UFWgRlAQSRA6SwlTuds8UFQWf+L4AAeDJaGOLCaAQPSWb6UglDBTA7neII4WODk5CNIAAZfTBzAW8AcFkTDifwgHBZJsMeKz5jAGKicoKQBgcI4pA9CDCNcY0wf0BDBTFnj0Dm+h8qXXC/9URUT5EPKmrlIgsVIDvRShI27mbCIyAH5SML6OIF8D+ACTItdKmALTB9QC+wAC6DJwyMoAQBSAQPRDAvAHjhdxyMsAFMsHEssHWM8BWM8WQBOAQPRDAeIBII6KEEUQNEMA2zztVJJfBuIqABzIyx/LB8sHyz/0APQAyQ==\");\nclass MultisigWallet {\n    constructor(publicKeys, workchain, walletId, k, opts){\n        this.provider = null;\n        this.owners = core_1.Dictionary.empty();\n        this.workchain = workchain;\n        this.walletId = walletId;\n        this.k = k;\n        for(let i = 0; i < publicKeys.length; i += 1){\n            this.owners.set(i, Buffer.concat([\n                publicKeys[i],\n                Buffer.alloc(1)\n            ]));\n        }\n        this.init = {\n            code: MULTISIG_CODE,\n            data: (0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(this.owners.size, 8).storeUint(this.k, 8).storeUint(0, 64).storeDict(this.owners, core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33)).storeBit(0).endCell()\n        };\n        this.address = opts?.address || (0, core_1.contractAddress)(workchain, this.init);\n        if (opts?.provider) {\n            this.provider = opts.provider;\n        } else if (opts?.client) {\n            this.provider = opts.client.provider(this.address, {\n                code: this.init.code,\n                data: this.init.data\n            });\n        }\n    }\n    static async fromAddress(address, opts) {\n        let provider;\n        if (opts.provider) {\n            provider = opts.provider;\n        } else {\n            if (!opts.client) {\n                throw Error(\"Either provider or client must be specified\");\n            }\n            provider = opts.client.provider(address, {\n                code: null,\n                data: null\n            });\n        }\n        const contractState = (await provider.getState()).state;\n        if (contractState.type !== \"active\") {\n            throw Error(\"Contract must be active\");\n        }\n        const data = core_1.Cell.fromBoc(contractState.data)[0].beginParse();\n        const walletId = data.loadUint(32);\n        data.skip(8);\n        const k = data.loadUint(8);\n        data.skip(64);\n        const owners = data.loadDict(core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33));\n        let publicKeys = [];\n        for (const [key, value] of owners){\n            const publicKey = value.subarray(0, 32);\n            publicKeys.push(publicKey);\n        }\n        return new MultisigWallet(publicKeys, address.workChain, walletId, k, {\n            address,\n            provider,\n            client: opts.client\n        });\n    }\n    async deployExternal(provider) {\n        if (!provider && !this.provider) {\n            throw Error(\"you must specify provider if there is no such property in MultisigWallet instance\");\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        await provider.external(core_1.Cell.EMPTY);\n    }\n    async deployInternal(sender, value = 1000000000n) {\n        await sender.send({\n            sendMode: 3,\n            to: this.address,\n            value: value,\n            init: this.init,\n            body: core_1.Cell.EMPTY,\n            bounce: true\n        });\n    }\n    async sendOrder(order, secretKey, provider) {\n        if (!provider && !this.provider) {\n            throw Error(\"you must specify provider if there is no such property in MultisigWallet instance\");\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        let publicKey = (0, crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let ownerId = this.getOwnerIdByPubkey(publicKey);\n        let cell = order.toCell(ownerId);\n        let signature = (0, crypto_1.sign)(cell.hash(), secretKey);\n        cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();\n        await provider.external(cell);\n    }\n    async sendOrderWithoutSecretKey(order, signature, ownerId, provider) {\n        if (!provider && !this.provider) {\n            throw Error(\"you must specify provider if there is no such property in MultisigWallet instance\");\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        let cell = order.toCell(ownerId);\n        cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();\n        await provider.external(cell);\n    }\n    getOwnerIdByPubkey(publicKey) {\n        for (const [key, value] of this.owners){\n            if (value.subarray(0, 32).equals(publicKey)) {\n                return key;\n            }\n        }\n        throw Error(\"public key is not an owner\");\n    }\n}\nexports.MultisigWallet = MultisigWallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/multisig/MultisigWallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/utils/fees.js":
/*!**************************************************!*\
  !*** ./node_modules/@ton/ton/dist/utils/fees.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.computeMessageForwardFees = exports.computeExternalMessageFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeStorageFees = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L425\n//\nfunction computeStorageFees(data) {\n    const { lastPaid, now, storagePrices, storageStat, special, masterchain } = data;\n    if (now <= lastPaid || storagePrices.length === 0 || now < storagePrices[0].utime_since || special) {\n        return BigInt(0);\n    }\n    let upto = Math.max(lastPaid, storagePrices[0].utime_since);\n    let total = BigInt(0);\n    for(let i = 0; i < storagePrices.length && upto < now; i++){\n        let valid_until = i < storagePrices.length - 1 ? Math.min(now, storagePrices[i + 1].utime_since) : now;\n        let payment = BigInt(0);\n        if (upto < valid_until) {\n            let delta = valid_until - upto;\n            payment += BigInt(storageStat.cells) * (masterchain ? storagePrices[i].mc_cell_price_ps : storagePrices[i].cell_price_ps);\n            payment += BigInt(storageStat.bits) * (masterchain ? storagePrices[i].mc_bit_price_ps : storagePrices[i].bit_price_ps);\n            payment = payment * BigInt(delta);\n        }\n        upto = valid_until;\n        total += payment;\n    }\n    return shr16ceil(total);\n}\nexports.computeStorageFees = computeStorageFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L1218\n//\nfunction computeFwdFees(msgPrices, cells, bits) {\n    return msgPrices.lumpPrice + shr16ceil(msgPrices.bitPrice * bits + msgPrices.cellPrice * cells);\n}\nexports.computeFwdFees = computeFwdFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L761\n//\nfunction computeGasPrices(gasUsed, prices) {\n    if (gasUsed <= prices.flatLimit) {\n        return prices.flatPrice;\n    } else {\n        //  td::rshift(gas_price256 * (gas_used - cfg.flat_gas_limit), 16, 1) + cfg.flat_gas_price\n        return prices.flatPrice + (prices.price * (gasUsed - prices.flatLimit) >> 16n);\n    }\n}\nexports.computeGasPrices = computeGasPrices;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L530\n//\nfunction computeExternalMessageFees(msgPrices, cell) {\n    // Collect stats\n    let storageStats = collectCellStats(cell);\n    storageStats.bits -= cell.bits.length;\n    storageStats.cells -= 1;\n    return computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n}\nexports.computeExternalMessageFees = computeExternalMessageFees;\nfunction computeMessageForwardFees(msgPrices, cell) {\n    let msg = (0, core_1.loadMessageRelaxed)(cell.beginParse());\n    let storageStats = {\n        bits: 0,\n        cells: 0\n    };\n    // Init\n    if (msg.init) {\n        const rawBuilder = new core_1.Cell().asBuilder();\n        (0, core_1.storeStateInit)(msg.init)(rawBuilder);\n        const raw = rawBuilder.endCell();\n        let c = collectCellStats(raw);\n        c.bits -= raw.bits.length;\n        c.cells -= 1;\n        storageStats.bits += c.bits;\n        storageStats.cells += c.cells;\n    }\n    // Body\n    let bc = collectCellStats(msg.body);\n    bc.bits -= msg.body.bits.length;\n    bc.cells -= 1;\n    storageStats.bits += bc.bits;\n    storageStats.cells += bc.cells;\n    // NOTE: Extra currencies are ignored for now\n    let fees = computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n    let res = fees * BigInt(msgPrices.firstFrac) >> 16n;\n    let remaining = fees - res;\n    return {\n        fees: res,\n        remaining\n    };\n}\nexports.computeMessageForwardFees = computeMessageForwardFees;\nfunction collectCellStats(cell) {\n    let bits = cell.bits.length;\n    let cells = 1;\n    for (let ref of cell.refs){\n        let r = collectCellStats(ref);\n        cells += r.cells;\n        bits += r.bits;\n    }\n    return {\n        bits,\n        cells\n    };\n}\nfunction shr16ceil(src) {\n    let rem = src % 65536n;\n    let res = src >> 16n;\n    if (rem !== 0n) {\n        res += 1n;\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/utils/fees.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/utils/toUrlSafe.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/ton/dist/utils/toUrlSafe.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toUrlSafe = void 0;\nfunction toUrlSafe(src) {\n    while(src.indexOf(\"/\") >= 0){\n        src = src.replace(\"/\", \"_\");\n    }\n    while(src.indexOf(\"+\") >= 0){\n        src = src.replace(\"+\", \"-\");\n    }\n    while(src.indexOf(\"=\") >= 0){\n        src = src.replace(\"=\", \"\");\n    }\n    return src;\n}\nexports.toUrlSafe = toUrlSafe;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC91dGlscy90b1VybFNhZmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7O0NBTUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsU0FBU0UsVUFBVUMsR0FBRztJQUNsQixNQUFPQSxJQUFJQyxPQUFPLENBQUMsUUFBUSxFQUFHO1FBQzFCRCxNQUFNQSxJQUFJRSxPQUFPLENBQUMsS0FBSztJQUMzQjtJQUNBLE1BQU9GLElBQUlDLE9BQU8sQ0FBQyxRQUFRLEVBQUc7UUFDMUJELE1BQU1BLElBQUlFLE9BQU8sQ0FBQyxLQUFLO0lBQzNCO0lBQ0EsTUFBT0YsSUFBSUMsT0FBTyxDQUFDLFFBQVEsRUFBRztRQUMxQkQsTUFBTUEsSUFBSUUsT0FBTyxDQUFDLEtBQUs7SUFDM0I7SUFDQSxPQUFPRjtBQUNYO0FBQ0FILGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvbi1haXJkcm9wLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHRvbi90b24vZGlzdC91dGlscy90b1VybFNhZmUuanM/YzE2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBXaGFsZXMgQ29ycC5cbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9VcmxTYWZlID0gdm9pZCAwO1xuZnVuY3Rpb24gdG9VcmxTYWZlKHNyYykge1xuICAgIHdoaWxlIChzcmMuaW5kZXhPZignLycpID49IDApIHtcbiAgICAgICAgc3JjID0gc3JjLnJlcGxhY2UoJy8nLCAnXycpO1xuICAgIH1cbiAgICB3aGlsZSAoc3JjLmluZGV4T2YoJysnKSA+PSAwKSB7XG4gICAgICAgIHNyYyA9IHNyYy5yZXBsYWNlKCcrJywgJy0nKTtcbiAgICB9XG4gICAgd2hpbGUgKHNyYy5pbmRleE9mKCc9JykgPj0gMCkge1xuICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSgnPScsICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNyYztcbn1cbmV4cG9ydHMudG9VcmxTYWZlID0gdG9VcmxTYWZlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9VcmxTYWZlIiwic3JjIiwiaW5kZXhPZiIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/utils/toUrlSafe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R1.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV1R1.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV1R1 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV1R1 {\n    static create(args) {\n        return new WalletContractV1R1(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey){\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEARAAAhP8AIN2k8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVEH98Ik=\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            return core_1.Cell.fromBoc(state.state.data)[0].beginParse().loadUint(32);\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV1)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            message: args.message\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    message: (0, core_1.internal)({\n                        to: args.to,\n                        value: args.value,\n                        init: args.init,\n                        body: args.body,\n                        bounce: args.bounce\n                    })\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV1R1 = WalletContractV1R1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV1R2.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV1R2 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV1R2 {\n    static create(args) {\n        return new WalletContractV1R2(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey){\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAUwAAov8AIN0gggFMl7qXMO1E0NcLH+Ck8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVNDieG8=\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV1)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            message: args.message\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    message: (0, core_1.internal)({\n                        to: args.to,\n                        value: args.value,\n                        init: args.init,\n                        body: args.body,\n                        bounce: args.bounce\n                    })\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV1R2 = WalletContractV1R2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R3.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV1R3.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV1R3 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV1R3 {\n    static create(args) {\n        return new WalletContractV1R3(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey){\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(executor, message) {\n        await executor.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV1)({\n            seqno: args.seqno,\n            sendMode: sendMode,\n            secretKey: args.secretKey,\n            message: args.message\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    message: (0, core_1.internal)({\n                        to: args.to,\n                        value: args.value,\n                        init: args.init,\n                        body: args.body,\n                        bounce: args.bounce\n                    })\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV1R3 = WalletContractV1R3;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV1R3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R1.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV2R1.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV2R1 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV2R1 {\n    static create(args) {\n        return new WalletContractV2R1(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey){\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAVwAAqv8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VShNwu2\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV2)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            messages: args.messages,\n            timeout: args.timeout\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    messages: [\n                        (0, core_1.internal)({\n                            to: args.to,\n                            value: args.value,\n                            init: args.init,\n                            body: args.body,\n                            bounce: args.bounce\n                        })\n                    ]\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV2R1 = WalletContractV2R1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV2R2.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV2R2 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV2R2 {\n    static create(args) {\n        return new WalletContractV2R2(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey){\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAYwAAwv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQETNeh\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV2)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            messages: args.messages,\n            timeout: args.timeout\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    messages: [\n                        (0, core_1.internal)({\n                            to: args.to,\n                            value: args.value,\n                            init: args.init,\n                            body: args.body,\n                            bounce: args.bounce\n                        })\n                    ]\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV2R2 = WalletContractV2R2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV2R2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R1.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV3R1.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV3R1 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV3R1 {\n    static create(args) {\n        return new WalletContractV3R1(args.workchain, args.publicKey, args.walletId);\n    }\n    constructor(workchain, publicKey, walletId){\n        // Resolve parameters\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        if (walletId !== null && walletId !== undefined) {\n            this.walletId = walletId;\n        } else {\n            this.walletId = 698983191 + workchain;\n        }\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAYgAAwP8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVD++buA=\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get wallet balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV3)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            messages: args.messages,\n            timeout: args.timeout,\n            walletId: this.walletId\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    messages: [\n                        (0, core_1.internal)({\n                            to: args.to,\n                            value: args.value,\n                            init: args.init,\n                            body: args.body,\n                            bounce: args.bounce\n                        })\n                    ]\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV3R1 = WalletContractV3R1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV3R2.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV3R2 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV3R2 {\n    static create(args) {\n        return new WalletContractV3R2(args.workchain, args.publicKey, args.walletId);\n    }\n    constructor(workchain, publicKey, walletId){\n        // Resolve parameters\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        if (walletId !== null && walletId !== undefined) {\n            this.walletId = walletId;\n        } else {\n            this.walletId = 698983191 + workchain;\n        }\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6cckEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVBC9ba0=\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get wallet balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV3)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            messages: args.messages,\n            timeout: args.timeout,\n            walletId: this.walletId\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    messages: [\n                        (0, core_1.internal)({\n                            to: args.to,\n                            value: args.value,\n                            init: args.init,\n                            body: args.body,\n                            bounce: args.bounce\n                        })\n                    ]\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV3R2 = WalletContractV3R2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV3R2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV4.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/WalletContractV4.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletContractV4 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst createWalletTransfer_1 = __webpack_require__(/*! ./signing/createWalletTransfer */ \"(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\");\nclass WalletContractV4 {\n    static create(args) {\n        return new WalletContractV4(args.workchain, args.publicKey, args.walletId);\n    }\n    constructor(workchain, publicKey, walletId){\n        // Resolve parameters\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        if (walletId !== null && walletId !== undefined) {\n            this.walletId = walletId;\n        } else {\n            this.walletId = 698983191 + workchain;\n        }\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from(\"te6ccgECFAEAAtQAART/APSkE/S88sgLAQIBIAIDAgFIBAUE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8QERITAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNBgcCASAICQB4AfoA9AQw+CdvIjBQCqEhvvLgUIIQcGx1Z4MesXCAGFAEywUmzxZY+gIZ9ADLaRfLH1Jgyz8gyYBA+wAGAIpQBIEBCPRZMO1E0IEBQNcgyAHPFvQAye1UAXKwjiOCEGRzdHKDHrFwgBhQBcsFUAPPFiP6AhPLassfyz/JgED7AJJfA+ICASAKCwBZvSQrb2omhAgKBrkPoCGEcNQICEekk30pkQzmkD6f+YN4EoAbeBAUiYcVnzGEAgFYDA0AEbjJftRNDXCx+AA9sp37UTQgQFA1yH0BDACyMoHy//J0AGBAQj0Cm+hMYAIBIA4PABmtznaiaEAga5Drhf/AABmvHfaiaEAQa5DrhY/AAG7SB/oA1NQi+QAFyMoHFcv/ydB3dIAYyMsFywIizxZQBfoCFMtrEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z/IVCBHgQEI9FHyp4IQbm90ZXB0gBjIywXLAlAGzxZQBPoCFMtqEssfyz/Jc/sAAgBsgQEI1xj6ANM/MFIkgQEI9Fnyp4IQZHN0cnB0gBjIywXLAlAFzxZQA/oCE8tqyx8Syz/Jc/sAAAr0AMntVA==\", \"base64\"))[0];\n        let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n        .storeUint(this.walletId, 32).storeBuffer(this.publicKey).storeBit(0) // Empty plugins dict\n        .endCell();\n        this.init = {\n            code,\n            data\n        };\n        this.address = (0, core_1.contractAddress)(workchain, {\n            code,\n            data\n        });\n    }\n    /**\n     * Get Wallet Balance\n     */ async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */ async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === \"active\") {\n            let res = await provider.get(\"seqno\", []);\n            return res.stack.readNumber();\n        } else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */ async send(provider, message) {\n        await provider.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */ async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */ createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV4)({\n            seqno: args.seqno,\n            sendMode,\n            secretKey: args.secretKey,\n            messages: args.messages,\n            timeout: args.timeout,\n            walletId: this.walletId\n        });\n    }\n    /**\n     * Create sender\n     */ sender(provider, secretKey) {\n        return {\n            send: async (args)=>{\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    messages: [\n                        (0, core_1.internal)({\n                            to: args.to,\n                            value: args.value,\n                            init: args.init,\n                            body: args.body,\n                            bounce: args.bounce\n                        })\n                    ]\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV4 = WalletContractV4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/WalletContractV4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createWalletTransferV4 = exports.createWalletTransferV3 = exports.createWalletTransferV2 = exports.createWalletTransferV1 = void 0;\nconst core_1 = __webpack_require__(/*! @ton/core */ \"(ssr)/./node_modules/@ton/core/dist/index.js\");\nconst crypto_1 = __webpack_require__(/*! @ton/crypto */ \"(ssr)/./node_modules/@ton/crypto/dist/index.js\");\nfunction createWalletTransferV1(args) {\n    // Create message\n    let signingMessage = (0, core_1.beginCell)().storeUint(args.seqno, 32);\n    if (args.message) {\n        signingMessage.storeUint(args.sendMode, 8);\n        signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(args.message)));\n    }\n    // Sign message\n    let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);\n    // Body\n    const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();\n    return body;\n}\nexports.createWalletTransferV1 = createWalletTransferV1;\nfunction createWalletTransferV2(args) {\n    // Check number of messages\n    if (args.messages.length > 4) {\n        throw Error(\"Maximum number of messages in a single transfer is 4\");\n    }\n    // Create message\n    let signingMessage = (0, core_1.beginCell)().storeUint(args.seqno, 32);\n    if (args.seqno === 0) {\n        for(let i = 0; i < 32; i++){\n            signingMessage.storeBit(1);\n        }\n    } else {\n        signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds\n    }\n    for (let m of args.messages){\n        signingMessage.storeUint(args.sendMode, 8);\n        signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));\n    }\n    // Sign message\n    let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);\n    // Body\n    const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();\n    return body;\n}\nexports.createWalletTransferV2 = createWalletTransferV2;\nfunction createWalletTransferV3(args) {\n    // Check number of messages\n    if (args.messages.length > 4) {\n        throw Error(\"Maximum number of messages in a single transfer is 4\");\n    }\n    // Create message to sign\n    let signingMessage = (0, core_1.beginCell)().storeUint(args.walletId, 32);\n    if (args.seqno === 0) {\n        for(let i = 0; i < 32; i++){\n            signingMessage.storeBit(1);\n        }\n    } else {\n        signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds\n    }\n    signingMessage.storeUint(args.seqno, 32);\n    for (let m of args.messages){\n        signingMessage.storeUint(args.sendMode, 8);\n        signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));\n    }\n    // Sign message\n    let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);\n    // Body\n    const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();\n    return body;\n}\nexports.createWalletTransferV3 = createWalletTransferV3;\nfunction createWalletTransferV4(args) {\n    // Check number of messages\n    if (args.messages.length > 4) {\n        throw Error(\"Maximum number of messages in a single transfer is 4\");\n    }\n    let signingMessage = (0, core_1.beginCell)().storeUint(args.walletId, 32);\n    if (args.seqno === 0) {\n        for(let i = 0; i < 32; i++){\n            signingMessage.storeBit(1);\n        }\n    } else {\n        signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds\n    }\n    signingMessage.storeUint(args.seqno, 32);\n    signingMessage.storeUint(0, 8); // Simple order\n    for (let m of args.messages){\n        signingMessage.storeUint(args.sendMode, 8);\n        signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));\n    }\n    // Sign message\n    let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);\n    // Body\n    const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();\n    return body;\n}\nexports.createWalletTransferV4 = createWalletTransferV4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/dist/wallets/signing/createWalletTransfer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/node_modules/axios/dist/node/axios.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/ton/node_modules/axios/dist/node/axios.cjs ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! Axios v1.9.0 Copyright (c) 2025 Matt Zabriskie and contributors */ \nconst FormData$1 = __webpack_require__(/*! form-data */ \"(ssr)/./node_modules/form-data/lib/form_data.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst proxyFromEnv = __webpack_require__(/*! proxy-from-env */ \"(ssr)/./node_modules/proxy-from-env/index.js\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst followRedirects = __webpack_require__(/*! follow-redirects */ \"(ssr)/./node_modules/follow-redirects/index.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst events = __webpack_require__(/*! events */ \"events\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nconst FormData__default = /*#__PURE__*/ _interopDefaultLegacy(FormData$1);\nconst crypto__default = /*#__PURE__*/ _interopDefaultLegacy(crypto);\nconst url__default = /*#__PURE__*/ _interopDefaultLegacy(url);\nconst proxyFromEnv__default = /*#__PURE__*/ _interopDefaultLegacy(proxyFromEnv);\nconst http__default = /*#__PURE__*/ _interopDefaultLegacy(http);\nconst https__default = /*#__PURE__*/ _interopDefaultLegacy(https);\nconst util__default = /*#__PURE__*/ _interopDefaultLegacy(util);\nconst followRedirects__default = /*#__PURE__*/ _interopDefaultLegacy(followRedirects);\nconst zlib__default = /*#__PURE__*/ _interopDefaultLegacy(zlib);\nconst stream__default = /*#__PURE__*/ _interopDefaultLegacy(stream);\nfunction bind(fn, thisArg) {\n    return function wrap() {\n        return fn.apply(thisArg, arguments);\n    };\n}\n// utils is a library of generic helper functions non-specific to axios\nconst { toString } = Object.prototype;\nconst { getPrototypeOf } = Object;\nconst { iterator, toStringTag } = Symbol;\nconst kindOf = ((cache)=>(thing)=>{\n        const str = toString.call(thing);\n        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n    })(Object.create(null));\nconst kindOfTest = (type)=>{\n    type = type.toLowerCase();\n    return (thing)=>kindOf(thing) === type;\n};\nconst typeOfTest = (type)=>(thing)=>typeof thing === type;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */ const { isArray } = Array;\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */ const isUndefined = typeOfTest(\"undefined\");\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */ function isBuffer(val) {\n    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */ const isArrayBuffer = kindOfTest(\"ArrayBuffer\");\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */ function isArrayBufferView(val) {\n    let result;\n    if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        result = ArrayBuffer.isView(val);\n    } else {\n        result = val && val.buffer && isArrayBuffer(val.buffer);\n    }\n    return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */ const isString = typeOfTest(\"string\");\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */ const isFunction = typeOfTest(\"function\");\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */ const isNumber = typeOfTest(\"number\");\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */ const isObject = (thing)=>thing !== null && typeof thing === \"object\";\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */ const isBoolean = (thing)=>thing === true || thing === false;\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */ const isPlainObject = (val)=>{\n    if (kindOf(val) !== \"object\") {\n        return false;\n    }\n    const prototype = getPrototypeOf(val);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n};\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */ const isDate = kindOfTest(\"Date\");\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */ const isFile = kindOfTest(\"File\");\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */ const isBlob = kindOfTest(\"Blob\");\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */ const isFileList = kindOfTest(\"FileList\");\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */ const isStream = (val)=>isObject(val) && isFunction(val.pipe);\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */ const isFormData = (thing)=>{\n    let kind;\n    return thing && (typeof FormData === \"function\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \"formdata\" || // detect form-data instance\n    kind === \"object\" && isFunction(thing.toString) && thing.toString() === \"[object FormData]\"));\n};\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */ const isURLSearchParams = kindOfTest(\"URLSearchParams\");\nconst [isReadableStream, isRequest, isResponse, isHeaders] = [\n    \"ReadableStream\",\n    \"Request\",\n    \"Response\",\n    \"Headers\"\n].map(kindOfTest);\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */ const trim = (str)=>str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */ function forEach(obj, fn, { allOwnKeys = false } = {}) {\n    // Don't bother if no value provided\n    if (obj === null || typeof obj === \"undefined\") {\n        return;\n    }\n    let i;\n    let l;\n    // Force an array if not already something iterable\n    if (typeof obj !== \"object\") {\n        /*eslint no-param-reassign:0*/ obj = [\n            obj\n        ];\n    }\n    if (isArray(obj)) {\n        // Iterate over array values\n        for(i = 0, l = obj.length; i < l; i++){\n            fn.call(null, obj[i], i, obj);\n        }\n    } else {\n        // Iterate over object keys\n        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n        const len = keys.length;\n        let key;\n        for(i = 0; i < len; i++){\n            key = keys[i];\n            fn.call(null, obj[key], key, obj);\n        }\n    }\n}\nfunction findKey(obj, key) {\n    key = key.toLowerCase();\n    const keys = Object.keys(obj);\n    let i = keys.length;\n    let _key;\n    while(i-- > 0){\n        _key = keys[i];\n        if (key === _key.toLowerCase()) {\n            return _key;\n        }\n    }\n    return null;\n}\nconst _global = (()=>{\n    /*eslint no-undef:0*/ if (typeof globalThis !== \"undefined\") return globalThis;\n    return typeof self !== \"undefined\" ? self :  false ? 0 : global;\n})();\nconst isContextDefined = (context)=>!isUndefined(context) && context !== _global;\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */ function merge() {\n    const { caseless } = isContextDefined(this) && this || {};\n    const result = {};\n    const assignValue = (val, key)=>{\n        const targetKey = caseless && findKey(result, key) || key;\n        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n            result[targetKey] = merge(result[targetKey], val);\n        } else if (isPlainObject(val)) {\n            result[targetKey] = merge({}, val);\n        } else if (isArray(val)) {\n            result[targetKey] = val.slice();\n        } else {\n            result[targetKey] = val;\n        }\n    };\n    for(let i = 0, l = arguments.length; i < l; i++){\n        arguments[i] && forEach(arguments[i], assignValue);\n    }\n    return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */ const extend = (a, b, thisArg, { allOwnKeys } = {})=>{\n    forEach(b, (val, key)=>{\n        if (thisArg && isFunction(val)) {\n            a[key] = bind(val, thisArg);\n        } else {\n            a[key] = val;\n        }\n    }, {\n        allOwnKeys\n    });\n    return a;\n};\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */ const stripBOM = (content)=>{\n    if (content.charCodeAt(0) === 0xFEFF) {\n        content = content.slice(1);\n    }\n    return content;\n};\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */ const inherits = (constructor, superConstructor, props, descriptors)=>{\n    constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n    constructor.prototype.constructor = constructor;\n    Object.defineProperty(constructor, \"super\", {\n        value: superConstructor.prototype\n    });\n    props && Object.assign(constructor.prototype, props);\n};\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */ const toFlatObject = (sourceObj, destObj, filter, propFilter)=>{\n    let props;\n    let i;\n    let prop;\n    const merged = {};\n    destObj = destObj || {};\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    if (sourceObj == null) return destObj;\n    do {\n        props = Object.getOwnPropertyNames(sourceObj);\n        i = props.length;\n        while(i-- > 0){\n            prop = props[i];\n            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n                destObj[prop] = sourceObj[prop];\n                merged[prop] = true;\n            }\n        }\n        sourceObj = filter !== false && getPrototypeOf(sourceObj);\n    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n    return destObj;\n};\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */ const endsWith = (str, searchString, position)=>{\n    str = String(str);\n    if (position === undefined || position > str.length) {\n        position = str.length;\n    }\n    position -= searchString.length;\n    const lastIndex = str.indexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n};\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */ const toArray = (thing)=>{\n    if (!thing) return null;\n    if (isArray(thing)) return thing;\n    let i = thing.length;\n    if (!isNumber(i)) return null;\n    const arr = new Array(i);\n    while(i-- > 0){\n        arr[i] = thing[i];\n    }\n    return arr;\n};\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */ // eslint-disable-next-line func-names\nconst isTypedArray = ((TypedArray)=>{\n    // eslint-disable-next-line func-names\n    return (thing)=>{\n        return TypedArray && thing instanceof TypedArray;\n    };\n})(typeof Uint8Array !== \"undefined\" && getPrototypeOf(Uint8Array));\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */ const forEachEntry = (obj, fn)=>{\n    const generator = obj && obj[iterator];\n    const _iterator = generator.call(obj);\n    let result;\n    while((result = _iterator.next()) && !result.done){\n        const pair = result.value;\n        fn.call(obj, pair[0], pair[1]);\n    }\n};\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */ const matchAll = (regExp, str)=>{\n    let matches;\n    const arr = [];\n    while((matches = regExp.exec(str)) !== null){\n        arr.push(matches);\n    }\n    return arr;\n};\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */ const isHTMLForm = kindOfTest(\"HTMLFormElement\");\nconst toCamelCase = (str)=>{\n    return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n        return p1.toUpperCase() + p2;\n    });\n};\n/* Creating a function that will check if an object has a property. */ const hasOwnProperty = (({ hasOwnProperty })=>(obj, prop)=>hasOwnProperty.call(obj, prop))(Object.prototype);\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */ const isRegExp = kindOfTest(\"RegExp\");\nconst reduceDescriptors = (obj, reducer)=>{\n    const descriptors = Object.getOwnPropertyDescriptors(obj);\n    const reducedDescriptors = {};\n    forEach(descriptors, (descriptor, name)=>{\n        let ret;\n        if ((ret = reducer(descriptor, name, obj)) !== false) {\n            reducedDescriptors[name] = ret || descriptor;\n        }\n    });\n    Object.defineProperties(obj, reducedDescriptors);\n};\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */ const freezeMethods = (obj)=>{\n    reduceDescriptors(obj, (descriptor, name)=>{\n        // skip restricted props in strict mode\n        if (isFunction(obj) && [\n            \"arguments\",\n            \"caller\",\n            \"callee\"\n        ].indexOf(name) !== -1) {\n            return false;\n        }\n        const value = obj[name];\n        if (!isFunction(value)) return;\n        descriptor.enumerable = false;\n        if (\"writable\" in descriptor) {\n            descriptor.writable = false;\n            return;\n        }\n        if (!descriptor.set) {\n            descriptor.set = ()=>{\n                throw Error(\"Can not rewrite read-only method '\" + name + \"'\");\n            };\n        }\n    });\n};\nconst toObjectSet = (arrayOrString, delimiter)=>{\n    const obj = {};\n    const define = (arr)=>{\n        arr.forEach((value)=>{\n            obj[value] = true;\n        });\n    };\n    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n    return obj;\n};\nconst noop = ()=>{};\nconst toFiniteNumber = (value, defaultValue)=>{\n    return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n};\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */ function isSpecCompliantForm(thing) {\n    return !!(thing && isFunction(thing.append) && thing[toStringTag] === \"FormData\" && thing[iterator]);\n}\nconst toJSONObject = (obj)=>{\n    const stack = new Array(10);\n    const visit = (source, i)=>{\n        if (isObject(source)) {\n            if (stack.indexOf(source) >= 0) {\n                return;\n            }\n            if (!(\"toJSON\" in source)) {\n                stack[i] = source;\n                const target = isArray(source) ? [] : {};\n                forEach(source, (value, key)=>{\n                    const reducedValue = visit(value, i + 1);\n                    !isUndefined(reducedValue) && (target[key] = reducedValue);\n                });\n                stack[i] = undefined;\n                return target;\n            }\n        }\n        return source;\n    };\n    return visit(obj, 0);\n};\nconst isAsyncFn = kindOfTest(\"AsyncFunction\");\nconst isThenable = (thing)=>thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\nconst _setImmediate = ((setImmediateSupported, postMessageSupported)=>{\n    if (setImmediateSupported) {\n        return setImmediate;\n    }\n    return postMessageSupported ? ((token, callbacks)=>{\n        _global.addEventListener(\"message\", ({ source, data })=>{\n            if (source === _global && data === token) {\n                callbacks.length && callbacks.shift()();\n            }\n        }, false);\n        return (cb)=>{\n            callbacks.push(cb);\n            _global.postMessage(token, \"*\");\n        };\n    })(`axios@${Math.random()}`, []) : (cb)=>setTimeout(cb);\n})(typeof setImmediate === \"function\", isFunction(_global.postMessage));\nconst asap = typeof queueMicrotask !== \"undefined\" ? queueMicrotask.bind(_global) : typeof process !== \"undefined\" && process.nextTick || _setImmediate;\n// *********************\nconst isIterable = (thing)=>thing != null && isFunction(thing[iterator]);\nconst utils$1 = {\n    isArray,\n    isArrayBuffer,\n    isBuffer,\n    isFormData,\n    isArrayBufferView,\n    isString,\n    isNumber,\n    isBoolean,\n    isObject,\n    isPlainObject,\n    isReadableStream,\n    isRequest,\n    isResponse,\n    isHeaders,\n    isUndefined,\n    isDate,\n    isFile,\n    isBlob,\n    isRegExp,\n    isFunction,\n    isStream,\n    isURLSearchParams,\n    isTypedArray,\n    isFileList,\n    forEach,\n    merge,\n    extend,\n    trim,\n    stripBOM,\n    inherits,\n    toFlatObject,\n    kindOf,\n    kindOfTest,\n    endsWith,\n    toArray,\n    forEachEntry,\n    matchAll,\n    isHTMLForm,\n    hasOwnProperty,\n    hasOwnProp: hasOwnProperty,\n    reduceDescriptors,\n    freezeMethods,\n    toObjectSet,\n    toCamelCase,\n    noop,\n    toFiniteNumber,\n    findKey,\n    global: _global,\n    isContextDefined,\n    isSpecCompliantForm,\n    toJSONObject,\n    isAsyncFn,\n    isThenable,\n    setImmediate: _setImmediate,\n    asap,\n    isIterable\n};\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */ function AxiosError(message, code, config, request, response) {\n    Error.call(this);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n    } else {\n        this.stack = new Error().stack;\n    }\n    this.message = message;\n    this.name = \"AxiosError\";\n    code && (this.code = code);\n    config && (this.config = config);\n    request && (this.request = request);\n    if (response) {\n        this.response = response;\n        this.status = response.status ? response.status : null;\n    }\n}\nutils$1.inherits(AxiosError, Error, {\n    toJSON: function toJSON() {\n        return {\n            // Standard\n            message: this.message,\n            name: this.name,\n            // Microsoft\n            description: this.description,\n            number: this.number,\n            // Mozilla\n            fileName: this.fileName,\n            lineNumber: this.lineNumber,\n            columnNumber: this.columnNumber,\n            stack: this.stack,\n            // Axios\n            config: utils$1.toJSONObject(this.config),\n            code: this.code,\n            status: this.status\n        };\n    }\n});\nconst prototype$1 = AxiosError.prototype;\nconst descriptors = {};\n[\n    \"ERR_BAD_OPTION_VALUE\",\n    \"ERR_BAD_OPTION\",\n    \"ECONNABORTED\",\n    \"ETIMEDOUT\",\n    \"ERR_NETWORK\",\n    \"ERR_FR_TOO_MANY_REDIRECTS\",\n    \"ERR_DEPRECATED\",\n    \"ERR_BAD_RESPONSE\",\n    \"ERR_BAD_REQUEST\",\n    \"ERR_CANCELED\",\n    \"ERR_NOT_SUPPORT\",\n    \"ERR_INVALID_URL\"\n].forEach((code)=>{\n    descriptors[code] = {\n        value: code\n    };\n});\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype$1, \"isAxiosError\", {\n    value: true\n});\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps)=>{\n    const axiosError = Object.create(prototype$1);\n    utils$1.toFlatObject(error, axiosError, function filter(obj) {\n        return obj !== Error.prototype;\n    }, (prop)=>{\n        return prop !== \"isAxiosError\";\n    });\n    AxiosError.call(axiosError, error.message, code, config, request, response);\n    axiosError.cause = error;\n    axiosError.name = error.name;\n    customProps && Object.assign(axiosError, customProps);\n    return axiosError;\n};\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */ function isVisitable(thing) {\n    return utils$1.isPlainObject(thing) || utils$1.isArray(thing);\n}\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */ function removeBrackets(key) {\n    return utils$1.endsWith(key, \"[]\") ? key.slice(0, -2) : key;\n}\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */ function renderKey(path, key, dots) {\n    if (!path) return key;\n    return path.concat(key).map(function each(token, i) {\n        // eslint-disable-next-line no-param-reassign\n        token = removeBrackets(token);\n        return !dots && i ? \"[\" + token + \"]\" : token;\n    }).join(dots ? \".\" : \"\");\n}\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */ function isFlatArray(arr) {\n    return utils$1.isArray(arr) && !arr.some(isVisitable);\n}\nconst predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {\n    return /^is[A-Z]/.test(prop);\n});\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/ /**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */ function toFormData(obj, formData, options) {\n    if (!utils$1.isObject(obj)) {\n        throw new TypeError(\"target must be an object\");\n    }\n    // eslint-disable-next-line no-param-reassign\n    formData = formData || new (FormData__default[\"default\"] || FormData)();\n    // eslint-disable-next-line no-param-reassign\n    options = utils$1.toFlatObject(options, {\n        metaTokens: true,\n        dots: false,\n        indexes: false\n    }, false, function defined(option, source) {\n        // eslint-disable-next-line no-eq-null,eqeqeq\n        return !utils$1.isUndefined(source[option]);\n    });\n    const metaTokens = options.metaTokens;\n    // eslint-disable-next-line no-use-before-define\n    const visitor = options.visitor || defaultVisitor;\n    const dots = options.dots;\n    const indexes = options.indexes;\n    const _Blob = options.Blob || typeof Blob !== \"undefined\" && Blob;\n    const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);\n    if (!utils$1.isFunction(visitor)) {\n        throw new TypeError(\"visitor must be a function\");\n    }\n    function convertValue(value) {\n        if (value === null) return \"\";\n        if (utils$1.isDate(value)) {\n            return value.toISOString();\n        }\n        if (!useBlob && utils$1.isBlob(value)) {\n            throw new AxiosError(\"Blob is not supported. Use a Buffer instead.\");\n        }\n        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {\n            return useBlob && typeof Blob === \"function\" ? new Blob([\n                value\n            ]) : Buffer.from(value);\n        }\n        return value;\n    }\n    /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */ function defaultVisitor(value, key, path) {\n        let arr = value;\n        if (value && !path && typeof value === \"object\") {\n            if (utils$1.endsWith(key, \"{}\")) {\n                // eslint-disable-next-line no-param-reassign\n                key = metaTokens ? key : key.slice(0, -2);\n                // eslint-disable-next-line no-param-reassign\n                value = JSON.stringify(value);\n            } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, \"[]\")) && (arr = utils$1.toArray(value))) {\n                // eslint-disable-next-line no-param-reassign\n                key = removeBrackets(key);\n                arr.forEach(function each(el, index) {\n                    !(utils$1.isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary\n                    indexes === true ? renderKey([\n                        key\n                    ], index, dots) : indexes === null ? key : key + \"[]\", convertValue(el));\n                });\n                return false;\n            }\n        }\n        if (isVisitable(value)) {\n            return true;\n        }\n        formData.append(renderKey(path, key, dots), convertValue(value));\n        return false;\n    }\n    const stack = [];\n    const exposedHelpers = Object.assign(predicates, {\n        defaultVisitor,\n        convertValue,\n        isVisitable\n    });\n    function build(value, path) {\n        if (utils$1.isUndefined(value)) return;\n        if (stack.indexOf(value) !== -1) {\n            throw Error(\"Circular reference detected in \" + path.join(\".\"));\n        }\n        stack.push(value);\n        utils$1.forEach(value, function each(el, key) {\n            const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers);\n            if (result === true) {\n                build(el, path ? path.concat(key) : [\n                    key\n                ]);\n            }\n        });\n        stack.pop();\n    }\n    if (!utils$1.isObject(obj)) {\n        throw new TypeError(\"data must be an object\");\n    }\n    build(obj);\n    return formData;\n}\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */ function encode$1(str) {\n    const charMap = {\n        \"!\": \"%21\",\n        \"'\": \"%27\",\n        \"(\": \"%28\",\n        \")\": \"%29\",\n        \"~\": \"%7E\",\n        \"%20\": \"+\",\n        \"%00\": \"\\x00\"\n    };\n    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n        return charMap[match];\n    });\n}\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */ function AxiosURLSearchParams(params, options) {\n    this._pairs = [];\n    params && toFormData(params, this, options);\n}\nconst prototype = AxiosURLSearchParams.prototype;\nprototype.append = function append(name, value) {\n    this._pairs.push([\n        name,\n        value\n    ]);\n};\nprototype.toString = function toString(encoder) {\n    const _encode = encoder ? function(value) {\n        return encoder.call(this, value, encode$1);\n    } : encode$1;\n    return this._pairs.map(function each(pair) {\n        return _encode(pair[0]) + \"=\" + _encode(pair[1]);\n    }, \"\").join(\"&\");\n};\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */ function encode(val) {\n    return encodeURIComponent(val).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */ function buildURL(url, params, options) {\n    /*eslint no-param-reassign:0*/ if (!params) {\n        return url;\n    }\n    const _encode = options && options.encode || encode;\n    if (utils$1.isFunction(options)) {\n        options = {\n            serialize: options\n        };\n    }\n    const serializeFn = options && options.serialize;\n    let serializedParams;\n    if (serializeFn) {\n        serializedParams = serializeFn(params, options);\n    } else {\n        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);\n    }\n    if (serializedParams) {\n        const hashmarkIndex = url.indexOf(\"#\");\n        if (hashmarkIndex !== -1) {\n            url = url.slice(0, hashmarkIndex);\n        }\n        url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n    }\n    return url;\n}\nclass InterceptorManager {\n    constructor(){\n        this.handlers = [];\n    }\n    /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */ use(fulfilled, rejected, options) {\n        this.handlers.push({\n            fulfilled,\n            rejected,\n            synchronous: options ? options.synchronous : false,\n            runWhen: options ? options.runWhen : null\n        });\n        return this.handlers.length - 1;\n    }\n    /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */ eject(id) {\n        if (this.handlers[id]) {\n            this.handlers[id] = null;\n        }\n    }\n    /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */ clear() {\n        if (this.handlers) {\n            this.handlers = [];\n        }\n    }\n    /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */ forEach(fn) {\n        utils$1.forEach(this.handlers, function forEachHandler(h) {\n            if (h !== null) {\n                fn(h);\n            }\n        });\n    }\n}\nconst InterceptorManager$1 = InterceptorManager;\nconst transitionalDefaults = {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n};\nconst URLSearchParams = url__default[\"default\"].URLSearchParams;\nconst ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\nconst DIGIT = \"0123456789\";\nconst ALPHABET = {\n    DIGIT,\n    ALPHA,\n    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT)=>{\n    let str = \"\";\n    const { length } = alphabet;\n    const randomValues = new Uint32Array(size);\n    crypto__default[\"default\"].randomFillSync(randomValues);\n    for(let i = 0; i < size; i++){\n        str += alphabet[randomValues[i] % length];\n    }\n    return str;\n};\nconst platform$1 = {\n    isNode: true,\n    classes: {\n        URLSearchParams,\n        FormData: FormData__default[\"default\"],\n        Blob: typeof Blob !== \"undefined\" && Blob || null\n    },\n    ALPHABET,\n    generateString,\n    protocols: [\n        \"http\",\n        \"https\",\n        \"file\",\n        \"data\"\n    ]\n};\nconst hasBrowserEnv =  false && 0;\nconst _navigator = typeof navigator === \"object\" && navigator || undefined;\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */ const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || [\n    \"ReactNative\",\n    \"NativeScript\",\n    \"NS\"\n].indexOf(_navigator.product) < 0);\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */ const hasStandardBrowserWebWorkerEnv = (()=>{\n    return typeof WorkerGlobalScope !== \"undefined\" && // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope && typeof self.importScripts === \"function\";\n})();\nconst origin = hasBrowserEnv && window.location.href || \"http://localhost\";\nconst utils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    hasBrowserEnv: hasBrowserEnv,\n    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,\n    hasStandardBrowserEnv: hasStandardBrowserEnv,\n    navigator: _navigator,\n    origin: origin\n});\nconst platform = {\n    ...utils,\n    ...platform$1\n};\nfunction toURLEncodedForm(data, options) {\n    return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n        visitor: function(value, key, path, helpers) {\n            if (platform.isNode && utils$1.isBuffer(value)) {\n                this.append(key, value.toString(\"base64\"));\n                return false;\n            }\n            return helpers.defaultVisitor.apply(this, arguments);\n        }\n    }, options));\n}\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */ function parsePropPath(name) {\n    // foo[x][y][z]\n    // foo.x.y.z\n    // foo-x-y-z\n    // foo x y z\n    return utils$1.matchAll(/\\w+|\\[(\\w*)]/g, name).map((match)=>{\n        return match[0] === \"[]\" ? \"\" : match[1] || match[0];\n    });\n}\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */ function arrayToObject(arr) {\n    const obj = {};\n    const keys = Object.keys(arr);\n    let i;\n    const len = keys.length;\n    let key;\n    for(i = 0; i < len; i++){\n        key = keys[i];\n        obj[key] = arr[key];\n    }\n    return obj;\n}\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */ function formDataToJSON(formData) {\n    function buildPath(path, value, target, index) {\n        let name = path[index++];\n        if (name === \"__proto__\") return true;\n        const isNumericKey = Number.isFinite(+name);\n        const isLast = index >= path.length;\n        name = !name && utils$1.isArray(target) ? target.length : name;\n        if (isLast) {\n            if (utils$1.hasOwnProp(target, name)) {\n                target[name] = [\n                    target[name],\n                    value\n                ];\n            } else {\n                target[name] = value;\n            }\n            return !isNumericKey;\n        }\n        if (!target[name] || !utils$1.isObject(target[name])) {\n            target[name] = [];\n        }\n        const result = buildPath(path, value, target[name], index);\n        if (result && utils$1.isArray(target[name])) {\n            target[name] = arrayToObject(target[name]);\n        }\n        return !isNumericKey;\n    }\n    if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {\n        const obj = {};\n        utils$1.forEachEntry(formData, (name, value)=>{\n            buildPath(parsePropPath(name), value, obj, 0);\n        });\n        return obj;\n    }\n    return null;\n}\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */ function stringifySafely(rawValue, parser, encoder) {\n    if (utils$1.isString(rawValue)) {\n        try {\n            (parser || JSON.parse)(rawValue);\n            return utils$1.trim(rawValue);\n        } catch (e) {\n            if (e.name !== \"SyntaxError\") {\n                throw e;\n            }\n        }\n    }\n    return (encoder || JSON.stringify)(rawValue);\n}\nconst defaults = {\n    transitional: transitionalDefaults,\n    adapter: [\n        \"xhr\",\n        \"http\",\n        \"fetch\"\n    ],\n    transformRequest: [\n        function transformRequest(data, headers) {\n            const contentType = headers.getContentType() || \"\";\n            const hasJSONContentType = contentType.indexOf(\"application/json\") > -1;\n            const isObjectPayload = utils$1.isObject(data);\n            if (isObjectPayload && utils$1.isHTMLForm(data)) {\n                data = new FormData(data);\n            }\n            const isFormData = utils$1.isFormData(data);\n            if (isFormData) {\n                return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n            }\n            if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {\n                return data;\n            }\n            if (utils$1.isArrayBufferView(data)) {\n                return data.buffer;\n            }\n            if (utils$1.isURLSearchParams(data)) {\n                headers.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\", false);\n                return data.toString();\n            }\n            let isFileList;\n            if (isObjectPayload) {\n                if (contentType.indexOf(\"application/x-www-form-urlencoded\") > -1) {\n                    return toURLEncodedForm(data, this.formSerializer).toString();\n                }\n                if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf(\"multipart/form-data\") > -1) {\n                    const _FormData = this.env && this.env.FormData;\n                    return toFormData(isFileList ? {\n                        \"files[]\": data\n                    } : data, _FormData && new _FormData(), this.formSerializer);\n                }\n            }\n            if (isObjectPayload || hasJSONContentType) {\n                headers.setContentType(\"application/json\", false);\n                return stringifySafely(data);\n            }\n            return data;\n        }\n    ],\n    transformResponse: [\n        function transformResponse(data) {\n            const transitional = this.transitional || defaults.transitional;\n            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n            const JSONRequested = this.responseType === \"json\";\n            if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {\n                return data;\n            }\n            if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n                const silentJSONParsing = transitional && transitional.silentJSONParsing;\n                const strictJSONParsing = !silentJSONParsing && JSONRequested;\n                try {\n                    return JSON.parse(data);\n                } catch (e) {\n                    if (strictJSONParsing) {\n                        if (e.name === \"SyntaxError\") {\n                            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n                        }\n                        throw e;\n                    }\n                }\n            }\n            return data;\n        }\n    ],\n    /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */ timeout: 0,\n    xsrfCookieName: \"XSRF-TOKEN\",\n    xsrfHeaderName: \"X-XSRF-TOKEN\",\n    maxContentLength: -1,\n    maxBodyLength: -1,\n    env: {\n        FormData: platform.classes.FormData,\n        Blob: platform.classes.Blob\n    },\n    validateStatus: function validateStatus(status) {\n        return status >= 200 && status < 300;\n    },\n    headers: {\n        common: {\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Content-Type\": undefined\n        }\n    }\n};\nutils$1.forEach([\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"post\",\n    \"put\",\n    \"patch\"\n], (method)=>{\n    defaults.headers[method] = {};\n});\nconst defaults$1 = defaults;\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils$1.toObjectSet([\n    \"age\",\n    \"authorization\",\n    \"content-length\",\n    \"content-type\",\n    \"etag\",\n    \"expires\",\n    \"from\",\n    \"host\",\n    \"if-modified-since\",\n    \"if-unmodified-since\",\n    \"last-modified\",\n    \"location\",\n    \"max-forwards\",\n    \"proxy-authorization\",\n    \"referer\",\n    \"retry-after\",\n    \"user-agent\"\n]);\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */ const parseHeaders = (rawHeaders)=>{\n    const parsed = {};\n    let key;\n    let val;\n    let i;\n    rawHeaders && rawHeaders.split(\"\\n\").forEach(function parser(line) {\n        i = line.indexOf(\":\");\n        key = line.substring(0, i).trim().toLowerCase();\n        val = line.substring(i + 1).trim();\n        if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n            return;\n        }\n        if (key === \"set-cookie\") {\n            if (parsed[key]) {\n                parsed[key].push(val);\n            } else {\n                parsed[key] = [\n                    val\n                ];\n            }\n        } else {\n            parsed[key] = parsed[key] ? parsed[key] + \", \" + val : val;\n        }\n    });\n    return parsed;\n};\nconst $internals = Symbol(\"internals\");\nfunction normalizeHeader(header) {\n    return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n    if (value === false || value == null) {\n        return value;\n    }\n    return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n    const tokens = Object.create(null);\n    const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n    let match;\n    while(match = tokensRE.exec(str)){\n        tokens[match[1]] = match[2];\n    }\n    return tokens;\n}\nconst isValidHeaderName = (str)=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n    if (utils$1.isFunction(filter)) {\n        return filter.call(this, value, header);\n    }\n    if (isHeaderNameFilter) {\n        value = header;\n    }\n    if (!utils$1.isString(value)) return;\n    if (utils$1.isString(filter)) {\n        return value.indexOf(filter) !== -1;\n    }\n    if (utils$1.isRegExp(filter)) {\n        return filter.test(value);\n    }\n}\nfunction formatHeader(header) {\n    return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str)=>{\n        return char.toUpperCase() + str;\n    });\n}\nfunction buildAccessors(obj, header) {\n    const accessorName = utils$1.toCamelCase(\" \" + header);\n    [\n        \"get\",\n        \"set\",\n        \"has\"\n    ].forEach((methodName)=>{\n        Object.defineProperty(obj, methodName + accessorName, {\n            value: function(arg1, arg2, arg3) {\n                return this[methodName].call(this, header, arg1, arg2, arg3);\n            },\n            configurable: true\n        });\n    });\n}\nclass AxiosHeaders {\n    constructor(headers){\n        headers && this.set(headers);\n    }\n    set(header, valueOrRewrite, rewrite) {\n        const self1 = this;\n        function setHeader(_value, _header, _rewrite) {\n            const lHeader = normalizeHeader(_header);\n            if (!lHeader) {\n                throw new Error(\"header name must be a non-empty string\");\n            }\n            const key = utils$1.findKey(self1, lHeader);\n            if (!key || self1[key] === undefined || _rewrite === true || _rewrite === undefined && self1[key] !== false) {\n                self1[key || _header] = normalizeValue(_value);\n            }\n        }\n        const setHeaders = (headers, _rewrite)=>utils$1.forEach(headers, (_value, _header)=>setHeader(_value, _header, _rewrite));\n        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {\n            setHeaders(header, valueOrRewrite);\n        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n            setHeaders(parseHeaders(header), valueOrRewrite);\n        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {\n            let obj = {}, dest, key;\n            for (const entry of header){\n                if (!utils$1.isArray(entry)) {\n                    throw TypeError(\"Object iterator must return a key-value pair\");\n                }\n                obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [\n                    ...dest,\n                    entry[1]\n                ] : [\n                    dest,\n                    entry[1]\n                ] : entry[1];\n            }\n            setHeaders(obj, valueOrRewrite);\n        } else {\n            header != null && setHeader(valueOrRewrite, header, rewrite);\n        }\n        return this;\n    }\n    get(header, parser) {\n        header = normalizeHeader(header);\n        if (header) {\n            const key = utils$1.findKey(this, header);\n            if (key) {\n                const value = this[key];\n                if (!parser) {\n                    return value;\n                }\n                if (parser === true) {\n                    return parseTokens(value);\n                }\n                if (utils$1.isFunction(parser)) {\n                    return parser.call(this, value, key);\n                }\n                if (utils$1.isRegExp(parser)) {\n                    return parser.exec(value);\n                }\n                throw new TypeError(\"parser must be boolean|regexp|function\");\n            }\n        }\n    }\n    has(header, matcher) {\n        header = normalizeHeader(header);\n        if (header) {\n            const key = utils$1.findKey(this, header);\n            return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n        }\n        return false;\n    }\n    delete(header, matcher) {\n        const self1 = this;\n        let deleted = false;\n        function deleteHeader(_header) {\n            _header = normalizeHeader(_header);\n            if (_header) {\n                const key = utils$1.findKey(self1, _header);\n                if (key && (!matcher || matchHeaderValue(self1, self1[key], key, matcher))) {\n                    delete self1[key];\n                    deleted = true;\n                }\n            }\n        }\n        if (utils$1.isArray(header)) {\n            header.forEach(deleteHeader);\n        } else {\n            deleteHeader(header);\n        }\n        return deleted;\n    }\n    clear(matcher) {\n        const keys = Object.keys(this);\n        let i = keys.length;\n        let deleted = false;\n        while(i--){\n            const key = keys[i];\n            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n                delete this[key];\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    normalize(format) {\n        const self1 = this;\n        const headers = {};\n        utils$1.forEach(this, (value, header)=>{\n            const key = utils$1.findKey(headers, header);\n            if (key) {\n                self1[key] = normalizeValue(value);\n                delete self1[header];\n                return;\n            }\n            const normalized = format ? formatHeader(header) : String(header).trim();\n            if (normalized !== header) {\n                delete self1[header];\n            }\n            self1[normalized] = normalizeValue(value);\n            headers[normalized] = true;\n        });\n        return this;\n    }\n    concat(...targets) {\n        return this.constructor.concat(this, ...targets);\n    }\n    toJSON(asStrings) {\n        const obj = Object.create(null);\n        utils$1.forEach(this, (value, header)=>{\n            value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(\", \") : value);\n        });\n        return obj;\n    }\n    [Symbol.iterator]() {\n        return Object.entries(this.toJSON())[Symbol.iterator]();\n    }\n    toString() {\n        return Object.entries(this.toJSON()).map(([header, value])=>header + \": \" + value).join(\"\\n\");\n    }\n    getSetCookie() {\n        return this.get(\"set-cookie\") || [];\n    }\n    get [Symbol.toStringTag]() {\n        return \"AxiosHeaders\";\n    }\n    static from(thing) {\n        return thing instanceof this ? thing : new this(thing);\n    }\n    static concat(first, ...targets) {\n        const computed = new this(first);\n        targets.forEach((target)=>computed.set(target));\n        return computed;\n    }\n    static accessor(header) {\n        const internals = this[$internals] = this[$internals] = {\n            accessors: {}\n        };\n        const accessors = internals.accessors;\n        const prototype = this.prototype;\n        function defineAccessor(_header) {\n            const lHeader = normalizeHeader(_header);\n            if (!accessors[lHeader]) {\n                buildAccessors(prototype, _header);\n                accessors[lHeader] = true;\n            }\n        }\n        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n        return this;\n    }\n}\nAxiosHeaders.accessor([\n    \"Content-Type\",\n    \"Content-Length\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"User-Agent\",\n    \"Authorization\"\n]);\n// reserved names hotfix\nutils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key)=>{\n    let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n    return {\n        get: ()=>value,\n        set (headerValue) {\n            this[mapped] = headerValue;\n        }\n    };\n});\nutils$1.freezeMethods(AxiosHeaders);\nconst AxiosHeaders$1 = AxiosHeaders;\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */ function transformData(fns, response) {\n    const config = this || defaults$1;\n    const context = response || config;\n    const headers = AxiosHeaders$1.from(context.headers);\n    let data = context.data;\n    utils$1.forEach(fns, function transform(fn) {\n        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n    });\n    headers.normalize();\n    return data;\n}\nfunction isCancel(value) {\n    return !!(value && value.__CANCEL__);\n}\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */ function CanceledError(message, config, request) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    AxiosError.call(this, message == null ? \"canceled\" : message, AxiosError.ERR_CANCELED, config, request);\n    this.name = \"CanceledError\";\n}\nutils$1.inherits(CanceledError, AxiosError, {\n    __CANCEL__: true\n});\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */ function settle(resolve, reject, response) {\n    const validateStatus = response.config.validateStatus;\n    if (!response.status || !validateStatus || validateStatus(response.status)) {\n        resolve(response);\n    } else {\n        reject(new AxiosError(\"Request failed with status code \" + response.status, [\n            AxiosError.ERR_BAD_REQUEST,\n            AxiosError.ERR_BAD_RESPONSE\n        ][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n    }\n}\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */ function isAbsoluteURL(url) {\n    // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n    // by any combination of letters, digits, plus, period, or hyphen.\n    return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */ function combineURLs(baseURL, relativeURL) {\n    return relativeURL ? baseURL.replace(/\\/?\\/$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n}\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */ function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n    let isRelativeUrl = !isAbsoluteURL(requestedURL);\n    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n        return combineURLs(baseURL, requestedURL);\n    }\n    return requestedURL;\n}\nconst VERSION = \"1.9.0\";\nfunction parseProtocol(url) {\n    const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n    return match && match[1] || \"\";\n}\nconst DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;\n/**\n * Parse data uri to a Buffer or Blob\n *\n * @param {String} uri\n * @param {?Boolean} asBlob\n * @param {?Object} options\n * @param {?Function} options.Blob\n *\n * @returns {Buffer|Blob}\n */ function fromDataURI(uri, asBlob, options) {\n    const _Blob = options && options.Blob || platform.classes.Blob;\n    const protocol = parseProtocol(uri);\n    if (asBlob === undefined && _Blob) {\n        asBlob = true;\n    }\n    if (protocol === \"data\") {\n        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;\n        const match = DATA_URL_PATTERN.exec(uri);\n        if (!match) {\n            throw new AxiosError(\"Invalid URL\", AxiosError.ERR_INVALID_URL);\n        }\n        const mime = match[1];\n        const isBase64 = match[2];\n        const body = match[3];\n        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? \"base64\" : \"utf8\");\n        if (asBlob) {\n            if (!_Blob) {\n                throw new AxiosError(\"Blob is not supported\", AxiosError.ERR_NOT_SUPPORT);\n            }\n            return new _Blob([\n                buffer\n            ], {\n                type: mime\n            });\n        }\n        return buffer;\n    }\n    throw new AxiosError(\"Unsupported protocol \" + protocol, AxiosError.ERR_NOT_SUPPORT);\n}\nconst kInternals = Symbol(\"internals\");\nclass AxiosTransformStream extends stream__default[\"default\"].Transform {\n    constructor(options){\n        options = utils$1.toFlatObject(options, {\n            maxRate: 0,\n            chunkSize: 64 * 1024,\n            minChunkSize: 100,\n            timeWindow: 500,\n            ticksRate: 2,\n            samplesCount: 15\n        }, null, (prop, source)=>{\n            return !utils$1.isUndefined(source[prop]);\n        });\n        super({\n            readableHighWaterMark: options.chunkSize\n        });\n        const internals = this[kInternals] = {\n            timeWindow: options.timeWindow,\n            chunkSize: options.chunkSize,\n            maxRate: options.maxRate,\n            minChunkSize: options.minChunkSize,\n            bytesSeen: 0,\n            isCaptured: false,\n            notifiedBytesLoaded: 0,\n            ts: Date.now(),\n            bytes: 0,\n            onReadCallback: null\n        };\n        this.on(\"newListener\", (event)=>{\n            if (event === \"progress\") {\n                if (!internals.isCaptured) {\n                    internals.isCaptured = true;\n                }\n            }\n        });\n    }\n    _read(size) {\n        const internals = this[kInternals];\n        if (internals.onReadCallback) {\n            internals.onReadCallback();\n        }\n        return super._read(size);\n    }\n    _transform(chunk, encoding, callback) {\n        const internals = this[kInternals];\n        const maxRate = internals.maxRate;\n        const readableHighWaterMark = this.readableHighWaterMark;\n        const timeWindow = internals.timeWindow;\n        const divider = 1000 / timeWindow;\n        const bytesThreshold = maxRate / divider;\n        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;\n        const pushChunk = (_chunk, _callback)=>{\n            const bytes = Buffer.byteLength(_chunk);\n            internals.bytesSeen += bytes;\n            internals.bytes += bytes;\n            internals.isCaptured && this.emit(\"progress\", internals.bytesSeen);\n            if (this.push(_chunk)) {\n                process.nextTick(_callback);\n            } else {\n                internals.onReadCallback = ()=>{\n                    internals.onReadCallback = null;\n                    process.nextTick(_callback);\n                };\n            }\n        };\n        const transformChunk = (_chunk, _callback)=>{\n            const chunkSize = Buffer.byteLength(_chunk);\n            let chunkRemainder = null;\n            let maxChunkSize = readableHighWaterMark;\n            let bytesLeft;\n            let passed = 0;\n            if (maxRate) {\n                const now = Date.now();\n                if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {\n                    internals.ts = now;\n                    bytesLeft = bytesThreshold - internals.bytes;\n                    internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;\n                    passed = 0;\n                }\n                bytesLeft = bytesThreshold - internals.bytes;\n            }\n            if (maxRate) {\n                if (bytesLeft <= 0) {\n                    // next time window\n                    return setTimeout(()=>{\n                        _callback(null, _chunk);\n                    }, timeWindow - passed);\n                }\n                if (bytesLeft < maxChunkSize) {\n                    maxChunkSize = bytesLeft;\n                }\n            }\n            if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {\n                chunkRemainder = _chunk.subarray(maxChunkSize);\n                _chunk = _chunk.subarray(0, maxChunkSize);\n            }\n            pushChunk(_chunk, chunkRemainder ? ()=>{\n                process.nextTick(_callback, null, chunkRemainder);\n            } : _callback);\n        };\n        transformChunk(chunk, function transformNextChunk(err, _chunk) {\n            if (err) {\n                return callback(err);\n            }\n            if (_chunk) {\n                transformChunk(_chunk, transformNextChunk);\n            } else {\n                callback(null);\n            }\n        });\n    }\n}\nconst AxiosTransformStream$1 = AxiosTransformStream;\nconst { asyncIterator } = Symbol;\nconst readBlob = async function*(blob) {\n    if (blob.stream) {\n        yield* blob.stream();\n    } else if (blob.arrayBuffer) {\n        yield await blob.arrayBuffer();\n    } else if (blob[asyncIterator]) {\n        yield* blob[asyncIterator]();\n    } else {\n        yield blob;\n    }\n};\nconst readBlob$1 = readBlob;\nconst BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + \"-_\";\nconst textEncoder = typeof TextEncoder === \"function\" ? new TextEncoder() : new util__default[\"default\"].TextEncoder();\nconst CRLF = \"\\r\\n\";\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\nclass FormDataPart {\n    constructor(name, value){\n        const { escapeName } = this.constructor;\n        const isStringValue = utils$1.isString(value);\n        let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${!isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : \"\"}${CRLF}`;\n        if (isStringValue) {\n            value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n        } else {\n            headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`;\n        }\n        this.headers = textEncoder.encode(headers + CRLF);\n        this.contentLength = isStringValue ? value.byteLength : value.size;\n        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n        this.name = name;\n        this.value = value;\n    }\n    async *encode() {\n        yield this.headers;\n        const { value } = this;\n        if (utils$1.isTypedArray(value)) {\n            yield value;\n        } else {\n            yield* readBlob$1(value);\n        }\n        yield CRLF_BYTES;\n    }\n    static escapeName(name) {\n        return String(name).replace(/[\\r\\n\"]/g, (match)=>({\n                \"\\r\": \"%0D\",\n                \"\\n\": \"%0A\",\n                '\"': \"%22\"\n            })[match]);\n    }\n}\nconst formDataToStream = (form, headersHandler, options)=>{\n    const { tag = \"form-data-boundary\", size = 25, boundary = tag + \"-\" + platform.generateString(size, BOUNDARY_ALPHABET) } = options || {};\n    if (!utils$1.isFormData(form)) {\n        throw TypeError(\"FormData instance required\");\n    }\n    if (boundary.length < 1 || boundary.length > 70) {\n        throw Error(\"boundary must be 10-70 characters long\");\n    }\n    const boundaryBytes = textEncoder.encode(\"--\" + boundary + CRLF);\n    const footerBytes = textEncoder.encode(\"--\" + boundary + \"--\" + CRLF);\n    let contentLength = footerBytes.byteLength;\n    const parts = Array.from(form.entries()).map(([name, value])=>{\n        const part = new FormDataPart(name, value);\n        contentLength += part.size;\n        return part;\n    });\n    contentLength += boundaryBytes.byteLength * parts.length;\n    contentLength = utils$1.toFiniteNumber(contentLength);\n    const computedHeaders = {\n        \"Content-Type\": `multipart/form-data; boundary=${boundary}`\n    };\n    if (Number.isFinite(contentLength)) {\n        computedHeaders[\"Content-Length\"] = contentLength;\n    }\n    headersHandler && headersHandler(computedHeaders);\n    return stream.Readable.from(async function*() {\n        for (const part of parts){\n            yield boundaryBytes;\n            yield* part.encode();\n        }\n        yield footerBytes;\n    }());\n};\nconst formDataToStream$1 = formDataToStream;\nclass ZlibHeaderTransformStream extends stream__default[\"default\"].Transform {\n    __transform(chunk, encoding, callback) {\n        this.push(chunk);\n        callback();\n    }\n    _transform(chunk, encoding, callback) {\n        if (chunk.length !== 0) {\n            this._transform = this.__transform;\n            // Add Default Compression headers if no zlib headers are present\n            if (chunk[0] !== 120) {\n                const header = Buffer.alloc(2);\n                header[0] = 120; // Hex: 78\n                header[1] = 156; // Hex: 9C \n                this.push(header, encoding);\n            }\n        }\n        this.__transform(chunk, encoding, callback);\n    }\n}\nconst ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;\nconst callbackify = (fn, reducer)=>{\n    return utils$1.isAsyncFn(fn) ? function(...args) {\n        const cb = args.pop();\n        fn.apply(this, args).then((value)=>{\n            try {\n                reducer ? cb(null, ...reducer(value)) : cb(null, value);\n            } catch (err) {\n                cb(err);\n            }\n        }, cb);\n    } : fn;\n};\nconst callbackify$1 = callbackify;\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */ function speedometer(samplesCount, min) {\n    samplesCount = samplesCount || 10;\n    const bytes = new Array(samplesCount);\n    const timestamps = new Array(samplesCount);\n    let head = 0;\n    let tail = 0;\n    let firstSampleTS;\n    min = min !== undefined ? min : 1000;\n    return function push(chunkLength) {\n        const now = Date.now();\n        const startedAt = timestamps[tail];\n        if (!firstSampleTS) {\n            firstSampleTS = now;\n        }\n        bytes[head] = chunkLength;\n        timestamps[head] = now;\n        let i = tail;\n        let bytesCount = 0;\n        while(i !== head){\n            bytesCount += bytes[i++];\n            i = i % samplesCount;\n        }\n        head = (head + 1) % samplesCount;\n        if (head === tail) {\n            tail = (tail + 1) % samplesCount;\n        }\n        if (now - firstSampleTS < min) {\n            return;\n        }\n        const passed = startedAt && now - startedAt;\n        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n    };\n}\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */ function throttle(fn, freq) {\n    let timestamp = 0;\n    let threshold = 1000 / freq;\n    let lastArgs;\n    let timer;\n    const invoke = (args, now = Date.now())=>{\n        timestamp = now;\n        lastArgs = null;\n        if (timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        fn.apply(null, args);\n    };\n    const throttled = (...args)=>{\n        const now = Date.now();\n        const passed = now - timestamp;\n        if (passed >= threshold) {\n            invoke(args, now);\n        } else {\n            lastArgs = args;\n            if (!timer) {\n                timer = setTimeout(()=>{\n                    timer = null;\n                    invoke(lastArgs);\n                }, threshold - passed);\n            }\n        }\n    };\n    const flush = ()=>lastArgs && invoke(lastArgs);\n    return [\n        throttled,\n        flush\n    ];\n}\nconst progressEventReducer = (listener, isDownloadStream, freq = 3)=>{\n    let bytesNotified = 0;\n    const _speedometer = speedometer(50, 250);\n    return throttle((e)=>{\n        const loaded = e.loaded;\n        const total = e.lengthComputable ? e.total : undefined;\n        const progressBytes = loaded - bytesNotified;\n        const rate = _speedometer(progressBytes);\n        const inRange = loaded <= total;\n        bytesNotified = loaded;\n        const data = {\n            loaded,\n            total,\n            progress: total ? loaded / total : undefined,\n            bytes: progressBytes,\n            rate: rate ? rate : undefined,\n            estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n            event: e,\n            lengthComputable: total != null,\n            [isDownloadStream ? \"download\" : \"upload\"]: true\n        };\n        listener(data);\n    }, freq);\n};\nconst progressEventDecorator = (total, throttled)=>{\n    const lengthComputable = total != null;\n    return [\n        (loaded)=>throttled[0]({\n                lengthComputable,\n                total,\n                loaded\n            }),\n        throttled[1]\n    ];\n};\nconst asyncDecorator = (fn)=>(...args)=>utils$1.asap(()=>fn(...args));\nconst zlibOptions = {\n    flush: zlib__default[\"default\"].constants.Z_SYNC_FLUSH,\n    finishFlush: zlib__default[\"default\"].constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n    flush: zlib__default[\"default\"].constants.BROTLI_OPERATION_FLUSH,\n    finishFlush: zlib__default[\"default\"].constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils$1.isFunction(zlib__default[\"default\"].createBrotliDecompress);\nconst { http: httpFollow, https: httpsFollow } = followRedirects__default[\"default\"];\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map((protocol)=>{\n    return protocol + \":\";\n});\nconst flushOnFinish = (stream, [throttled, flush])=>{\n    stream.on(\"end\", flush).on(\"error\", flush);\n    return throttled;\n};\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */ function dispatchBeforeRedirect(options, responseDetails) {\n    if (options.beforeRedirects.proxy) {\n        options.beforeRedirects.proxy(options);\n    }\n    if (options.beforeRedirects.config) {\n        options.beforeRedirects.config(options, responseDetails);\n    }\n}\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */ function setProxy(options, configProxy, location) {\n    let proxy = configProxy;\n    if (!proxy && proxy !== false) {\n        const proxyUrl = proxyFromEnv__default[\"default\"].getProxyForUrl(location);\n        if (proxyUrl) {\n            proxy = new URL(proxyUrl);\n        }\n    }\n    if (proxy) {\n        // Basic proxy authorization\n        if (proxy.username) {\n            proxy.auth = (proxy.username || \"\") + \":\" + (proxy.password || \"\");\n        }\n        if (proxy.auth) {\n            // Support proxy auth object form\n            if (proxy.auth.username || proxy.auth.password) {\n                proxy.auth = (proxy.auth.username || \"\") + \":\" + (proxy.auth.password || \"\");\n            }\n            const base64 = Buffer.from(proxy.auth, \"utf8\").toString(\"base64\");\n            options.headers[\"Proxy-Authorization\"] = \"Basic \" + base64;\n        }\n        options.headers.host = options.hostname + (options.port ? \":\" + options.port : \"\");\n        const proxyHost = proxy.hostname || proxy.host;\n        options.hostname = proxyHost;\n        // Replace 'host' since options is not a URL object\n        options.host = proxyHost;\n        options.port = proxy.port;\n        options.path = location;\n        if (proxy.protocol) {\n            options.protocol = proxy.protocol.includes(\":\") ? proxy.protocol : `${proxy.protocol}:`;\n        }\n    }\n    options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n        // Configure proxy for redirected request, passing the original config proxy to apply\n        // the exact same logic as if the redirected request was performed by axios directly.\n        setProxy(redirectOptions, configProxy, redirectOptions.href);\n    };\n}\nconst isHttpAdapterSupported = typeof process !== \"undefined\" && utils$1.kindOf(process) === \"process\";\n// temporary hotfix\nconst wrapAsync = (asyncExecutor)=>{\n    return new Promise((resolve, reject)=>{\n        let onDone;\n        let isDone;\n        const done = (value, isRejected)=>{\n            if (isDone) return;\n            isDone = true;\n            onDone && onDone(value, isRejected);\n        };\n        const _resolve = (value)=>{\n            done(value);\n            resolve(value);\n        };\n        const _reject = (reason)=>{\n            done(reason, true);\n            reject(reason);\n        };\n        asyncExecutor(_resolve, _reject, (onDoneHandler)=>onDone = onDoneHandler).catch(_reject);\n    });\n};\nconst resolveFamily = ({ address, family })=>{\n    if (!utils$1.isString(address)) {\n        throw TypeError(\"address must be a string\");\n    }\n    return {\n        address,\n        family: family || (address.indexOf(\".\") < 0 ? 6 : 4)\n    };\n};\nconst buildAddressEntry = (address, family)=>resolveFamily(utils$1.isObject(address) ? address : {\n        address,\n        family\n    });\n/*eslint consistent-return:0*/ const httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {\n    return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n        let { data, lookup, family } = config;\n        const { responseType, responseEncoding } = config;\n        const method = config.method.toUpperCase();\n        let isDone;\n        let rejected = false;\n        let req;\n        if (lookup) {\n            const _lookup = callbackify$1(lookup, (value)=>utils$1.isArray(value) ? value : [\n                    value\n                ]);\n            // hotfix to support opt.all option which is required for node 20.x\n            lookup = (hostname, opt, cb)=>{\n                _lookup(hostname, opt, (err, arg0, arg1)=>{\n                    if (err) {\n                        return cb(err);\n                    }\n                    const addresses = utils$1.isArray(arg0) ? arg0.map((addr)=>buildAddressEntry(addr)) : [\n                        buildAddressEntry(arg0, arg1)\n                    ];\n                    opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n                });\n            };\n        }\n        // temporary internal emitter until the AxiosRequest class will be implemented\n        const emitter = new events.EventEmitter();\n        const onFinished = ()=>{\n            if (config.cancelToken) {\n                config.cancelToken.unsubscribe(abort);\n            }\n            if (config.signal) {\n                config.signal.removeEventListener(\"abort\", abort);\n            }\n            emitter.removeAllListeners();\n        };\n        onDone((value, isRejected)=>{\n            isDone = true;\n            if (isRejected) {\n                rejected = true;\n                onFinished();\n            }\n        });\n        function abort(reason) {\n            emitter.emit(\"abort\", !reason || reason.type ? new CanceledError(null, config, req) : reason);\n        }\n        emitter.once(\"abort\", reject);\n        if (config.cancelToken || config.signal) {\n            config.cancelToken && config.cancelToken.subscribe(abort);\n            if (config.signal) {\n                config.signal.aborted ? abort() : config.signal.addEventListener(\"abort\", abort);\n            }\n        }\n        // Parse url\n        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n        const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);\n        const protocol = parsed.protocol || supportedProtocols[0];\n        if (protocol === \"data:\") {\n            let convertedData;\n            if (method !== \"GET\") {\n                return settle(resolve, reject, {\n                    status: 405,\n                    statusText: \"method not allowed\",\n                    headers: {},\n                    config\n                });\n            }\n            try {\n                convertedData = fromDataURI(config.url, responseType === \"blob\", {\n                    Blob: config.env && config.env.Blob\n                });\n            } catch (err) {\n                throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n            }\n            if (responseType === \"text\") {\n                convertedData = convertedData.toString(responseEncoding);\n                if (!responseEncoding || responseEncoding === \"utf8\") {\n                    convertedData = utils$1.stripBOM(convertedData);\n                }\n            } else if (responseType === \"stream\") {\n                convertedData = stream__default[\"default\"].Readable.from(convertedData);\n            }\n            return settle(resolve, reject, {\n                data: convertedData,\n                status: 200,\n                statusText: \"OK\",\n                headers: new AxiosHeaders$1(),\n                config\n            });\n        }\n        if (supportedProtocols.indexOf(protocol) === -1) {\n            return reject(new AxiosError(\"Unsupported protocol \" + protocol, AxiosError.ERR_BAD_REQUEST, config));\n        }\n        const headers = AxiosHeaders$1.from(config.headers).normalize();\n        // Set User-Agent (required by some servers)\n        // See https://github.com/axios/axios/issues/69\n        // User-Agent is specified; handle case where no UA header is desired\n        // Only set header if it hasn't been set in config\n        headers.set(\"User-Agent\", \"axios/\" + VERSION, false);\n        const { onUploadProgress, onDownloadProgress } = config;\n        const maxRate = config.maxRate;\n        let maxUploadRate = undefined;\n        let maxDownloadRate = undefined;\n        // support for spec compliant FormData objects\n        if (utils$1.isSpecCompliantForm(data)) {\n            const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n            data = formDataToStream$1(data, (formHeaders)=>{\n                headers.set(formHeaders);\n            }, {\n                tag: `axios-${VERSION}-boundary`,\n                boundary: userBoundary && userBoundary[1] || undefined\n            });\n        // support for https://www.npmjs.com/package/form-data api\n        } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {\n            headers.set(data.getHeaders());\n            if (!headers.hasContentLength()) {\n                try {\n                    const knownLength = await util__default[\"default\"].promisify(data.getLength).call(data);\n                    Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n                /*eslint no-empty:0*/ } catch (e) {}\n            }\n        } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {\n            data.size && headers.setContentType(data.type || \"application/octet-stream\");\n            headers.setContentLength(data.size || 0);\n            data = stream__default[\"default\"].Readable.from(readBlob$1(data));\n        } else if (data && !utils$1.isStream(data)) {\n            if (Buffer.isBuffer(data)) ;\n            else if (utils$1.isArrayBuffer(data)) {\n                data = Buffer.from(new Uint8Array(data));\n            } else if (utils$1.isString(data)) {\n                data = Buffer.from(data, \"utf-8\");\n            } else {\n                return reject(new AxiosError(\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\", AxiosError.ERR_BAD_REQUEST, config));\n            }\n            // Add Content-Length header if data exists\n            headers.setContentLength(data.length, false);\n            if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n                return reject(new AxiosError(\"Request body larger than maxBodyLength limit\", AxiosError.ERR_BAD_REQUEST, config));\n            }\n        }\n        const contentLength = utils$1.toFiniteNumber(headers.getContentLength());\n        if (utils$1.isArray(maxRate)) {\n            maxUploadRate = maxRate[0];\n            maxDownloadRate = maxRate[1];\n        } else {\n            maxUploadRate = maxDownloadRate = maxRate;\n        }\n        if (data && (onUploadProgress || maxUploadRate)) {\n            if (!utils$1.isStream(data)) {\n                data = stream__default[\"default\"].Readable.from(data, {\n                    objectMode: false\n                });\n            }\n            data = stream__default[\"default\"].pipeline([\n                data,\n                new AxiosTransformStream$1({\n                    maxRate: utils$1.toFiniteNumber(maxUploadRate)\n                })\n            ], utils$1.noop);\n            onUploadProgress && data.on(\"progress\", flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));\n        }\n        // HTTP basic authentication\n        let auth = undefined;\n        if (config.auth) {\n            const username = config.auth.username || \"\";\n            const password = config.auth.password || \"\";\n            auth = username + \":\" + password;\n        }\n        if (!auth && parsed.username) {\n            const urlUsername = parsed.username;\n            const urlPassword = parsed.password;\n            auth = urlUsername + \":\" + urlPassword;\n        }\n        auth && headers.delete(\"authorization\");\n        let path;\n        try {\n            path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, \"\");\n        } catch (err) {\n            const customErr = new Error(err.message);\n            customErr.config = config;\n            customErr.url = config.url;\n            customErr.exists = true;\n            return reject(customErr);\n        }\n        headers.set(\"Accept-Encoding\", \"gzip, compress, deflate\" + (isBrotliSupported ? \", br\" : \"\"), false);\n        const options = {\n            path,\n            method: method,\n            headers: headers.toJSON(),\n            agents: {\n                http: config.httpAgent,\n                https: config.httpsAgent\n            },\n            auth,\n            protocol,\n            family,\n            beforeRedirect: dispatchBeforeRedirect,\n            beforeRedirects: {}\n        };\n        // cacheable-lookup integration hotfix\n        !utils$1.isUndefined(lookup) && (options.lookup = lookup);\n        if (config.socketPath) {\n            options.socketPath = config.socketPath;\n        } else {\n            options.hostname = parsed.hostname.startsWith(\"[\") ? parsed.hostname.slice(1, -1) : parsed.hostname;\n            options.port = parsed.port;\n            setProxy(options, config.proxy, protocol + \"//\" + parsed.hostname + (parsed.port ? \":\" + parsed.port : \"\") + options.path);\n        }\n        let transport;\n        const isHttpsRequest = isHttps.test(options.protocol);\n        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n        if (config.transport) {\n            transport = config.transport;\n        } else if (config.maxRedirects === 0) {\n            transport = isHttpsRequest ? https__default[\"default\"] : http__default[\"default\"];\n        } else {\n            if (config.maxRedirects) {\n                options.maxRedirects = config.maxRedirects;\n            }\n            if (config.beforeRedirect) {\n                options.beforeRedirects.config = config.beforeRedirect;\n            }\n            transport = isHttpsRequest ? httpsFollow : httpFollow;\n        }\n        if (config.maxBodyLength > -1) {\n            options.maxBodyLength = config.maxBodyLength;\n        } else {\n            // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n            options.maxBodyLength = Infinity;\n        }\n        if (config.insecureHTTPParser) {\n            options.insecureHTTPParser = config.insecureHTTPParser;\n        }\n        // Create the request\n        req = transport.request(options, function handleResponse(res) {\n            if (req.destroyed) return;\n            const streams = [\n                res\n            ];\n            const responseLength = +res.headers[\"content-length\"];\n            if (onDownloadProgress || maxDownloadRate) {\n                const transformStream = new AxiosTransformStream$1({\n                    maxRate: utils$1.toFiniteNumber(maxDownloadRate)\n                });\n                onDownloadProgress && transformStream.on(\"progress\", flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));\n                streams.push(transformStream);\n            }\n            // decompress the response body transparently if required\n            let responseStream = res;\n            // return the last request in case of redirects\n            const lastRequest = res.req || req;\n            // if decompress disabled we should not decompress\n            if (config.decompress !== false && res.headers[\"content-encoding\"]) {\n                // if no content, but headers still say that it is encoded,\n                // remove the header not confuse downstream operations\n                if (method === \"HEAD\" || res.statusCode === 204) {\n                    delete res.headers[\"content-encoding\"];\n                }\n                switch((res.headers[\"content-encoding\"] || \"\").toLowerCase()){\n                    /*eslint default-case:0*/ case \"gzip\":\n                    case \"x-gzip\":\n                    case \"compress\":\n                    case \"x-compress\":\n                        // add the unzipper to the body stream processing pipeline\n                        streams.push(zlib__default[\"default\"].createUnzip(zlibOptions));\n                        // remove the content-encoding in order to not confuse downstream operations\n                        delete res.headers[\"content-encoding\"];\n                        break;\n                    case \"deflate\":\n                        streams.push(new ZlibHeaderTransformStream$1());\n                        // add the unzipper to the body stream processing pipeline\n                        streams.push(zlib__default[\"default\"].createUnzip(zlibOptions));\n                        // remove the content-encoding in order to not confuse downstream operations\n                        delete res.headers[\"content-encoding\"];\n                        break;\n                    case \"br\":\n                        if (isBrotliSupported) {\n                            streams.push(zlib__default[\"default\"].createBrotliDecompress(brotliOptions));\n                            delete res.headers[\"content-encoding\"];\n                        }\n                }\n            }\n            responseStream = streams.length > 1 ? stream__default[\"default\"].pipeline(streams, utils$1.noop) : streams[0];\n            const offListeners = stream__default[\"default\"].finished(responseStream, ()=>{\n                offListeners();\n                onFinished();\n            });\n            const response = {\n                status: res.statusCode,\n                statusText: res.statusMessage,\n                headers: new AxiosHeaders$1(res.headers),\n                config,\n                request: lastRequest\n            };\n            if (responseType === \"stream\") {\n                response.data = responseStream;\n                settle(resolve, reject, response);\n            } else {\n                const responseBuffer = [];\n                let totalResponseBytes = 0;\n                responseStream.on(\"data\", function handleStreamData(chunk) {\n                    responseBuffer.push(chunk);\n                    totalResponseBytes += chunk.length;\n                    // make sure the content length is not over the maxContentLength if specified\n                    if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n                        // stream.destroy() emit aborted event before calling reject() on Node.js v16\n                        rejected = true;\n                        responseStream.destroy();\n                        reject(new AxiosError(\"maxContentLength size of \" + config.maxContentLength + \" exceeded\", AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n                    }\n                });\n                responseStream.on(\"aborted\", function handlerStreamAborted() {\n                    if (rejected) {\n                        return;\n                    }\n                    const err = new AxiosError(\"stream has been aborted\", AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n                    responseStream.destroy(err);\n                    reject(err);\n                });\n                responseStream.on(\"error\", function handleStreamError(err) {\n                    if (req.destroyed) return;\n                    reject(AxiosError.from(err, null, config, lastRequest));\n                });\n                responseStream.on(\"end\", function handleStreamEnd() {\n                    try {\n                        let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n                        if (responseType !== \"arraybuffer\") {\n                            responseData = responseData.toString(responseEncoding);\n                            if (!responseEncoding || responseEncoding === \"utf8\") {\n                                responseData = utils$1.stripBOM(responseData);\n                            }\n                        }\n                        response.data = responseData;\n                    } catch (err) {\n                        return reject(AxiosError.from(err, null, config, response.request, response));\n                    }\n                    settle(resolve, reject, response);\n                });\n            }\n            emitter.once(\"abort\", (err)=>{\n                if (!responseStream.destroyed) {\n                    responseStream.emit(\"error\", err);\n                    responseStream.destroy();\n                }\n            });\n        });\n        emitter.once(\"abort\", (err)=>{\n            reject(err);\n            req.destroy(err);\n        });\n        // Handle errors\n        req.on(\"error\", function handleRequestError(err) {\n            // @todo remove\n            // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n            reject(AxiosError.from(err, null, config, req));\n        });\n        // set tcp keep alive to prevent drop connection by peer\n        req.on(\"socket\", function handleRequestSocket(socket) {\n            // default interval of sending ack packet is 1 minute\n            socket.setKeepAlive(true, 1000 * 60);\n        });\n        // Handle request timeout\n        if (config.timeout) {\n            // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n            const timeout = parseInt(config.timeout, 10);\n            if (Number.isNaN(timeout)) {\n                reject(new AxiosError(\"error trying to parse `config.timeout` to int\", AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n                return;\n            }\n            // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n            // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n            // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n            // And then these socket which be hang up will devouring CPU little by little.\n            // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n            req.setTimeout(timeout, function handleRequestTimeout() {\n                if (isDone) return;\n                let timeoutErrorMessage = config.timeout ? \"timeout of \" + config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n                const transitional = config.transitional || transitionalDefaults;\n                if (config.timeoutErrorMessage) {\n                    timeoutErrorMessage = config.timeoutErrorMessage;\n                }\n                reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n                abort();\n            });\n        }\n        // Send the request\n        if (utils$1.isStream(data)) {\n            let ended = false;\n            let errored = false;\n            data.on(\"end\", ()=>{\n                ended = true;\n            });\n            data.once(\"error\", (err)=>{\n                errored = true;\n                req.destroy(err);\n            });\n            data.on(\"close\", ()=>{\n                if (!ended && !errored) {\n                    abort(new CanceledError(\"Request stream has been aborted\", config, req));\n                }\n            });\n            data.pipe(req);\n        } else {\n            req.end(data);\n        }\n    });\n};\nconst isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE)=>(url)=>{\n        url = new URL(url, platform.origin);\n        return origin.protocol === url.protocol && origin.host === url.host && (isMSIE || origin.port === url.port);\n    })(new URL(platform.origin), platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)) : ()=>true;\nconst cookies = platform.hasStandardBrowserEnv ? // Standard browser envs support document.cookie\n{\n    write (name, value, expires, path, domain, secure) {\n        const cookie = [\n            name + \"=\" + encodeURIComponent(value)\n        ];\n        utils$1.isNumber(expires) && cookie.push(\"expires=\" + new Date(expires).toGMTString());\n        utils$1.isString(path) && cookie.push(\"path=\" + path);\n        utils$1.isString(domain) && cookie.push(\"domain=\" + domain);\n        secure === true && cookie.push(\"secure\");\n        document.cookie = cookie.join(\"; \");\n    },\n    read (name) {\n        const match = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + name + \")=([^;]*)\"));\n        return match ? decodeURIComponent(match[3]) : null;\n    },\n    remove (name) {\n        this.write(name, \"\", Date.now() - 86400000);\n    }\n} : // Non-standard browser env (web workers, react-native) lack needed support.\n{\n    write () {},\n    read () {\n        return null;\n    },\n    remove () {}\n};\nconst headersToObject = (thing)=>thing instanceof AxiosHeaders$1 ? {\n        ...thing\n    } : thing;\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */ function mergeConfig(config1, config2) {\n    // eslint-disable-next-line no-param-reassign\n    config2 = config2 || {};\n    const config = {};\n    function getMergedValue(target, source, prop, caseless) {\n        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {\n            return utils$1.merge.call({\n                caseless\n            }, target, source);\n        } else if (utils$1.isPlainObject(source)) {\n            return utils$1.merge({}, source);\n        } else if (utils$1.isArray(source)) {\n            return source.slice();\n        }\n        return source;\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDeepProperties(a, b, prop, caseless) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(a, b, prop, caseless);\n        } else if (!utils$1.isUndefined(a)) {\n            return getMergedValue(undefined, a, prop, caseless);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function valueFromConfig2(a, b) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(undefined, b);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function defaultToConfig2(a, b) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(undefined, b);\n        } else if (!utils$1.isUndefined(a)) {\n            return getMergedValue(undefined, a);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDirectKeys(a, b, prop) {\n        if (prop in config2) {\n            return getMergedValue(a, b);\n        } else if (prop in config1) {\n            return getMergedValue(undefined, a);\n        }\n    }\n    const mergeMap = {\n        url: valueFromConfig2,\n        method: valueFromConfig2,\n        data: valueFromConfig2,\n        baseURL: defaultToConfig2,\n        transformRequest: defaultToConfig2,\n        transformResponse: defaultToConfig2,\n        paramsSerializer: defaultToConfig2,\n        timeout: defaultToConfig2,\n        timeoutMessage: defaultToConfig2,\n        withCredentials: defaultToConfig2,\n        withXSRFToken: defaultToConfig2,\n        adapter: defaultToConfig2,\n        responseType: defaultToConfig2,\n        xsrfCookieName: defaultToConfig2,\n        xsrfHeaderName: defaultToConfig2,\n        onUploadProgress: defaultToConfig2,\n        onDownloadProgress: defaultToConfig2,\n        decompress: defaultToConfig2,\n        maxContentLength: defaultToConfig2,\n        maxBodyLength: defaultToConfig2,\n        beforeRedirect: defaultToConfig2,\n        transport: defaultToConfig2,\n        httpAgent: defaultToConfig2,\n        httpsAgent: defaultToConfig2,\n        cancelToken: defaultToConfig2,\n        socketPath: defaultToConfig2,\n        responseEncoding: defaultToConfig2,\n        validateStatus: mergeDirectKeys,\n        headers: (a, b, prop)=>mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)\n    };\n    utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n        const merge = mergeMap[prop] || mergeDeepProperties;\n        const configValue = merge(config1[prop], config2[prop], prop);\n        utils$1.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n    });\n    return config;\n}\nconst resolveConfig = (config)=>{\n    const newConfig = mergeConfig({}, config);\n    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;\n    newConfig.headers = headers = AxiosHeaders$1.from(headers);\n    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n    // HTTP basic authentication\n    if (auth) {\n        headers.set(\"Authorization\", \"Basic \" + btoa((auth.username || \"\") + \":\" + (auth.password ? unescape(encodeURIComponent(auth.password)) : \"\")));\n    }\n    let contentType;\n    if (utils$1.isFormData(data)) {\n        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n            headers.setContentType(undefined); // Let the browser set it\n        } else if ((contentType = headers.getContentType()) !== false) {\n            // fix semicolon duplication issue for ReactNative FormData implementation\n            const [type, ...tokens] = contentType ? contentType.split(\";\").map((token)=>token.trim()).filter(Boolean) : [];\n            headers.setContentType([\n                type || \"multipart/form-data\",\n                ...tokens\n            ].join(\"; \"));\n        }\n    }\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.hasStandardBrowserEnv) {\n        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n            // Add xsrf header\n            const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n            if (xsrfValue) {\n                headers.set(xsrfHeaderName, xsrfValue);\n            }\n        }\n    }\n    return newConfig;\n};\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== \"undefined\";\nconst xhrAdapter = isXHRAdapterSupported && function(config) {\n    return new Promise(function dispatchXhrRequest(resolve, reject) {\n        const _config = resolveConfig(config);\n        let requestData = _config.data;\n        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();\n        let { responseType, onUploadProgress, onDownloadProgress } = _config;\n        let onCanceled;\n        let uploadThrottled, downloadThrottled;\n        let flushUpload, flushDownload;\n        function done() {\n            flushUpload && flushUpload(); // flush events\n            flushDownload && flushDownload(); // flush events\n            _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n            _config.signal && _config.signal.removeEventListener(\"abort\", onCanceled);\n        }\n        let request = new XMLHttpRequest();\n        request.open(_config.method.toUpperCase(), _config.url, true);\n        // Set the request timeout in MS\n        request.timeout = _config.timeout;\n        function onloadend() {\n            if (!request) {\n                return;\n            }\n            // Prepare the response\n            const responseHeaders = AxiosHeaders$1.from(\"getAllResponseHeaders\" in request && request.getAllResponseHeaders());\n            const responseData = !responseType || responseType === \"text\" || responseType === \"json\" ? request.responseText : request.response;\n            const response = {\n                data: responseData,\n                status: request.status,\n                statusText: request.statusText,\n                headers: responseHeaders,\n                config,\n                request\n            };\n            settle(function _resolve(value) {\n                resolve(value);\n                done();\n            }, function _reject(err) {\n                reject(err);\n                done();\n            }, response);\n            // Clean up request\n            request = null;\n        }\n        if (\"onloadend\" in request) {\n            // Use onloadend if available\n            request.onloadend = onloadend;\n        } else {\n            // Listen for ready state to emulate onloadend\n            request.onreadystatechange = function handleLoad() {\n                if (!request || request.readyState !== 4) {\n                    return;\n                }\n                // The request errored out and we didn't get a response, this will be\n                // handled by onerror instead\n                // With one exception: request that using file: protocol, most browsers\n                // will return status as 0 even though it's a successful request\n                if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\"file:\") === 0)) {\n                    return;\n                }\n                // readystate handler is calling before onerror or ontimeout handlers,\n                // so we should call onloadend on the next 'tick'\n                setTimeout(onloadend);\n            };\n        }\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        request.onabort = function handleAbort() {\n            if (!request) {\n                return;\n            }\n            reject(new AxiosError(\"Request aborted\", AxiosError.ECONNABORTED, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Handle low level network errors\n        request.onerror = function handleError() {\n            // Real errors are hidden from us by the browser\n            // onerror should only fire if it's a network error\n            reject(new AxiosError(\"Network Error\", AxiosError.ERR_NETWORK, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Handle timeout\n        request.ontimeout = function handleTimeout() {\n            let timeoutErrorMessage = _config.timeout ? \"timeout of \" + _config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n            const transitional = _config.transitional || transitionalDefaults;\n            if (_config.timeoutErrorMessage) {\n                timeoutErrorMessage = _config.timeoutErrorMessage;\n            }\n            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Remove Content-Type if data is undefined\n        requestData === undefined && requestHeaders.setContentType(null);\n        // Add headers to the request\n        if (\"setRequestHeader\" in request) {\n            utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n                request.setRequestHeader(key, val);\n            });\n        }\n        // Add withCredentials to request if needed\n        if (!utils$1.isUndefined(_config.withCredentials)) {\n            request.withCredentials = !!_config.withCredentials;\n        }\n        // Add responseType to request if needed\n        if (responseType && responseType !== \"json\") {\n            request.responseType = _config.responseType;\n        }\n        // Handle progress if needed\n        if (onDownloadProgress) {\n            [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);\n            request.addEventListener(\"progress\", downloadThrottled);\n        }\n        // Not all browsers support upload events\n        if (onUploadProgress && request.upload) {\n            [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);\n            request.upload.addEventListener(\"progress\", uploadThrottled);\n            request.upload.addEventListener(\"loadend\", flushUpload);\n        }\n        if (_config.cancelToken || _config.signal) {\n            // Handle cancellation\n            // eslint-disable-next-line func-names\n            onCanceled = (cancel)=>{\n                if (!request) {\n                    return;\n                }\n                reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n                request.abort();\n                request = null;\n            };\n            _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n            if (_config.signal) {\n                _config.signal.aborted ? onCanceled() : _config.signal.addEventListener(\"abort\", onCanceled);\n            }\n        }\n        const protocol = parseProtocol(_config.url);\n        if (protocol && platform.protocols.indexOf(protocol) === -1) {\n            reject(new AxiosError(\"Unsupported protocol \" + protocol + \":\", AxiosError.ERR_BAD_REQUEST, config));\n            return;\n        }\n        // Send the request\n        request.send(requestData || null);\n    });\n};\nconst composeSignals = (signals, timeout)=>{\n    const { length } = signals = signals ? signals.filter(Boolean) : [];\n    if (timeout || length) {\n        let controller = new AbortController();\n        let aborted;\n        const onabort = function(reason) {\n            if (!aborted) {\n                aborted = true;\n                unsubscribe();\n                const err = reason instanceof Error ? reason : this.reason;\n                controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n            }\n        };\n        let timer = timeout && setTimeout(()=>{\n            timer = null;\n            onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n        }, timeout);\n        const unsubscribe = ()=>{\n            if (signals) {\n                timer && clearTimeout(timer);\n                timer = null;\n                signals.forEach((signal)=>{\n                    signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener(\"abort\", onabort);\n                });\n                signals = null;\n            }\n        };\n        signals.forEach((signal)=>signal.addEventListener(\"abort\", onabort));\n        const { signal } = controller;\n        signal.unsubscribe = ()=>utils$1.asap(unsubscribe);\n        return signal;\n    }\n};\nconst composeSignals$1 = composeSignals;\nconst streamChunk = function*(chunk, chunkSize) {\n    let len = chunk.byteLength;\n    if (!chunkSize || len < chunkSize) {\n        yield chunk;\n        return;\n    }\n    let pos = 0;\n    let end;\n    while(pos < len){\n        end = pos + chunkSize;\n        yield chunk.slice(pos, end);\n        pos = end;\n    }\n};\nconst readBytes = async function*(iterable, chunkSize) {\n    for await (const chunk of readStream(iterable)){\n        yield* streamChunk(chunk, chunkSize);\n    }\n};\nconst readStream = async function*(stream) {\n    if (stream[Symbol.asyncIterator]) {\n        yield* stream;\n        return;\n    }\n    const reader = stream.getReader();\n    try {\n        for(;;){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            yield value;\n        }\n    } finally{\n        await reader.cancel();\n    }\n};\nconst trackStream = (stream, chunkSize, onProgress, onFinish)=>{\n    const iterator = readBytes(stream, chunkSize);\n    let bytes = 0;\n    let done;\n    let _onFinish = (e)=>{\n        if (!done) {\n            done = true;\n            onFinish && onFinish(e);\n        }\n    };\n    return new ReadableStream({\n        async pull (controller) {\n            try {\n                const { done, value } = await iterator.next();\n                if (done) {\n                    _onFinish();\n                    controller.close();\n                    return;\n                }\n                let len = value.byteLength;\n                if (onProgress) {\n                    let loadedBytes = bytes += len;\n                    onProgress(loadedBytes);\n                }\n                controller.enqueue(new Uint8Array(value));\n            } catch (err) {\n                _onFinish(err);\n                throw err;\n            }\n        },\n        cancel (reason) {\n            _onFinish(reason);\n            return iterator.return();\n        }\n    }, {\n        highWaterMark: 2\n    });\n};\nconst isFetchSupported = typeof fetch === \"function\" && typeof Request === \"function\" && typeof Response === \"function\";\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === \"function\";\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === \"function\" ? ((encoder)=>(str)=>encoder.encode(str))(new TextEncoder()) : async (str)=>new Uint8Array(await new Response(str).arrayBuffer()));\nconst test = (fn, ...args)=>{\n    try {\n        return !!fn(...args);\n    } catch (e) {\n        return false;\n    }\n};\nconst supportsRequestStream = isReadableStreamSupported && test(()=>{\n    let duplexAccessed = false;\n    const hasContentType = new Request(platform.origin, {\n        body: new ReadableStream(),\n        method: \"POST\",\n        get duplex () {\n            duplexAccessed = true;\n            return \"half\";\n        }\n    }).headers.has(\"Content-Type\");\n    return duplexAccessed && !hasContentType;\n});\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst supportsResponseStream = isReadableStreamSupported && test(()=>utils$1.isReadableStream(new Response(\"\").body));\nconst resolvers = {\n    stream: supportsResponseStream && ((res)=>res.body)\n};\nisFetchSupported && ((res)=>{\n    [\n        \"text\",\n        \"arrayBuffer\",\n        \"blob\",\n        \"formData\",\n        \"stream\"\n    ].forEach((type)=>{\n        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res)=>res[type]() : (_, config)=>{\n            throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n        });\n    });\n})(new Response);\nconst getBodyLength = async (body)=>{\n    if (body == null) {\n        return 0;\n    }\n    if (utils$1.isBlob(body)) {\n        return body.size;\n    }\n    if (utils$1.isSpecCompliantForm(body)) {\n        const _request = new Request(platform.origin, {\n            method: \"POST\",\n            body\n        });\n        return (await _request.arrayBuffer()).byteLength;\n    }\n    if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    if (utils$1.isURLSearchParams(body)) {\n        body = body + \"\";\n    }\n    if (utils$1.isString(body)) {\n        return (await encodeText(body)).byteLength;\n    }\n};\nconst resolveBodyLength = async (headers, body)=>{\n    const length = utils$1.toFiniteNumber(headers.getContentLength());\n    return length == null ? getBodyLength(body) : length;\n};\nconst fetchAdapter = isFetchSupported && (async (config)=>{\n    let { url, method, data, signal, cancelToken, timeout, onDownloadProgress, onUploadProgress, responseType, headers, withCredentials = \"same-origin\", fetchOptions } = resolveConfig(config);\n    responseType = responseType ? (responseType + \"\").toLowerCase() : \"text\";\n    let composedSignal = composeSignals$1([\n        signal,\n        cancelToken && cancelToken.toAbortSignal()\n    ], timeout);\n    let request;\n    const unsubscribe = composedSignal && composedSignal.unsubscribe && (()=>{\n        composedSignal.unsubscribe();\n    });\n    let requestContentLength;\n    try {\n        if (onUploadProgress && supportsRequestStream && method !== \"get\" && method !== \"head\" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {\n            let _request = new Request(url, {\n                method: \"POST\",\n                body: data,\n                duplex: \"half\"\n            });\n            let contentTypeHeader;\n            if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get(\"content-type\"))) {\n                headers.setContentType(contentTypeHeader);\n            }\n            if (_request.body) {\n                const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));\n                data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n            }\n        }\n        if (!utils$1.isString(withCredentials)) {\n            withCredentials = withCredentials ? \"include\" : \"omit\";\n        }\n        // Cloudflare Workers throws when credentials are defined\n        // see https://github.com/cloudflare/workerd/issues/902\n        const isCredentialsSupported = \"credentials\" in Request.prototype;\n        request = new Request(url, {\n            ...fetchOptions,\n            signal: composedSignal,\n            method: method.toUpperCase(),\n            headers: headers.normalize().toJSON(),\n            body: data,\n            duplex: \"half\",\n            credentials: isCredentialsSupported ? withCredentials : undefined\n        });\n        let response = await fetch(request);\n        const isStreamResponse = supportsResponseStream && (responseType === \"stream\" || responseType === \"response\");\n        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {\n            const options = {};\n            [\n                \"status\",\n                \"statusText\",\n                \"headers\"\n            ].forEach((prop)=>{\n                options[prop] = response[prop];\n            });\n            const responseContentLength = utils$1.toFiniteNumber(response.headers.get(\"content-length\"));\n            const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];\n            response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, ()=>{\n                flush && flush();\n                unsubscribe && unsubscribe();\n            }), options);\n        }\n        responseType = responseType || \"text\";\n        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || \"text\"](response, config);\n        !isStreamResponse && unsubscribe && unsubscribe();\n        return await new Promise((resolve, reject)=>{\n            settle(resolve, reject, {\n                data: responseData,\n                headers: AxiosHeaders$1.from(response.headers),\n                status: response.status,\n                statusText: response.statusText,\n                config,\n                request\n            });\n        });\n    } catch (err) {\n        unsubscribe && unsubscribe();\n        if (err && err.name === \"TypeError\" && /Load failed|fetch/i.test(err.message)) {\n            throw Object.assign(new AxiosError(\"Network Error\", AxiosError.ERR_NETWORK, config, request), {\n                cause: err.cause || err\n            });\n        }\n        throw AxiosError.from(err, err && err.code, config, request);\n    }\n});\nconst knownAdapters = {\n    http: httpAdapter,\n    xhr: xhrAdapter,\n    fetch: fetchAdapter\n};\nutils$1.forEach(knownAdapters, (fn, value)=>{\n    if (fn) {\n        try {\n            Object.defineProperty(fn, \"name\", {\n                value\n            });\n        } catch (e) {\n        // eslint-disable-next-line no-empty\n        }\n        Object.defineProperty(fn, \"adapterName\", {\n            value\n        });\n    }\n});\nconst renderReason = (reason)=>`- ${reason}`;\nconst isResolvedHandle = (adapter)=>utils$1.isFunction(adapter) || adapter === null || adapter === false;\nconst adapters = {\n    getAdapter: (adapters)=>{\n        adapters = utils$1.isArray(adapters) ? adapters : [\n            adapters\n        ];\n        const { length } = adapters;\n        let nameOrAdapter;\n        let adapter;\n        const rejectedReasons = {};\n        for(let i = 0; i < length; i++){\n            nameOrAdapter = adapters[i];\n            let id;\n            adapter = nameOrAdapter;\n            if (!isResolvedHandle(nameOrAdapter)) {\n                adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n                if (adapter === undefined) {\n                    throw new AxiosError(`Unknown adapter '${id}'`);\n                }\n            }\n            if (adapter) {\n                break;\n            }\n            rejectedReasons[id || \"#\" + i] = adapter;\n        }\n        if (!adapter) {\n            const reasons = Object.entries(rejectedReasons).map(([id, state])=>`adapter ${id} ` + (state === false ? \"is not supported by the environment\" : \"is not available in the build\"));\n            let s = length ? reasons.length > 1 ? \"since :\\n\" + reasons.map(renderReason).join(\"\\n\") : \" \" + renderReason(reasons[0]) : \"as no adapter specified\";\n            throw new AxiosError(`There is no suitable adapter to dispatch the request ` + s, \"ERR_NOT_SUPPORT\");\n        }\n        return adapter;\n    },\n    adapters: knownAdapters\n};\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */ function throwIfCancellationRequested(config) {\n    if (config.cancelToken) {\n        config.cancelToken.throwIfRequested();\n    }\n    if (config.signal && config.signal.aborted) {\n        throw new CanceledError(null, config);\n    }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */ function dispatchRequest(config) {\n    throwIfCancellationRequested(config);\n    config.headers = AxiosHeaders$1.from(config.headers);\n    // Transform request data\n    config.data = transformData.call(config, config.transformRequest);\n    if ([\n        \"post\",\n        \"put\",\n        \"patch\"\n    ].indexOf(config.method) !== -1) {\n        config.headers.setContentType(\"application/x-www-form-urlencoded\", false);\n    }\n    const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);\n    return adapter(config).then(function onAdapterResolution(response) {\n        throwIfCancellationRequested(config);\n        // Transform response data\n        response.data = transformData.call(config, config.transformResponse, response);\n        response.headers = AxiosHeaders$1.from(response.headers);\n        return response;\n    }, function onAdapterRejection(reason) {\n        if (!isCancel(reason)) {\n            throwIfCancellationRequested(config);\n            // Transform response data\n            if (reason && reason.response) {\n                reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n                reason.response.headers = AxiosHeaders$1.from(reason.response.headers);\n            }\n        }\n        return Promise.reject(reason);\n    });\n}\nconst validators$1 = {};\n// eslint-disable-next-line func-names\n[\n    \"object\",\n    \"boolean\",\n    \"number\",\n    \"function\",\n    \"string\",\n    \"symbol\"\n].forEach((type, i)=>{\n    validators$1[type] = function validator(thing) {\n        return typeof thing === type || \"a\" + (i < 1 ? \"n \" : \" \") + type;\n    };\n});\nconst deprecatedWarnings = {};\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */ validators$1.transitional = function transitional(validator, version, message) {\n    function formatMessage(opt, desc) {\n        return \"[Axios v\" + VERSION + \"] Transitional option '\" + opt + \"'\" + desc + (message ? \". \" + message : \"\");\n    }\n    // eslint-disable-next-line func-names\n    return (value, opt, opts)=>{\n        if (validator === false) {\n            throw new AxiosError(formatMessage(opt, \" has been removed\" + (version ? \" in \" + version : \"\")), AxiosError.ERR_DEPRECATED);\n        }\n        if (version && !deprecatedWarnings[opt]) {\n            deprecatedWarnings[opt] = true;\n            // eslint-disable-next-line no-console\n            console.warn(formatMessage(opt, \" has been deprecated since v\" + version + \" and will be removed in the near future\"));\n        }\n        return validator ? validator(value, opt, opts) : true;\n    };\n};\nvalidators$1.spelling = function spelling(correctSpelling) {\n    return (value, opt)=>{\n        // eslint-disable-next-line no-console\n        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n        return true;\n    };\n};\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */ function assertOptions(options, schema, allowUnknown) {\n    if (typeof options !== \"object\") {\n        throw new AxiosError(\"options must be an object\", AxiosError.ERR_BAD_OPTION_VALUE);\n    }\n    const keys = Object.keys(options);\n    let i = keys.length;\n    while(i-- > 0){\n        const opt = keys[i];\n        const validator = schema[opt];\n        if (validator) {\n            const value = options[opt];\n            const result = value === undefined || validator(value, opt, options);\n            if (result !== true) {\n                throw new AxiosError(\"option \" + opt + \" must be \" + result, AxiosError.ERR_BAD_OPTION_VALUE);\n            }\n            continue;\n        }\n        if (allowUnknown !== true) {\n            throw new AxiosError(\"Unknown option \" + opt, AxiosError.ERR_BAD_OPTION);\n        }\n    }\n}\nconst validator = {\n    assertOptions,\n    validators: validators$1\n};\nconst validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */ class Axios {\n    constructor(instanceConfig){\n        this.defaults = instanceConfig || {};\n        this.interceptors = {\n            request: new InterceptorManager$1(),\n            response: new InterceptorManager$1()\n        };\n    }\n    /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */ async request(configOrUrl, config) {\n        try {\n            return await this._request(configOrUrl, config);\n        } catch (err) {\n            if (err instanceof Error) {\n                let dummy = {};\n                Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();\n                // slice off the Error: ... line\n                const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, \"\") : \"\";\n                try {\n                    if (!err.stack) {\n                        err.stack = stack;\n                    // match without the 2 top stack lines\n                    } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, \"\"))) {\n                        err.stack += \"\\n\" + stack;\n                    }\n                } catch (e) {\n                // ignore the case where \"stack\" is an un-writable property\n                }\n            }\n            throw err;\n        }\n    }\n    _request(configOrUrl, config) {\n        /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API\n        if (typeof configOrUrl === \"string\") {\n            config = config || {};\n            config.url = configOrUrl;\n        } else {\n            config = configOrUrl || {};\n        }\n        config = mergeConfig(this.defaults, config);\n        const { transitional, paramsSerializer, headers } = config;\n        if (transitional !== undefined) {\n            validator.assertOptions(transitional, {\n                silentJSONParsing: validators.transitional(validators.boolean),\n                forcedJSONParsing: validators.transitional(validators.boolean),\n                clarifyTimeoutError: validators.transitional(validators.boolean)\n            }, false);\n        }\n        if (paramsSerializer != null) {\n            if (utils$1.isFunction(paramsSerializer)) {\n                config.paramsSerializer = {\n                    serialize: paramsSerializer\n                };\n            } else {\n                validator.assertOptions(paramsSerializer, {\n                    encode: validators.function,\n                    serialize: validators.function\n                }, true);\n            }\n        }\n        // Set config.allowAbsoluteUrls\n        if (config.allowAbsoluteUrls !== undefined) ;\n        else if (this.defaults.allowAbsoluteUrls !== undefined) {\n            config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n        } else {\n            config.allowAbsoluteUrls = true;\n        }\n        validator.assertOptions(config, {\n            baseUrl: validators.spelling(\"baseURL\"),\n            withXsrfToken: validators.spelling(\"withXSRFToken\")\n        }, true);\n        // Set config.method\n        config.method = (config.method || this.defaults.method || \"get\").toLowerCase();\n        // Flatten headers\n        let contextHeaders = headers && utils$1.merge(headers.common, headers[config.method]);\n        headers && utils$1.forEach([\n            \"delete\",\n            \"get\",\n            \"head\",\n            \"post\",\n            \"put\",\n            \"patch\",\n            \"common\"\n        ], (method)=>{\n            delete headers[method];\n        });\n        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);\n        // filter out skipped interceptors\n        const requestInterceptorChain = [];\n        let synchronousRequestInterceptors = true;\n        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n            if (typeof interceptor.runWhen === \"function\" && interceptor.runWhen(config) === false) {\n                return;\n            }\n            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n        });\n        const responseInterceptorChain = [];\n        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n        });\n        let promise;\n        let i = 0;\n        let len;\n        if (!synchronousRequestInterceptors) {\n            const chain = [\n                dispatchRequest.bind(this),\n                undefined\n            ];\n            chain.unshift.apply(chain, requestInterceptorChain);\n            chain.push.apply(chain, responseInterceptorChain);\n            len = chain.length;\n            promise = Promise.resolve(config);\n            while(i < len){\n                promise = promise.then(chain[i++], chain[i++]);\n            }\n            return promise;\n        }\n        len = requestInterceptorChain.length;\n        let newConfig = config;\n        i = 0;\n        while(i < len){\n            const onFulfilled = requestInterceptorChain[i++];\n            const onRejected = requestInterceptorChain[i++];\n            try {\n                newConfig = onFulfilled(newConfig);\n            } catch (error) {\n                onRejected.call(this, error);\n                break;\n            }\n        }\n        try {\n            promise = dispatchRequest.call(this, newConfig);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n        i = 0;\n        len = responseInterceptorChain.length;\n        while(i < len){\n            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n        }\n        return promise;\n    }\n    getUri(config) {\n        config = mergeConfig(this.defaults, config);\n        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n        return buildURL(fullPath, config.params, config.paramsSerializer);\n    }\n}\n// Provide aliases for supported request methods\nutils$1.forEach([\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"options\"\n], function forEachMethodNoData(method) {\n    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {\n        return this.request(mergeConfig(config || {}, {\n            method,\n            url,\n            data: (config || {}).data\n        }));\n    };\n});\nutils$1.forEach([\n    \"post\",\n    \"put\",\n    \"patch\"\n], function forEachMethodWithData(method) {\n    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {\n        return function httpMethod(url, data, config) {\n            return this.request(mergeConfig(config || {}, {\n                method,\n                headers: isForm ? {\n                    \"Content-Type\": \"multipart/form-data\"\n                } : {},\n                url,\n                data\n            }));\n        };\n    }\n    Axios.prototype[method] = generateHTTPMethod();\n    Axios.prototype[method + \"Form\"] = generateHTTPMethod(true);\n});\nconst Axios$1 = Axios;\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */ class CancelToken {\n    constructor(executor){\n        if (typeof executor !== \"function\") {\n            throw new TypeError(\"executor must be a function.\");\n        }\n        let resolvePromise;\n        this.promise = new Promise(function promiseExecutor(resolve) {\n            resolvePromise = resolve;\n        });\n        const token = this;\n        // eslint-disable-next-line func-names\n        this.promise.then((cancel)=>{\n            if (!token._listeners) return;\n            let i = token._listeners.length;\n            while(i-- > 0){\n                token._listeners[i](cancel);\n            }\n            token._listeners = null;\n        });\n        // eslint-disable-next-line func-names\n        this.promise.then = (onfulfilled)=>{\n            let _resolve;\n            // eslint-disable-next-line func-names\n            const promise = new Promise((resolve)=>{\n                token.subscribe(resolve);\n                _resolve = resolve;\n            }).then(onfulfilled);\n            promise.cancel = function reject() {\n                token.unsubscribe(_resolve);\n            };\n            return promise;\n        };\n        executor(function cancel(message, config, request) {\n            if (token.reason) {\n                // Cancellation has already been requested\n                return;\n            }\n            token.reason = new CanceledError(message, config, request);\n            resolvePromise(token.reason);\n        });\n    }\n    /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */ throwIfRequested() {\n        if (this.reason) {\n            throw this.reason;\n        }\n    }\n    /**\n   * Subscribe to the cancel signal\n   */ subscribe(listener) {\n        if (this.reason) {\n            listener(this.reason);\n            return;\n        }\n        if (this._listeners) {\n            this._listeners.push(listener);\n        } else {\n            this._listeners = [\n                listener\n            ];\n        }\n    }\n    /**\n   * Unsubscribe from the cancel signal\n   */ unsubscribe(listener) {\n        if (!this._listeners) {\n            return;\n        }\n        const index = this._listeners.indexOf(listener);\n        if (index !== -1) {\n            this._listeners.splice(index, 1);\n        }\n    }\n    toAbortSignal() {\n        const controller = new AbortController();\n        const abort = (err)=>{\n            controller.abort(err);\n        };\n        this.subscribe(abort);\n        controller.signal.unsubscribe = ()=>this.unsubscribe(abort);\n        return controller.signal;\n    }\n    /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */ static source() {\n        let cancel;\n        const token = new CancelToken(function executor(c) {\n            cancel = c;\n        });\n        return {\n            token,\n            cancel\n        };\n    }\n}\nconst CancelToken$1 = CancelToken;\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */ function spread(callback) {\n    return function wrap(arr) {\n        return callback.apply(null, arr);\n    };\n}\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */ function isAxiosError(payload) {\n    return utils$1.isObject(payload) && payload.isAxiosError === true;\n}\nconst HttpStatusCode = {\n    Continue: 100,\n    SwitchingProtocols: 101,\n    Processing: 102,\n    EarlyHints: 103,\n    Ok: 200,\n    Created: 201,\n    Accepted: 202,\n    NonAuthoritativeInformation: 203,\n    NoContent: 204,\n    ResetContent: 205,\n    PartialContent: 206,\n    MultiStatus: 207,\n    AlreadyReported: 208,\n    ImUsed: 226,\n    MultipleChoices: 300,\n    MovedPermanently: 301,\n    Found: 302,\n    SeeOther: 303,\n    NotModified: 304,\n    UseProxy: 305,\n    Unused: 306,\n    TemporaryRedirect: 307,\n    PermanentRedirect: 308,\n    BadRequest: 400,\n    Unauthorized: 401,\n    PaymentRequired: 402,\n    Forbidden: 403,\n    NotFound: 404,\n    MethodNotAllowed: 405,\n    NotAcceptable: 406,\n    ProxyAuthenticationRequired: 407,\n    RequestTimeout: 408,\n    Conflict: 409,\n    Gone: 410,\n    LengthRequired: 411,\n    PreconditionFailed: 412,\n    PayloadTooLarge: 413,\n    UriTooLong: 414,\n    UnsupportedMediaType: 415,\n    RangeNotSatisfiable: 416,\n    ExpectationFailed: 417,\n    ImATeapot: 418,\n    MisdirectedRequest: 421,\n    UnprocessableEntity: 422,\n    Locked: 423,\n    FailedDependency: 424,\n    TooEarly: 425,\n    UpgradeRequired: 426,\n    PreconditionRequired: 428,\n    TooManyRequests: 429,\n    RequestHeaderFieldsTooLarge: 431,\n    UnavailableForLegalReasons: 451,\n    InternalServerError: 500,\n    NotImplemented: 501,\n    BadGateway: 502,\n    ServiceUnavailable: 503,\n    GatewayTimeout: 504,\n    HttpVersionNotSupported: 505,\n    VariantAlsoNegotiates: 506,\n    InsufficientStorage: 507,\n    LoopDetected: 508,\n    NotExtended: 510,\n    NetworkAuthenticationRequired: 511\n};\nObject.entries(HttpStatusCode).forEach(([key, value])=>{\n    HttpStatusCode[value] = key;\n});\nconst HttpStatusCode$1 = HttpStatusCode;\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */ function createInstance(defaultConfig) {\n    const context = new Axios$1(defaultConfig);\n    const instance = bind(Axios$1.prototype.request, context);\n    // Copy axios.prototype to instance\n    utils$1.extend(instance, Axios$1.prototype, context, {\n        allOwnKeys: true\n    });\n    // Copy context to instance\n    utils$1.extend(instance, context, null, {\n        allOwnKeys: true\n    });\n    // Factory for creating new instances\n    instance.create = function create(instanceConfig) {\n        return createInstance(mergeConfig(defaultConfig, instanceConfig));\n    };\n    return instance;\n}\n// Create the default instance to be exported\nconst axios = createInstance(defaults$1);\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios$1;\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken$1;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n// Expose all/spread\naxios.all = function all(promises) {\n    return Promise.all(promises);\n};\naxios.spread = spread;\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\naxios.AxiosHeaders = AxiosHeaders$1;\naxios.formToJSON = (thing)=>formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);\naxios.getAdapter = adapters.getAdapter;\naxios.HttpStatusCode = HttpStatusCode$1;\naxios.default = axios;\nmodule.exports = axios; //# sourceMappingURL=axios.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ton/ton/node_modules/axios/dist/node/axios.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ton/ton/package.json":
/*!********************************************!*\
  !*** ./node_modules/@ton/ton/package.json ***!
  \********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@ton/ton","version":"13.11.2","repository":"https://github.com/ton-org/ton.git","author":"Whales Corp. <developers@whalescorp.com>","license":"MIT","main":"dist/index.js","files":["dist"],"scripts":{"docs":"rm -fr docs && typedoc src/index.ts","build":"rm -fr dist && tsc --declaration","test":"jest --verbose --runInBand","release":"yarn build && yarn release-it --npm.yarn1"},"devDependencies":{"@release-it/keep-a-changelog":"^5.0.0","@ton/core":"^0.56.0","@ton/crypto":"3.2.0","@ton/emulator":"^2.1.1","@types/jest":"^27.0.1","@types/node":"^16.7.10","buffer":"^6.0.3","expect":"^27.1.0","jest":"^27.1.0","jest-mock":"^27.1.0","karma":"^6.3.4","karma-chrome-launcher":"^3.1.0","karma-jasmine":"^4.0.1","karma-typescript":"^5.5.2","karma-webpack":"^5.0.0","prando":"^6.0.1","release-it":"^17.1.1","ts-jest":"^27.0.5","ts-loader":"^9.2.5","ts-node":"^10.7.0","typedoc":"^0.23.24","typescript":"^4.4.2","webpack":"^5.51.2"},"dependencies":{"axios":"^1.6.7","dataloader":"^2.0.0","symbol.inspect":"1.0.1","teslabot":"^1.3.0","zod":"^3.21.4"},"peerDependencies":{"@ton/core":">=0.56.0","@ton/crypto":">=3.2.0"},"publishConfig":{"access":"public","registry":"https://registry.npmjs.org/"},"release-it":{"github":{"release":true},"plugins":{"@release-it/keep-a-changelog":{"filename":"CHANGELOG.md"}}},"packageManager":"yarn@3.4.1"}');

/***/ })

};
;